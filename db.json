{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/Chic/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/Chic/source/image/search.png","path":"image/search.png","modified":1,"renderable":1},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":1,"renderable":1},{"_id":"themes/Chic/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/Chic/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/custom.styl","path":"css/custom.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/font.styl","path":"css/font.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/layout.styl","path":"css/layout.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/media.styl","path":"css/media.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/normalize.styl","path":"css/normalize.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/css/variable.styl","path":"css/variable.styl","modified":1,"renderable":1},{"_id":"themes/Chic/source/image/ali.png","path":"image/ali.png","modified":1,"renderable":1},{"_id":"themes/Chic/source/image/avatar.jpeg","path":"image/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/Chic/source/js/jquery.fancybox.min.js","path":"js/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/Chic/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":1,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/Chic/ChangeLogs.md","hash":"82786c20871dd56447d872db9c16bd14b0cf01b8","modified":1695356666120},{"_id":"themes/Chic/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1695356666120},{"_id":"themes/Chic/README-CN.md","hash":"af0765f26b72d49f1b29afe1a9d0c4a492912aaa","modified":1695356666120},{"_id":"themes/Chic/README.md","hash":"81a5f7bc6d9100c23dafc22f99d2f65476cf6b23","modified":1695356666120},{"_id":"themes/Chic/_config.yml","hash":"b7356b0d6f1dea7417b8938b01bd6340e8b3d7db","modified":1695356666120},{"_id":"themes/Chic/package.json","hash":"8b4072879307eed0e74ae35390825c5e03b9229c","modified":1695356666124},{"_id":"source/_posts/108-将有序数组转换为二叉搜索树.md","hash":"c186195365f7543480093f2d1c4e8c9a1e76eaaf","modified":1695356666108},{"_id":"source/_posts/63-不同路径-II.md","hash":"67e289c1e34012aec6f57cc4e5b652f546521da4","modified":1695356666108},{"_id":"source/_posts/841-钥匙和房间.md","hash":"4fec9c6c1f5effdef311c08de06b37f1de9ef90b","modified":1695356666112},{"_id":"source/_posts/AND(A,B,OR(C,D,E)).md","hash":"804f16c27ad87f17d5be50095a5187eddc4e49bf","modified":1695356666112},{"_id":"source/_posts/React-调度.md","hash":"6dcbbb533364d288fe2cc451c92780f283cf54f9","modified":1695356666112},{"_id":"source/_posts/React源码-React API.md","hash":"205f450c47679679dd6efc43ca4a8dcf699bf97f","modified":1695356666112},{"_id":"source/_posts/React源码-ReactChildren.md","hash":"9a65020df313e40a3152633a4c800dc13d358a80","modified":1695356666112},{"_id":"source/_posts/React源码-ReactDOM.md","hash":"6b341f8e906f4d50c05edb43a45af29942ff5c3d","modified":1695356666112},{"_id":"source/_posts/React源码-ReactElement.md","hash":"a8b51258d2473fca5f48aec49114fc05d5b915bb","modified":1695356666112},{"_id":"source/_posts/Z-字形变换.md","hash":"72a40e1ab878e6420c746a057b758673f9f8a4c7","modified":1695356666112},{"_id":"source/_posts/antd Modal 组件.md","hash":"c37b759d1d20b9ae320ecdd5700c11e3a0f8ceae","modified":1695356666112},{"_id":"source/_posts/antd alert.md","hash":"4264b1ec9c0b98ca6f3022ab36cf99d491ddd3e6","modified":1695356666112},{"_id":"source/_posts/antd-switch.md","hash":"256525857971210cdcd6af86a1bb1e931ac51d84","modified":1695356666112},{"_id":"source/_posts/expo 极光推送.md","hash":"30f495c6b19be5e2575a8169e4be59e6e4a840da","modified":1695356666112},{"_id":"source/_posts/git.md","hash":"198b00dea7b9dde50d4d12edba83d91083cd9c51","modified":1695356666112},{"_id":"source/_posts/hello-world.md","hash":"acdeef709b3400427053418f527dd45df26beb82","modified":1695356666112},{"_id":"source/_posts/hexo自定义.md","hash":"c171f2cb39f52e1f7ff9b341382cc0045078b497","modified":1695356666112},{"_id":"source/_posts/react-router 学习.md","hash":"9c857f2bea4a5116aeefd2dfe759dcd94ed9211d","modified":1695356666112},{"_id":"source/_posts/react基础.md","hash":"0ffa0b7af773325211713acc5ce6b8784846f8d9","modified":1695356666112},{"_id":"source/_posts/taro 升级遇见的坑.md","hash":"46942bdf1e3a4a10dff799eb28c677efc81f696c","modified":1695356666112},{"_id":"source/_posts/typescript 类型体操.md","hash":"da7cc28bede6e22cb6bd380aa6046ffb1d5c8bc1","modified":1695356666112},{"_id":"source/_posts/typescript 获取url 参数，类型应该怎么写.md","hash":"f1acb43c3429e0fa7920066c5639e2426601a175","modified":1695356666112},{"_id":"source/_posts/webpack-vue-electron开发环境搭建.md","hash":"1992df16649e22a6204774f65626e33680ef5769","modified":1695356666112},{"_id":"source/_posts/webpack-配置梳理.md","hash":"08d720059942a772ec1860a8d73020b023c21039","modified":1695356666112},{"_id":"source/_posts/xlsx-读取写入excel.md","hash":"75d48408a19039e9adccae843a8728fc05f0311f","modified":1695356666112},{"_id":"source/_posts/一行代码使网站变灰.md","hash":"bc239bd5e47544bd7293d82d9b9103796a920e07","modified":1695356666112},{"_id":"source/_posts/三角形最小路径和.md","hash":"0cfde60bf6ea502c952e953597073f913ef9947c","modified":1695356666112},{"_id":"source/_posts/不同的二叉搜索树.md","hash":"e872fd86691c1505c261ad6d4e5bea6cc275f267","modified":1695356666112},{"_id":"source/_posts/两个数组的交集-II.md","hash":"786a6ff1b6441b3affc58cb85897498d5aebb822","modified":1695356666112},{"_id":"source/_posts/两数之和-II-输入有序数组.md","hash":"c6105ab0dc324d177a83a26121e74dd719b35a15","modified":1695356666112},{"_id":"source/_posts/二叉树的最大深度.md","hash":"92d7065e79ca0b244e0bf712e20300ef76d3c6dd","modified":1695356666112},{"_id":"source/_posts/二进制求和.md","hash":"a8873bf19bb4d24f9060acbe104e3e53d979f912","modified":1695356666112},{"_id":"source/_posts/关于this.md","hash":"612c57c0553dddc584d65629d763014512359c52","modified":1695356666112},{"_id":"source/_posts/写一个dumi markdown 插件.md","hash":"e1069bc1672036c0ada88e31d38def4ac393c9dc","modified":1695356666112},{"_id":"source/_posts/删除链表的倒数第N个节点.md","hash":"148e6b4e946f8fa06c66b270dc641b492b422fbd","modified":1695356666112},{"_id":"source/_posts/剑指-Offer-55-II-平衡二叉树.md","hash":"7c452f97ff00c2be9ea9b864e209ec84d28190f9","modified":1695356666112},{"_id":"source/_posts/原型与继承.md","hash":"b9d0914a09c615a5167504c505993b3ad51fe3ad","modified":1695356666112},{"_id":"source/_posts/和为k的子数组.md","hash":"4588490d9f7ec1956edf8b9068ee9b9b2397ebfa","modified":1695356666112},{"_id":"source/_posts/回文子串.md","hash":"94503dd793063a7705384d3391954d2d86e13d28","modified":1695356666112},{"_id":"source/_posts/在自己的vps 上安装Jenkins.md","hash":"87a6a153229e0859c945aee97ddb9c858ec5cf53","modified":1695356666112},{"_id":"source/_posts/大众点评文字数字解密.md","hash":"8a7c105820b472730cfbc4077df00c10571f8f2c","modified":1695356666112},{"_id":"source/_posts/奇偶链表.md","hash":"37ade2a82264e153e653f51a65ccbe4799b70ddf","modified":1695356666112},{"_id":"source/_posts/字符串相乘.md","hash":"20978cc6dbea03ebceddc6c3a957da77c7190334","modified":1695356666112},{"_id":"source/_posts/字符串解码.md","hash":"79113a269d6040ef5a848497032f0d5612820030","modified":1695356666112},{"_id":"source/_posts/学习webpack源码(2).md","hash":"1f6a9485bdfe7db501d3a92fe11e765f78b8a9c0","modified":1695356666112},{"_id":"source/_posts/学习webpack源码.md","hash":"bb5337428c3e0b4188346ad5e32ec883a488efb0","modified":1695356666116},{"_id":"source/_posts/对antd-pro一些理解.md","hash":"c53585c4bfb4dde685a5b99c1d4f85fb4f111d85","modified":1695356666116},{"_id":"source/_posts/对近期工作的一些思考.md","hash":"d8be89e8b8cb8e0eced608a22f1890d6ba6c34d1","modified":1695356666116},{"_id":"source/_posts/导航栏吸顶.md","hash":"00dee9064b05308d6d933e773e283f480ebb2bc2","modified":1695356666116},{"_id":"source/_posts/手写源码系列.md","hash":"47a7c7575a737738c4fb7486b6334be768ef6859","modified":1695356666116},{"_id":"source/_posts/打家劫舍.md","hash":"ef807f7e4e1ce9d8ef0af0944028bd80f81e0e19","modified":1695356666116},{"_id":"source/_posts/搜索插入位置.md","hash":"28db254221cebd52c63fcb6c0b2910e6899d8097","modified":1695356666116},{"_id":"source/_posts/数组中的第K个最大元素.md","hash":"87b090095416ef1200139cfae5cdbfeafee8737a","modified":1695356666116},{"_id":"source/_posts/整数拆分.md","hash":"6104deba7330bb9f7d162d8d0002a1db186d30b8","modified":1695356666116},{"_id":"source/_posts/最佳观光组合.md","hash":"9de1c9bd6d2a683c31985a99275782c71e7e5aed","modified":1695356666116},{"_id":"source/_posts/最小路径和.md","hash":"41732efcf55ff3331ce029b5a5201f421b3f4819","modified":1695356666116},{"_id":"source/_posts/有序链表转换二叉搜索树.md","hash":"c0d0b23ca5a41f7efda56725f2aae8a26aa6d0fe","modified":1695356666116},{"_id":"source/_posts/有效括号.md","hash":"f4e738ee99ef0a09187b7a74355e1ce1ddc8073e","modified":1695356666120},{"_id":"source/_posts/正则表达式.md","hash":"2327453b0c293c4b28da6aab5aa8c6c9cf968b26","modified":1695356666120},{"_id":"source/_posts/滑动验证码.md","hash":"5582dc6935d09f1843606728f081302eb93b8dd4","modified":1695356666120},{"_id":"source/_posts/电话号码的字母组合.md","hash":"f6b62c67a4420822ba776646374000484b6e1322","modified":1695356666120},{"_id":"source/_posts/盛最多水的容器.md","hash":"15a285a8e065f7d1b03dce4c922d02068f8f0621","modified":1695356666120},{"_id":"source/_posts/相同的树.md","hash":"804ee2765a25ea2f024a765b0a19490d10f02816","modified":1695356666120},{"_id":"source/_posts/系统命令行代理.md","hash":"ed4f16362eff908311ecbb0c081dc0f809863c2d","modified":1695356666120},{"_id":"source/_posts/计数二进制子串.md","hash":"b1b2889231ce2066dd6656f91c2da8c2863a24fb","modified":1695356666120},{"_id":"source/_posts/记录一下react的一些用法.md","hash":"1b7e542a2de8b4defb2e6daf214a02e737b1d9d6","modified":1695356666120},{"_id":"source/_posts/记录一下从rc-tree 里面学到了什么东西.md","hash":"7a1e040f9657eb8723d45f355d85b9dca3718d8f","modified":1695356666120},{"_id":"source/_posts/路径总和-II.md","hash":"7fbb808e0367c7e425d59e5bcce6ce863ac4bcaa","modified":1695356666120},{"_id":"source/_posts/路径总和.md","hash":"27f6827b2fc5950fda40cdc58b627283228155e3","modified":1695356666120},{"_id":"source/_posts/递增子序列.md","hash":"1bbcf49f4695d2449ff68458e7661e54ce56b9b6","modified":1695356666120},{"_id":"source/_posts/长列表实践.md","hash":"b9350a2b713d53a1e88a50b1d0f8089ea8f2a0ea","modified":1695356666120},{"_id":"source/_posts/除数博弈.md","hash":"ce74cd42c99182a0e88334c2bc9bbb541532edbf","modified":1695356666120},{"_id":"source/_posts/面试总结.md","hash":"88b11ed6b89f0aebeec0baab549486e29f9079aa","modified":1695356666120},{"_id":"source/_posts/面试题-17-13-恢复空格.md","hash":"d5a27587fbe3d2096b5161ef2531f708fa89813c","modified":1695356666120},{"_id":"source/_posts/面试题29-顺时针打印矩阵.md","hash":"5ce55df0e754e28ffc901753575e0df1aa082456","modified":1695356666120},{"_id":"source/_posts/面试题46-把数字翻译成字符串.md","hash":"d218853793fbed4266761563dd54347cde4e1f4b","modified":1695356666120},{"_id":"source/_posts/验证回文字符串 Ⅱ.md","hash":"22aa99822f7a1fc4e7f3acc4c21f96c5fb2a6307","modified":1695356666120},{"_id":"source/_posts/高德地图滑动验证.md","hash":"ab475f8cce88a85f39675adabe57f1c8c8231afa","modified":1695356666120},{"_id":"source/about/index.md","hash":"48eafa8b1f8da54f010da926ce0771a6a6acdc6d","modified":1695356666120},{"_id":"source/algorithm/index.md","hash":"bf584e4a8dbf020c8b0573e8eb8d28d5e9d952ae","modified":1695356666120},{"_id":"source/category/index.md","hash":"e59e4cac82cff2acb75d40fde935c15a2eeaed94","modified":1695356666120},{"_id":"source/tag/index.md","hash":"057d25e88021a5483d98a890e1bee2738f9034c9","modified":1695356666120},{"_id":"themes/Chic/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1695356666120},{"_id":"themes/Chic/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1695356666120},{"_id":"themes/Chic/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1695356666120},{"_id":"themes/Chic/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1695356666120},{"_id":"themes/Chic/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1695356666120},{"_id":"themes/Chic/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1695356666120},{"_id":"themes/Chic/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1695356666120},{"_id":"themes/Chic/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1695356666120},{"_id":"themes/Chic/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1695356666120},{"_id":"themes/Chic/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1695356666120},{"_id":"themes/Chic/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1695356666120},{"_id":"themes/Chic/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1695356666120},{"_id":"themes/Chic/layout/algorithm.ejs","hash":"6a05246c61fcebc1a2cb0b08be6feff58200bea6","modified":1695356666124},{"_id":"themes/Chic/layout/archive.ejs","hash":"8a84040d3869dc854fd7669d5606f16d9702611f","modified":1695356666124},{"_id":"themes/Chic/layout/category.ejs","hash":"cae7483c92ff639f74f8efe67959f37c97350800","modified":1695356666124},{"_id":"themes/Chic/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1695356666124},{"_id":"themes/Chic/layout/layout.ejs","hash":"0214af72fddc3f13cc137fb97c50aa2cdd4d30dc","modified":1695356666124},{"_id":"themes/Chic/layout/page.ejs","hash":"63c628ce0d9d336e6839f4bffbd467a2cea98301","modified":1695356666124},{"_id":"themes/Chic/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1695356666124},{"_id":"themes/Chic/layout/tag.ejs","hash":"5276ec91ae04308321ce41733a1a959b22fc9fe9","modified":1695356666124},{"_id":"themes/Chic/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1695356666136},{"_id":"themes/Chic/scripts/imageTag.js","hash":"4b69804c1e4bf638eda7022499c440ce24e28587","modified":1695356666124},{"_id":"themes/Chic/scripts/algorithm.js","hash":"7bf8d60bfb43b00189767291d9c8eadcce7bb282","modified":1695356666124},{"_id":"source/_posts/React源码-ReactDOM/函数运行流程图.jpg","hash":"05c3c8449359058c86c36f51305bb1a26636d48d","modified":1695356666112},{"_id":"source/_posts/git/git_reset.jpg","hash":"e277eb13d69eb041d3e0d72712e9e5b81e7b76c9","modified":1695356666112},{"_id":"source/_posts/学习webpack源码/1.png","hash":"980cc923ac935c00f4fd1eb54a335b81d61bbdf2","modified":1695356666116},{"_id":"source/_posts/电话号码的字母组合/2.jpg","hash":"55b2ec56f5fc67be629e27dc09a706aeacc337eb","modified":1695356666120},{"_id":"source/_posts/记录一下从rc-tree 里面学到了什么东西/1.png","hash":"ca275adb4dfa738dd1451fd744d9117564a9a643","modified":1695356666120},{"_id":"source/_posts/递增子序列/树.jpg","hash":"517e272828792d4413fbb1fa7cb4ced06061023a","modified":1695356666120},{"_id":"themes/Chic/layout/_page/algorithm.ejs","hash":"49385fe421287ba3d819e62da71f366270975336","modified":1695356666120},{"_id":"themes/Chic/layout/_page/archive.ejs","hash":"f7eb078aa645b80539f6389990f21a1e2c058106","modified":1695356666120},{"_id":"themes/Chic/layout/_page/category.ejs","hash":"4f13202c31b56be05be4a448f00e54f7ab3ff811","modified":1695356666124},{"_id":"themes/Chic/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1695356666124},{"_id":"themes/Chic/layout/_page/post.ejs","hash":"2c1cba1c40d1923477aa7036033ecd0274ac2578","modified":1695356666124},{"_id":"themes/Chic/layout/_page/profile.ejs","hash":"c6d3cf2ef90e5d0fd580e7cff1db47c28fb36037","modified":1695356666124},{"_id":"themes/Chic/layout/_page/tag.ejs","hash":"aa659dd9ca36491b963ae0632a81996158175610","modified":1695356666124},{"_id":"themes/Chic/layout/_partial/footer.ejs","hash":"e9f5c0b1d952bfbdcf0872f46047e90f50efd22a","modified":1695356666124},{"_id":"themes/Chic/layout/_partial/head.ejs","hash":"36f8ed14fbbd4760a27e1d80907078339882b952","modified":1695356666124},{"_id":"themes/Chic/layout/_partial/header.ejs","hash":"105a58f254b33d81b5fe854edba22b3fdec6a904","modified":1695356666124},{"_id":"themes/Chic/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1695356666124},{"_id":"themes/Chic/layout/_partial/search.ejs","hash":"725b84d3a24a509cce0d0e0d1ef5e4cad0f6b04f","modified":1695356666124},{"_id":"themes/Chic/layout/_partial/toc.ejs","hash":"10bb9c303c948f5615149981cd85cbbd3e7c781c","modified":1695356666124},{"_id":"themes/Chic/layout/_plugins/fancybox.ejs","hash":"884b36e572f065ad483e1690f5da0dd346d1b8a5","modified":1695356666124},{"_id":"themes/Chic/layout/_plugins/gitalk.ejs","hash":"5e153d30830bebfcfd69139b521956e5e292f03f","modified":1695356666124},{"_id":"themes/Chic/layout/_plugins/mathjax.ejs","hash":"53f088fe44d51c4d9fb61aeac4c23b3cfcc19762","modified":1695356666124},{"_id":"themes/Chic/layout/_plugins/reward.ejs","hash":"462616f5606447dce784a8dd131b7df5e812577b","modified":1695356666124},{"_id":"themes/Chic/layout/_plugins/search.ejs","hash":"00cb9684f184d2bb80fa86e37411f16593fd5764","modified":1695356666124},{"_id":"themes/Chic/layout/_plugins/site-visitor.ejs","hash":"bff25e7a1988e14b26ae1494109d26fe18c87240","modified":1695356666124},{"_id":"themes/Chic/source/image/search.png","hash":"374af502f52035662b13b3f7f58e036db6c838cb","modified":1695356666216},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1695356666216},{"_id":"themes/Chic/source/js/script.js","hash":"924f436539b14c749b8235e248f1b68b3a59de56","modified":1695356666216},{"_id":"themes/Chic/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1695356666216},{"_id":"source/_posts/电话号码的字母组合/1.png","hash":"0775a204f508aaf3f9b86d7b20c137d2af4278f8","modified":1695356666120},{"_id":"themes/Chic/source/css/base.styl","hash":"7ea2db2c139a719bb7d3f3c5e182dd0e0d59e098","modified":1695356666128},{"_id":"themes/Chic/source/css/custom.styl","hash":"5880232d25af93c1570cf738b0d674f9bffffa1d","modified":1695356666128},{"_id":"themes/Chic/source/css/font.styl","hash":"8c1da30e223c0a3d7ef452abc9f0e4cc71dbc140","modified":1695356666128},{"_id":"themes/Chic/source/css/layout.styl","hash":"84f89fdbbea80af0acab7bbcfe9c222f9d6e546c","modified":1695356666128},{"_id":"themes/Chic/source/css/media.styl","hash":"f96c0dbb9653667906a6dc271f637543ac5c7212","modified":1695356666128},{"_id":"themes/Chic/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1695356666136},{"_id":"themes/Chic/source/css/style.styl","hash":"5b56484cb14656f37f77c35bbe30885e6cce900d","modified":1695356666136},{"_id":"themes/Chic/source/css/variable.styl","hash":"906faa95457eba70118a0705e13b8f43409e502f","modified":1695356666136},{"_id":"themes/Chic/source/image/ali.png","hash":"dd8f32ac326f36875c4147c95316f6342647fac3","modified":1695356666216},{"_id":"themes/Chic/source/image/avatar.jpeg","hash":"557004071d33bc9e186c85d5e9be4944093fbe28","modified":1695356666216},{"_id":"themes/Chic/source/js/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1695356666216},{"_id":"themes/Chic/source/js/jquery.min.js","hash":"c8e1c8b386dc5b7a9184c763c88d19a346eb3342","modified":1695356666216},{"_id":"source/_posts/学习webpack源码(2)/2.png","hash":"e451bfc4987b25c9d8c61e1743e11298e3ab0e67","modified":1695356666116},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1695356666136},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1695356666136},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1695356666136},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1695356666136},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1695356666136},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","hash":"eae94b803d34035008842855d0bead92d2035281","modified":1695356666136},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1695356666136},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1695356666136},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1695356666136},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1695356666136},{"_id":"source/_posts/对近期工作的一些思考/1.jpg","hash":"61d7a8f11899735761b3b243cbd95401a54cb7c8","modified":1695356666116},{"_id":"themes/Chic/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/highlightjs.styl","hash":"65b5981dc3c57cedd1cb668c0e377230987e08d1","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1695356666124},{"_id":"themes/Chic/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1695356666128},{"_id":"themes/Chic/source/css/_lib/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1695356666128},{"_id":"themes/Chic/source/css/_lib/looper.css","hash":"863144dc9af7c1e181670515bc85eaf768f4e287","modified":1695356666128},{"_id":"themes/Chic/source/css/_lib/search.css","hash":"c66d0e05d11262c745d8ad12d9df18c164afc280","modified":1695356666128},{"_id":"themes/Chic/source/css/_lib/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/algorihm.styl","hash":"b88728f7a3a2b47b73993037707c4f5548badd74","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/archive.styl","hash":"71ea842f068b29b4418dd09450db09d27dcf0947","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/category.styl","hash":"cead361269616b7a6ddec3090d9fa34c3c6ac722","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/profile.styl","hash":"5ef6d5a06132f26b7aa01b2fbf4bbfb8ee862b7b","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1695356666128},{"_id":"themes/Chic/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1695356666128},{"_id":"themes/Chic/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1695356666128},{"_id":"themes/Chic/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/_post/post_code.styl","hash":"06c3a3524ffd4b27e03e79489001997ea5d727d3","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/_post/post_content.styl","hash":"5e3d63077549d8e2e5ff8c452e809760f5a99c17","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/_post/post_header.styl","hash":"d37b032bc5edca92c84bf62070a28fa40939df55","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1695356666128},{"_id":"themes/Chic/source/css/_page/_post/post_toc.styl","hash":"15e1ec7af93f41184f986aba21991a79923b0a0e","modified":1695356666128},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1695356666216},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1695356666212},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1695356666180},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1695356666160},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1695356666208},{"_id":"public/content.json","hash":"6d710be40d88adc05a22b94f8dfdf40b2344294a","modified":1695356695507},{"_id":"public/search.json","hash":"92efec9da5edaf16eb3f63373f556c4f791465ef","modified":1695356695507},{"_id":"public/about/index.html","hash":"ded7e8753f982b61acd66688bbdfbca261819137","modified":1695356695507},{"_id":"public/algorithm/index.html","hash":"a406627dc950b960947ef342c3181aadcdbb0ef8","modified":1695356695507},{"_id":"public/category/index.html","hash":"96be3aae9447b331770f514a10c5fddd86590bc6","modified":1695356695507},{"_id":"public/tag/index.html","hash":"7e53d93f9568beaad66437fc3e724b9dea317052","modified":1695356695507},{"_id":"public/2023/09/18/写一个dumi markdown 插件/index.html","hash":"86e0baae1a2f3c17d8889a6d33f29d4077759759","modified":1695356695507},{"_id":"public/2023/04/04/AND(A,B,OR(C,D,E))/index.html","hash":"34e571f8204184bd6377b3e46f5ac28ae6153086","modified":1695356695507},{"_id":"public/2023/02/14/taro 升级遇见的坑/index.html","hash":"e24e003336a45db07f9d64171b6d14d1f919e8b6","modified":1695356695507},{"_id":"public/2022/05/20/typescript 获取url 参数，类型应该怎么写/index.html","hash":"05e8ef1ed2ba3bf1aa5ac827924ac18416de42c2","modified":1695356695507},{"_id":"public/2022/05/20/在自己的vps 上安装Jenkins/index.html","hash":"1c9ca6d1dff46010ae2f137acc4039214bb69798","modified":1695356695507},{"_id":"public/2022/05/03/react-router 学习/index.html","hash":"2de66f387c462cf51a5a3433557a7afc23fb288e","modified":1695356695507},{"_id":"public/2022/04/22/记录一下从rc-tree 里面学到了什么东西/index.html","hash":"dfb896c80904d7a0c8e953d143e04f5a7a3e79ef","modified":1695356695507},{"_id":"public/2022/02/22/学习webpack源码(2)/index.html","hash":"8c457a2f8a257d43af27f523849bfa889a52f6f1","modified":1695356695507},{"_id":"public/2022/01/17/学习webpack源码/index.html","hash":"580fd7180e4baf46f49d483366be2997fe33ef61","modified":1695356695507},{"_id":"public/2022/01/05/typescript 类型体操/index.html","hash":"ad1f4fb44951f2111e7229f830a8f02c65c8aa25","modified":1695356695507},{"_id":"public/2021/10/07/对近期工作的一些思考/index.html","hash":"66c18d690a872ad7aa946ea1154b2d79c33e1b20","modified":1695356695507},{"_id":"public/2021/09/13/antd alert/index.html","hash":"9b1e5e2ef2e42a3881ad74f981967082e3712a2a","modified":1695356695507},{"_id":"public/2021/09/13/antd-switch/index.html","hash":"42c4a9a3404b3f3b9d200564f398e1c1ad0d7fb1","modified":1695356695507},{"_id":"public/2021/09/08/antd Modal 组件/index.html","hash":"92fd1148a44c773b5dc8cf2591f49f19b1ab6922","modified":1695356695507},{"_id":"public/2021/06/23/系统命令行代理/index.html","hash":"0a3cde481d45a5c334ae9fe8fe56ec1c55c11bc4","modified":1695356695507},{"_id":"public/2021/06/14/正则表达式/index.html","hash":"c0f91f1b91a69958aa2dd81a68f83035efe1201a","modified":1695356695507},{"_id":"public/2021/04/08/git/index.html","hash":"b2732abcb99b64cf1bb860db57c72ec46b2e8da2","modified":1695356695507},{"_id":"public/2020/09/26/路径总和-II/index.html","hash":"5cd8f978c3027e7bc28c1f85f7164bf13ca5a676","modified":1695356695507},{"_id":"public/2020/09/10/面试总结/index.html","hash":"1c645cc8e5d6a55d26a611036c3978b0eb36ff65","modified":1695356695507},{"_id":"public/2020/09/08/手写源码系列/index.html","hash":"e7fcd286b1ee2b08d586585acbad56fe398c56cb","modified":1695356695507},{"_id":"public/2020/09/05/webpack-配置梳理/index.html","hash":"33afddcc6b16e724d5ac936de26cd40e2ec2de9f","modified":1695356695507},{"_id":"public/2020/08/31/841-钥匙和房间/index.html","hash":"3625e3ab9ad6ea4b0579a7eff875a468db77eb64","modified":1695356695507},{"_id":"public/2020/08/26/对antd-pro一些理解/index.html","hash":"ce2793f485d5dccefd9ddbfa8d3d992120c77427","modified":1695356695507},{"_id":"public/2020/08/26/电话号码的字母组合/index.html","hash":"dad3cfef0a2c2406cd41cd077f7f478355138e6a","modified":1695356695507},{"_id":"public/2020/08/25/奇偶链表/index.html","hash":"b5ee5baf8058dc6179720dbac49cd8b069401493","modified":1695356695507},{"_id":"public/2020/08/25/递增子序列/index.html","hash":"271d952fc478a5bbc5ca2e5867a15baa041dc578","modified":1695356695507},{"_id":"public/2020/08/19/回文子串/index.html","hash":"70ad909947434be65b060f3c3743588d1396c4fb","modified":1695356695507},{"_id":"public/2020/08/18/有序链表转换二叉搜索树/index.html","hash":"3503a9e38d2e50adb47ef748a5f1d1f710633109","modified":1695356695507},{"_id":"public/2020/08/14/有效括号/index.html","hash":"162d3b2a079a18dd073eda833ef0090f31d576c6","modified":1695356695507},{"_id":"public/2020/08/13/字符串相乘/index.html","hash":"0fd2ad5345def5b9d1e1bc1964e7e8372ce00922","modified":1695356695507},{"_id":"public/2020/08/12/剑指-Offer-55-II-平衡二叉树/index.html","hash":"f9e4e625fec69aa0cb5e9f3da44b3dde7d173156","modified":1695356695507},{"_id":"public/2020/08/11/关于this/index.html","hash":"47d2751505ea363f189ab26c7799bffb478bbdf7","modified":1695356695507},{"_id":"public/2020/08/10/计数二进制子串/index.html","hash":"54e5c2b0c0f4960fe3e1eeac80023f71f0ba1602","modified":1695356695507},{"_id":"public/2020/08/07/相同的树/index.html","hash":"fc63ebbb6cf3dd1c4ded715b390ab0f4f223d78e","modified":1695356695507},{"_id":"public/2020/08/06/滑动验证码/index.html","hash":"daf95315a1f6deea0a7426990344ccdab8d4850e","modified":1695356695507},{"_id":"public/2020/07/30/二叉树的最大深度/index.html","hash":"d39cc9d4a765be344599d86cea14cd1a75e94b78","modified":1695356695507},{"_id":"public/2020/07/30/整数拆分/index.html","hash":"486001bc77bc143f0a20b36ac3234aa741caee41","modified":1695356695507},{"_id":"public/2020/07/27/xlsx-读取写入excel/index.html","hash":"0c06a5f0dba441633841676868119df35a509079","modified":1695356695507},{"_id":"public/2020/07/24/除数博弈/index.html","hash":"4132afbf7334a6f80020a621170d7195d5e2bbdc","modified":1695356695507},{"_id":"public/2020/07/23/expo 极光推送/index.html","hash":"50c94425f8033321441b18b4a472b66d294e1b35","modified":1695356695507},{"_id":"public/2020/07/23/最小路径和/index.html","hash":"27861fb63cb627ee1bac6724d73f7ac78056f788","modified":1695356695507},{"_id":"public/2020/07/21/React-调度/index.html","hash":"5ef41339ba2aeed8edb72c104bd0fcedcc1d39a0","modified":1695356695507},{"_id":"public/2020/07/21/react基础/index.html","hash":"cb79cd7e536cd86de2bf29d6e87bae90b5c980a6","modified":1695356695507},{"_id":"public/2020/07/20/两数之和-II-输入有序数组/index.html","hash":"e26b76ec942d664b3ab4663786e8f38a6b83e3e9","modified":1695356695507},{"_id":"public/2020/07/20/删除链表的倒数第N个节点/index.html","hash":"b2ad2af44e544d728d0413f5cebfa7c2401d41f3","modified":1695356695507},{"_id":"public/2020/07/17/搜索插入位置/index.html","hash":"bedcfa5115c43565a9029e74917607e5b68013a9","modified":1695356695507},{"_id":"public/2020/07/17/不同的二叉搜索树/index.html","hash":"1c9bcd52003a56d43fb6a2f0adabcb2e221b26f4","modified":1695356695507},{"_id":"public/2020/07/16/三角形最小路径和/index.html","hash":"11a21155fd64ba9346ed1e62a92ba3c7478d45ac","modified":1695356695507},{"_id":"public/2020/07/13/两个数组的交集-II/index.html","hash":"fefc32db8fa5d5d082a4a3b8a2f43da4efb0137f","modified":1695356695507},{"_id":"public/2020/07/11/面试题-17-13-恢复空格/index.html","hash":"04f2de69ece12bac8cec69a050f795618ac212c3","modified":1695356695507},{"_id":"public/2020/07/09/hexo自定义/index.html","hash":"3255564affed78d37d4874cdab2aee7675f3369c","modified":1695356695507},{"_id":"public/2020/07/07/路径总和/index.html","hash":"e5883668880b4340f5ba7545f437879a9420f7a6","modified":1695356695507},{"_id":"public/2020/07/06/63-不同路径-II/index.html","hash":"a6af443a7e35dbf63a52ca5a061b2b95dbb1fd1c","modified":1695356695507},{"_id":"public/2020/07/03/108-将有序数组转换为二叉搜索树/index.html","hash":"c8bb729edc94eb125a57c69c01315169a94dae63","modified":1695356695507},{"_id":"public/2020/06/30/Z-字形变换/index.html","hash":"14dea28f5b53d4d5dfe81f8efdce9e78201bb496","modified":1695356695507},{"_id":"public/2020/06/29/数组中的第K个最大元素/index.html","hash":"a7b31391380eb7788176e824ef32ffbb61a05bf3","modified":1695356695507},{"_id":"public/2020/06/28/React源码-ReactDOM/index.html","hash":"7d65a0c108a0432d1eab82e8262f64e6a72b9cc9","modified":1695356695507},{"_id":"public/2020/06/23/二进制求和/index.html","hash":"bd0da15e958542be55b1f82074593972acd0fa0a","modified":1695356695507},{"_id":"public/2020/06/23/盛最多水的容器/index.html","hash":"f5be6b61a3004b04458094f2af8e86f2469d5d15","modified":1695356695507},{"_id":"public/2020/06/19/React源码-ReactChildren/index.html","hash":"1968749e7fb72cc71fecafd523c2d966b89378ed","modified":1695356695507},{"_id":"public/2020/06/18/React源码-ReactElement/index.html","hash":"71a6d092cfec5dcdba3d106d2abcee88d39cdb26","modified":1695356695507},{"_id":"public/2020/06/17/最佳观光组合/index.html","hash":"96c6029175cb374386a5739338f0c663b92d901a","modified":1695356695507},{"_id":"public/2020/06/16/React源码-React API/index.html","hash":"f40ba0459d36a074a857ed4b14416e861dd9a0a5","modified":1695356695507},{"_id":"public/2020/06/09/面试题46-把数字翻译成字符串/index.html","hash":"f91d42886cf7bf0da884ab77c5f729be4962a9dc","modified":1695356695507},{"_id":"public/2020/06/09/面试题29-顺时针打印矩阵/index.html","hash":"4d9cd07d576221bcda3b8751642c3c198f367280","modified":1695356695507},{"_id":"public/2020/06/05/高德地图滑动验证/index.html","hash":"3bf4f5d394d593e7bcadd439937cf199818d79df","modified":1695356695507},{"_id":"public/2020/06/03/记录一下react的一些用法/index.html","hash":"f23d9c638631d7c5625ccceb138c9b31748ab85d","modified":1695356695507},{"_id":"public/2020/06/01/原型与继承/index.html","hash":"f805972f280c3c585343211c9e88ced644c7029e","modified":1695356695507},{"_id":"public/2020/05/29/打家劫舍/index.html","hash":"dc76959e7a05f7c970c05a907e0b592022d9bc27","modified":1695356695507},{"_id":"public/2020/05/29/字符串解码/index.html","hash":"ed9c2b8629e8c198aa5b5a2c65c2b8759ccf9832","modified":1695356695507},{"_id":"public/2020/05/27/和为k的子数组/index.html","hash":"c6380c00d19cf54602a53026f0f73dfb5bf1b024","modified":1695356695507},{"_id":"public/2020/05/19/验证回文字符串 Ⅱ/index.html","hash":"d539656ccd0db9080da88d98db0caf6f2141b433","modified":1695356695507},{"_id":"public/2020/05/08/大众点评文字数字解密/index.html","hash":"2457b96a005499bd276ad5198a5d1c7561321bff","modified":1695356695507},{"_id":"public/2020/04/23/webpack-vue-electron开发环境搭建/index.html","hash":"4c63a3f63f3f8ea1d5b03cca1a14f654ddd093f4","modified":1695356695507},{"_id":"public/2020/04/15/长列表实践/index.html","hash":"25a11f529ae4029010c13bb679db3a39e7ed4bdb","modified":1695356695507},{"_id":"public/2020/04/09/导航栏吸顶/index.html","hash":"1cf4e196b7feecf66f8af7c0db8864221acc0642","modified":1695356695507},{"_id":"public/2020/04/08/一行代码使网站变灰/index.html","hash":"5bd93db09b741df797b2538659fca4e40b30ff72","modified":1695356695507},{"_id":"public/2020/04/08/hello-world/index.html","hash":"fd879319f0acd2cf2714cfaa57d4e297657df496","modified":1695356695507},{"_id":"public/archives/index.html","hash":"f81d7da1bb424e526749c8efbff4443394776b92","modified":1695356695507},{"_id":"public/archives/page/2/index.html","hash":"d2bb776209dee22d62fa4ebec4f3576976f3c774","modified":1695356695507},{"_id":"public/archives/page/3/index.html","hash":"d642586b2f42a93216c377636814d5523f8f7fa8","modified":1695356695507},{"_id":"public/archives/page/4/index.html","hash":"a619dd6a2bea070f8d97f3e7dd85442ce69f0c81","modified":1695356695507},{"_id":"public/archives/2020/index.html","hash":"0775d26aafe56ee2a6a76c5840b3d985dd743518","modified":1695356695507},{"_id":"public/archives/2020/page/2/index.html","hash":"bde3522ccde5342142bcb6a0712fb951dfe07bf0","modified":1695356695507},{"_id":"public/archives/2020/page/3/index.html","hash":"ac17d59830880e5ed26b2b3d1b5d0d984e7dfab6","modified":1695356695507},{"_id":"public/archives/2020/04/index.html","hash":"a18bc9ad1da3e35ef76e3a388118342c71d0e8ac","modified":1695356695507},{"_id":"public/archives/2020/05/index.html","hash":"3855d44a6b8a31179c78be780bb6d6aa5697bbba","modified":1695356695507},{"_id":"public/archives/2020/06/index.html","hash":"7ba57a6199d563dbcbf5238fc6a6c85874704ac2","modified":1695356695507},{"_id":"public/archives/2020/07/index.html","hash":"43b98ed120d522be538e042c22004232231797a9","modified":1695356695507},{"_id":"public/archives/2020/08/index.html","hash":"f28d47cb1c77be91f29b7ba38074f8722532a779","modified":1695356695507},{"_id":"public/archives/2020/09/index.html","hash":"0da983e5499db28f4c7b89c545561047d6d1a2e4","modified":1695356695507},{"_id":"public/archives/2021/index.html","hash":"f350200c3f3ba6fe64f479f4418d245d69115f7d","modified":1695356695507},{"_id":"public/archives/2021/04/index.html","hash":"dd126d970b0f42a0b39d92a13fb4b1f57195a071","modified":1695356695507},{"_id":"public/archives/2021/06/index.html","hash":"46c48cc47b4fe94c92626aba8138acb8929a887c","modified":1695356695507},{"_id":"public/archives/2021/09/index.html","hash":"e610fe26564afde7fcba4a7b59a6df68fe5eaaf6","modified":1695356695507},{"_id":"public/archives/2021/10/index.html","hash":"ba293ec4c57e66beef004f684d6003132fddf25d","modified":1695356695507},{"_id":"public/archives/2022/index.html","hash":"1adde74a7ea32697eb55c5fbecf6828089a05e6f","modified":1695356695507},{"_id":"public/archives/2022/01/index.html","hash":"df54bf8efddae35418a152cfff3e1805cfa7eaf7","modified":1695356695507},{"_id":"public/archives/2022/02/index.html","hash":"388c296180505a462a2d3fc4f9170649e72f92b3","modified":1695356695507},{"_id":"public/archives/2022/04/index.html","hash":"1adc9661f8f52962efd01d594e33a9bb91a3c430","modified":1695356695507},{"_id":"public/archives/2022/05/index.html","hash":"61a3ba2697f0264b9d24eb89fdecb9d30234aeb3","modified":1695356695507},{"_id":"public/archives/2023/index.html","hash":"259875600378f00a56eea7410f0cf57e6a1647d5","modified":1695356695507},{"_id":"public/archives/2023/02/index.html","hash":"61293ce0dd013b1b83aa8f96c5ed5cf02bae20ef","modified":1695356695507},{"_id":"public/archives/2023/04/index.html","hash":"5f4efa3f35b52afcbad5b548ed03d88d9216b6d9","modified":1695356695507},{"_id":"public/archives/2023/09/index.html","hash":"660a627a09c3260138178c6992c6079c6fadd986","modified":1695356695507},{"_id":"public/categories/js/index.html","hash":"a701550e4fcc534ee30b9b8842fb0c7f7131b5f9","modified":1695356695507},{"_id":"public/categories/react/index.html","hash":"0144d7e84373b6933167ecc1bfcddd744eadef3d","modified":1695356695507},{"_id":"public/categories/react/react源码系列/index.html","hash":"463084af7788510f3e64eb84857d1a9e8919688b","modified":1695356695507},{"_id":"public/categories/git/index.html","hash":"82ffff7432a5ce2f296a79a174b02a28d611229b","modified":1695356695507},{"_id":"public/categories/hexo/index.html","hash":"00b6a80ccb6190d7fc48044fa143bcc085a2bfa3","modified":1695356695507},{"_id":"public/categories/react-router/index.html","hash":"b897a0244cd51d72a927e6951e0c3c169800ec4f","modified":1695356695507},{"_id":"public/categories/taro/index.html","hash":"39a9089cd6d53b6b6f516c165c1009b0ed3f2290","modified":1695356695507},{"_id":"public/categories/typescript/index.html","hash":"2178fb1226919c54369bde7433b746e7557f45ae","modified":1695356695507},{"_id":"public/categories/electron/index.html","hash":"34a6e10254ecb0d842794aec6a5f2a4fb2249388","modified":1695356695507},{"_id":"public/categories/webpack/index.html","hash":"9057a460c15717a6ae2c77d922ae5e1da216b9c9","modified":1695356695507},{"_id":"public/categories/js-xlsx/index.html","hash":"35fe979d00c8cf6d5c3c0c80c7c0dd21c3a02d59","modified":1695356695507},{"_id":"public/categories/css/index.html","hash":"d3b568b0bc6e2d874c47bb0b3a60be9d7c0fe0a0","modified":1695356695507},{"_id":"public/categories/javascript/index.html","hash":"603f538af2e798a755b5a6744d2d1417a65b1af4","modified":1695356695507},{"_id":"public/categories/dumi/index.html","hash":"ad080abe2957908adb5e1210e9e0b350d62a065a","modified":1695356695507},{"_id":"public/categories/jenkins/index.html","hash":"dd5f15bb4f47bf5c1908c33b002ce42df006ba68","modified":1695356695507},{"_id":"public/categories/electron/vue/index.html","hash":"1e3a8bfb0192809ac70d2fc01872217ae848155f","modified":1695356695507},{"_id":"public/categories/react/antd/index.html","hash":"a39f7332bb47f13c7f78c48c3a31957b51a42522","modified":1695356695507},{"_id":"public/categories/源码/index.html","hash":"6151b3342bce3fd93e1be4dc47b79b9ca9f7ef6a","modified":1695356695507},{"_id":"public/categories/electron/vue/webpack/index.html","hash":"b9b50293211575d0350b92068558d852612e816b","modified":1695356695507},{"_id":"public/categories/正则/index.html","hash":"ea901e947d1d626949705c2a659cc575d26b0b02","modified":1695356695507},{"_id":"public/index.html","hash":"9bc316c677d73ea68cba3ddd668d5bc67998d87d","modified":1695356695507},{"_id":"public/page/2/index.html","hash":"9bc316c677d73ea68cba3ddd668d5bc67998d87d","modified":1695356695507},{"_id":"public/page/3/index.html","hash":"9bc316c677d73ea68cba3ddd668d5bc67998d87d","modified":1695356695507},{"_id":"public/page/4/index.html","hash":"9bc316c677d73ea68cba3ddd668d5bc67998d87d","modified":1695356695507},{"_id":"public/page/5/index.html","hash":"9bc316c677d73ea68cba3ddd668d5bc67998d87d","modified":1695356695507},{"_id":"public/page/6/index.html","hash":"9bc316c677d73ea68cba3ddd668d5bc67998d87d","modified":1695356695507},{"_id":"public/tags/algorithm-二叉树/index.html","hash":"b502574cba9024c092a79122f1181e16b6a4ab74","modified":1695356695507},{"_id":"public/tags/algorithm-递归/index.html","hash":"0adad737ca8a91f307342be160fe47d8666b3e17","modified":1695356695507},{"_id":"public/tags/algorithm-动态规划/index.html","hash":"27c889ed356c416e3253c941c1061ad2dda2ab88","modified":1695356695507},{"_id":"public/tags/algorithm-动态规划/page/2/index.html","hash":"e10fc0f71e66350630f886cad92c46991a581de3","modified":1695356695507},{"_id":"public/tags/algorithm-深度遍历搜索/index.html","hash":"122e656b939d2fe3c6f40d31fb06489df52e491e","modified":1695356695507},{"_id":"public/tags/js/index.html","hash":"b8ccdbff5801ea103f1f7799607f7c0808b047d5","modified":1695356695507},{"_id":"public/tags/react/index.html","hash":"32e857fc4442303454161e6b9163d30e1dc14c6f","modified":1695356695507},{"_id":"public/tags/react/page/2/index.html","hash":"0b1d920e9727112d7dd378a51f60cd9dbe8d149c","modified":1695356695507},{"_id":"public/tags/react源码系列/index.html","hash":"b4d3ff6f60ded5b27d6bdc708d04b19098d80c2c","modified":1695356695507},{"_id":"public/tags/algorithm-基础/index.html","hash":"d9845d92ebccc32d0ffebb639f85b337090ac173","modified":1695356695507},{"_id":"public/tags/algorithm-数组/index.html","hash":"a51b323e8468bc9ee34a71e906d5bbfaea6c2975","modified":1695356695507},{"_id":"public/tags/antd/index.html","hash":"d5fe1ae2e8df0d6c16e3a65040b190988f37f868","modified":1695356695507},{"_id":"public/tags/组件/index.html","hash":"da961275ce4a58596547e305a03d4332d8471800","modified":1695356695507},{"_id":"public/tags/react-native/index.html","hash":"a4db68067fbab879db73944099a4adc050c0f7b1","modified":1695356695507},{"_id":"public/tags/expo/index.html","hash":"a8f0f1f98282ce4639ca014b4c4b44220d1d0f35","modified":1695356695507},{"_id":"public/tags/git/index.html","hash":"8b7787b44ee1dc6b61893ff0c0efa974f67915ee","modified":1695356695507},{"_id":"public/tags/hexo/index.html","hash":"a35f5ddc56597ce6dcbc042f6008170b602b4efa","modified":1695356695507},{"_id":"public/tags/react-router/index.html","hash":"ec77d6b315ba20befeb2abd142da45922d363334","modified":1695356695507},{"_id":"public/tags/taro/index.html","hash":"c91024b183da1336ed34e7373c69269b6d48e9b7","modified":1695356695507},{"_id":"public/tags/typescript/index.html","hash":"98066a84041b17a811a5aa163ae86e9c2c5d67a2","modified":1695356695507},{"_id":"public/tags/electron/index.html","hash":"57f927fbd90ac8f2b3ae765fac3f16036c882186","modified":1695356695507},{"_id":"public/tags/vue/index.html","hash":"b0ec4d1016462d168f33b1f35cc928ccc5cc4c21","modified":1695356695507},{"_id":"public/tags/webpack/index.html","hash":"91031d5c41ed9233a065f5891b8315b3b79bdb8a","modified":1695356695507},{"_id":"public/tags/js-xlsx/index.html","hash":"bd169db0584717a8aaae490429decb51a895b624","modified":1695356695507},{"_id":"public/tags/css/index.html","hash":"672c5fb8c184efbf5824bcc7fe829b7e8b46eb11","modified":1695356695507},{"_id":"public/tags/algorithm-map/index.html","hash":"219885eca07559dc75fc586f5d18b01542dd6111","modified":1695356695507},{"_id":"public/tags/algorithm-双指针/index.html","hash":"8da195caff9c3622b515c42e9ca41d675f148f02","modified":1695356695507},{"_id":"public/tags/javascript/index.html","hash":"bf0814572982602b4228b8e1b62f78920217774c","modified":1695356695507},{"_id":"public/tags/dumi/index.html","hash":"a1bfdc687189bb6ad67b90491286f03d31e75a62","modified":1695356695507},{"_id":"public/tags/algorithm-链表/index.html","hash":"4abe723657849c5da91c7f70c8ea21d2b5aeacb7","modified":1695356695507},{"_id":"public/tags/algorithm-前缀和/index.html","hash":"a863a0e74920972cb8ec02529b6cf54b1f29827f","modified":1695356695507},{"_id":"public/tags/jenkins/index.html","hash":"07d076c08fe599ff8339dddd7dd47ee0b153c5a2","modified":1695356695507},{"_id":"public/tags/algorithm-分治/index.html","hash":"8ade1b1b5e540a316734113b3023fb660df28ad2","modified":1695356695507},{"_id":"public/tags/源码/index.html","hash":"683f691852e562f567ad6b6af2a47bf5104eb6f5","modified":1695356695507},{"_id":"public/tags/algorithm-二分法/index.html","hash":"673e61f029539f3b22486f2630f92a732b4a923e","modified":1695356695507},{"_id":"public/tags/algorithm-排序/index.html","hash":"d3f87aeff4aa7519e8fd8d86bbcf1a0c6a92cc62","modified":1695356695507},{"_id":"public/tags/algorithm-快速排序/index.html","hash":"c610036fc693c07445f41cccb433141d1cd084d9","modified":1695356695507},{"_id":"public/tags/algorithm-栈/index.html","hash":"11051d1ac1972afd7cc44239edd1ebe373fa319d","modified":1695356695507},{"_id":"public/tags/正则/index.html","hash":"0fd0fcea6802a047b8239e0b67ed5da6925a61f7","modified":1695356695507},{"_id":"public/tags/algorithm-全排列/index.html","hash":"9bb9eab1c6c6503d0f53ef5bf8c10db91e11fbab","modified":1695356695507},{"_id":"public/tags/代理/index.html","hash":"938c7a69ed12dc777e913c22f4873d7c742e0206","modified":1695356695507},{"_id":"public/tags/algorithm-深度搜索优先/index.html","hash":"bafea809186fe7c23034e51aa60a8a0c621bd9c0","modified":1695356695507},{"_id":"public/tags/algorithm-面试题/index.html","hash":"60ee2d697ee7796b9121b66f0a94882e2ec5591e","modified":1695356695507},{"_id":"public/algorithm/page/2/index.html","hash":"0c69840a40d84dc44324f37bb4807d350975a370","modified":1695356695507},{"_id":"public/algorithm/page/3/index.html","hash":"5395e2b358b49ec77786dad077ed9c228f08e6a3","modified":1695356695507},{"_id":"public/algorithm/page/4/index.html","hash":"2af3da25133d188edcc5704929d4de93baf83b8d","modified":1695356695507},{"_id":"public/algorithm/page/5/index.html","hash":"2c6c85203785c11308e51cdf9d6e9c46c2c80a34","modified":1695356695507},{"_id":"public/algorithm/page/6/index.html","hash":"f38aad3193c2512881bc2e678f4df214a73e9718","modified":1695356695507},{"_id":"public/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1695356695507},{"_id":"public/image/search.png","hash":"374af502f52035662b13b3f7f58e036db6c838cb","modified":1695356695507},{"_id":"public/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1695356695507},{"_id":"public/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1695356695507},{"_id":"public/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1695356695507},{"_id":"public/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1695356695507},{"_id":"public/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1695356695507},{"_id":"public/2020/06/28/React源码-ReactDOM/函数运行流程图.jpg","hash":"05c3c8449359058c86c36f51305bb1a26636d48d","modified":1695356695507},{"_id":"public/2021/04/08/git/git_reset.jpg","hash":"e277eb13d69eb041d3e0d72712e9e5b81e7b76c9","modified":1695356695507},{"_id":"public/2022/01/17/学习webpack源码/1.png","hash":"980cc923ac935c00f4fd1eb54a335b81d61bbdf2","modified":1695356695507},{"_id":"public/2022/04/22/记录一下从rc-tree 里面学到了什么东西/1.png","hash":"ca275adb4dfa738dd1451fd744d9117564a9a643","modified":1695356695507},{"_id":"public/2020/08/25/递增子序列/树.jpg","hash":"517e272828792d4413fbb1fa7cb4ced06061023a","modified":1695356695507},{"_id":"public/2020/08/26/电话号码的字母组合/2.jpg","hash":"55b2ec56f5fc67be629e27dc09a706aeacc337eb","modified":1695356695507},{"_id":"public/css/prism-base16-ateliersulphurpool.light.css","hash":"5ffb08b63ea3933dc170889aee02cde13565edbc","modified":1695356695507},{"_id":"public/image/ali.png","hash":"dd8f32ac326f36875c4147c95316f6342647fac3","modified":1695356695507},{"_id":"public/image/avatar.jpeg","hash":"557004071d33bc9e186c85d5e9be4944093fbe28","modified":1695356695507},{"_id":"public/2020/08/26/电话号码的字母组合/1.png","hash":"0775a204f508aaf3f9b86d7b20c137d2af4278f8","modified":1695356695507},{"_id":"public/js/script.js","hash":"924f436539b14c749b8235e248f1b68b3a59de56","modified":1695356695507},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1695356695507},{"_id":"public/css/base.css","hash":"ea2d491ce6242c6b7087a2652a1135694c292137","modified":1695356695507},{"_id":"public/css/custom.css","hash":"c614f39931f3378ede03f29852f80320647580d0","modified":1695356695507},{"_id":"public/css/font.css","hash":"87059edd1f2bfc4296f5599e73208893f2b06458","modified":1695356695507},{"_id":"public/css/layout.css","hash":"6bfdc6e747f9be3c603939e840368120a47027a2","modified":1695356695507},{"_id":"public/css/media.css","hash":"5023ee404900a47d61ca0591b2d4e9eace0fe88e","modified":1695356695507},{"_id":"public/css/normalize.css","hash":"2d4b663b6a4c68295b6ba240fa2dd9fb3863093c","modified":1695356695507},{"_id":"public/css/variable.css","hash":"cb4180b3bbad471e30cf52ebb40e998d58a30d7d","modified":1695356695507},{"_id":"public/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1695356695507},{"_id":"public/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1695356695507},{"_id":"public/fonts/iconfont/iconfont.json","hash":"3123aa840109e385d58a75d34e88a2d621e1ada8","modified":1695356695507},{"_id":"public/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1695356695507},{"_id":"public/css/style.css","hash":"6feb92504dda50e8ca4d5931a01f596ec1e79b42","modified":1695356695507},{"_id":"public/js/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1695356695507},{"_id":"public/js/jquery.min.js","hash":"c8e1c8b386dc5b7a9184c763c88d19a346eb3342","modified":1695356695507},{"_id":"public/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1695356695507},{"_id":"public/fonts/iconfont/demo_index.html","hash":"0705e56cb846192afcd5471ca9c2815305f2c866","modified":1695356695507},{"_id":"public/2022/02/22/学习webpack源码(2)/2.png","hash":"e451bfc4987b25c9d8c61e1743e11298e3ab0e67","modified":1695356695507},{"_id":"public/2021/10/07/对近期工作的一些思考/1.jpg","hash":"61d7a8f11899735761b3b243cbd95401a54cb7c8","modified":1695356695507},{"_id":"public/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1695356695507},{"_id":"public/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1695356695507},{"_id":"public/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1695356695507},{"_id":"public/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1695356695507},{"_id":"public/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1695356695507}],"Category":[{"name":"js","_id":"clmu3lren000bmrojet7ibaz9"},{"name":"react","_id":"clmu3lrev000gmrojb9bm350x"},{"name":"react源码系列","parent":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrf90012mroj433y5uc2"},{"name":"git","_id":"clmu3lrfk001pmroj9zxphe4b"},{"name":"hexo","_id":"clmu3lrfq0026mrojhff69uio"},{"name":"react-router","_id":"clmu3lrfv002fmrojchq9ekh8"},{"name":"taro","_id":"clmu3lrfy002nmroj5u9c4xm4"},{"name":"typescript","_id":"clmu3lrg1002umrojgcju8z1v"},{"name":"electron","_id":"clmu3lrg60037mrojbww4h0rh"},{"name":"webpack","_id":"clmu3lrg9003hmrojex7i9ueh"},{"name":"js-xlsx","_id":"clmu3lrgc003nmroj1wy14nzx"},{"name":"css","_id":"clmu3lrge003vmrojay8q48rm"},{"name":"javascript","_id":"clmu3lrgh0042mroj8jp8267u"},{"name":"dumi","_id":"clmu3lrgl004cmrojet5853ew"},{"name":"jenkins","_id":"clmu3lrgo004kmroj31igdhc5"},{"name":"vue","parent":"clmu3lrg60037mrojbww4h0rh","_id":"clmu3lrgq004smrojcdeebbfz"},{"name":"antd","parent":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrgt004zmrojfgp2f1er"},{"name":"源码","_id":"clmu3lrgx0056mroj29t631sm"},{"name":"webpack","parent":"clmu3lrgq004smrojcdeebbfz","_id":"clmu3lrgz005dmrojfctk4cn1"},{"name":"正则","_id":"clmu3lrh3005mmroj3jzh46yf"}],"Data":[],"Page":[{"title":"关于","date":"2020-07-27T11:03:29.000Z","_content":"\n## 关于博客\n\n我使用的主题是[Chic](https://github.com/Siricee/hexo-theme-Chic), 该主题没有搜索，所以我自定义了一个搜索，具体操作可以看看[hexo自定义案例](https://chow_bill.gitee.io/2020/07/09/hexo%E8%87%AA%E5%AE%9A%E4%B9%89/)\n\n另外项目搭建在 [github](http://zhou-bill.github.io/) 和 [gitee](https://chow_bill.gitee.io/)\n\n## 关于我\n\n* **既然相遇是偶然，又何必在意分别时的突然**\n* 喜欢看电影(强推 《[毛骗](https://www.90ys.net/video/play/26076-1-1.html)》)，听歌，写代码, 看看书\n* 坚持每天一道[力扣题](https://leetcode-cn.com/u/zhou-bill/)\n* QQ: 735051883\n* wechat：735051883\n\n\n## 我关注的技术博客\n\n* [creeperyang](https://github.com/creeperyang/blog/issues)\n* [careteenL/blog](https://github.com/careteenL/blog)\n* [PDKSophia/blog.io](https://github.com/PDKSophia/blog.io)\n* [前端内参](https://coffe1891.gitbook.io/frontend-hard-mode-interview/)\n* [阿里大佬](https://github.com/brickspert/blog)\n* [js、es6专题](https://github.com/mqyqingfeng/Blog)\n* [九部知识库](https://github.com/frontend9/fe9-library)\n* [canvas](https://github.com/Aaaaaaaty/blog)\n* [yck](https://yuchengkai.cn/blog/)\n* [js-33个概念](https://github.com/stephentian/33-js-concepts)\n* [前端伪大叔](https://www.yuque.com/qdwds/ggo4wc/srw223)\n\n### 面试题\n* [js/css/html等等面试题汇总](https://github.com/hengxuZ/js-react-css-html-interview-question)\n* [【前端进阶】](https://github.com/YvetteLau/Blog)\n* [JavaScript Questions](https://github.com/lydiahallie/javascript-questions)\n* [js-react-css-html-interview-question](https://github.com/hengxuZ/js-react-css-html-interview-question)\n* [Weekly-FE-Interview](https://github.com/airuikun/Weekly-FE-Interview)\n\n### 源码系列\n\n* [vue](http://www.zhufengpeixun.cn/train/vue-info/source.html)\n* [react](https://react.jokcy.me/)\n\n### 正则表达式\n\n* [正则表达式](https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md)\n* [regexr-cn](https://regexr-cn.com/)\n* [正则练习网站](https://www.codejiaonang.com/)\n\n## 书籍\n\n* [《JavaScript 高级程序设计 - 第三版》](https://github.com/PDKSophia/read-booklist/blob/master/JavaScript%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AE%BE%E8%AE%A1)\n* [《深入浅出webpack》](https://webpack.wuhaolin.cn/)  写个脚本把弹出框删除即可继续阅读\n* [《剑指offer》](https://weread.qq.com/web/reader/1f132a805a61751f1674656)  微信读书\n* [《你不知道的Javascript》](https://weread.qq.com/web/reader/8c632230715c01a18c683d8) 微信读书 之前在github找到的，后来又没找到\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2020-07-27 11:03:29\n# layout: \n---\n\n## 关于博客\n\n我使用的主题是[Chic](https://github.com/Siricee/hexo-theme-Chic), 该主题没有搜索，所以我自定义了一个搜索，具体操作可以看看[hexo自定义案例](https://chow_bill.gitee.io/2020/07/09/hexo%E8%87%AA%E5%AE%9A%E4%B9%89/)\n\n另外项目搭建在 [github](http://zhou-bill.github.io/) 和 [gitee](https://chow_bill.gitee.io/)\n\n## 关于我\n\n* **既然相遇是偶然，又何必在意分别时的突然**\n* 喜欢看电影(强推 《[毛骗](https://www.90ys.net/video/play/26076-1-1.html)》)，听歌，写代码, 看看书\n* 坚持每天一道[力扣题](https://leetcode-cn.com/u/zhou-bill/)\n* QQ: 735051883\n* wechat：735051883\n\n\n## 我关注的技术博客\n\n* [creeperyang](https://github.com/creeperyang/blog/issues)\n* [careteenL/blog](https://github.com/careteenL/blog)\n* [PDKSophia/blog.io](https://github.com/PDKSophia/blog.io)\n* [前端内参](https://coffe1891.gitbook.io/frontend-hard-mode-interview/)\n* [阿里大佬](https://github.com/brickspert/blog)\n* [js、es6专题](https://github.com/mqyqingfeng/Blog)\n* [九部知识库](https://github.com/frontend9/fe9-library)\n* [canvas](https://github.com/Aaaaaaaty/blog)\n* [yck](https://yuchengkai.cn/blog/)\n* [js-33个概念](https://github.com/stephentian/33-js-concepts)\n* [前端伪大叔](https://www.yuque.com/qdwds/ggo4wc/srw223)\n\n### 面试题\n* [js/css/html等等面试题汇总](https://github.com/hengxuZ/js-react-css-html-interview-question)\n* [【前端进阶】](https://github.com/YvetteLau/Blog)\n* [JavaScript Questions](https://github.com/lydiahallie/javascript-questions)\n* [js-react-css-html-interview-question](https://github.com/hengxuZ/js-react-css-html-interview-question)\n* [Weekly-FE-Interview](https://github.com/airuikun/Weekly-FE-Interview)\n\n### 源码系列\n\n* [vue](http://www.zhufengpeixun.cn/train/vue-info/source.html)\n* [react](https://react.jokcy.me/)\n\n### 正则表达式\n\n* [正则表达式](https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md)\n* [regexr-cn](https://regexr-cn.com/)\n* [正则练习网站](https://www.codejiaonang.com/)\n\n## 书籍\n\n* [《JavaScript 高级程序设计 - 第三版》](https://github.com/PDKSophia/read-booklist/blob/master/JavaScript%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AE%BE%E8%AE%A1)\n* [《深入浅出webpack》](https://webpack.wuhaolin.cn/)  写个脚本把弹出框删除即可继续阅读\n* [《剑指offer》](https://weread.qq.com/web/reader/1f132a805a61751f1674656)  微信读书\n* [《你不知道的Javascript》](https://weread.qq.com/web/reader/8c632230715c01a18c683d8) 微信读书 之前在github找到的，后来又没找到\n\n\n\n","updated":"2023-09-22T04:24:26.120Z","path":"about/index.html","comments":1,"layout":"page","_id":"clmu3lreb0001mrojbdp6fe38","content":"<h2 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h2><p>我使用的主题是<a href=\"https://github.com/Siricee/hexo-theme-Chic\" target=\"_blank\" rel=\"noopener\">Chic</a>, 该主题没有搜索，所以我自定义了一个搜索，具体操作可以看看<a href=\"https://chow_bill.gitee.io/2020/07/09/hexo%E8%87%AA%E5%AE%9A%E4%B9%89/\" target=\"_blank\" rel=\"noopener\">hexo自定义案例</a></p>\n<p>另外项目搭建在 <a href=\"http://zhou-bill.github.io/\" target=\"_blank\" rel=\"noopener\">github</a> 和 <a href=\"https://chow_bill.gitee.io/\" target=\"_blank\" rel=\"noopener\">gitee</a></p>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><ul>\n<li><strong>既然相遇是偶然，又何必在意分别时的突然</strong></li>\n<li>喜欢看电影(强推 《<a href=\"https://www.90ys.net/video/play/26076-1-1.html\" target=\"_blank\" rel=\"noopener\">毛骗</a>》)，听歌，写代码, 看看书</li>\n<li>坚持每天一道<a href=\"https://leetcode-cn.com/u/zhou-bill/\" target=\"_blank\" rel=\"noopener\">力扣题</a></li>\n<li>QQ: 735051883</li>\n<li>wechat：735051883</li>\n</ul>\n<h2 id=\"我关注的技术博客\"><a href=\"#我关注的技术博客\" class=\"headerlink\" title=\"我关注的技术博客\"></a>我关注的技术博客</h2><ul>\n<li><a href=\"https://github.com/creeperyang/blog/issues\" target=\"_blank\" rel=\"noopener\">creeperyang</a></li>\n<li><a href=\"https://github.com/careteenL/blog\" target=\"_blank\" rel=\"noopener\">careteenL/blog</a></li>\n<li><a href=\"https://github.com/PDKSophia/blog.io\" target=\"_blank\" rel=\"noopener\">PDKSophia/blog.io</a></li>\n<li><a href=\"https://coffe1891.gitbook.io/frontend-hard-mode-interview/\" target=\"_blank\" rel=\"noopener\">前端内参</a></li>\n<li><a href=\"https://github.com/brickspert/blog\" target=\"_blank\" rel=\"noopener\">阿里大佬</a></li>\n<li><a href=\"https://github.com/mqyqingfeng/Blog\" target=\"_blank\" rel=\"noopener\">js、es6专题</a></li>\n<li><a href=\"https://github.com/frontend9/fe9-library\" target=\"_blank\" rel=\"noopener\">九部知识库</a></li>\n<li><a href=\"https://github.com/Aaaaaaaty/blog\" target=\"_blank\" rel=\"noopener\">canvas</a></li>\n<li><a href=\"https://yuchengkai.cn/blog/\" target=\"_blank\" rel=\"noopener\">yck</a></li>\n<li><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">js-33个概念</a></li>\n<li><a href=\"https://www.yuque.com/qdwds/ggo4wc/srw223\" target=\"_blank\" rel=\"noopener\">前端伪大叔</a></li>\n</ul>\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><ul>\n<li><a href=\"https://github.com/hengxuZ/js-react-css-html-interview-question\" target=\"_blank\" rel=\"noopener\">js/css/html等等面试题汇总</a></li>\n<li><a href=\"https://github.com/YvetteLau/Blog\" target=\"_blank\" rel=\"noopener\">【前端进阶】</a></li>\n<li><a href=\"https://github.com/lydiahallie/javascript-questions\" target=\"_blank\" rel=\"noopener\">JavaScript Questions</a></li>\n<li><a href=\"https://github.com/hengxuZ/js-react-css-html-interview-question\" target=\"_blank\" rel=\"noopener\">js-react-css-html-interview-question</a></li>\n<li><a href=\"https://github.com/airuikun/Weekly-FE-Interview\" target=\"_blank\" rel=\"noopener\">Weekly-FE-Interview</a></li>\n</ul>\n<h3 id=\"源码系列\"><a href=\"#源码系列\" class=\"headerlink\" title=\"源码系列\"></a>源码系列</h3><ul>\n<li><a href=\"http://www.zhufengpeixun.cn/train/vue-info/source.html\" target=\"_blank\" rel=\"noopener\">vue</a></li>\n<li><a href=\"https://react.jokcy.me/\" target=\"_blank\" rel=\"noopener\">react</a></li>\n</ul>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><ul>\n<li><a href=\"https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md\" target=\"_blank\" rel=\"noopener\">正则表达式</a></li>\n<li><a href=\"https://regexr-cn.com/\" target=\"_blank\" rel=\"noopener\">regexr-cn</a></li>\n<li><a href=\"https://www.codejiaonang.com/\" target=\"_blank\" rel=\"noopener\">正则练习网站</a></li>\n</ul>\n<h2 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h2><ul>\n<li><a href=\"https://github.com/PDKSophia/read-booklist/blob/master/JavaScript%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">《JavaScript 高级程序设计 - 第三版》</a></li>\n<li><a href=\"https://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">《深入浅出webpack》</a>  写个脚本把弹出框删除即可继续阅读</li>\n<li><a href=\"https://weread.qq.com/web/reader/1f132a805a61751f1674656\" target=\"_blank\" rel=\"noopener\">《剑指offer》</a>  微信读书</li>\n<li><a href=\"https://weread.qq.com/web/reader/8c632230715c01a18c683d8\" target=\"_blank\" rel=\"noopener\">《你不知道的Javascript》</a> 微信读书 之前在github找到的，后来又没找到</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h2><p>我使用的主题是<a href=\"https://github.com/Siricee/hexo-theme-Chic\" target=\"_blank\" rel=\"noopener\">Chic</a>, 该主题没有搜索，所以我自定义了一个搜索，具体操作可以看看<a href=\"https://chow_bill.gitee.io/2020/07/09/hexo%E8%87%AA%E5%AE%9A%E4%B9%89/\" target=\"_blank\" rel=\"noopener\">hexo自定义案例</a></p>\n<p>另外项目搭建在 <a href=\"http://zhou-bill.github.io/\" target=\"_blank\" rel=\"noopener\">github</a> 和 <a href=\"https://chow_bill.gitee.io/\" target=\"_blank\" rel=\"noopener\">gitee</a></p>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><ul>\n<li><strong>既然相遇是偶然，又何必在意分别时的突然</strong></li>\n<li>喜欢看电影(强推 《<a href=\"https://www.90ys.net/video/play/26076-1-1.html\" target=\"_blank\" rel=\"noopener\">毛骗</a>》)，听歌，写代码, 看看书</li>\n<li>坚持每天一道<a href=\"https://leetcode-cn.com/u/zhou-bill/\" target=\"_blank\" rel=\"noopener\">力扣题</a></li>\n<li>QQ: 735051883</li>\n<li>wechat：735051883</li>\n</ul>\n<h2 id=\"我关注的技术博客\"><a href=\"#我关注的技术博客\" class=\"headerlink\" title=\"我关注的技术博客\"></a>我关注的技术博客</h2><ul>\n<li><a href=\"https://github.com/creeperyang/blog/issues\" target=\"_blank\" rel=\"noopener\">creeperyang</a></li>\n<li><a href=\"https://github.com/careteenL/blog\" target=\"_blank\" rel=\"noopener\">careteenL/blog</a></li>\n<li><a href=\"https://github.com/PDKSophia/blog.io\" target=\"_blank\" rel=\"noopener\">PDKSophia/blog.io</a></li>\n<li><a href=\"https://coffe1891.gitbook.io/frontend-hard-mode-interview/\" target=\"_blank\" rel=\"noopener\">前端内参</a></li>\n<li><a href=\"https://github.com/brickspert/blog\" target=\"_blank\" rel=\"noopener\">阿里大佬</a></li>\n<li><a href=\"https://github.com/mqyqingfeng/Blog\" target=\"_blank\" rel=\"noopener\">js、es6专题</a></li>\n<li><a href=\"https://github.com/frontend9/fe9-library\" target=\"_blank\" rel=\"noopener\">九部知识库</a></li>\n<li><a href=\"https://github.com/Aaaaaaaty/blog\" target=\"_blank\" rel=\"noopener\">canvas</a></li>\n<li><a href=\"https://yuchengkai.cn/blog/\" target=\"_blank\" rel=\"noopener\">yck</a></li>\n<li><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">js-33个概念</a></li>\n<li><a href=\"https://www.yuque.com/qdwds/ggo4wc/srw223\" target=\"_blank\" rel=\"noopener\">前端伪大叔</a></li>\n</ul>\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><ul>\n<li><a href=\"https://github.com/hengxuZ/js-react-css-html-interview-question\" target=\"_blank\" rel=\"noopener\">js/css/html等等面试题汇总</a></li>\n<li><a href=\"https://github.com/YvetteLau/Blog\" target=\"_blank\" rel=\"noopener\">【前端进阶】</a></li>\n<li><a href=\"https://github.com/lydiahallie/javascript-questions\" target=\"_blank\" rel=\"noopener\">JavaScript Questions</a></li>\n<li><a href=\"https://github.com/hengxuZ/js-react-css-html-interview-question\" target=\"_blank\" rel=\"noopener\">js-react-css-html-interview-question</a></li>\n<li><a href=\"https://github.com/airuikun/Weekly-FE-Interview\" target=\"_blank\" rel=\"noopener\">Weekly-FE-Interview</a></li>\n</ul>\n<h3 id=\"源码系列\"><a href=\"#源码系列\" class=\"headerlink\" title=\"源码系列\"></a>源码系列</h3><ul>\n<li><a href=\"http://www.zhufengpeixun.cn/train/vue-info/source.html\" target=\"_blank\" rel=\"noopener\">vue</a></li>\n<li><a href=\"https://react.jokcy.me/\" target=\"_blank\" rel=\"noopener\">react</a></li>\n</ul>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><ul>\n<li><a href=\"https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md\" target=\"_blank\" rel=\"noopener\">正则表达式</a></li>\n<li><a href=\"https://regexr-cn.com/\" target=\"_blank\" rel=\"noopener\">regexr-cn</a></li>\n<li><a href=\"https://www.codejiaonang.com/\" target=\"_blank\" rel=\"noopener\">正则练习网站</a></li>\n</ul>\n<h2 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h2><ul>\n<li><a href=\"https://github.com/PDKSophia/read-booklist/blob/master/JavaScript%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">《JavaScript 高级程序设计 - 第三版》</a></li>\n<li><a href=\"https://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">《深入浅出webpack》</a>  写个脚本把弹出框删除即可继续阅读</li>\n<li><a href=\"https://weread.qq.com/web/reader/1f132a805a61751f1674656\" target=\"_blank\" rel=\"noopener\">《剑指offer》</a>  微信读书</li>\n<li><a href=\"https://weread.qq.com/web/reader/8c632230715c01a18c683d8\" target=\"_blank\" rel=\"noopener\">《你不知道的Javascript》</a> 微信读书 之前在github找到的，后来又没找到</li>\n</ul>\n"},{"title":"力扣","date":"2020-04-08T16:09:43.000Z","layout":"algorithm","_content":"","source":"algorithm/index.md","raw":"---\ntitle: 力扣\ndate: 2020-04-08 16:09:43\nlayout: algorithm\n---\n","updated":"2023-09-22T04:24:26.120Z","path":"algorithm/index.html","comments":1,"_id":"clmu3lree0003mroj0sy4ehgr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"category","date":"2020-04-08T16:12:55.000Z","layout":"category","_content":"","source":"category/index.md","raw":"---\ntitle: category\ndate: 2020-04-08 16:12:55\nlayout: category\n---\n","updated":"2023-09-22T04:24:26.120Z","path":"category/index.html","comments":1,"_id":"clmu3lrei0006mroj3dme1zl8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tag","date":"2020-04-08T16:09:43.000Z","layout":"tag","_content":"","source":"tag/index.md","raw":"---\ntitle: tag\ndate: 2020-04-08 16:09:43\nlayout: tag\n---\n","updated":"2023-09-22T04:24:26.120Z","path":"tag/index.html","comments":1,"_id":"clmu3lrek0008mrojbl7r5qvb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"108. 将有序数组转换为二叉搜索树","date":"2020-07-03T14:16:44.000Z","type":"algorithm","_content":"\n[108. 将有序数组转换为二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/)\n\n## 题目描述\n\n将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。\n\n本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。\n\n示例：\n\n```html\n给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n       0\n     /   \\\n   -3     9\n   / \\    /\n -10  n  5\n\n```\n\n我们再来看一个示例\n\n示例2:\n\n```html\nnums = [1,2,3,4,5,6,7,8,9,10,11,12], length = 12\n\n             7\n           /   \\\n          4     10\n         /  \\    / \\\n        2    6   9  12\n       / \\  / \\  /\\  /\n      1  3 5  n 8  n 11\n```\n\n\n\n## 分析\n\n上面 n 代表的是null, 我们直接看**示例2**的根节点的排列情况\n\n* 7 的index 为 `Math.floor(nums.length / 2)`\n    * 4 的index 为 1~7的一半， 我们称为左半边的一半\n    * 10 的index 为 8~12的一半，我们称为右半边的一半\n\n所以我们总结上面获取根节点的情况是`nums[Math.floor(nums.length / 2)]`,然后反复获取左右半数组进行截取，再获取根节点，这里是一次递归\n\n* 当nums.length 为0 的时候，我们返回null\n* 根节点的左边数组为左子节点，右数组为右子节点\n\n我们模拟一下`nums = [1,2,3]`的时候\n* 我们取`root = new TreeNode(nums[Math.floor(nums.length / 2)])`即为2当根节点。当前左数组为[1], 右半数组为[3]\n* 左节点 应该是左半数组组成的**左子树**, 左半数组剩下[1], 当前子树`root = new TreeNode(nums[Math.floor(nums.length / 2)])`, 所以根节点为1, 而后当前左右数组都为`[]`, 再来`root.left = 回到第一步 `\n  * 当前数组的长度为0, 所以`root.left = null`, 所以整个流程是`root = 2, root.left = 1, root.left.left = null`\n* 右节点跟左节点一样\n\n\n## 源码\n\n```jsx\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\nvar sortedArrayToBST = function(nums) {\n    //如果当前length 为奇数的话，那切一半，length / 2 + 1 为当前root，偶数为 length / 2\n    const root = half(nums)\n    return root;\n};\n\nvar half = function(nums) {\n    if(nums.length == 0) {\n        return null\n    }\n\n    const currentIndex = Math.floor(nums.length / 2);\n    const rootValue = nums[currentIndex];\n    const currentRoot = new TreeNode(rootValue)\n    // 分治\n    let left = nums.slice(0, currentIndex);\n    let right = nums.slice(currentIndex + 1);\n    currentRoot.left = half(left);\n    currentRoot.right = half(right);\n    return currentRoot;\n}\n```","source":"_posts/108-将有序数组转换为二叉搜索树.md","raw":"---\ntitle: 108. 将有序数组转换为二叉搜索树\ndate: 2020-07-03 14:16:44\ntype: algorithm\ntags: [algorithm-二叉树, algorithm-递归]\n---\n\n[108. 将有序数组转换为二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/)\n\n## 题目描述\n\n将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。\n\n本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。\n\n示例：\n\n```html\n给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n       0\n     /   \\\n   -3     9\n   / \\    /\n -10  n  5\n\n```\n\n我们再来看一个示例\n\n示例2:\n\n```html\nnums = [1,2,3,4,5,6,7,8,9,10,11,12], length = 12\n\n             7\n           /   \\\n          4     10\n         /  \\    / \\\n        2    6   9  12\n       / \\  / \\  /\\  /\n      1  3 5  n 8  n 11\n```\n\n\n\n## 分析\n\n上面 n 代表的是null, 我们直接看**示例2**的根节点的排列情况\n\n* 7 的index 为 `Math.floor(nums.length / 2)`\n    * 4 的index 为 1~7的一半， 我们称为左半边的一半\n    * 10 的index 为 8~12的一半，我们称为右半边的一半\n\n所以我们总结上面获取根节点的情况是`nums[Math.floor(nums.length / 2)]`,然后反复获取左右半数组进行截取，再获取根节点，这里是一次递归\n\n* 当nums.length 为0 的时候，我们返回null\n* 根节点的左边数组为左子节点，右数组为右子节点\n\n我们模拟一下`nums = [1,2,3]`的时候\n* 我们取`root = new TreeNode(nums[Math.floor(nums.length / 2)])`即为2当根节点。当前左数组为[1], 右半数组为[3]\n* 左节点 应该是左半数组组成的**左子树**, 左半数组剩下[1], 当前子树`root = new TreeNode(nums[Math.floor(nums.length / 2)])`, 所以根节点为1, 而后当前左右数组都为`[]`, 再来`root.left = 回到第一步 `\n  * 当前数组的长度为0, 所以`root.left = null`, 所以整个流程是`root = 2, root.left = 1, root.left.left = null`\n* 右节点跟左节点一样\n\n\n## 源码\n\n```jsx\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\nvar sortedArrayToBST = function(nums) {\n    //如果当前length 为奇数的话，那切一半，length / 2 + 1 为当前root，偶数为 length / 2\n    const root = half(nums)\n    return root;\n};\n\nvar half = function(nums) {\n    if(nums.length == 0) {\n        return null\n    }\n\n    const currentIndex = Math.floor(nums.length / 2);\n    const rootValue = nums[currentIndex];\n    const currentRoot = new TreeNode(rootValue)\n    // 分治\n    let left = nums.slice(0, currentIndex);\n    let right = nums.slice(currentIndex + 1);\n    currentRoot.left = half(left);\n    currentRoot.right = half(right);\n    return currentRoot;\n}\n```","slug":"108-将有序数组转换为二叉搜索树","published":1,"updated":"2023-09-22T04:24:26.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lre50000mroj5cma87vx","content":"<p><a href=\"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">108. 将有序数组转换为二叉搜索树</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p>\n<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p>\n<p>示例：</p>\n<pre class=\" language-html\"><code class=\"language-html\">给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n       0\n     /   \\\n   -3     9\n   / \\    /\n -10  n  5\n</code></pre>\n<p>我们再来看一个示例</p>\n<p>示例2:</p>\n<pre class=\" language-html\"><code class=\"language-html\">nums = [1,2,3,4,5,6,7,8,9,10,11,12], length = 12\n\n             7\n           /   \\\n          4     10\n         /  \\    / \\\n        2    6   9  12\n       / \\  / \\  /\\  /\n      1  3 5  n 8  n 11</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>上面 n 代表的是null, 我们直接看<strong>示例2</strong>的根节点的排列情况</p>\n<ul>\n<li>7 的index 为 <code>Math.floor(nums.length / 2)</code><ul>\n<li>4 的index 为 1~7的一半， 我们称为左半边的一半</li>\n<li>10 的index 为 8~12的一半，我们称为右半边的一半</li>\n</ul>\n</li>\n</ul>\n<p>所以我们总结上面获取根节点的情况是<code>nums[Math.floor(nums.length / 2)]</code>,然后反复获取左右半数组进行截取，再获取根节点，这里是一次递归</p>\n<ul>\n<li>当nums.length 为0 的时候，我们返回null</li>\n<li>根节点的左边数组为左子节点，右数组为右子节点</li>\n</ul>\n<p>我们模拟一下<code>nums = [1,2,3]</code>的时候</p>\n<ul>\n<li>我们取<code>root = new TreeNode(nums[Math.floor(nums.length / 2)])</code>即为2当根节点。当前左数组为[1], 右半数组为[3]</li>\n<li>左节点 应该是左半数组组成的<strong>左子树</strong>, 左半数组剩下[1], 当前子树<code>root = new TreeNode(nums[Math.floor(nums.length / 2)])</code>, 所以根节点为1, 而后当前左右数组都为<code>[]</code>, 再来<code>root.left = 回到第一步</code><ul>\n<li>当前数组的长度为0, 所以<code>root.left = null</code>, 所以整个流程是<code>root = 2, root.left = 1, root.left.left = null</code></li>\n</ul>\n</li>\n<li>右节点跟左节点一样</li>\n</ul>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n\n<span class=\"token keyword\">var</span> sortedArrayToBST <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果当前length 为奇数的话，那切一半，length / 2 + 1 为当前root，偶数为 length / 2</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">half</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> half <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> currentIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rootValue <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> currentRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>rootValue<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 分治</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>currentIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    currentRoot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">half</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    currentRoot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">half</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> currentRoot<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">108. 将有序数组转换为二叉搜索树</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p>\n<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p>\n<p>示例：</p>\n<pre><code class=\"html\">给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n       0\n     /   \\\n   -3     9\n   / \\    /\n -10  n  5\n</code></pre>\n<p>我们再来看一个示例</p>\n<p>示例2:</p>\n<pre><code class=\"html\">nums = [1,2,3,4,5,6,7,8,9,10,11,12], length = 12\n\n             7\n           /   \\\n          4     10\n         /  \\    / \\\n        2    6   9  12\n       / \\  / \\  /\\  /\n      1  3 5  n 8  n 11</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>上面 n 代表的是null, 我们直接看<strong>示例2</strong>的根节点的排列情况</p>\n<ul>\n<li>7 的index 为 <code>Math.floor(nums.length / 2)</code><ul>\n<li>4 的index 为 1~7的一半， 我们称为左半边的一半</li>\n<li>10 的index 为 8~12的一半，我们称为右半边的一半</li>\n</ul>\n</li>\n</ul>\n<p>所以我们总结上面获取根节点的情况是<code>nums[Math.floor(nums.length / 2)]</code>,然后反复获取左右半数组进行截取，再获取根节点，这里是一次递归</p>\n<ul>\n<li>当nums.length 为0 的时候，我们返回null</li>\n<li>根节点的左边数组为左子节点，右数组为右子节点</li>\n</ul>\n<p>我们模拟一下<code>nums = [1,2,3]</code>的时候</p>\n<ul>\n<li>我们取<code>root = new TreeNode(nums[Math.floor(nums.length / 2)])</code>即为2当根节点。当前左数组为[1], 右半数组为[3]</li>\n<li>左节点 应该是左半数组组成的<strong>左子树</strong>, 左半数组剩下[1], 当前子树<code>root = new TreeNode(nums[Math.floor(nums.length / 2)])</code>, 所以根节点为1, 而后当前左右数组都为<code>[]</code>, 再来<code>root.left = 回到第一步</code><ul>\n<li>当前数组的长度为0, 所以<code>root.left = null</code>, 所以整个流程是<code>root = 2, root.left = 1, root.left.left = null</code></li>\n</ul>\n</li>\n<li>右节点跟左节点一样</li>\n</ul>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><pre><code class=\"jsx\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\nvar sortedArrayToBST = function(nums) {\n    //如果当前length 为奇数的话，那切一半，length / 2 + 1 为当前root，偶数为 length / 2\n    const root = half(nums)\n    return root;\n};\n\nvar half = function(nums) {\n    if(nums.length == 0) {\n        return null\n    }\n\n    const currentIndex = Math.floor(nums.length / 2);\n    const rootValue = nums[currentIndex];\n    const currentRoot = new TreeNode(rootValue)\n    // 分治\n    let left = nums.slice(0, currentIndex);\n    let right = nums.slice(currentIndex + 1);\n    currentRoot.left = half(left);\n    currentRoot.right = half(right);\n    return currentRoot;\n}</code></pre>\n"},{"title":"63. 不同路径 II","date":"2020-07-06T14:53:49.000Z","type":"algorithm","_content":"\n[63. 不同路径 II](https://leetcode-cn.com/problems/unique-paths-ii/)\n\n## 题目描述\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n<a class=\"group\" rel=\"group1\" href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\">\n    <img style=\"margin-left: 0px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\" />\n</a>\n\n## 分析\n\n题目说明每次 **只能向下或者向右移动一步**。那么我们分析每次走到`a[m][n]` 只能从上面那个格子`a[m - 1][n]` 或者从左边那个格子`a[m][n - 1]`过来，我们定义 `a[m][n]`是到当前格子的有多少种路径数。 所以我们的递推公式是： `a[m][n] = a[m - 1][n] + a[m][n - 1]`;\n\n* **注意：** 第一行我们只能向右走， 第一列只能向下走。\n* 如果**上面**或者**左边**格子是障碍物， 那么当前格子应该是 0， 但其实也符合 `a[m][n] = a[m - 1][n] + a[m][n - 1]` 这个递推公式，这样我们判断格子是否是障碍物那么我们就设置为 0；\n\n\n## 代码\n\n```jsx\n/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\nvar uniquePathsWithObstacles = function(obstacleGrid) {\n    let result = [];\n    let row = obstacleGrid.length;\n    let column = obstacleGrid[0].length\n    // 递推公式是 result[i][j] = result[i][j - 1] + result[i - 1][j]\n    for(let i = 0; i < row; i++) {\n        if(typeof result[i] == 'undefined') {\n            result[i] = [];\n        }\n        for(let j = 0; j < column; j++) {\n            let temp = obstacleGrid[i][j]\n            if(i === 0 && j === 0) {\n                result[i][j] = temp === 1 ? 0 : 1;\n            }\n            // 第一行只能向右走, 并且判断一下当前是不是障碍物，是的话那么走到当前路线的次数应该为0\n            if(i === 0 && j > 0) {\n                let tempLeft = obstacleGrid[i][j - 1];\n                result[i][j] = tempLeft || temp ? 0 : result[i][j - 1] ;\n            }\n\n            // 第一列只能向下走，并且判断一下当前是不是障碍物\n            if(j === 0 && i > 0) {\n                let tempUp = obstacleGrid[i - 1][j];\n                result[i][j] = (tempUp || temp ? 0 : result[i- 1][j]);\n            }\n\n            if(i > 0 && j > 0) {\n                const up = result[i - 1][j];\n                const left = result[i][j - 1];\n                result[i][j] = temp == 1 ? 0 : ( up + left);\n            }\n        }\n    }\n    return result[row - 1][column - 1]\n};\n```\n","source":"_posts/63-不同路径-II.md","raw":"---\ntitle: 63. 不同路径 II\ndate: 2020-07-06 14:53:49\ntype: algorithm\ntags: algorithm-动态规划\n---\n\n[63. 不同路径 II](https://leetcode-cn.com/problems/unique-paths-ii/)\n\n## 题目描述\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n<a class=\"group\" rel=\"group1\" href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\">\n    <img style=\"margin-left: 0px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\" />\n</a>\n\n## 分析\n\n题目说明每次 **只能向下或者向右移动一步**。那么我们分析每次走到`a[m][n]` 只能从上面那个格子`a[m - 1][n]` 或者从左边那个格子`a[m][n - 1]`过来，我们定义 `a[m][n]`是到当前格子的有多少种路径数。 所以我们的递推公式是： `a[m][n] = a[m - 1][n] + a[m][n - 1]`;\n\n* **注意：** 第一行我们只能向右走， 第一列只能向下走。\n* 如果**上面**或者**左边**格子是障碍物， 那么当前格子应该是 0， 但其实也符合 `a[m][n] = a[m - 1][n] + a[m][n - 1]` 这个递推公式，这样我们判断格子是否是障碍物那么我们就设置为 0；\n\n\n## 代码\n\n```jsx\n/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\nvar uniquePathsWithObstacles = function(obstacleGrid) {\n    let result = [];\n    let row = obstacleGrid.length;\n    let column = obstacleGrid[0].length\n    // 递推公式是 result[i][j] = result[i][j - 1] + result[i - 1][j]\n    for(let i = 0; i < row; i++) {\n        if(typeof result[i] == 'undefined') {\n            result[i] = [];\n        }\n        for(let j = 0; j < column; j++) {\n            let temp = obstacleGrid[i][j]\n            if(i === 0 && j === 0) {\n                result[i][j] = temp === 1 ? 0 : 1;\n            }\n            // 第一行只能向右走, 并且判断一下当前是不是障碍物，是的话那么走到当前路线的次数应该为0\n            if(i === 0 && j > 0) {\n                let tempLeft = obstacleGrid[i][j - 1];\n                result[i][j] = tempLeft || temp ? 0 : result[i][j - 1] ;\n            }\n\n            // 第一列只能向下走，并且判断一下当前是不是障碍物\n            if(j === 0 && i > 0) {\n                let tempUp = obstacleGrid[i - 1][j];\n                result[i][j] = (tempUp || temp ? 0 : result[i- 1][j]);\n            }\n\n            if(i > 0 && j > 0) {\n                const up = result[i - 1][j];\n                const left = result[i][j - 1];\n                result[i][j] = temp == 1 ? 0 : ( up + left);\n            }\n        }\n    }\n    return result[row - 1][column - 1]\n};\n```\n","slug":"63-不同路径-II","published":1,"updated":"2023-09-22T04:24:26.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrec0002mroj6omua2ue","content":"<p><a href=\"https://leetcode-cn.com/problems/unique-paths-ii/\" target=\"_blank\" rel=\"noopener\">63. 不同路径 II</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。<br>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。<br>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<a class=\"group\" rel=\"group1 noopener\" href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\" target=\"_blank\">\n    <img style=\"margin-left: 0px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\">\n</a>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题目说明每次 <strong>只能向下或者向右移动一步</strong>。那么我们分析每次走到<code>a[m][n]</code> 只能从上面那个格子<code>a[m - 1][n]</code> 或者从左边那个格子<code>a[m][n - 1]</code>过来，我们定义 <code>a[m][n]</code>是到当前格子的有多少种路径数。 所以我们的递推公式是： <code>a[m][n] = a[m - 1][n] + a[m][n - 1]</code>;</p>\n<ul>\n<li><strong>注意：</strong> 第一行我们只能向右走， 第一列只能向下走。</li>\n<li>如果<strong>上面</strong>或者<strong>左边</strong>格子是障碍物， 那么当前格子应该是 0， 但其实也符合 <code>a[m][n] = a[m - 1][n] + a[m][n - 1]</code> 这个递推公式，这样我们判断格子是否是障碍物那么我们就设置为 0；</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> uniquePathsWithObstacles <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>obstacleGrid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> obstacleGrid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> column <span class=\"token operator\">=</span> obstacleGrid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length\n    <span class=\"token comment\" spellcheck=\"true\">// 递推公式是 result[i][j] = result[i][j - 1] + result[i - 1][j]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> row<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> column<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> obstacleGrid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 第一行只能向右走, 并且判断一下当前是不是障碍物，是的话那么走到当前路线的次数应该为0</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> tempLeft <span class=\"token operator\">=</span> obstacleGrid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempLeft <span class=\"token operator\">||</span> temp <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 第一列只能向下走，并且判断一下当前是不是障碍物</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> tempUp <span class=\"token operator\">=</span> obstacleGrid<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tempUp <span class=\"token operator\">||</span> temp <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> up <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span> up <span class=\"token operator\">+</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">[</span>row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/unique-paths-ii/\" target=\"_blank\" rel=\"noopener\">63. 不同路径 II</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。<br>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。<br>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<a class=\"group\" rel=\"group1 noopener\" href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\" target=\"_blank\">\n    <img style=\"margin-left: 0px\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\">\n</a>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题目说明每次 <strong>只能向下或者向右移动一步</strong>。那么我们分析每次走到<code>a[m][n]</code> 只能从上面那个格子<code>a[m - 1][n]</code> 或者从左边那个格子<code>a[m][n - 1]</code>过来，我们定义 <code>a[m][n]</code>是到当前格子的有多少种路径数。 所以我们的递推公式是： <code>a[m][n] = a[m - 1][n] + a[m][n - 1]</code>;</p>\n<ul>\n<li><strong>注意：</strong> 第一行我们只能向右走， 第一列只能向下走。</li>\n<li>如果<strong>上面</strong>或者<strong>左边</strong>格子是障碍物， 那么当前格子应该是 0， 但其实也符合 <code>a[m][n] = a[m - 1][n] + a[m][n - 1]</code> 这个递推公式，这样我们判断格子是否是障碍物那么我们就设置为 0；</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"jsx\">/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\nvar uniquePathsWithObstacles = function(obstacleGrid) {\n    let result = [];\n    let row = obstacleGrid.length;\n    let column = obstacleGrid[0].length\n    // 递推公式是 result[i][j] = result[i][j - 1] + result[i - 1][j]\n    for(let i = 0; i &lt; row; i++) {\n        if(typeof result[i] == &#39;undefined&#39;) {\n            result[i] = [];\n        }\n        for(let j = 0; j &lt; column; j++) {\n            let temp = obstacleGrid[i][j]\n            if(i === 0 &amp;&amp; j === 0) {\n                result[i][j] = temp === 1 ? 0 : 1;\n            }\n            // 第一行只能向右走, 并且判断一下当前是不是障碍物，是的话那么走到当前路线的次数应该为0\n            if(i === 0 &amp;&amp; j &gt; 0) {\n                let tempLeft = obstacleGrid[i][j - 1];\n                result[i][j] = tempLeft || temp ? 0 : result[i][j - 1] ;\n            }\n\n            // 第一列只能向下走，并且判断一下当前是不是障碍物\n            if(j === 0 &amp;&amp; i &gt; 0) {\n                let tempUp = obstacleGrid[i - 1][j];\n                result[i][j] = (tempUp || temp ? 0 : result[i- 1][j]);\n            }\n\n            if(i &gt; 0 &amp;&amp; j &gt; 0) {\n                const up = result[i - 1][j];\n                const left = result[i][j - 1];\n                result[i][j] = temp == 1 ? 0 : ( up + left);\n            }\n        }\n    }\n    return result[row - 1][column - 1]\n};</code></pre>\n"},{"title":"841. 钥匙和房间","date":"2020-08-31T15:32:23.000Z","type":"algorithm","_content":"\n[841. 钥匙和房间](https://leetcode-cn.com/problems/keys-and-rooms/)\n\n\n## 题目描述\n\n简单说： 就是给定一个二维数组rooms， `rooms[i]` 代表的是房间，房间内有n把钥匙 `rooms[i][j]`, 获得所有房间内的钥匙后能不能把房间都打开\n\n\n### 示例1\n\n```html\n输入: [[1],[2],[3],[]]\n输出: true\n解释:  \n我们从 0 号房间开始，拿到钥匙 1。\n之后我们去 1 号房间，拿到钥匙 2。\n然后我们去 2 号房间，拿到钥匙 3。\n最后我们去了 3 号房间。\n由于我们能够进入每个房间，我们返回 true。\n```\n\n### 示例2\n\n```html\n输入：[[1,3],[3,0,1],[2],[0]]\n输出：false\n解释：我们不能进入 2 号房间。\n```\n\n## 分析\n\n### 方法一\n\n直接暴力破解， 就是遍历数组，把数组中的值放到 `Set` 里面，然后最后遍历一次状态数组即可\n\n### 方法二\n\n用递归\n\n* 建立状态机。\n* 建立递归函数\n    * 当 当前房间的状态为 `true` 的时候，那么 表示这个房间已经进来过了，所以不用再继续遍历了\n    * 当 当前房间的状态为 `false`的时候，那么表示当前房间没去过，把当前房间设置为`true`, 然后遍历当前房间的钥匙，继续递归\n* 最后，遍历上面的状态机，如果有一个为false, 那么`返回false`，只有全部为true才`返回false`\n\n\n## 代码\n\n```js\n/**\n * @param {number[][]} rooms\n * @return {boolean}\n */\nvar canVisitAllRooms = function(rooms) {\n    let length = rooms.length;\n    let result = Array(length).fill(false);\n\n    setStatus(result, rooms, 0);\n\n    for(let i = 0; i < result.length; i++) {\n        if(!result[i]) {\n            return false\n        }\n    }\n    return true\n};\n\nvar setStatus = function(result, rooms, roomId) {\n    if(result[roomId]) {\n        return ;\n    }\n\n    const roomData = rooms[roomId];\n    result[roomId] = true\n    for(let i = 0; i < roomData.length; i++) {\n        setStatus(result, rooms, roomData[i])\n    }\n\n}\n```\n","source":"_posts/841-钥匙和房间.md","raw":"---\ntitle: 841. 钥匙和房间\ndate: 2020-08-31 15:32:23\ntags: [algorithm-递归, algorithm-深度遍历搜索]\ntype: algorithm\n---\n\n[841. 钥匙和房间](https://leetcode-cn.com/problems/keys-and-rooms/)\n\n\n## 题目描述\n\n简单说： 就是给定一个二维数组rooms， `rooms[i]` 代表的是房间，房间内有n把钥匙 `rooms[i][j]`, 获得所有房间内的钥匙后能不能把房间都打开\n\n\n### 示例1\n\n```html\n输入: [[1],[2],[3],[]]\n输出: true\n解释:  \n我们从 0 号房间开始，拿到钥匙 1。\n之后我们去 1 号房间，拿到钥匙 2。\n然后我们去 2 号房间，拿到钥匙 3。\n最后我们去了 3 号房间。\n由于我们能够进入每个房间，我们返回 true。\n```\n\n### 示例2\n\n```html\n输入：[[1,3],[3,0,1],[2],[0]]\n输出：false\n解释：我们不能进入 2 号房间。\n```\n\n## 分析\n\n### 方法一\n\n直接暴力破解， 就是遍历数组，把数组中的值放到 `Set` 里面，然后最后遍历一次状态数组即可\n\n### 方法二\n\n用递归\n\n* 建立状态机。\n* 建立递归函数\n    * 当 当前房间的状态为 `true` 的时候，那么 表示这个房间已经进来过了，所以不用再继续遍历了\n    * 当 当前房间的状态为 `false`的时候，那么表示当前房间没去过，把当前房间设置为`true`, 然后遍历当前房间的钥匙，继续递归\n* 最后，遍历上面的状态机，如果有一个为false, 那么`返回false`，只有全部为true才`返回false`\n\n\n## 代码\n\n```js\n/**\n * @param {number[][]} rooms\n * @return {boolean}\n */\nvar canVisitAllRooms = function(rooms) {\n    let length = rooms.length;\n    let result = Array(length).fill(false);\n\n    setStatus(result, rooms, 0);\n\n    for(let i = 0; i < result.length; i++) {\n        if(!result[i]) {\n            return false\n        }\n    }\n    return true\n};\n\nvar setStatus = function(result, rooms, roomId) {\n    if(result[roomId]) {\n        return ;\n    }\n\n    const roomData = rooms[roomId];\n    result[roomId] = true\n    for(let i = 0; i < roomData.length; i++) {\n        setStatus(result, rooms, roomData[i])\n    }\n\n}\n```\n","slug":"841-钥匙和房间","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lreh0005mroj7kcoadmf","content":"<p><a href=\"https://leetcode-cn.com/problems/keys-and-rooms/\" target=\"_blank\" rel=\"noopener\">841. 钥匙和房间</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>简单说： 就是给定一个二维数组rooms， <code>rooms[i]</code> 代表的是房间，房间内有n把钥匙 <code>rooms[i][j]</code>, 获得所有房间内的钥匙后能不能把房间都打开</p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><pre class=\" language-html\"><code class=\"language-html\">输入: [[1],[2],[3],[]]\n输出: true\n解释:  \n我们从 0 号房间开始，拿到钥匙 1。\n之后我们去 1 号房间，拿到钥匙 2。\n然后我们去 2 号房间，拿到钥匙 3。\n最后我们去了 3 号房间。\n由于我们能够进入每个房间，我们返回 true。</code></pre>\n<h3 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h3><pre class=\" language-html\"><code class=\"language-html\">输入：[[1,3],[3,0,1],[2],[0]]\n输出：false\n解释：我们不能进入 2 号房间。</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>直接暴力破解， 就是遍历数组，把数组中的值放到 <code>Set</code> 里面，然后最后遍历一次状态数组即可</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>用递归</p>\n<ul>\n<li>建立状态机。</li>\n<li>建立递归函数<ul>\n<li>当 当前房间的状态为 <code>true</code> 的时候，那么 表示这个房间已经进来过了，所以不用再继续遍历了</li>\n<li>当 当前房间的状态为 <code>false</code>的时候，那么表示当前房间没去过，把当前房间设置为<code>true</code>, 然后遍历当前房间的钥匙，继续递归</li>\n</ul>\n</li>\n<li>最后，遍历上面的状态机，如果有一个为false, 那么<code>返回false</code>，只有全部为true才<code>返回false</code></li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {number[][]} rooms\n * @return {boolean}\n */</span>\n<span class=\"token keyword\">var</span> canVisitAllRooms <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>rooms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> rooms<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> rooms<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> result<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> setStatus <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> rooms<span class=\"token punctuation\">,</span> roomId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span>roomId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> roomData <span class=\"token operator\">=</span> rooms<span class=\"token punctuation\">[</span>roomId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">[</span>roomId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> roomData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> rooms<span class=\"token punctuation\">,</span> roomData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/keys-and-rooms/\" target=\"_blank\" rel=\"noopener\">841. 钥匙和房间</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>简单说： 就是给定一个二维数组rooms， <code>rooms[i]</code> 代表的是房间，房间内有n把钥匙 <code>rooms[i][j]</code>, 获得所有房间内的钥匙后能不能把房间都打开</p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><pre><code class=\"html\">输入: [[1],[2],[3],[]]\n输出: true\n解释:  \n我们从 0 号房间开始，拿到钥匙 1。\n之后我们去 1 号房间，拿到钥匙 2。\n然后我们去 2 号房间，拿到钥匙 3。\n最后我们去了 3 号房间。\n由于我们能够进入每个房间，我们返回 true。</code></pre>\n<h3 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h3><pre><code class=\"html\">输入：[[1,3],[3,0,1],[2],[0]]\n输出：false\n解释：我们不能进入 2 号房间。</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>直接暴力破解， 就是遍历数组，把数组中的值放到 <code>Set</code> 里面，然后最后遍历一次状态数组即可</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>用递归</p>\n<ul>\n<li>建立状态机。</li>\n<li>建立递归函数<ul>\n<li>当 当前房间的状态为 <code>true</code> 的时候，那么 表示这个房间已经进来过了，所以不用再继续遍历了</li>\n<li>当 当前房间的状态为 <code>false</code>的时候，那么表示当前房间没去过，把当前房间设置为<code>true</code>, 然后遍历当前房间的钥匙，继续递归</li>\n</ul>\n</li>\n<li>最后，遍历上面的状态机，如果有一个为false, 那么<code>返回false</code>，只有全部为true才<code>返回false</code></li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">/**\n * @param {number[][]} rooms\n * @return {boolean}\n */\nvar canVisitAllRooms = function(rooms) {\n    let length = rooms.length;\n    let result = Array(length).fill(false);\n\n    setStatus(result, rooms, 0);\n\n    for(let i = 0; i &lt; result.length; i++) {\n        if(!result[i]) {\n            return false\n        }\n    }\n    return true\n};\n\nvar setStatus = function(result, rooms, roomId) {\n    if(result[roomId]) {\n        return ;\n    }\n\n    const roomData = rooms[roomId];\n    result[roomId] = true\n    for(let i = 0; i &lt; roomData.length; i++) {\n        setStatus(result, rooms, roomData[i])\n    }\n\n}</code></pre>\n"},{"title":"AND(A,B,OR(C,D,E)) 转换","date":"2023-04-04T10:20:00.000Z","_content":"\n## 背景\n\n一天，朋友问我 `AND(A,B,OR(C,D,E))` 该怎么转换成 `A&B&(C|D|E)`, 当时回复他用栈就可以了吧，后来自己实现了一下，\n才发现没这么简单。下面是我实现的思路：\n\n* 先把符号入栈，这里的符号指的是 `AND` 或者是 `OR` 转换成 `&` 或 `|`, 我们每次拿栈顶的符号进行括号内的转换就行了\n* 遇到`（` 就将`里面的值` 加进数组中，遇到 `)`就将`这个数组`入栈， 我们称这个叫数据栈\n* 最后将数据栈与符号栈结合\n\n以下是完整代码：\n\n## 代码\n\n```js\n// console.log(convertString('AND(A,B,OR(C,D,E))')); // \"A&B&(C|D|E)\"我想实现这个convertstring有什么好的思路吗\nfunction merge(a, b) {\n  function mergeExpr(arr, sep, level) {\n    if (arr.length === 0) {\n      return ''\n    }\n    const target = arr.splice(0, 1)[0]\n    const current = target + (arr.length > 0 ? sep : '')\n    return current + (arr.length > 0 ? '(' + mergeExpr(arr, b[level + 1], level + 1) + ')' : '')\n  }\n  return mergeExpr(a, b[0], 0)\n}\n\nconst convertString = (string) => {\n  const length =  string.length\n\n  const MAP = {\n    'AND': '&',\n    'OR': '|'\n  }\n\n  // 记录符号\n  const stack1 = []\n\n  //记录数据， 每一个（） 里面的数据 都是一个数组， 所以他是一个二维数组\n  const stack2 = []\n\n  // 表示栈中的层级 没遇到一个（ 就加一， 遇到 ） 就减一\n  let level = -1;\n  let tempString = ''\n  for (let i = 0; i < length - 1; i++) {\n    const nextChar =  string[i + 1]\n    const currentChar =  string[i]\n\n    if (currentChar === '(' || currentChar === ',' || currentChar === ')') {\n      continue\n    }\n    tempString = tempString + currentChar\n\n    // 如果下一个是字母 是 （  那么就是一个完整的字符串, 也就是 AND 或者 OR\n    if (nextChar === '(') {\n      level = level + 1\n      stack2.push([])\n      stack1.push(MAP[tempString])\n      tempString = ''\n      continue\n    } else if (nextChar === ',') {\n      const topData = stack2[level]\n      topData.push(tempString)\n      tempString = ''\n    } else if (nextChar === ')') {\n      const topData = stack2[level]\n      topData.push(tempString)\n      tempString = ''\n      level = level - 1\n    }\n  }\n\n  const k = []\n  for (let i = 0; i < stack1.length; i++) {\n    const character = stack1[i]\n    k.push(`${stack2[i].join(character)}`)\n  }\n  return merge(k, stack1.slice(0, -1))\n}\n\nconst a = convertString('AND(A,B,OR(C,D,E,AND(F,G)))')\nconst b = convertString('OR(AND(A,B,C),D,E)')\nconst c = convertString('AND(A,B,J,OR(C,D,E,AND(F,G),K))')\n\nconsole.log(a)\nconsole.log(b)\nconsole.log(c)\n\n```\n\n## 第二版\n\n上面那版是有bug， 以下这一版是通过 通过递归的操作， 获取括号内的内容， 进行操作，如果还有括号，那么继续进行递归\n\n\n```jsx\nfunction convertString(string) {\n  const MAP = {\n    'AND': '&',\n    'OR': '|'\n  }\n\n  function calculate(string, character) {\n    const length = string.length;\n    let res = '' \n    let tempString = ''\n    let tempCharacter = character\n\n    for (let i = 0; i < length; i++) {\n      const currentChar = string[i];\n      const nextChar = string[i + 1] ;\n\n      if (currentChar === '(') {\n        let j = i;\n        let cnt = 0\n        for (;i < length; i++) {\n          if (string[i] === '(') ++cnt;\n          if (string[i] === ')') --cnt;\n          if (cnt === 0) break;\n        }\n        res +=  '(' + calculate(string.substring(j + 1, i), tempCharacter) + ')';\n        // 如果递归后，后面仍然有其他内容，那么添加上当前的 符号\n        res += i < length - 1 ? character : ''\n        tempString = ''\n        tempCharacter = character\n        continue\n      }\n\n      if (currentChar === ',') {\n        continue\n      }\n\n      tempString += currentChar;\n\n      if (nextChar === '(') {\n        tempCharacter = MAP[tempString];\n        tempString = ''\n        continue\n      }\n\n      if (nextChar === ',') {\n        res += tempString + tempCharacter\n        tempString = ''\n        continue\n      }\n\n      if (nextChar === ')' || typeof nextChar === 'undefined') {\n        res += tempString\n        tempString = ''\n      }\n    }\n\n    return res\n  }\n\n  const final = calculate(string, \"\")\n\n  return final.slice(1, -1)\n}\n\nconst a = convertString('AND(A,B,OR(C,D,E,AND(F,G)))');\nconst e = convertString('OR(AND(A,B,OR(C,D,E,AND(F,G))),I,OR(AND(A,B,C),D,E))');\n\nconst b = convertString('OR(AND(A,B,C),D,E)');\n\nconst d = convertString('OR(AND(A,B),AND(C,D))');\nconst c = convertString('AND(A,B,J,OR(C,D,E,AND(F,G),K))');\n\n\n```","source":"_posts/AND(A,B,OR(C,D,E)).md","raw":"---\ntitle: AND(A,B,OR(C,D,E)) 转换\ndate: 2023-04-04 10:20:00\ntags: js\ncategory: [js]\n---\n\n## 背景\n\n一天，朋友问我 `AND(A,B,OR(C,D,E))` 该怎么转换成 `A&B&(C|D|E)`, 当时回复他用栈就可以了吧，后来自己实现了一下，\n才发现没这么简单。下面是我实现的思路：\n\n* 先把符号入栈，这里的符号指的是 `AND` 或者是 `OR` 转换成 `&` 或 `|`, 我们每次拿栈顶的符号进行括号内的转换就行了\n* 遇到`（` 就将`里面的值` 加进数组中，遇到 `)`就将`这个数组`入栈， 我们称这个叫数据栈\n* 最后将数据栈与符号栈结合\n\n以下是完整代码：\n\n## 代码\n\n```js\n// console.log(convertString('AND(A,B,OR(C,D,E))')); // \"A&B&(C|D|E)\"我想实现这个convertstring有什么好的思路吗\nfunction merge(a, b) {\n  function mergeExpr(arr, sep, level) {\n    if (arr.length === 0) {\n      return ''\n    }\n    const target = arr.splice(0, 1)[0]\n    const current = target + (arr.length > 0 ? sep : '')\n    return current + (arr.length > 0 ? '(' + mergeExpr(arr, b[level + 1], level + 1) + ')' : '')\n  }\n  return mergeExpr(a, b[0], 0)\n}\n\nconst convertString = (string) => {\n  const length =  string.length\n\n  const MAP = {\n    'AND': '&',\n    'OR': '|'\n  }\n\n  // 记录符号\n  const stack1 = []\n\n  //记录数据， 每一个（） 里面的数据 都是一个数组， 所以他是一个二维数组\n  const stack2 = []\n\n  // 表示栈中的层级 没遇到一个（ 就加一， 遇到 ） 就减一\n  let level = -1;\n  let tempString = ''\n  for (let i = 0; i < length - 1; i++) {\n    const nextChar =  string[i + 1]\n    const currentChar =  string[i]\n\n    if (currentChar === '(' || currentChar === ',' || currentChar === ')') {\n      continue\n    }\n    tempString = tempString + currentChar\n\n    // 如果下一个是字母 是 （  那么就是一个完整的字符串, 也就是 AND 或者 OR\n    if (nextChar === '(') {\n      level = level + 1\n      stack2.push([])\n      stack1.push(MAP[tempString])\n      tempString = ''\n      continue\n    } else if (nextChar === ',') {\n      const topData = stack2[level]\n      topData.push(tempString)\n      tempString = ''\n    } else if (nextChar === ')') {\n      const topData = stack2[level]\n      topData.push(tempString)\n      tempString = ''\n      level = level - 1\n    }\n  }\n\n  const k = []\n  for (let i = 0; i < stack1.length; i++) {\n    const character = stack1[i]\n    k.push(`${stack2[i].join(character)}`)\n  }\n  return merge(k, stack1.slice(0, -1))\n}\n\nconst a = convertString('AND(A,B,OR(C,D,E,AND(F,G)))')\nconst b = convertString('OR(AND(A,B,C),D,E)')\nconst c = convertString('AND(A,B,J,OR(C,D,E,AND(F,G),K))')\n\nconsole.log(a)\nconsole.log(b)\nconsole.log(c)\n\n```\n\n## 第二版\n\n上面那版是有bug， 以下这一版是通过 通过递归的操作， 获取括号内的内容， 进行操作，如果还有括号，那么继续进行递归\n\n\n```jsx\nfunction convertString(string) {\n  const MAP = {\n    'AND': '&',\n    'OR': '|'\n  }\n\n  function calculate(string, character) {\n    const length = string.length;\n    let res = '' \n    let tempString = ''\n    let tempCharacter = character\n\n    for (let i = 0; i < length; i++) {\n      const currentChar = string[i];\n      const nextChar = string[i + 1] ;\n\n      if (currentChar === '(') {\n        let j = i;\n        let cnt = 0\n        for (;i < length; i++) {\n          if (string[i] === '(') ++cnt;\n          if (string[i] === ')') --cnt;\n          if (cnt === 0) break;\n        }\n        res +=  '(' + calculate(string.substring(j + 1, i), tempCharacter) + ')';\n        // 如果递归后，后面仍然有其他内容，那么添加上当前的 符号\n        res += i < length - 1 ? character : ''\n        tempString = ''\n        tempCharacter = character\n        continue\n      }\n\n      if (currentChar === ',') {\n        continue\n      }\n\n      tempString += currentChar;\n\n      if (nextChar === '(') {\n        tempCharacter = MAP[tempString];\n        tempString = ''\n        continue\n      }\n\n      if (nextChar === ',') {\n        res += tempString + tempCharacter\n        tempString = ''\n        continue\n      }\n\n      if (nextChar === ')' || typeof nextChar === 'undefined') {\n        res += tempString\n        tempString = ''\n      }\n    }\n\n    return res\n  }\n\n  const final = calculate(string, \"\")\n\n  return final.slice(1, -1)\n}\n\nconst a = convertString('AND(A,B,OR(C,D,E,AND(F,G)))');\nconst e = convertString('OR(AND(A,B,OR(C,D,E,AND(F,G))),I,OR(AND(A,B,C),D,E))');\n\nconst b = convertString('OR(AND(A,B,C),D,E)');\n\nconst d = convertString('OR(AND(A,B),AND(C,D))');\nconst c = convertString('AND(A,B,J,OR(C,D,E,AND(F,G),K))');\n\n\n```","slug":"AND(A,B,OR(C,D,E))","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrej0007mroj0gmv46r8","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>一天，朋友问我 <code>AND(A,B,OR(C,D,E))</code> 该怎么转换成 <code>A&amp;B&amp;(C|D|E)</code>, 当时回复他用栈就可以了吧，后来自己实现了一下，<br>才发现没这么简单。下面是我实现的思路：</p>\n<ul>\n<li>先把符号入栈，这里的符号指的是 <code>AND</code> 或者是 <code>OR</code> 转换成 <code>&amp;</code> 或 <code>|</code>, 我们每次拿栈顶的符号进行括号内的转换就行了</li>\n<li>遇到<code>（</code> 就将<code>里面的值</code> 加进数组中，遇到 <code>)</code>就将<code>这个数组</code>入栈， 我们称这个叫数据栈</li>\n<li>最后将数据栈与符号栈结合</li>\n</ul>\n<p>以下是完整代码：</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// console.log(convertString('AND(A,B,OR(C,D,E))')); // \"A&amp;B&amp;(C|D|E)\"我想实现这个convertstring有什么好的思路吗</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">mergeExpr</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> sep<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> target <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> sep <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> current <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">'('</span> <span class=\"token operator\">+</span> <span class=\"token function\">mergeExpr</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mergeExpr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> convertString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span>  string<span class=\"token punctuation\">.</span>length\n\n  <span class=\"token keyword\">const</span> MAP <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'AND'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'OR'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'|'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 记录符号</span>\n  <span class=\"token keyword\">const</span> stack1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">//记录数据， 每一个（） 里面的数据 都是一个数组， 所以他是一个二维数组</span>\n  <span class=\"token keyword\">const</span> stack2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 表示栈中的层级 没遇到一个（ 就加一， 遇到 ） 就减一</span>\n  <span class=\"token keyword\">let</span> level <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> tempString <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> nextChar <span class=\"token operator\">=</span>  string<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> currentChar <span class=\"token operator\">=</span>  string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentChar <span class=\"token operator\">===</span> <span class=\"token string\">'('</span> <span class=\"token operator\">||</span> currentChar <span class=\"token operator\">===</span> <span class=\"token string\">','</span> <span class=\"token operator\">||</span> currentChar <span class=\"token operator\">===</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n    tempString <span class=\"token operator\">=</span> tempString <span class=\"token operator\">+</span> currentChar\n\n    <span class=\"token comment\" spellcheck=\"true\">// 如果下一个是字母 是 （  那么就是一个完整的字符串, 也就是 AND 或者 OR</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextChar <span class=\"token operator\">===</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      level <span class=\"token operator\">=</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>MAP<span class=\"token punctuation\">[</span>tempString<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      tempString <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextChar <span class=\"token operator\">===</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> topData <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span>\n      topData<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tempString<span class=\"token punctuation\">)</span>\n      tempString <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextChar <span class=\"token operator\">===</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> topData <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span>\n      topData<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tempString<span class=\"token punctuation\">)</span>\n      tempString <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n      level <span class=\"token operator\">=</span> level <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> k <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stack1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> character <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    k<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>stack2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> stack1<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">convertString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AND(A,B,OR(C,D,E,AND(F,G)))'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">convertString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OR(AND(A,B,C),D,E)'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token function\">convertString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AND(A,B,J,OR(C,D,E,AND(F,G),K))'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"第二版\"><a href=\"#第二版\" class=\"headerlink\" title=\"第二版\"></a>第二版</h2><p>上面那版是有bug， 以下这一版是通过 通过递归的操作， 获取括号内的内容， 进行操作，如果还有括号，那么继续进行递归</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertString</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> MAP <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'AND'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'OR'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'|'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> character<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">''</span> \n    <span class=\"token keyword\">let</span> tempString <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">let</span> tempCharacter <span class=\"token operator\">=</span> character\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> currentChar <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> nextChar <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentChar <span class=\"token operator\">===</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span>cnt<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span>  <span class=\"token string\">'('</span> <span class=\"token operator\">+</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tempCharacter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 如果递归后，后面仍然有其他内容，那么添加上当前的 符号</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> character <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n        tempString <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n        tempCharacter <span class=\"token operator\">=</span> character\n        <span class=\"token keyword\">continue</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentChar <span class=\"token operator\">===</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span>\n      <span class=\"token punctuation\">}</span>\n\n      tempString <span class=\"token operator\">+</span><span class=\"token operator\">=</span> currentChar<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextChar <span class=\"token operator\">===</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        tempCharacter <span class=\"token operator\">=</span> MAP<span class=\"token punctuation\">[</span>tempString<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        tempString <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n        <span class=\"token keyword\">continue</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextChar <span class=\"token operator\">===</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tempString <span class=\"token operator\">+</span> tempCharacter\n        tempString <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n        <span class=\"token keyword\">continue</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextChar <span class=\"token operator\">===</span> <span class=\"token string\">')'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> nextChar <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tempString\n        tempString <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> final <span class=\"token operator\">=</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> final<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">convertString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AND(A,B,OR(C,D,E,AND(F,G)))'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token function\">convertString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OR(AND(A,B,OR(C,D,E,AND(F,G))),I,OR(AND(A,B,C),D,E))'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">convertString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OR(AND(A,B,C),D,E)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> <span class=\"token function\">convertString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OR(AND(A,B),AND(C,D))'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token function\">convertString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AND(A,B,J,OR(C,D,E,AND(F,G),K))'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>一天，朋友问我 <code>AND(A,B,OR(C,D,E))</code> 该怎么转换成 <code>A&amp;B&amp;(C|D|E)</code>, 当时回复他用栈就可以了吧，后来自己实现了一下，<br>才发现没这么简单。下面是我实现的思路：</p>\n<ul>\n<li>先把符号入栈，这里的符号指的是 <code>AND</code> 或者是 <code>OR</code> 转换成 <code>&amp;</code> 或 <code>|</code>, 我们每次拿栈顶的符号进行括号内的转换就行了</li>\n<li>遇到<code>（</code> 就将<code>里面的值</code> 加进数组中，遇到 <code>)</code>就将<code>这个数组</code>入栈， 我们称这个叫数据栈</li>\n<li>最后将数据栈与符号栈结合</li>\n</ul>\n<p>以下是完整代码：</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">// console.log(convertString(&#39;AND(A,B,OR(C,D,E))&#39;)); // &quot;A&amp;B&amp;(C|D|E)&quot;我想实现这个convertstring有什么好的思路吗\nfunction merge(a, b) {\n  function mergeExpr(arr, sep, level) {\n    if (arr.length === 0) {\n      return &#39;&#39;\n    }\n    const target = arr.splice(0, 1)[0]\n    const current = target + (arr.length &gt; 0 ? sep : &#39;&#39;)\n    return current + (arr.length &gt; 0 ? &#39;(&#39; + mergeExpr(arr, b[level + 1], level + 1) + &#39;)&#39; : &#39;&#39;)\n  }\n  return mergeExpr(a, b[0], 0)\n}\n\nconst convertString = (string) =&gt; {\n  const length =  string.length\n\n  const MAP = {\n    &#39;AND&#39;: &#39;&amp;&#39;,\n    &#39;OR&#39;: &#39;|&#39;\n  }\n\n  // 记录符号\n  const stack1 = []\n\n  //记录数据， 每一个（） 里面的数据 都是一个数组， 所以他是一个二维数组\n  const stack2 = []\n\n  // 表示栈中的层级 没遇到一个（ 就加一， 遇到 ） 就减一\n  let level = -1;\n  let tempString = &#39;&#39;\n  for (let i = 0; i &lt; length - 1; i++) {\n    const nextChar =  string[i + 1]\n    const currentChar =  string[i]\n\n    if (currentChar === &#39;(&#39; || currentChar === &#39;,&#39; || currentChar === &#39;)&#39;) {\n      continue\n    }\n    tempString = tempString + currentChar\n\n    // 如果下一个是字母 是 （  那么就是一个完整的字符串, 也就是 AND 或者 OR\n    if (nextChar === &#39;(&#39;) {\n      level = level + 1\n      stack2.push([])\n      stack1.push(MAP[tempString])\n      tempString = &#39;&#39;\n      continue\n    } else if (nextChar === &#39;,&#39;) {\n      const topData = stack2[level]\n      topData.push(tempString)\n      tempString = &#39;&#39;\n    } else if (nextChar === &#39;)&#39;) {\n      const topData = stack2[level]\n      topData.push(tempString)\n      tempString = &#39;&#39;\n      level = level - 1\n    }\n  }\n\n  const k = []\n  for (let i = 0; i &lt; stack1.length; i++) {\n    const character = stack1[i]\n    k.push(`${stack2[i].join(character)}`)\n  }\n  return merge(k, stack1.slice(0, -1))\n}\n\nconst a = convertString(&#39;AND(A,B,OR(C,D,E,AND(F,G)))&#39;)\nconst b = convertString(&#39;OR(AND(A,B,C),D,E)&#39;)\nconst c = convertString(&#39;AND(A,B,J,OR(C,D,E,AND(F,G),K))&#39;)\n\nconsole.log(a)\nconsole.log(b)\nconsole.log(c)\n</code></pre>\n<h2 id=\"第二版\"><a href=\"#第二版\" class=\"headerlink\" title=\"第二版\"></a>第二版</h2><p>上面那版是有bug， 以下这一版是通过 通过递归的操作， 获取括号内的内容， 进行操作，如果还有括号，那么继续进行递归</p>\n<pre><code class=\"jsx\">function convertString(string) {\n  const MAP = {\n    &#39;AND&#39;: &#39;&amp;&#39;,\n    &#39;OR&#39;: &#39;|&#39;\n  }\n\n  function calculate(string, character) {\n    const length = string.length;\n    let res = &#39;&#39; \n    let tempString = &#39;&#39;\n    let tempCharacter = character\n\n    for (let i = 0; i &lt; length; i++) {\n      const currentChar = string[i];\n      const nextChar = string[i + 1] ;\n\n      if (currentChar === &#39;(&#39;) {\n        let j = i;\n        let cnt = 0\n        for (;i &lt; length; i++) {\n          if (string[i] === &#39;(&#39;) ++cnt;\n          if (string[i] === &#39;)&#39;) --cnt;\n          if (cnt === 0) break;\n        }\n        res +=  &#39;(&#39; + calculate(string.substring(j + 1, i), tempCharacter) + &#39;)&#39;;\n        // 如果递归后，后面仍然有其他内容，那么添加上当前的 符号\n        res += i &lt; length - 1 ? character : &#39;&#39;\n        tempString = &#39;&#39;\n        tempCharacter = character\n        continue\n      }\n\n      if (currentChar === &#39;,&#39;) {\n        continue\n      }\n\n      tempString += currentChar;\n\n      if (nextChar === &#39;(&#39;) {\n        tempCharacter = MAP[tempString];\n        tempString = &#39;&#39;\n        continue\n      }\n\n      if (nextChar === &#39;,&#39;) {\n        res += tempString + tempCharacter\n        tempString = &#39;&#39;\n        continue\n      }\n\n      if (nextChar === &#39;)&#39; || typeof nextChar === &#39;undefined&#39;) {\n        res += tempString\n        tempString = &#39;&#39;\n      }\n    }\n\n    return res\n  }\n\n  const final = calculate(string, &quot;&quot;)\n\n  return final.slice(1, -1)\n}\n\nconst a = convertString(&#39;AND(A,B,OR(C,D,E,AND(F,G)))&#39;);\nconst e = convertString(&#39;OR(AND(A,B,OR(C,D,E,AND(F,G))),I,OR(AND(A,B,C),D,E))&#39;);\n\nconst b = convertString(&#39;OR(AND(A,B,C),D,E)&#39;);\n\nconst d = convertString(&#39;OR(AND(A,B),AND(C,D))&#39;);\nconst c = convertString(&#39;AND(A,B,J,OR(C,D,E,AND(F,G),K))&#39;);\n\n</code></pre>\n"},{"title":"React源码 调度","date":"2020-07-21T10:11:25.000Z","_content":"\n继上一遍[React源码-ReactDom](../React源码-ReactDom) 我们查看了ReactDom 的render所构成的整个fiber 结构\n\n我们重新看 `legacyRenderSubtreeIntoContainer`, 我们构建完fiber之后往下走\n\n```jsx\nfunction legacyRenderSubtreeIntoContainer(\n    parentComponent: ?React$Component<any, any>,\n    children: ReactNodeList,\n    container: DOMContainer,\n    forceHydrate: boolean,\n    callback: ?Function,\n) {\n  // 一开始进来 container 上是肯定没有这个属性的\n  let root: Root = (container._reactRootContainer: any);\n  // 没有 root 会执行 if 中的操作\n  if (!root) {\n    // Initial mount\n    // 创建一个 root 出来，类型是 ReactRoot\n    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(\n      container,\n      forceHydrate,\n    );\n    // ... 这里直接省略callback, 因为我们不关注callback\n  \n    unbatchedUpdates(() => {\n      // 大多数情况parentComponent 为null, 一遍不考虑，我们直接看else\n      if (parentComponent != null) {\n        root.legacy_renderSubtreeIntoContainer(\n          parentComponent,\n          children,\n          callback,\n        );\n      } else {\n        // 调用的是 ReactRoot.prototype.render，我们直接看这里\n        root.render(children, callback);\n      }\n    });\n  } else {\n    // ... 这里直接省略callback, 因为我们不关注callback\n    \n    // Update\n    if (parentComponent != null) {\n        root.legacy_renderSubtreeIntoContainer(\n            parentComponent,\n            children,\n            callback,\n        );\n    } else {\n      root.render(children, callback);\n    }\n  }\n  return getPublicRootInstance(root._internalRoot);\n}\n```\n\n## React.prototype.render \n\n```jsx\nReactRoot.prototype.render = function(\n  children: ReactNodeList,\n  callback: ?() => mixed,\n): Work {\n  // 这里指 FiberRoot\n  const root = this._internalRoot;\n  // ReactWork 的功能就是为了在组件渲染或更新后把所有传入\n  // ReactDom.render 中的回调函数全部执行一遍\n  // 我们这里callback 为null, 所以其实不用考虑这个\n  const work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n  // 如果有 callback，就 push 进 work 中的数组\n  if (callback !== null) {\n    work.then(callback);\n  }\n  // work._onCommit 就是用于执行所有回调函数的\n  updateContainer(children, root, null, work._onCommit);\n  return work;\n};\n```\n\n### updateContainer\n\n```jsx\n// packages\\react-reconciler\\src\\ReactFiberReconciler.js\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): ExpirationTime {\n  // 取出容器的 fiber 对象.\n  const current = container.current;\n  // 计算时间\n  const currentTime = requestCurrentTime();\n  // expirationTime 代表优先级，数字越大优先级越高\n  // sync 的数字是最大的，所以优先级也是最高的\n  const expirationTime = computeExpirationForFiber(currentTime, current);\n  return updateContainerAtExpirationTime(\n    element,\n    container,\n    parentComponent,\n    expirationTime,\n    callback,\n  );\n}\n```\n\n### requestCurrentTime\n\n`packages\\shared\\ReactFeatureFlags.js` 的 enableNewScheduler = false; 所以使用的是`packages\\react-reconciler\\src\\ReactFiberScheduler.old.js`\n\n```jsx\nlet originalStartTimeMs: number = now();\nlet currentRendererTime: ExpirationTime = msToExpirationTime(\n  originalStartTimeMs,\n);\nlet currentSchedulerTime: ExpirationTime = currentRendererTime;\n// \n```\n承接下面的`currentSchedulerTime` 和 `currentRendererTime` \n\n```jsx\nfunction requestCurrentTime() {\n  // 调度程序调用requestCurrentTime来计算到期时间。\n\n  // 过期时间是通过将当前时间（开始时间）加起来得出的时间。\n  // 但是，如果在同一事件中安排了两次更新，即使实际时钟时间在第一次和第二次呼叫之间提前了，我们也应将它们的开始时间视为同时发生。\n  \n  // 换句话说，由于到期时间决定了更新的批处理方式，因此我们希望在同一事件中发生的所有优先级相同的更新都收到相同的到期时间。。\n   \n  // 我们跟踪两个不同的时间：当前的“渲染器”时间和当前的“调度器”时间。 渲染器时间可以随时更新。 它只是为了最大程度地降低通话性能。\n  \n  // 但是，只有在没有待处理的工作，或者确定我们不在某个事件的中间时，才能更新调度程序时间。\n  if (isRendering) {\n    // 此时在渲染中，直接返回当前作态\n    return currentSchedulerTime;\n  }\n  // Check if there's pending work.\n  findHighestPriorityRoot();\n  if (\n    nextFlushedExpirationTime === NoWork ||\n    nextFlushedExpirationTime === Never\n  ) {\n    // 如果没有待处理的工作，那么返回当前的渲染时间\n    recomputeCurrentRendererTime(); // 此函数 直接修改了currentRendererTime\n    currentSchedulerTime = currentRendererTime;\n    return currentSchedulerTime;\n  }\n  // 有待处理的时间时, 返回上一次的计时器时间\n  return currentSchedulerTime;\n}\n```\n\n### recomputeCurrentRendererTime\n```js\nfunction recomputeCurrentRendererTime() {\n  const currentTimeMs = now() - originalStartTimeMs;\n  currentRendererTime = msToExpirationTime(currentTimeMs);\n}\n```\n\n\n## 过期时间计算\n\n* 先来看看的当前计算过期时间的公式吧 \n\n```jsx\n// packages\\react-reconciler\\src\\ReactFiberExpirationTime.js\nexport const NoWork = 0;\nexport const Never = 1;\nexport const Sync = MAX_SIGNED_31_BIT_INT; // 1073741823\n\nconst UNIT_SIZE = 10;\nconst MAGIC_NUMBER_OFFSET = MAX_SIGNED_31_BIT_INT - 1;\n\n// ((ms / 10) | 0) 表示的是取整  2.5 | 0 = 2\n// ms时间戳 到 expireationTime 的转换， 数值越大优先级越高\nexport function msToExpirationTime(ms: number): ExpirationTime {\n  return MAGIC_NUMBER_OFFSET - ((ms / UNIT_SIZE) | 0);\n}\n\nexport function expirationTimeToMs(expirationTime: ExpirationTime): number {\n  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;\n}\n\n// 我们可以简单看成 num + 1 * precision， 也就是在一个precision 的范围内 \nfunction ceiling(num: number, precision: number): number {\n  return (((num / precision) | 0) + 1) * precision;\n}\n\n//为了计算在某个bucket精度内的expirationTime，输入不同的expirationInMs,bucketSizeMs参数可以定义不同优先级的expirationTime\nfunction computeExpirationBucket(\n  currentTime,\n  expirationInMs,\n  bucketSizeMs,\n): ExpirationTime {\n  return (\n    MAGIC_NUMBER_OFFSET -\n    ceiling(\n      MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE,\n      bucketSizeMs / UNIT_SIZE,\n    )\n  );\n}\n\n\nexport const LOW_PRIORITY_EXPIRATION = 5000;\nexport const LOW_PRIORITY_BATCH_SIZE = 250;\n\n// 计算异步事件过期时间，异步事件的优先级比较低\nexport function computeAsyncExpiration(\n  currentTime: ExpirationTime,\n): ExpirationTime {\n  return computeExpirationBucket(\n    currentTime,\n    LOW_PRIORITY_EXPIRATION,\n    LOW_PRIORITY_BATCH_SIZE,\n  );\n}\n\nexport const HIGH_PRIORITY_EXPIRATION = __DEV__ ? 500 : 150;\nexport const HIGH_PRIORITY_BATCH_SIZE = 100;\n\n// 计算交互事件过期时间，用户交互事件的优先级比较高\nexport function computeInteractiveExpiration(currentTime: ExpirationTime) {\n  return computeExpirationBucket(\n    currentTime,\n    HIGH_PRIORITY_EXPIRATION,\n    HIGH_PRIORITY_BATCH_SIZE,\n  );\n}\n\n// 根据过期时间获取当前优先级， 立即执行，还是普通优先级还是用户交互优先级\nexport function inferPriorityFromExpirationTime(\n  currentTime: ExpirationTime,\n  expirationTime: ExpirationTime,\n): ReactPriorityLevel {\n  if (expirationTime === Sync) {\n    return ImmediatePriority;\n  }\n  if (expirationTime === Never) {\n    return IdlePriority;\n  }\n  const msUntil =\n    msToExpirationTime(expirationTime) - msToExpirationTime(currentTime);\n  if (msUntil <= 0) {\n    return ImmediatePriority;\n  }\n  if (msUntil <= HIGH_PRIORITY_EXPIRATION) {\n    return UserBlockingPriority;\n  }\n  if (msUntil <= LOW_PRIORITY_EXPIRATION) {\n    return NormalPriority;\n  }\n  return IdlePriority;\n}\n\n\n```\n\n## computeExpirationForFiber\n\n我们再回到 `updateContainer` 继续执行到 `computeExpirationForFiber` 传的参数是**当前时间**还有`fiber`\n\n```jsx\nfunction computeExpirationForFiber(currentTime: ExpirationTime, fiber: Fiber) {\n  let expirationTime;\n  // 一开始 expirationContext = Nowork\n  if (expirationContext !== NoWork) {\n    expirationTime = expirationContext;\n  } else if (isWorking) {\n    if (isCommitting) {\n      // 在提交阶段发生的更新应具有同步优先级\n      expirationTime = Sync;\n    } else {\n      // 更新阶段和渲染阶段的过期时间应该一样\n      expirationTime = nextRenderExpirationTime;\n    }\n  } else {\n    // 计算新的过期时间\n    if (fiber.mode & ConcurrentMode) {\n      if (isBatchingInteractiveUpdates) {\n        // 交互事件\n        expirationTime = computeInteractiveExpiration(currentTime);\n      } else {\n        // 异步事件，计算新的过期时间\n        expirationTime = computeAsyncExpiration(currentTime);\n      }\n      // 如果我们正在渲染树，请不要在已经渲染的到期时间进行更新。\n      if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {\n        expirationTime -= 1;\n      }\n    } else {\n      // 同步时间\n      expirationTime = Sync;\n    }\n  }\n  if (isBatchingInteractiveUpdates) {\n    // 跟踪最短的未执行互式到期时间。\n    if (\n      lowestPriorityPendingInteractiveExpirationTime === NoWork ||\n      expirationTime < lowestPriorityPendingInteractiveExpirationTime\n    ) {\n      lowestPriorityPendingInteractiveExpirationTime = expirationTime;\n    }\n  }\n  return expirationTime;\n}\n\n```\n\n## updateContainerAtExpirationTime \n\n```js\nexport function updateContainerAtExpirationTime(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  expirationTime: ExpirationTime,\n  callback: ?Function,\n) {\n  // 一样是fiber\n  const current = container.current;\n  // 获取 context 并赋值，这里肯定取不到值得，因为 parentComponent 为 null\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  return scheduleRootUpdate(current, element, expirationTime, callback);\n}\n```\n\n### scheduleRootUpdate\n\n* 下面开始调度了\n\n```js\nfunction scheduleRootUpdate(\n  current: Fiber,\n  element: ReactNodeList,\n  expirationTime: ExpirationTime,\n  callback: ?Function,\n) {\n  // 创建一个 update，就是内部有几个属性的对象\n  const update = createUpdate(expirationTime);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n  // 我们的 callback 是null的所以直接不用考虑二楼\n  flushPassiveEffects();\n  // 把 update 入队，内部就是一些创建或者获取 queue（链表结构），然后给链表添加一个节点的操作\n  enqueueUpdate(current, update);\n  scheduleWork(current, expirationTime);\n\n  return expirationTime;\n}\n```","source":"_posts/React-调度.md","raw":"---\ntitle: React源码 调度\ndate: 2020-07-21 10:11:25\ntags: [react, react源码系列]\ncategories: [react, react源码系列]\n---\n\n继上一遍[React源码-ReactDom](../React源码-ReactDom) 我们查看了ReactDom 的render所构成的整个fiber 结构\n\n我们重新看 `legacyRenderSubtreeIntoContainer`, 我们构建完fiber之后往下走\n\n```jsx\nfunction legacyRenderSubtreeIntoContainer(\n    parentComponent: ?React$Component<any, any>,\n    children: ReactNodeList,\n    container: DOMContainer,\n    forceHydrate: boolean,\n    callback: ?Function,\n) {\n  // 一开始进来 container 上是肯定没有这个属性的\n  let root: Root = (container._reactRootContainer: any);\n  // 没有 root 会执行 if 中的操作\n  if (!root) {\n    // Initial mount\n    // 创建一个 root 出来，类型是 ReactRoot\n    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(\n      container,\n      forceHydrate,\n    );\n    // ... 这里直接省略callback, 因为我们不关注callback\n  \n    unbatchedUpdates(() => {\n      // 大多数情况parentComponent 为null, 一遍不考虑，我们直接看else\n      if (parentComponent != null) {\n        root.legacy_renderSubtreeIntoContainer(\n          parentComponent,\n          children,\n          callback,\n        );\n      } else {\n        // 调用的是 ReactRoot.prototype.render，我们直接看这里\n        root.render(children, callback);\n      }\n    });\n  } else {\n    // ... 这里直接省略callback, 因为我们不关注callback\n    \n    // Update\n    if (parentComponent != null) {\n        root.legacy_renderSubtreeIntoContainer(\n            parentComponent,\n            children,\n            callback,\n        );\n    } else {\n      root.render(children, callback);\n    }\n  }\n  return getPublicRootInstance(root._internalRoot);\n}\n```\n\n## React.prototype.render \n\n```jsx\nReactRoot.prototype.render = function(\n  children: ReactNodeList,\n  callback: ?() => mixed,\n): Work {\n  // 这里指 FiberRoot\n  const root = this._internalRoot;\n  // ReactWork 的功能就是为了在组件渲染或更新后把所有传入\n  // ReactDom.render 中的回调函数全部执行一遍\n  // 我们这里callback 为null, 所以其实不用考虑这个\n  const work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n  // 如果有 callback，就 push 进 work 中的数组\n  if (callback !== null) {\n    work.then(callback);\n  }\n  // work._onCommit 就是用于执行所有回调函数的\n  updateContainer(children, root, null, work._onCommit);\n  return work;\n};\n```\n\n### updateContainer\n\n```jsx\n// packages\\react-reconciler\\src\\ReactFiberReconciler.js\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): ExpirationTime {\n  // 取出容器的 fiber 对象.\n  const current = container.current;\n  // 计算时间\n  const currentTime = requestCurrentTime();\n  // expirationTime 代表优先级，数字越大优先级越高\n  // sync 的数字是最大的，所以优先级也是最高的\n  const expirationTime = computeExpirationForFiber(currentTime, current);\n  return updateContainerAtExpirationTime(\n    element,\n    container,\n    parentComponent,\n    expirationTime,\n    callback,\n  );\n}\n```\n\n### requestCurrentTime\n\n`packages\\shared\\ReactFeatureFlags.js` 的 enableNewScheduler = false; 所以使用的是`packages\\react-reconciler\\src\\ReactFiberScheduler.old.js`\n\n```jsx\nlet originalStartTimeMs: number = now();\nlet currentRendererTime: ExpirationTime = msToExpirationTime(\n  originalStartTimeMs,\n);\nlet currentSchedulerTime: ExpirationTime = currentRendererTime;\n// \n```\n承接下面的`currentSchedulerTime` 和 `currentRendererTime` \n\n```jsx\nfunction requestCurrentTime() {\n  // 调度程序调用requestCurrentTime来计算到期时间。\n\n  // 过期时间是通过将当前时间（开始时间）加起来得出的时间。\n  // 但是，如果在同一事件中安排了两次更新，即使实际时钟时间在第一次和第二次呼叫之间提前了，我们也应将它们的开始时间视为同时发生。\n  \n  // 换句话说，由于到期时间决定了更新的批处理方式，因此我们希望在同一事件中发生的所有优先级相同的更新都收到相同的到期时间。。\n   \n  // 我们跟踪两个不同的时间：当前的“渲染器”时间和当前的“调度器”时间。 渲染器时间可以随时更新。 它只是为了最大程度地降低通话性能。\n  \n  // 但是，只有在没有待处理的工作，或者确定我们不在某个事件的中间时，才能更新调度程序时间。\n  if (isRendering) {\n    // 此时在渲染中，直接返回当前作态\n    return currentSchedulerTime;\n  }\n  // Check if there's pending work.\n  findHighestPriorityRoot();\n  if (\n    nextFlushedExpirationTime === NoWork ||\n    nextFlushedExpirationTime === Never\n  ) {\n    // 如果没有待处理的工作，那么返回当前的渲染时间\n    recomputeCurrentRendererTime(); // 此函数 直接修改了currentRendererTime\n    currentSchedulerTime = currentRendererTime;\n    return currentSchedulerTime;\n  }\n  // 有待处理的时间时, 返回上一次的计时器时间\n  return currentSchedulerTime;\n}\n```\n\n### recomputeCurrentRendererTime\n```js\nfunction recomputeCurrentRendererTime() {\n  const currentTimeMs = now() - originalStartTimeMs;\n  currentRendererTime = msToExpirationTime(currentTimeMs);\n}\n```\n\n\n## 过期时间计算\n\n* 先来看看的当前计算过期时间的公式吧 \n\n```jsx\n// packages\\react-reconciler\\src\\ReactFiberExpirationTime.js\nexport const NoWork = 0;\nexport const Never = 1;\nexport const Sync = MAX_SIGNED_31_BIT_INT; // 1073741823\n\nconst UNIT_SIZE = 10;\nconst MAGIC_NUMBER_OFFSET = MAX_SIGNED_31_BIT_INT - 1;\n\n// ((ms / 10) | 0) 表示的是取整  2.5 | 0 = 2\n// ms时间戳 到 expireationTime 的转换， 数值越大优先级越高\nexport function msToExpirationTime(ms: number): ExpirationTime {\n  return MAGIC_NUMBER_OFFSET - ((ms / UNIT_SIZE) | 0);\n}\n\nexport function expirationTimeToMs(expirationTime: ExpirationTime): number {\n  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;\n}\n\n// 我们可以简单看成 num + 1 * precision， 也就是在一个precision 的范围内 \nfunction ceiling(num: number, precision: number): number {\n  return (((num / precision) | 0) + 1) * precision;\n}\n\n//为了计算在某个bucket精度内的expirationTime，输入不同的expirationInMs,bucketSizeMs参数可以定义不同优先级的expirationTime\nfunction computeExpirationBucket(\n  currentTime,\n  expirationInMs,\n  bucketSizeMs,\n): ExpirationTime {\n  return (\n    MAGIC_NUMBER_OFFSET -\n    ceiling(\n      MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE,\n      bucketSizeMs / UNIT_SIZE,\n    )\n  );\n}\n\n\nexport const LOW_PRIORITY_EXPIRATION = 5000;\nexport const LOW_PRIORITY_BATCH_SIZE = 250;\n\n// 计算异步事件过期时间，异步事件的优先级比较低\nexport function computeAsyncExpiration(\n  currentTime: ExpirationTime,\n): ExpirationTime {\n  return computeExpirationBucket(\n    currentTime,\n    LOW_PRIORITY_EXPIRATION,\n    LOW_PRIORITY_BATCH_SIZE,\n  );\n}\n\nexport const HIGH_PRIORITY_EXPIRATION = __DEV__ ? 500 : 150;\nexport const HIGH_PRIORITY_BATCH_SIZE = 100;\n\n// 计算交互事件过期时间，用户交互事件的优先级比较高\nexport function computeInteractiveExpiration(currentTime: ExpirationTime) {\n  return computeExpirationBucket(\n    currentTime,\n    HIGH_PRIORITY_EXPIRATION,\n    HIGH_PRIORITY_BATCH_SIZE,\n  );\n}\n\n// 根据过期时间获取当前优先级， 立即执行，还是普通优先级还是用户交互优先级\nexport function inferPriorityFromExpirationTime(\n  currentTime: ExpirationTime,\n  expirationTime: ExpirationTime,\n): ReactPriorityLevel {\n  if (expirationTime === Sync) {\n    return ImmediatePriority;\n  }\n  if (expirationTime === Never) {\n    return IdlePriority;\n  }\n  const msUntil =\n    msToExpirationTime(expirationTime) - msToExpirationTime(currentTime);\n  if (msUntil <= 0) {\n    return ImmediatePriority;\n  }\n  if (msUntil <= HIGH_PRIORITY_EXPIRATION) {\n    return UserBlockingPriority;\n  }\n  if (msUntil <= LOW_PRIORITY_EXPIRATION) {\n    return NormalPriority;\n  }\n  return IdlePriority;\n}\n\n\n```\n\n## computeExpirationForFiber\n\n我们再回到 `updateContainer` 继续执行到 `computeExpirationForFiber` 传的参数是**当前时间**还有`fiber`\n\n```jsx\nfunction computeExpirationForFiber(currentTime: ExpirationTime, fiber: Fiber) {\n  let expirationTime;\n  // 一开始 expirationContext = Nowork\n  if (expirationContext !== NoWork) {\n    expirationTime = expirationContext;\n  } else if (isWorking) {\n    if (isCommitting) {\n      // 在提交阶段发生的更新应具有同步优先级\n      expirationTime = Sync;\n    } else {\n      // 更新阶段和渲染阶段的过期时间应该一样\n      expirationTime = nextRenderExpirationTime;\n    }\n  } else {\n    // 计算新的过期时间\n    if (fiber.mode & ConcurrentMode) {\n      if (isBatchingInteractiveUpdates) {\n        // 交互事件\n        expirationTime = computeInteractiveExpiration(currentTime);\n      } else {\n        // 异步事件，计算新的过期时间\n        expirationTime = computeAsyncExpiration(currentTime);\n      }\n      // 如果我们正在渲染树，请不要在已经渲染的到期时间进行更新。\n      if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {\n        expirationTime -= 1;\n      }\n    } else {\n      // 同步时间\n      expirationTime = Sync;\n    }\n  }\n  if (isBatchingInteractiveUpdates) {\n    // 跟踪最短的未执行互式到期时间。\n    if (\n      lowestPriorityPendingInteractiveExpirationTime === NoWork ||\n      expirationTime < lowestPriorityPendingInteractiveExpirationTime\n    ) {\n      lowestPriorityPendingInteractiveExpirationTime = expirationTime;\n    }\n  }\n  return expirationTime;\n}\n\n```\n\n## updateContainerAtExpirationTime \n\n```js\nexport function updateContainerAtExpirationTime(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  expirationTime: ExpirationTime,\n  callback: ?Function,\n) {\n  // 一样是fiber\n  const current = container.current;\n  // 获取 context 并赋值，这里肯定取不到值得，因为 parentComponent 为 null\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  return scheduleRootUpdate(current, element, expirationTime, callback);\n}\n```\n\n### scheduleRootUpdate\n\n* 下面开始调度了\n\n```js\nfunction scheduleRootUpdate(\n  current: Fiber,\n  element: ReactNodeList,\n  expirationTime: ExpirationTime,\n  callback: ?Function,\n) {\n  // 创建一个 update，就是内部有几个属性的对象\n  const update = createUpdate(expirationTime);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n  // 我们的 callback 是null的所以直接不用考虑二楼\n  flushPassiveEffects();\n  // 把 update 入队，内部就是一些创建或者获取 queue（链表结构），然后给链表添加一个节点的操作\n  enqueueUpdate(current, update);\n  scheduleWork(current, expirationTime);\n\n  return expirationTime;\n}\n```","slug":"React-调度","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrel0009mroj2gy6coin","content":"<p>继上一遍<a href=\"../React源码-ReactDom\">React源码-ReactDom</a> 我们查看了ReactDom 的render所构成的整个fiber 结构</p>\n<p>我们重新看 <code>legacyRenderSubtreeIntoContainer</code>, 我们构建完fiber之后往下走</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">legacyRenderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n    parentComponent<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>React$Component<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> ReactNodeList<span class=\"token punctuation\">,</span>\n    container<span class=\"token punctuation\">:</span> DOMContainer<span class=\"token punctuation\">,</span>\n    forceHydrate<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n    callback<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>Function<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 一开始进来 container 上是肯定没有这个属性的</span>\n  <span class=\"token keyword\">let</span> root<span class=\"token punctuation\">:</span> Root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>_reactRootContainer<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 没有 root 会执行 if 中的操作</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Initial mount</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 创建一个 root 出来，类型是 ReactRoot</span>\n    root <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>_reactRootContainer <span class=\"token operator\">=</span> <span class=\"token function\">legacyCreateRootFromDOMContainer</span><span class=\"token punctuation\">(</span>\n      container<span class=\"token punctuation\">,</span>\n      forceHydrate<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ... 这里直接省略callback, 因为我们不关注callback</span>\n\n    <span class=\"token function\">unbatchedUpdates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 大多数情况parentComponent 为null, 一遍不考虑，我们直接看else</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentComponent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">.</span><span class=\"token function\">legacy_renderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n          parentComponent<span class=\"token punctuation\">,</span>\n          children<span class=\"token punctuation\">,</span>\n          callback<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 调用的是 ReactRoot.prototype.render，我们直接看这里</span>\n        root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ... 这里直接省略callback, 因为我们不关注callback</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Update</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentComponent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">.</span><span class=\"token function\">legacy_renderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n            parentComponent<span class=\"token punctuation\">,</span>\n            children<span class=\"token punctuation\">,</span>\n            callback<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getPublicRootInstance</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>_internalRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"React-prototype-render\"><a href=\"#React-prototype-render\" class=\"headerlink\" title=\"React.prototype.render\"></a>React.prototype.render</h2><pre class=\" language-jsx\"><code class=\"language-jsx\">ReactRoot<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>render <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n  children<span class=\"token punctuation\">:</span> ReactNodeList<span class=\"token punctuation\">,</span>\n  callback<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> mixed<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Work <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 这里指 FiberRoot</span>\n  <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internalRoot<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ReactWork 的功能就是为了在组件渲染或更新后把所有传入</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ReactDom.render 中的回调函数全部执行一遍</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 我们这里callback 为null, 所以其实不用考虑这个</span>\n  <span class=\"token keyword\">const</span> work <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  callback <span class=\"token operator\">=</span> callback <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> callback<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 如果有 callback，就 push 进 work 中的数组</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    work<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// work._onCommit 就是用于执行所有回调函数的</span>\n  <span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> work<span class=\"token punctuation\">.</span>_onCommit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> work<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"updateContainer\"><a href=\"#updateContainer\" class=\"headerlink\" title=\"updateContainer\"></a>updateContainer</h3><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// packages\\react-reconciler\\src\\ReactFiberReconciler.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">:</span> ReactNodeList<span class=\"token punctuation\">,</span>\n  container<span class=\"token punctuation\">:</span> OpaqueRoot<span class=\"token punctuation\">,</span>\n  parentComponent<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>React$Component<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  callback<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>Function<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ExpirationTime <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 取出容器的 fiber 对象.</span>\n  <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 计算时间</span>\n  <span class=\"token keyword\">const</span> currentTime <span class=\"token operator\">=</span> <span class=\"token function\">requestCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// expirationTime 代表优先级，数字越大优先级越高</span>\n  <span class=\"token comment\" spellcheck=\"true\">// sync 的数字是最大的，所以优先级也是最高的</span>\n  <span class=\"token keyword\">const</span> expirationTime <span class=\"token operator\">=</span> <span class=\"token function\">computeExpirationForFiber</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">updateContainerAtExpirationTime</span><span class=\"token punctuation\">(</span>\n    element<span class=\"token punctuation\">,</span>\n    container<span class=\"token punctuation\">,</span>\n    parentComponent<span class=\"token punctuation\">,</span>\n    expirationTime<span class=\"token punctuation\">,</span>\n    callback<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"requestCurrentTime\"><a href=\"#requestCurrentTime\" class=\"headerlink\" title=\"requestCurrentTime\"></a>requestCurrentTime</h3><p><code>packages\\shared\\ReactFeatureFlags.js</code> 的 enableNewScheduler = false; 所以使用的是<code>packages\\react-reconciler\\src\\ReactFiberScheduler.old.js</code></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> originalStartTimeMs<span class=\"token punctuation\">:</span> number <span class=\"token operator\">=</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currentRendererTime<span class=\"token punctuation\">:</span> ExpirationTime <span class=\"token operator\">=</span> <span class=\"token function\">msToExpirationTime</span><span class=\"token punctuation\">(</span>\n  originalStartTimeMs<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currentSchedulerTime<span class=\"token punctuation\">:</span> ExpirationTime <span class=\"token operator\">=</span> currentRendererTime<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// </span></code></pre>\n<p>承接下面的<code>currentSchedulerTime</code> 和 <code>currentRendererTime</code> </p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">requestCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 调度程序调用requestCurrentTime来计算到期时间。</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 过期时间是通过将当前时间（开始时间）加起来得出的时间。</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 但是，如果在同一事件中安排了两次更新，即使实际时钟时间在第一次和第二次呼叫之间提前了，我们也应将它们的开始时间视为同时发生。</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 换句话说，由于到期时间决定了更新的批处理方式，因此我们希望在同一事件中发生的所有优先级相同的更新都收到相同的到期时间。。</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 我们跟踪两个不同的时间：当前的“渲染器”时间和当前的“调度器”时间。 渲染器时间可以随时更新。 它只是为了最大程度地降低通话性能。</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 但是，只有在没有待处理的工作，或者确定我们不在某个事件的中间时，才能更新调度程序时间。</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isRendering<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 此时在渲染中，直接返回当前作态</span>\n    <span class=\"token keyword\">return</span> currentSchedulerTime<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Check if there's pending work.</span>\n  <span class=\"token function\">findHighestPriorityRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    nextFlushedExpirationTime <span class=\"token operator\">===</span> NoWork <span class=\"token operator\">||</span>\n    nextFlushedExpirationTime <span class=\"token operator\">===</span> Never\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 如果没有待处理的工作，那么返回当前的渲染时间</span>\n    <span class=\"token function\">recomputeCurrentRendererTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 此函数 直接修改了currentRendererTime</span>\n    currentSchedulerTime <span class=\"token operator\">=</span> currentRendererTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> currentSchedulerTime<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 有待处理的时间时, 返回上一次的计时器时间</span>\n  <span class=\"token keyword\">return</span> currentSchedulerTime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"recomputeCurrentRendererTime\"><a href=\"#recomputeCurrentRendererTime\" class=\"headerlink\" title=\"recomputeCurrentRendererTime\"></a>recomputeCurrentRendererTime</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">recomputeCurrentRendererTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currentTimeMs <span class=\"token operator\">=</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> originalStartTimeMs<span class=\"token punctuation\">;</span>\n  currentRendererTime <span class=\"token operator\">=</span> <span class=\"token function\">msToExpirationTime</span><span class=\"token punctuation\">(</span>currentTimeMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"过期时间计算\"><a href=\"#过期时间计算\" class=\"headerlink\" title=\"过期时间计算\"></a>过期时间计算</h2><ul>\n<li>先来看看的当前计算过期时间的公式吧 </li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// packages\\react-reconciler\\src\\ReactFiberExpirationTime.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> NoWork <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Never <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Sync <span class=\"token operator\">=</span> MAX_SIGNED_31_BIT_INT<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 1073741823</span>\n\n<span class=\"token keyword\">const</span> UNIT_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MAGIC_NUMBER_OFFSET <span class=\"token operator\">=</span> MAX_SIGNED_31_BIT_INT <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ((ms / 10) | 0) 表示的是取整  2.5 | 0 = 2</span>\n<span class=\"token comment\" spellcheck=\"true\">// ms时间戳 到 expireationTime 的转换， 数值越大优先级越高</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">msToExpirationTime</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ExpirationTime <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> MAGIC_NUMBER_OFFSET <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ms <span class=\"token operator\">/</span> UNIT_SIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">expirationTimeToMs</span><span class=\"token punctuation\">(</span>expirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> number <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>MAGIC_NUMBER_OFFSET <span class=\"token operator\">-</span> expirationTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> UNIT_SIZE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 我们可以简单看成 num + 1 * precision， 也就是在一个precision 的范围内 </span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ceiling</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> precision<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> number <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">/</span> precision<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> precision<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//为了计算在某个bucket精度内的expirationTime，输入不同的expirationInMs,bucketSizeMs参数可以定义不同优先级的expirationTime</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">computeExpirationBucket</span><span class=\"token punctuation\">(</span>\n  currentTime<span class=\"token punctuation\">,</span>\n  expirationInMs<span class=\"token punctuation\">,</span>\n  bucketSizeMs<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ExpirationTime <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    MAGIC_NUMBER_OFFSET <span class=\"token operator\">-</span>\n    <span class=\"token function\">ceiling</span><span class=\"token punctuation\">(</span>\n      MAGIC_NUMBER_OFFSET <span class=\"token operator\">-</span> currentTime <span class=\"token operator\">+</span> expirationInMs <span class=\"token operator\">/</span> UNIT_SIZE<span class=\"token punctuation\">,</span>\n      bucketSizeMs <span class=\"token operator\">/</span> UNIT_SIZE<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> LOW_PRIORITY_EXPIRATION <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> LOW_PRIORITY_BATCH_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 计算异步事件过期时间，异步事件的优先级比较低</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">computeAsyncExpiration</span><span class=\"token punctuation\">(</span>\n  currentTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ExpirationTime <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">computeExpirationBucket</span><span class=\"token punctuation\">(</span>\n    currentTime<span class=\"token punctuation\">,</span>\n    LOW_PRIORITY_EXPIRATION<span class=\"token punctuation\">,</span>\n    LOW_PRIORITY_BATCH_SIZE<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> HIGH_PRIORITY_EXPIRATION <span class=\"token operator\">=</span> __DEV__ <span class=\"token operator\">?</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> HIGH_PRIORITY_BATCH_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 计算交互事件过期时间，用户交互事件的优先级比较高</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">computeInteractiveExpiration</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">computeExpirationBucket</span><span class=\"token punctuation\">(</span>\n    currentTime<span class=\"token punctuation\">,</span>\n    HIGH_PRIORITY_EXPIRATION<span class=\"token punctuation\">,</span>\n    HIGH_PRIORITY_BATCH_SIZE<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 根据过期时间获取当前优先级， 立即执行，还是普通优先级还是用户交互优先级</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">inferPriorityFromExpirationTime</span><span class=\"token punctuation\">(</span>\n  currentTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  expirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ReactPriorityLevel <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expirationTime <span class=\"token operator\">===</span> Sync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> ImmediatePriority<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expirationTime <span class=\"token operator\">===</span> Never<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> IdlePriority<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> msUntil <span class=\"token operator\">=</span>\n    <span class=\"token function\">msToExpirationTime</span><span class=\"token punctuation\">(</span>expirationTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">msToExpirationTime</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msUntil <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> ImmediatePriority<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msUntil <span class=\"token operator\">&lt;=</span> HIGH_PRIORITY_EXPIRATION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> UserBlockingPriority<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msUntil <span class=\"token operator\">&lt;=</span> LOW_PRIORITY_EXPIRATION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> NormalPriority<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> IdlePriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2 id=\"computeExpirationForFiber\"><a href=\"#computeExpirationForFiber\" class=\"headerlink\" title=\"computeExpirationForFiber\"></a>computeExpirationForFiber</h2><p>我们再回到 <code>updateContainer</code> 继续执行到 <code>computeExpirationForFiber</code> 传的参数是<strong>当前时间</strong>还有<code>fiber</code></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">computeExpirationForFiber</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span> fiber<span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> expirationTime<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 一开始 expirationContext = Nowork</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expirationContext <span class=\"token operator\">!==</span> NoWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    expirationTime <span class=\"token operator\">=</span> expirationContext<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isWorking<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isCommitting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 在提交阶段发生的更新应具有同步优先级</span>\n      expirationTime <span class=\"token operator\">=</span> Sync<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 更新阶段和渲染阶段的过期时间应该一样</span>\n      expirationTime <span class=\"token operator\">=</span> nextRenderExpirationTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 计算新的过期时间</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">&amp;</span> ConcurrentMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isBatchingInteractiveUpdates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 交互事件</span>\n        expirationTime <span class=\"token operator\">=</span> <span class=\"token function\">computeInteractiveExpiration</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 异步事件，计算新的过期时间</span>\n        expirationTime <span class=\"token operator\">=</span> <span class=\"token function\">computeAsyncExpiration</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 如果我们正在渲染树，请不要在已经渲染的到期时间进行更新。</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextRoot <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> expirationTime <span class=\"token operator\">===</span> nextRenderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        expirationTime <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 同步时间</span>\n      expirationTime <span class=\"token operator\">=</span> Sync<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isBatchingInteractiveUpdates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 跟踪最短的未执行互式到期时间。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      lowestPriorityPendingInteractiveExpirationTime <span class=\"token operator\">===</span> NoWork <span class=\"token operator\">||</span>\n      expirationTime <span class=\"token operator\">&lt;</span> lowestPriorityPendingInteractiveExpirationTime\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      lowestPriorityPendingInteractiveExpirationTime <span class=\"token operator\">=</span> expirationTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> expirationTime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"updateContainerAtExpirationTime\"><a href=\"#updateContainerAtExpirationTime\" class=\"headerlink\" title=\"updateContainerAtExpirationTime\"></a>updateContainerAtExpirationTime</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateContainerAtExpirationTime</span><span class=\"token punctuation\">(</span>\n  element<span class=\"token punctuation\">:</span> ReactNodeList<span class=\"token punctuation\">,</span>\n  container<span class=\"token punctuation\">:</span> OpaqueRoot<span class=\"token punctuation\">,</span>\n  parentComponent<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>React$Component<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  expirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  callback<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>Function<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 一样是fiber</span>\n  <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 获取 context 并赋值，这里肯定取不到值得，因为 parentComponent 为 null</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">getContextForSubtree</span><span class=\"token punctuation\">(</span>parentComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>context <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    container<span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    container<span class=\"token punctuation\">.</span>pendingContext <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">scheduleRootUpdate</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"scheduleRootUpdate\"><a href=\"#scheduleRootUpdate\" class=\"headerlink\" title=\"scheduleRootUpdate\"></a>scheduleRootUpdate</h3><ul>\n<li>下面开始调度了</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">scheduleRootUpdate</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  element<span class=\"token punctuation\">:</span> ReactNodeList<span class=\"token punctuation\">,</span>\n  expirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  callback<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>Function<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 创建一个 update，就是内部有几个属性的对象</span>\n  <span class=\"token keyword\">const</span> update <span class=\"token operator\">=</span> <span class=\"token function\">createUpdate</span><span class=\"token punctuation\">(</span>expirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Caution: React DevTools currently depends on this property</span>\n  <span class=\"token comment\" spellcheck=\"true\">// being called \"element\".</span>\n  update<span class=\"token punctuation\">.</span>payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 我们的 callback 是null的所以直接不用考虑二楼</span>\n  <span class=\"token function\">flushPassiveEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 把 update 入队，内部就是一些创建或者获取 queue（链表结构），然后给链表添加一个节点的操作</span>\n  <span class=\"token function\">enqueueUpdate</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">scheduleWork</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> expirationTime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>继上一遍<a href=\"../React源码-ReactDom\">React源码-ReactDom</a> 我们查看了ReactDom 的render所构成的整个fiber 结构</p>\n<p>我们重新看 <code>legacyRenderSubtreeIntoContainer</code>, 我们构建完fiber之后往下走</p>\n<pre><code class=\"jsx\">function legacyRenderSubtreeIntoContainer(\n    parentComponent: ?React$Component&lt;any, any&gt;,\n    children: ReactNodeList,\n    container: DOMContainer,\n    forceHydrate: boolean,\n    callback: ?Function,\n) {\n  // 一开始进来 container 上是肯定没有这个属性的\n  let root: Root = (container._reactRootContainer: any);\n  // 没有 root 会执行 if 中的操作\n  if (!root) {\n    // Initial mount\n    // 创建一个 root 出来，类型是 ReactRoot\n    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(\n      container,\n      forceHydrate,\n    );\n    // ... 这里直接省略callback, 因为我们不关注callback\n\n    unbatchedUpdates(() =&gt; {\n      // 大多数情况parentComponent 为null, 一遍不考虑，我们直接看else\n      if (parentComponent != null) {\n        root.legacy_renderSubtreeIntoContainer(\n          parentComponent,\n          children,\n          callback,\n        );\n      } else {\n        // 调用的是 ReactRoot.prototype.render，我们直接看这里\n        root.render(children, callback);\n      }\n    });\n  } else {\n    // ... 这里直接省略callback, 因为我们不关注callback\n\n    // Update\n    if (parentComponent != null) {\n        root.legacy_renderSubtreeIntoContainer(\n            parentComponent,\n            children,\n            callback,\n        );\n    } else {\n      root.render(children, callback);\n    }\n  }\n  return getPublicRootInstance(root._internalRoot);\n}</code></pre>\n<h2 id=\"React-prototype-render\"><a href=\"#React-prototype-render\" class=\"headerlink\" title=\"React.prototype.render\"></a>React.prototype.render</h2><pre><code class=\"jsx\">ReactRoot.prototype.render = function(\n  children: ReactNodeList,\n  callback: ?() =&gt; mixed,\n): Work {\n  // 这里指 FiberRoot\n  const root = this._internalRoot;\n  // ReactWork 的功能就是为了在组件渲染或更新后把所有传入\n  // ReactDom.render 中的回调函数全部执行一遍\n  // 我们这里callback 为null, 所以其实不用考虑这个\n  const work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n  // 如果有 callback，就 push 进 work 中的数组\n  if (callback !== null) {\n    work.then(callback);\n  }\n  // work._onCommit 就是用于执行所有回调函数的\n  updateContainer(children, root, null, work._onCommit);\n  return work;\n};</code></pre>\n<h3 id=\"updateContainer\"><a href=\"#updateContainer\" class=\"headerlink\" title=\"updateContainer\"></a>updateContainer</h3><pre><code class=\"jsx\">// packages\\react-reconciler\\src\\ReactFiberReconciler.js\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component&lt;any, any&gt;,\n  callback: ?Function,\n): ExpirationTime {\n  // 取出容器的 fiber 对象.\n  const current = container.current;\n  // 计算时间\n  const currentTime = requestCurrentTime();\n  // expirationTime 代表优先级，数字越大优先级越高\n  // sync 的数字是最大的，所以优先级也是最高的\n  const expirationTime = computeExpirationForFiber(currentTime, current);\n  return updateContainerAtExpirationTime(\n    element,\n    container,\n    parentComponent,\n    expirationTime,\n    callback,\n  );\n}</code></pre>\n<h3 id=\"requestCurrentTime\"><a href=\"#requestCurrentTime\" class=\"headerlink\" title=\"requestCurrentTime\"></a>requestCurrentTime</h3><p><code>packages\\shared\\ReactFeatureFlags.js</code> 的 enableNewScheduler = false; 所以使用的是<code>packages\\react-reconciler\\src\\ReactFiberScheduler.old.js</code></p>\n<pre><code class=\"jsx\">let originalStartTimeMs: number = now();\nlet currentRendererTime: ExpirationTime = msToExpirationTime(\n  originalStartTimeMs,\n);\nlet currentSchedulerTime: ExpirationTime = currentRendererTime;\n// </code></pre>\n<p>承接下面的<code>currentSchedulerTime</code> 和 <code>currentRendererTime</code> </p>\n<pre><code class=\"jsx\">function requestCurrentTime() {\n  // 调度程序调用requestCurrentTime来计算到期时间。\n\n  // 过期时间是通过将当前时间（开始时间）加起来得出的时间。\n  // 但是，如果在同一事件中安排了两次更新，即使实际时钟时间在第一次和第二次呼叫之间提前了，我们也应将它们的开始时间视为同时发生。\n\n  // 换句话说，由于到期时间决定了更新的批处理方式，因此我们希望在同一事件中发生的所有优先级相同的更新都收到相同的到期时间。。\n\n  // 我们跟踪两个不同的时间：当前的“渲染器”时间和当前的“调度器”时间。 渲染器时间可以随时更新。 它只是为了最大程度地降低通话性能。\n\n  // 但是，只有在没有待处理的工作，或者确定我们不在某个事件的中间时，才能更新调度程序时间。\n  if (isRendering) {\n    // 此时在渲染中，直接返回当前作态\n    return currentSchedulerTime;\n  }\n  // Check if there&#39;s pending work.\n  findHighestPriorityRoot();\n  if (\n    nextFlushedExpirationTime === NoWork ||\n    nextFlushedExpirationTime === Never\n  ) {\n    // 如果没有待处理的工作，那么返回当前的渲染时间\n    recomputeCurrentRendererTime(); // 此函数 直接修改了currentRendererTime\n    currentSchedulerTime = currentRendererTime;\n    return currentSchedulerTime;\n  }\n  // 有待处理的时间时, 返回上一次的计时器时间\n  return currentSchedulerTime;\n}</code></pre>\n<h3 id=\"recomputeCurrentRendererTime\"><a href=\"#recomputeCurrentRendererTime\" class=\"headerlink\" title=\"recomputeCurrentRendererTime\"></a>recomputeCurrentRendererTime</h3><pre><code class=\"js\">function recomputeCurrentRendererTime() {\n  const currentTimeMs = now() - originalStartTimeMs;\n  currentRendererTime = msToExpirationTime(currentTimeMs);\n}</code></pre>\n<h2 id=\"过期时间计算\"><a href=\"#过期时间计算\" class=\"headerlink\" title=\"过期时间计算\"></a>过期时间计算</h2><ul>\n<li>先来看看的当前计算过期时间的公式吧 </li>\n</ul>\n<pre><code class=\"jsx\">// packages\\react-reconciler\\src\\ReactFiberExpirationTime.js\nexport const NoWork = 0;\nexport const Never = 1;\nexport const Sync = MAX_SIGNED_31_BIT_INT; // 1073741823\n\nconst UNIT_SIZE = 10;\nconst MAGIC_NUMBER_OFFSET = MAX_SIGNED_31_BIT_INT - 1;\n\n// ((ms / 10) | 0) 表示的是取整  2.5 | 0 = 2\n// ms时间戳 到 expireationTime 的转换， 数值越大优先级越高\nexport function msToExpirationTime(ms: number): ExpirationTime {\n  return MAGIC_NUMBER_OFFSET - ((ms / UNIT_SIZE) | 0);\n}\n\nexport function expirationTimeToMs(expirationTime: ExpirationTime): number {\n  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;\n}\n\n// 我们可以简单看成 num + 1 * precision， 也就是在一个precision 的范围内 \nfunction ceiling(num: number, precision: number): number {\n  return (((num / precision) | 0) + 1) * precision;\n}\n\n//为了计算在某个bucket精度内的expirationTime，输入不同的expirationInMs,bucketSizeMs参数可以定义不同优先级的expirationTime\nfunction computeExpirationBucket(\n  currentTime,\n  expirationInMs,\n  bucketSizeMs,\n): ExpirationTime {\n  return (\n    MAGIC_NUMBER_OFFSET -\n    ceiling(\n      MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE,\n      bucketSizeMs / UNIT_SIZE,\n    )\n  );\n}\n\n\nexport const LOW_PRIORITY_EXPIRATION = 5000;\nexport const LOW_PRIORITY_BATCH_SIZE = 250;\n\n// 计算异步事件过期时间，异步事件的优先级比较低\nexport function computeAsyncExpiration(\n  currentTime: ExpirationTime,\n): ExpirationTime {\n  return computeExpirationBucket(\n    currentTime,\n    LOW_PRIORITY_EXPIRATION,\n    LOW_PRIORITY_BATCH_SIZE,\n  );\n}\n\nexport const HIGH_PRIORITY_EXPIRATION = __DEV__ ? 500 : 150;\nexport const HIGH_PRIORITY_BATCH_SIZE = 100;\n\n// 计算交互事件过期时间，用户交互事件的优先级比较高\nexport function computeInteractiveExpiration(currentTime: ExpirationTime) {\n  return computeExpirationBucket(\n    currentTime,\n    HIGH_PRIORITY_EXPIRATION,\n    HIGH_PRIORITY_BATCH_SIZE,\n  );\n}\n\n// 根据过期时间获取当前优先级， 立即执行，还是普通优先级还是用户交互优先级\nexport function inferPriorityFromExpirationTime(\n  currentTime: ExpirationTime,\n  expirationTime: ExpirationTime,\n): ReactPriorityLevel {\n  if (expirationTime === Sync) {\n    return ImmediatePriority;\n  }\n  if (expirationTime === Never) {\n    return IdlePriority;\n  }\n  const msUntil =\n    msToExpirationTime(expirationTime) - msToExpirationTime(currentTime);\n  if (msUntil &lt;= 0) {\n    return ImmediatePriority;\n  }\n  if (msUntil &lt;= HIGH_PRIORITY_EXPIRATION) {\n    return UserBlockingPriority;\n  }\n  if (msUntil &lt;= LOW_PRIORITY_EXPIRATION) {\n    return NormalPriority;\n  }\n  return IdlePriority;\n}\n\n</code></pre>\n<h2 id=\"computeExpirationForFiber\"><a href=\"#computeExpirationForFiber\" class=\"headerlink\" title=\"computeExpirationForFiber\"></a>computeExpirationForFiber</h2><p>我们再回到 <code>updateContainer</code> 继续执行到 <code>computeExpirationForFiber</code> 传的参数是<strong>当前时间</strong>还有<code>fiber</code></p>\n<pre><code class=\"jsx\">function computeExpirationForFiber(currentTime: ExpirationTime, fiber: Fiber) {\n  let expirationTime;\n  // 一开始 expirationContext = Nowork\n  if (expirationContext !== NoWork) {\n    expirationTime = expirationContext;\n  } else if (isWorking) {\n    if (isCommitting) {\n      // 在提交阶段发生的更新应具有同步优先级\n      expirationTime = Sync;\n    } else {\n      // 更新阶段和渲染阶段的过期时间应该一样\n      expirationTime = nextRenderExpirationTime;\n    }\n  } else {\n    // 计算新的过期时间\n    if (fiber.mode &amp; ConcurrentMode) {\n      if (isBatchingInteractiveUpdates) {\n        // 交互事件\n        expirationTime = computeInteractiveExpiration(currentTime);\n      } else {\n        // 异步事件，计算新的过期时间\n        expirationTime = computeAsyncExpiration(currentTime);\n      }\n      // 如果我们正在渲染树，请不要在已经渲染的到期时间进行更新。\n      if (nextRoot !== null &amp;&amp; expirationTime === nextRenderExpirationTime) {\n        expirationTime -= 1;\n      }\n    } else {\n      // 同步时间\n      expirationTime = Sync;\n    }\n  }\n  if (isBatchingInteractiveUpdates) {\n    // 跟踪最短的未执行互式到期时间。\n    if (\n      lowestPriorityPendingInteractiveExpirationTime === NoWork ||\n      expirationTime &lt; lowestPriorityPendingInteractiveExpirationTime\n    ) {\n      lowestPriorityPendingInteractiveExpirationTime = expirationTime;\n    }\n  }\n  return expirationTime;\n}\n</code></pre>\n<h2 id=\"updateContainerAtExpirationTime\"><a href=\"#updateContainerAtExpirationTime\" class=\"headerlink\" title=\"updateContainerAtExpirationTime\"></a>updateContainerAtExpirationTime</h2><pre><code class=\"js\">export function updateContainerAtExpirationTime(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component&lt;any, any&gt;,\n  expirationTime: ExpirationTime,\n  callback: ?Function,\n) {\n  // 一样是fiber\n  const current = container.current;\n  // 获取 context 并赋值，这里肯定取不到值得，因为 parentComponent 为 null\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  return scheduleRootUpdate(current, element, expirationTime, callback);\n}</code></pre>\n<h3 id=\"scheduleRootUpdate\"><a href=\"#scheduleRootUpdate\" class=\"headerlink\" title=\"scheduleRootUpdate\"></a>scheduleRootUpdate</h3><ul>\n<li>下面开始调度了</li>\n</ul>\n<pre><code class=\"js\">function scheduleRootUpdate(\n  current: Fiber,\n  element: ReactNodeList,\n  expirationTime: ExpirationTime,\n  callback: ?Function,\n) {\n  // 创建一个 update，就是内部有几个属性的对象\n  const update = createUpdate(expirationTime);\n  // Caution: React DevTools currently depends on this property\n  // being called &quot;element&quot;.\n  update.payload = {element};\n  // 我们的 callback 是null的所以直接不用考虑二楼\n  flushPassiveEffects();\n  // 把 update 入队，内部就是一些创建或者获取 queue（链表结构），然后给链表添加一个节点的操作\n  enqueueUpdate(current, update);\n  scheduleWork(current, expirationTime);\n\n  return expirationTime;\n}</code></pre>\n"},{"title":"React源码--React API","date":"2020-06-16T15:00:31.000Z","_content":"\n## 源码版本 16.8.6\n\n[地址](https://github.com/facebook/react/tree/16.8.6)\n\n## 看看API\n\n我们进到`packages/src`, 看到`React.js`, 其实这个文件时返回一些基本的API, 比如我们常用的`Children, createRef, Component, PureComponent, createContext, forwardRef, lazy, memo` 还有 **hooks** 等等，但我们先不看hooks\n\n### Children\n\n这个Children方法其实是给我们处理`props.children`的, `props.children`其实就是一个类数组的东西，Children的用法有遍历`React.Children.map` 或者 `React.Children.forEach`，一般情况下我们会配合**组合模式cloneElement**使用， 有返回`children`个数 `React.Children.count`，另外两个不常用`toArray`和 `only`\n\n[文档](https://zh-hans.reactjs.org/docs/react-api.html#reactchildren)\n\n[源码解析](https://zhou-bill.github.io/2020/06/19/React%E6%BA%90%E7%A0%81-ReactChildren/)\n\n### createRef\n\n我们看看用法\n\n```jsx\nclass Demo extends React.Component {\n    constructor() {\n        this.ref = React.createRef()\n    }\n\n    render() {\n        return (\n            <div>\n                <Input ref={this.ref} />\n                // 或者\n                <Input ref={(inputRef) => this.ref = inputRef } />\n            </div>\n        )\n    }\n}\n```\n\n### Component 和 PureComponent\n\nComponent 和 PureComponent 就是后者多了一个`state` 和 `props` 的浅比较， 也就是相当于在 `Component` 执行了 `shouldComponentUpdate`, 简单类型下，可以用`PureCompnent` 做组件的性能优化\n\n### createContext\n\n在 react 16后，context 做了改变\n\n```jsx\n\nconst ThemeContext = React.createContext('light');\n\nclass App extends React.Component {\n    render() {\n        // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n        // 无论多深，任何组件都能读取这个值。\n        // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\n        return (\n            <ThemeContext.Provider value=\"dark\">\n                <Toolbar />\n            </ThemeContext.Provider>\n        );\n    }\n};\n```\n\n```jsx\n// 中间的组件再也不必指明往下传递 theme 了。\nfunction Toolbar() {\n    return (\n        <div>\n            <ThemedButton />\n        </div>\n    );\n}\n```\n\n```jsx\nclass ThemedButton extends React.Component {\n    render() {\n        return (\n            <ThemeContext.Consumer> \n                {\n                    (theme) => (\n                        <Button theme={theme} />\n                    )\n                }\n            \n            </ThemeContext.Consumer>\n        );\n    }\n}\n```\n\n### forwardRef\n\n其实就是ref 的转发, 一般情况下我们不能用ref 当做props 传递给组件的，但可以通过forwardRef 做强制转发，用的最多的是解决HOC组件传递ref的问题的\n\n```jsx\nconst FancyButton = React.forwardRef((props, ref) => (\n  <button ref={ref} className=\"FancyButton\">\n    {props.children}\n  </button>\n));\n\n// 你可以直接获取 DOM button 的 ref：\nconst ref = React.createRef();\n<FancyButton ref={ref}>Click me!</FancyButton>;\n```\n\n\n### lazy\n\n简单说就是懒加载\n\n\n### memo\n\n简单说就是 PureComponent\n","source":"_posts/React源码-React API.md","raw":"---\ntitle: React源码--React API\ndate: 2020-06-16 15:00:31\ntags: [react, react源码系列]\ncategories: [react, react源码系列]\n---\n\n## 源码版本 16.8.6\n\n[地址](https://github.com/facebook/react/tree/16.8.6)\n\n## 看看API\n\n我们进到`packages/src`, 看到`React.js`, 其实这个文件时返回一些基本的API, 比如我们常用的`Children, createRef, Component, PureComponent, createContext, forwardRef, lazy, memo` 还有 **hooks** 等等，但我们先不看hooks\n\n### Children\n\n这个Children方法其实是给我们处理`props.children`的, `props.children`其实就是一个类数组的东西，Children的用法有遍历`React.Children.map` 或者 `React.Children.forEach`，一般情况下我们会配合**组合模式cloneElement**使用， 有返回`children`个数 `React.Children.count`，另外两个不常用`toArray`和 `only`\n\n[文档](https://zh-hans.reactjs.org/docs/react-api.html#reactchildren)\n\n[源码解析](https://zhou-bill.github.io/2020/06/19/React%E6%BA%90%E7%A0%81-ReactChildren/)\n\n### createRef\n\n我们看看用法\n\n```jsx\nclass Demo extends React.Component {\n    constructor() {\n        this.ref = React.createRef()\n    }\n\n    render() {\n        return (\n            <div>\n                <Input ref={this.ref} />\n                // 或者\n                <Input ref={(inputRef) => this.ref = inputRef } />\n            </div>\n        )\n    }\n}\n```\n\n### Component 和 PureComponent\n\nComponent 和 PureComponent 就是后者多了一个`state` 和 `props` 的浅比较， 也就是相当于在 `Component` 执行了 `shouldComponentUpdate`, 简单类型下，可以用`PureCompnent` 做组件的性能优化\n\n### createContext\n\n在 react 16后，context 做了改变\n\n```jsx\n\nconst ThemeContext = React.createContext('light');\n\nclass App extends React.Component {\n    render() {\n        // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n        // 无论多深，任何组件都能读取这个值。\n        // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\n        return (\n            <ThemeContext.Provider value=\"dark\">\n                <Toolbar />\n            </ThemeContext.Provider>\n        );\n    }\n};\n```\n\n```jsx\n// 中间的组件再也不必指明往下传递 theme 了。\nfunction Toolbar() {\n    return (\n        <div>\n            <ThemedButton />\n        </div>\n    );\n}\n```\n\n```jsx\nclass ThemedButton extends React.Component {\n    render() {\n        return (\n            <ThemeContext.Consumer> \n                {\n                    (theme) => (\n                        <Button theme={theme} />\n                    )\n                }\n            \n            </ThemeContext.Consumer>\n        );\n    }\n}\n```\n\n### forwardRef\n\n其实就是ref 的转发, 一般情况下我们不能用ref 当做props 传递给组件的，但可以通过forwardRef 做强制转发，用的最多的是解决HOC组件传递ref的问题的\n\n```jsx\nconst FancyButton = React.forwardRef((props, ref) => (\n  <button ref={ref} className=\"FancyButton\">\n    {props.children}\n  </button>\n));\n\n// 你可以直接获取 DOM button 的 ref：\nconst ref = React.createRef();\n<FancyButton ref={ref}>Click me!</FancyButton>;\n```\n\n\n### lazy\n\n简单说就是懒加载\n\n\n### memo\n\n简单说就是 PureComponent\n","slug":"React源码-React API","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lreo000cmroj4zj4ckhi","content":"<h2 id=\"源码版本-16-8-6\"><a href=\"#源码版本-16-8-6\" class=\"headerlink\" title=\"源码版本 16.8.6\"></a>源码版本 16.8.6</h2><p><a href=\"https://github.com/facebook/react/tree/16.8.6\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h2 id=\"看看API\"><a href=\"#看看API\" class=\"headerlink\" title=\"看看API\"></a>看看API</h2><p>我们进到<code>packages/src</code>, 看到<code>React.js</code>, 其实这个文件时返回一些基本的API, 比如我们常用的<code>Children, createRef, Component, PureComponent, createContext, forwardRef, lazy, memo</code> 还有 <strong>hooks</strong> 等等，但我们先不看hooks</p>\n<h3 id=\"Children\"><a href=\"#Children\" class=\"headerlink\" title=\"Children\"></a>Children</h3><p>这个Children方法其实是给我们处理<code>props.children</code>的, <code>props.children</code>其实就是一个类数组的东西，Children的用法有遍历<code>React.Children.map</code> 或者 <code>React.Children.forEach</code>，一般情况下我们会配合<strong>组合模式cloneElement</strong>使用， 有返回<code>children</code>个数 <code>React.Children.count</code>，另外两个不常用<code>toArray</code>和 <code>only</code></p>\n<p><a href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactchildren\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p><a href=\"https://zhou-bill.github.io/2020/06/19/React%E6%BA%90%E7%A0%81-ReactChildren/\" target=\"_blank\" rel=\"noopener\">源码解析</a></p>\n<h3 id=\"createRef\"><a href=\"#createRef\" class=\"headerlink\" title=\"createRef\"></a>createRef</h3><p>我们看看用法</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n                <span class=\"token comment\" spellcheck=\"true\">// 或者</span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>inputRef<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref <span class=\"token operator\">=</span> inputRef <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"Component-和-PureComponent\"><a href=\"#Component-和-PureComponent\" class=\"headerlink\" title=\"Component 和 PureComponent\"></a>Component 和 PureComponent</h3><p>Component 和 PureComponent 就是后者多了一个<code>state</code> 和 <code>props</code> 的浅比较， 也就是相当于在 <code>Component</code> 执行了 <code>shouldComponentUpdate</code>, 简单类型下，可以用<code>PureCompnent</code> 做组件的性能优化</p>\n<h3 id=\"createContext\"><a href=\"#createContext\" class=\"headerlink\" title=\"createContext\"></a>createContext</h3><p>在 react 16后，context 做了改变</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用一个 Provider 来将当前的 theme 传递给以下的组件树。</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 无论多深，任何组件都能读取这个值。</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 在这个例子中，我们将 “dark” 作为当前的值传递下去。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ThemeContext.Provider</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Toolbar</span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ThemeContext.Provider</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// 中间的组件再也不必指明往下传递 theme 了。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ThemedButton</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThemedButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ThemeContext.Consumer</span><span class=\"token punctuation\">></span></span> \n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">(</span>theme<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ThemeContext.Consumer</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"forwardRef\"><a href=\"#forwardRef\" class=\"headerlink\" title=\"forwardRef\"></a>forwardRef</h3><p>其实就是ref 的转发, 一般情况下我们不能用ref 当做props 传递给组件的，但可以通过forwardRef 做强制转发，用的最多的是解决HOC组件传递ref的问题的</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> FancyButton <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>FancyButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 你可以直接获取 DOM button 的 ref：</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FancyButton</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Click me<span class=\"token operator\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FancyButton</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"lazy\"><a href=\"#lazy\" class=\"headerlink\" title=\"lazy\"></a>lazy</h3><p>简单说就是懒加载</p>\n<h3 id=\"memo\"><a href=\"#memo\" class=\"headerlink\" title=\"memo\"></a>memo</h3><p>简单说就是 PureComponent</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"源码版本-16-8-6\"><a href=\"#源码版本-16-8-6\" class=\"headerlink\" title=\"源码版本 16.8.6\"></a>源码版本 16.8.6</h2><p><a href=\"https://github.com/facebook/react/tree/16.8.6\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h2 id=\"看看API\"><a href=\"#看看API\" class=\"headerlink\" title=\"看看API\"></a>看看API</h2><p>我们进到<code>packages/src</code>, 看到<code>React.js</code>, 其实这个文件时返回一些基本的API, 比如我们常用的<code>Children, createRef, Component, PureComponent, createContext, forwardRef, lazy, memo</code> 还有 <strong>hooks</strong> 等等，但我们先不看hooks</p>\n<h3 id=\"Children\"><a href=\"#Children\" class=\"headerlink\" title=\"Children\"></a>Children</h3><p>这个Children方法其实是给我们处理<code>props.children</code>的, <code>props.children</code>其实就是一个类数组的东西，Children的用法有遍历<code>React.Children.map</code> 或者 <code>React.Children.forEach</code>，一般情况下我们会配合<strong>组合模式cloneElement</strong>使用， 有返回<code>children</code>个数 <code>React.Children.count</code>，另外两个不常用<code>toArray</code>和 <code>only</code></p>\n<p><a href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactchildren\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p><a href=\"https://zhou-bill.github.io/2020/06/19/React%E6%BA%90%E7%A0%81-ReactChildren/\" target=\"_blank\" rel=\"noopener\">源码解析</a></p>\n<h3 id=\"createRef\"><a href=\"#createRef\" class=\"headerlink\" title=\"createRef\"></a>createRef</h3><p>我们看看用法</p>\n<pre><code class=\"jsx\">class Demo extends React.Component {\n    constructor() {\n        this.ref = React.createRef()\n    }\n\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;Input ref={this.ref} /&gt;\n                // 或者\n                &lt;Input ref={(inputRef) =&gt; this.ref = inputRef } /&gt;\n            &lt;/div&gt;\n        )\n    }\n}</code></pre>\n<h3 id=\"Component-和-PureComponent\"><a href=\"#Component-和-PureComponent\" class=\"headerlink\" title=\"Component 和 PureComponent\"></a>Component 和 PureComponent</h3><p>Component 和 PureComponent 就是后者多了一个<code>state</code> 和 <code>props</code> 的浅比较， 也就是相当于在 <code>Component</code> 执行了 <code>shouldComponentUpdate</code>, 简单类型下，可以用<code>PureCompnent</code> 做组件的性能优化</p>\n<h3 id=\"createContext\"><a href=\"#createContext\" class=\"headerlink\" title=\"createContext\"></a>createContext</h3><p>在 react 16后，context 做了改变</p>\n<pre><code class=\"jsx\">\nconst ThemeContext = React.createContext(&#39;light&#39;);\n\nclass App extends React.Component {\n    render() {\n        // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n        // 无论多深，任何组件都能读取这个值。\n        // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\n        return (\n            &lt;ThemeContext.Provider value=&quot;dark&quot;&gt;\n                &lt;Toolbar /&gt;\n            &lt;/ThemeContext.Provider&gt;\n        );\n    }\n};</code></pre>\n<pre><code class=\"jsx\">// 中间的组件再也不必指明往下传递 theme 了。\nfunction Toolbar() {\n    return (\n        &lt;div&gt;\n            &lt;ThemedButton /&gt;\n        &lt;/div&gt;\n    );\n}</code></pre>\n<pre><code class=\"jsx\">class ThemedButton extends React.Component {\n    render() {\n        return (\n            &lt;ThemeContext.Consumer&gt; \n                {\n                    (theme) =&gt; (\n                        &lt;Button theme={theme} /&gt;\n                    )\n                }\n\n            &lt;/ThemeContext.Consumer&gt;\n        );\n    }\n}</code></pre>\n<h3 id=\"forwardRef\"><a href=\"#forwardRef\" class=\"headerlink\" title=\"forwardRef\"></a>forwardRef</h3><p>其实就是ref 的转发, 一般情况下我们不能用ref 当做props 传递给组件的，但可以通过forwardRef 做强制转发，用的最多的是解决HOC组件传递ref的问题的</p>\n<pre><code class=\"jsx\">const FancyButton = React.forwardRef((props, ref) =&gt; (\n  &lt;button ref={ref} className=&quot;FancyButton&quot;&gt;\n    {props.children}\n  &lt;/button&gt;\n));\n\n// 你可以直接获取 DOM button 的 ref：\nconst ref = React.createRef();\n&lt;FancyButton ref={ref}&gt;Click me!&lt;/FancyButton&gt;;</code></pre>\n<h3 id=\"lazy\"><a href=\"#lazy\" class=\"headerlink\" title=\"lazy\"></a>lazy</h3><p>简单说就是懒加载</p>\n<h3 id=\"memo\"><a href=\"#memo\" class=\"headerlink\" title=\"memo\"></a>memo</h3><p>简单说就是 PureComponent</p>\n"},{"title":"React源码-ReactChildren","date":"2020-06-19T10:57:16.000Z","_content":"\n## 文件目录\n\n`/packages/react/src/ReactChildren`\n\n## 文档\n\n[文档地址](https://zh-hans.reactjs.org/docs/react-api.html#reactchildren)\n\nReactChildren 主要用于组合模式，详细可以去看看ant-design的`Radio.Group`, `CheckBox.Group`;\n\n## children\n\n`this.props.children` 其实是一个 **ReactElement**对象或者是一个数组它的值也是`ReactElement`, [查看demo](https://codesandbox.io/s/happy-gould-ve16n?file=/src/App.js)可以看到控制台的输出。\n\n## React.Children.map\n\n![1592548713_1_.jpg](https://i.loli.net/2020/06/19/dQw3hM68FRs4vUG.png)\n`React.Children.map(this.props.children, (item) => [item, [item, [item]]])`可以看到一个挺有趣的现象，多层嵌套的数组平铺成一维数组，即`[item, [item, [item]]]` => `[item, item, item]`, 但可以注意一下各item的**key**\n\n\n### 源码\n\n#### 先看看 `mapChildren`\n\n```jsx\n/**\n * @param {?*} children  \n * @param {function(*, int)} func 遍历的方式\n * @param {*} context 上下文\n * @return {object} 遍历完后的结果\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n  // 遍历出来的元素会丢到 result 中最后返回出去\n  const result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n```\n\n#### `mapIntoWithKeyPrefixInternal`\n\n```jsx\n/**\n * @param {?*} children   <p>123<p>\n * @param {Array} array   []\n * @param {string} prefix \"\"\n * @param {func} func     item => [item, [item, [item]]]\n * @param {*} context     undefined\n*/\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  \n  // 这里是处理 key, 看下面\n  let escapedPrefix = '';\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n  // getPooledTraverseContext 和 releaseTraverseContext 是配套的函数\n  // 用处其实很简单，就是维护一个大小为 10 的对象重用池\n  // 每次从这个池子里取一个对象去赋值，用完了就将对象上的属性置空然后丢回池子\n\n  const traverseContext = getPooledTraverseContext(\n    array,\n    escapedPrefix,\n    func,\n    context,\n  );\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n\n  // 将当前 traverseContext 都的属性置空，然后丢回池子\n  releaseTraverseContext(traverseContext);\n}\n```\n\n#### escapeUserProvidedKey\n\n**eg.** `\".0/.0\"`, `\".0/.1:0\"`, `\".0/.1:1:0\"` 将 `/` 匹配，然后在`/`加一个`/` => `\".0//.0\"`, \n\n**replace** 的 第二个参数 `'$&'` 表示匹配的内容\n```jsx\nconst userProvidedKeyEscapeRegex = /\\/+/g;\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n```\n\n#### getPooledTraverseContext 和 releaseTraverseContext\n\n`getPooledTraverseContext` 和 `releaseTraverseContext` 是配套使用的，他们主要是维护一个长度为10对象池，`getPooledTraverseContext` 就是从对象池中拿一个对象出来然后赋值，`releaseTraverseContext` 就是将 traverseContext 的属性赋值为空，然后重新放会到池子里面。这样做是因为减少 创建对线和释放对象的性能消耗。\n\n```jsx\n/**\n * 从池中拿一个对象然后赋值，要是池子没有那直接返回一个对象\n * @param {Array} mapResult  遍历后的结果存放\n * @param {string} keyPrefix key 值\n * @param {func} maoFunction (item) => {}\n * @param {*} mapContext undefined \n * @returns {result, keyPrefix, func, context, count = 0}\n*/\n\nfunction getPooledTraverseContext(\n  mapResult,\n  keyPrefix,\n  mapFunction,\n  mapContext,\n) {\n  if (traverseContextPool.length) {\n    const traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0,\n    };\n  }\n}\n\n// 将对象置空然后放回池子\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n  if (traverseContextPool.length < POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n```\n\n#### traverseAllChildren\n\n```jsx\n/**\n * @param {*} children <p>123</p> 或者是 [<p>123</p>, <p>456</p>]\n * @param callback mapSingleChildIntoContext\n * @param {result, keyPrefix, func, context, count = 0} traverseContext\n*/\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n```\n\n#### traverseAllChildrenImple\n\n```jsx\n/**\n * @param {?*} children <p>123</p> 或者是 [<p>123</p>, <p>456</p>]\n * @param {!string} nameSoFar 名字路径\n * @param {!function} callback mapSingleChildIntoContext\n * @param {?*} traverseContext {result, keyPrefix, func, context, count = 0} \n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(\n  children,\n  nameSoFar,\n  callback,\n  traverseContext,\n) {\n  // 这个函数核心作用就是通过把传入的 children 数组通过遍历摊平成单个节点\n  // 然后去执行 mapSingleChildIntoContext\n\n  // 开始判断 children 的类型\n  const type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  let invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n    }\n  }\n  // 如果 children 是可以渲染的节点的话， 比如是<Demo>123</Demo>, 这种情况下，children 是“123”, 就直接调用 callback, \n  // 如果 children 是 [<p>123</p>, <p></p>] 就跳过往下走\n  // callback 是 mapSingleChildIntoContext\n  if (invokeCallback) {\n    callback(\n      traverseContext,\n      children,\n      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,\n    );\n    return 1;\n  }\n\n  // nextName 和 nextNamePrefix 都是在处理 key 的命名\n  let child;\n  let nextName;\n  let subtreeCount = 0; // Count of children found in the current subtree.\n  const nextNamePrefix =\n    nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  // 节点是数组的话，就开始遍历数组，并且把数组中的每个元素再递归执行 traverseAllChildrenImpl\n  // 如果children 是数据的话，遍历children数组， 然后在对每个元素进行\n  // mapSingleChildIntoContext\n  if (Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(\n        child,\n        nextName,\n        callback,\n        traverseContext,\n      );\n    }\n  } else {\n    // 不是数组的话，就看看 children 是否可以支持迭代\n    // 就是通过 obj[Symbol.iterator] 的方式去取\n    const iteratorFn = getIteratorFn(children);\n    // 只有取出来对象是个函数类型才是正确的\n    if (typeof iteratorFn === 'function') {\n      // 然后就是执行迭代器，重复上面 if 中的逻辑了\n      const iterator = iteratorFn.call(children);\n      let step;\n      let ii = 0;\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(\n          child,\n          nextName,\n          callback,\n          traverseContext,\n        );\n      }\n    } else if (type === 'object') {\n      let addendum = '';\n      const childrenString = '' + children;\n            \n    }\n  }\n\n  return subtreeCount;\n}\n```\n\n* 该函数用于平铺节点\n* 我们要记住callback 是 `mapSingleChildIntoContext`\n* 判断`children`类型\n  * 为数字，字符串，还有单个节点的时候直接执行`mapSingleChildIntoContext`\n  * 要是为数组的话遍历数组，再执行`traverseAllChildrenImpl`\n  * 不是数组的话判断一下children 是不是可迭代的，要是是对象的话就抛出对象\n  \n\n#### mapSingleChildIntoContext\n\n```js\n/**\n * 这个函数只有当传入的 child 是单个节点是才会调用\n * @param bookKeeping traverseContext \n * @param child 传入的节点\n * @param childKey 节点的 key\n */\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  const {result, keyPrefix, func, context} = bookKeeping;\n  // func  => (item) => [item, [item, [item]]]\n  let mappedChild = func.call(context, child, bookKeeping.count++);\n  // 判断函数返回值是否为数组\n  // mappedChild 的结果是 [item, [item, [item]]]\n  // 我们说 (item) => [item, [item, [item]]] 会平铺成 [item, item, item]\n  if (Array.isArray(mappedChild)) {\n    // 是数组的话就回到最先调用的函数中\n    // 然后回到之前 traverseAllChildrenImpl 摊平数组的问题\n    // 假如 c => [item, [item, [item]]]，当执行这个函数时，返回值应该是 [item, [item, [item]]]\n    // 然后 [item, [item, [item]]] 会被当成 children 传入\n    // traverseAllChildrenImpl 内部逻辑判断是数组又会重新递归执行\n    \n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, c => c);\n  } else if (mappedChild != null) {\n    // 不是数组且返回值不为空，判断返回值是否为有效的 Element\n    // 是的话就把这个元素 clone 一遍并且替换掉 key\n    if (isValidElement(mappedChild)) {\n      mappedChild = cloneAndReplaceKey(\n        mappedChild,\n        // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        keyPrefix +\n          (mappedChild.key && (!child || child.key !== mappedChild.key)\n            ? escapeUserProvidedKey(mappedChild.key) + '/'\n            : '') +\n          childKey,\n      );\n    }\n    result.push(mappedChild);\n  }\n}\n```\n\n看看流程\n**eg.**\n* `React.Children.map(this.props.children, (item) => [item, [item, [item]]])`\n* children => `[<p>123</p>, <p>456</p>]`, func => `(item) => [item, [item, [item]]`, result = []\n\n\n1. 先进行 `mapIntoWithKeyPrefixInternal`, 传入上面三个值， 我们直接忽略key\n2. 然后从池里赋值 `func` 和`result`, `prefix`， 此时 `traverseContext`\n  * ```js\n      result: [],\n      keyPrefix: '',\n      func: (item) => [item, [item, item]],\n      context: undefined\n      count: 0\n    ```\n3. 然后执行 `traverseAllChildren`\n4. 再执行 `traverseAllChildrenImpl`, 判断 当前children 是不是可以直接渲染\n  * 是的话：那直接执行 mapSingleChildIntoContext， 将当前节点放到result\n  * 但现在我们的 `children` 是数组， 所以我们要逐个遍历， 再执行`traverseAllChildrenImpl`\n    * **eg.**此时我们拿到`children[0]`, 然后执行`traverseAllChildrenImpl`,然后进入 `mapSingleChildIntoContext，`\n    * ```jsx\n      // mapSingleChildIntoContext\n      // bookKeeping：{ result: [], keyPrefix: \"\", func: (item) => [item, [item, [item]]] }\n      // child: <p>123</p>\n      ```\n    * 在`mapSingleChildIntoContext`内执行了func, 所以得到的结果是`mappedChild = [item, [item, [item]]]`， 然后**判断mappedChild是否是数组**，是的话把 mappedChild 当成children 从第一步开始, 但递归后此时func是`c => c`,\n\n    * 从 `traverseAllChildrenImpl` 判断 `mappedChild` 是数组，然后遍历他，拿出第一个item，再执行了一次 `traverseAllChildrenImpl`,然后是ReactElement,就执行了`mapSingleChildIntoContext`, 但**注意**此时的func 是 `c => c`, 判定结果不是数组，将结果push 进result，`mapSingleChildIntoContext结束`。回到`traverseAllChildrenImpl`, 然后执行 `mappedChild[1]`, 又在`traverseAllChildrenImpl`方法判定是数组，再取`mappedChild[1][0]` 去做 `mapSingleChildIntoContext`, 然后执行 func `c => c`,再push进result，`mapSingleChildIntoContext结束`, 再一次回到`traverseAllChildrenImpl`，直到`mapChildren`遍历完。\n5. 以上如此类推\n      \n\n\n## 流程图\n\n<!-- ![1592636860_1_.jpg](https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png) -->\n\n<a class=\"group\" rel=\"group1\" href=\"https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png\">\n    <img src=\"https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png\" />    \n</a>","source":"_posts/React源码-ReactChildren.md","raw":"---\ntitle: React源码-ReactChildren\ndate: 2020-06-19 10:57:16\ntags: [react, react源码系列]\ncategories: [react, react源码系列]\n---\n\n## 文件目录\n\n`/packages/react/src/ReactChildren`\n\n## 文档\n\n[文档地址](https://zh-hans.reactjs.org/docs/react-api.html#reactchildren)\n\nReactChildren 主要用于组合模式，详细可以去看看ant-design的`Radio.Group`, `CheckBox.Group`;\n\n## children\n\n`this.props.children` 其实是一个 **ReactElement**对象或者是一个数组它的值也是`ReactElement`, [查看demo](https://codesandbox.io/s/happy-gould-ve16n?file=/src/App.js)可以看到控制台的输出。\n\n## React.Children.map\n\n![1592548713_1_.jpg](https://i.loli.net/2020/06/19/dQw3hM68FRs4vUG.png)\n`React.Children.map(this.props.children, (item) => [item, [item, [item]]])`可以看到一个挺有趣的现象，多层嵌套的数组平铺成一维数组，即`[item, [item, [item]]]` => `[item, item, item]`, 但可以注意一下各item的**key**\n\n\n### 源码\n\n#### 先看看 `mapChildren`\n\n```jsx\n/**\n * @param {?*} children  \n * @param {function(*, int)} func 遍历的方式\n * @param {*} context 上下文\n * @return {object} 遍历完后的结果\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n  // 遍历出来的元素会丢到 result 中最后返回出去\n  const result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n```\n\n#### `mapIntoWithKeyPrefixInternal`\n\n```jsx\n/**\n * @param {?*} children   <p>123<p>\n * @param {Array} array   []\n * @param {string} prefix \"\"\n * @param {func} func     item => [item, [item, [item]]]\n * @param {*} context     undefined\n*/\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  \n  // 这里是处理 key, 看下面\n  let escapedPrefix = '';\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n  // getPooledTraverseContext 和 releaseTraverseContext 是配套的函数\n  // 用处其实很简单，就是维护一个大小为 10 的对象重用池\n  // 每次从这个池子里取一个对象去赋值，用完了就将对象上的属性置空然后丢回池子\n\n  const traverseContext = getPooledTraverseContext(\n    array,\n    escapedPrefix,\n    func,\n    context,\n  );\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n\n  // 将当前 traverseContext 都的属性置空，然后丢回池子\n  releaseTraverseContext(traverseContext);\n}\n```\n\n#### escapeUserProvidedKey\n\n**eg.** `\".0/.0\"`, `\".0/.1:0\"`, `\".0/.1:1:0\"` 将 `/` 匹配，然后在`/`加一个`/` => `\".0//.0\"`, \n\n**replace** 的 第二个参数 `'$&'` 表示匹配的内容\n```jsx\nconst userProvidedKeyEscapeRegex = /\\/+/g;\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n```\n\n#### getPooledTraverseContext 和 releaseTraverseContext\n\n`getPooledTraverseContext` 和 `releaseTraverseContext` 是配套使用的，他们主要是维护一个长度为10对象池，`getPooledTraverseContext` 就是从对象池中拿一个对象出来然后赋值，`releaseTraverseContext` 就是将 traverseContext 的属性赋值为空，然后重新放会到池子里面。这样做是因为减少 创建对线和释放对象的性能消耗。\n\n```jsx\n/**\n * 从池中拿一个对象然后赋值，要是池子没有那直接返回一个对象\n * @param {Array} mapResult  遍历后的结果存放\n * @param {string} keyPrefix key 值\n * @param {func} maoFunction (item) => {}\n * @param {*} mapContext undefined \n * @returns {result, keyPrefix, func, context, count = 0}\n*/\n\nfunction getPooledTraverseContext(\n  mapResult,\n  keyPrefix,\n  mapFunction,\n  mapContext,\n) {\n  if (traverseContextPool.length) {\n    const traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0,\n    };\n  }\n}\n\n// 将对象置空然后放回池子\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n  if (traverseContextPool.length < POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n```\n\n#### traverseAllChildren\n\n```jsx\n/**\n * @param {*} children <p>123</p> 或者是 [<p>123</p>, <p>456</p>]\n * @param callback mapSingleChildIntoContext\n * @param {result, keyPrefix, func, context, count = 0} traverseContext\n*/\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n```\n\n#### traverseAllChildrenImple\n\n```jsx\n/**\n * @param {?*} children <p>123</p> 或者是 [<p>123</p>, <p>456</p>]\n * @param {!string} nameSoFar 名字路径\n * @param {!function} callback mapSingleChildIntoContext\n * @param {?*} traverseContext {result, keyPrefix, func, context, count = 0} \n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(\n  children,\n  nameSoFar,\n  callback,\n  traverseContext,\n) {\n  // 这个函数核心作用就是通过把传入的 children 数组通过遍历摊平成单个节点\n  // 然后去执行 mapSingleChildIntoContext\n\n  // 开始判断 children 的类型\n  const type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  let invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n    }\n  }\n  // 如果 children 是可以渲染的节点的话， 比如是<Demo>123</Demo>, 这种情况下，children 是“123”, 就直接调用 callback, \n  // 如果 children 是 [<p>123</p>, <p></p>] 就跳过往下走\n  // callback 是 mapSingleChildIntoContext\n  if (invokeCallback) {\n    callback(\n      traverseContext,\n      children,\n      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,\n    );\n    return 1;\n  }\n\n  // nextName 和 nextNamePrefix 都是在处理 key 的命名\n  let child;\n  let nextName;\n  let subtreeCount = 0; // Count of children found in the current subtree.\n  const nextNamePrefix =\n    nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  // 节点是数组的话，就开始遍历数组，并且把数组中的每个元素再递归执行 traverseAllChildrenImpl\n  // 如果children 是数据的话，遍历children数组， 然后在对每个元素进行\n  // mapSingleChildIntoContext\n  if (Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(\n        child,\n        nextName,\n        callback,\n        traverseContext,\n      );\n    }\n  } else {\n    // 不是数组的话，就看看 children 是否可以支持迭代\n    // 就是通过 obj[Symbol.iterator] 的方式去取\n    const iteratorFn = getIteratorFn(children);\n    // 只有取出来对象是个函数类型才是正确的\n    if (typeof iteratorFn === 'function') {\n      // 然后就是执行迭代器，重复上面 if 中的逻辑了\n      const iterator = iteratorFn.call(children);\n      let step;\n      let ii = 0;\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(\n          child,\n          nextName,\n          callback,\n          traverseContext,\n        );\n      }\n    } else if (type === 'object') {\n      let addendum = '';\n      const childrenString = '' + children;\n            \n    }\n  }\n\n  return subtreeCount;\n}\n```\n\n* 该函数用于平铺节点\n* 我们要记住callback 是 `mapSingleChildIntoContext`\n* 判断`children`类型\n  * 为数字，字符串，还有单个节点的时候直接执行`mapSingleChildIntoContext`\n  * 要是为数组的话遍历数组，再执行`traverseAllChildrenImpl`\n  * 不是数组的话判断一下children 是不是可迭代的，要是是对象的话就抛出对象\n  \n\n#### mapSingleChildIntoContext\n\n```js\n/**\n * 这个函数只有当传入的 child 是单个节点是才会调用\n * @param bookKeeping traverseContext \n * @param child 传入的节点\n * @param childKey 节点的 key\n */\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  const {result, keyPrefix, func, context} = bookKeeping;\n  // func  => (item) => [item, [item, [item]]]\n  let mappedChild = func.call(context, child, bookKeeping.count++);\n  // 判断函数返回值是否为数组\n  // mappedChild 的结果是 [item, [item, [item]]]\n  // 我们说 (item) => [item, [item, [item]]] 会平铺成 [item, item, item]\n  if (Array.isArray(mappedChild)) {\n    // 是数组的话就回到最先调用的函数中\n    // 然后回到之前 traverseAllChildrenImpl 摊平数组的问题\n    // 假如 c => [item, [item, [item]]]，当执行这个函数时，返回值应该是 [item, [item, [item]]]\n    // 然后 [item, [item, [item]]] 会被当成 children 传入\n    // traverseAllChildrenImpl 内部逻辑判断是数组又会重新递归执行\n    \n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, c => c);\n  } else if (mappedChild != null) {\n    // 不是数组且返回值不为空，判断返回值是否为有效的 Element\n    // 是的话就把这个元素 clone 一遍并且替换掉 key\n    if (isValidElement(mappedChild)) {\n      mappedChild = cloneAndReplaceKey(\n        mappedChild,\n        // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        keyPrefix +\n          (mappedChild.key && (!child || child.key !== mappedChild.key)\n            ? escapeUserProvidedKey(mappedChild.key) + '/'\n            : '') +\n          childKey,\n      );\n    }\n    result.push(mappedChild);\n  }\n}\n```\n\n看看流程\n**eg.**\n* `React.Children.map(this.props.children, (item) => [item, [item, [item]]])`\n* children => `[<p>123</p>, <p>456</p>]`, func => `(item) => [item, [item, [item]]`, result = []\n\n\n1. 先进行 `mapIntoWithKeyPrefixInternal`, 传入上面三个值， 我们直接忽略key\n2. 然后从池里赋值 `func` 和`result`, `prefix`， 此时 `traverseContext`\n  * ```js\n      result: [],\n      keyPrefix: '',\n      func: (item) => [item, [item, item]],\n      context: undefined\n      count: 0\n    ```\n3. 然后执行 `traverseAllChildren`\n4. 再执行 `traverseAllChildrenImpl`, 判断 当前children 是不是可以直接渲染\n  * 是的话：那直接执行 mapSingleChildIntoContext， 将当前节点放到result\n  * 但现在我们的 `children` 是数组， 所以我们要逐个遍历， 再执行`traverseAllChildrenImpl`\n    * **eg.**此时我们拿到`children[0]`, 然后执行`traverseAllChildrenImpl`,然后进入 `mapSingleChildIntoContext，`\n    * ```jsx\n      // mapSingleChildIntoContext\n      // bookKeeping：{ result: [], keyPrefix: \"\", func: (item) => [item, [item, [item]]] }\n      // child: <p>123</p>\n      ```\n    * 在`mapSingleChildIntoContext`内执行了func, 所以得到的结果是`mappedChild = [item, [item, [item]]]`， 然后**判断mappedChild是否是数组**，是的话把 mappedChild 当成children 从第一步开始, 但递归后此时func是`c => c`,\n\n    * 从 `traverseAllChildrenImpl` 判断 `mappedChild` 是数组，然后遍历他，拿出第一个item，再执行了一次 `traverseAllChildrenImpl`,然后是ReactElement,就执行了`mapSingleChildIntoContext`, 但**注意**此时的func 是 `c => c`, 判定结果不是数组，将结果push 进result，`mapSingleChildIntoContext结束`。回到`traverseAllChildrenImpl`, 然后执行 `mappedChild[1]`, 又在`traverseAllChildrenImpl`方法判定是数组，再取`mappedChild[1][0]` 去做 `mapSingleChildIntoContext`, 然后执行 func `c => c`,再push进result，`mapSingleChildIntoContext结束`, 再一次回到`traverseAllChildrenImpl`，直到`mapChildren`遍历完。\n5. 以上如此类推\n      \n\n\n## 流程图\n\n<!-- ![1592636860_1_.jpg](https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png) -->\n\n<a class=\"group\" rel=\"group1\" href=\"https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png\">\n    <img src=\"https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png\" />    \n</a>","slug":"React源码-ReactChildren","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lreq000dmroj971wb70v","content":"<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><p><code>/packages/react/src/ReactChildren</code></p>\n<h2 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h2><p><a href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactchildren\" target=\"_blank\" rel=\"noopener\">文档地址</a></p>\n<p>ReactChildren 主要用于组合模式，详细可以去看看ant-design的<code>Radio.Group</code>, <code>CheckBox.Group</code>;</p>\n<h2 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\"children\"></a>children</h2><p><code>this.props.children</code> 其实是一个 <strong>ReactElement</strong>对象或者是一个数组它的值也是<code>ReactElement</code>, <a href=\"https://codesandbox.io/s/happy-gould-ve16n?file=/src/App.js\" target=\"_blank\" rel=\"noopener\">查看demo</a>可以看到控制台的输出。</p>\n<h2 id=\"React-Children-map\"><a href=\"#React-Children-map\" class=\"headerlink\" title=\"React.Children.map\"></a>React.Children.map</h2><p><img src=\"https://i.loli.net/2020/06/19/dQw3hM68FRs4vUG.png\" alt=\"1592548713_1_.jpg\"><br><code>React.Children.map(this.props.children, (item) =&gt; [item, [item, [item]]])</code>可以看到一个挺有趣的现象，多层嵌套的数组平铺成一维数组，即<code>[item, [item, [item]]]</code> =&gt; <code>[item, item, item]</code>, 但可以注意一下各item的<strong>key</strong></p>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><h4 id=\"先看看-mapChildren\"><a href=\"#先看看-mapChildren\" class=\"headerlink\" title=\"先看看 mapChildren\"></a>先看看 <code>mapChildren</code></h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {?*} children  \n * @param {function(*, int)} func 遍历的方式\n * @param {*} context 上下文\n * @return {object} 遍历完后的结果\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapChildren</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>children <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 遍历出来的元素会丢到 result 中最后返回出去</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mapIntoWithKeyPrefixInternal</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"mapIntoWithKeyPrefixInternal\"><a href=\"#mapIntoWithKeyPrefixInternal\" class=\"headerlink\" title=\"mapIntoWithKeyPrefixInternal\"></a><code>mapIntoWithKeyPrefixInternal</code></h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {?*} children   &lt;p>123&lt;p>\n * @param {Array} array   []\n * @param {string} prefix \"\"\n * @param {func} func     item => [item, [item, [item]]]\n * @param {*} context     undefined\n*/</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapIntoWithKeyPrefixInternal</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 这里是处理 key, 看下面</span>\n  <span class=\"token keyword\">let</span> escapedPrefix <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    escapedPrefix <span class=\"token operator\">=</span> <span class=\"token function\">escapeUserProvidedKey</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// getPooledTraverseContext 和 releaseTraverseContext 是配套的函数</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 用处其实很简单，就是维护一个大小为 10 的对象重用池</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 每次从这个池子里取一个对象去赋值，用完了就将对象上的属性置空然后丢回池子</span>\n\n  <span class=\"token keyword\">const</span> traverseContext <span class=\"token operator\">=</span> <span class=\"token function\">getPooledTraverseContext</span><span class=\"token punctuation\">(</span>\n    array<span class=\"token punctuation\">,</span>\n    escapedPrefix<span class=\"token punctuation\">,</span>\n    func<span class=\"token punctuation\">,</span>\n    context<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">traverseAllChildren</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> mapSingleChildIntoContext<span class=\"token punctuation\">,</span> traverseContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 将当前 traverseContext 都的属性置空，然后丢回池子</span>\n  <span class=\"token function\">releaseTraverseContext</span><span class=\"token punctuation\">(</span>traverseContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"escapeUserProvidedKey\"><a href=\"#escapeUserProvidedKey\" class=\"headerlink\" title=\"escapeUserProvidedKey\"></a>escapeUserProvidedKey</h4><p><strong>eg.</strong> <code>&quot;.0/.0&quot;</code>, <code>&quot;.0/.1:0&quot;</code>, <code>&quot;.0/.1:1:0&quot;</code> 将 <code>/</code> 匹配，然后在<code>/</code>加一个<code>/</code> =&gt; <code>&quot;.0//.0&quot;</code>, </p>\n<p><strong>replace</strong> 的 第二个参数 <code>&#39;$&amp;&#39;</code> 表示匹配的内容</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> userProvidedKeyEscapeRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\/+/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">escapeUserProvidedKey</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">''</span> <span class=\"token operator\">+</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>userProvidedKeyEscapeRegex<span class=\"token punctuation\">,</span> <span class=\"token string\">'$&amp;/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"getPooledTraverseContext-和-releaseTraverseContext\"><a href=\"#getPooledTraverseContext-和-releaseTraverseContext\" class=\"headerlink\" title=\"getPooledTraverseContext 和 releaseTraverseContext\"></a>getPooledTraverseContext 和 releaseTraverseContext</h4><p><code>getPooledTraverseContext</code> 和 <code>releaseTraverseContext</code> 是配套使用的，他们主要是维护一个长度为10对象池，<code>getPooledTraverseContext</code> 就是从对象池中拿一个对象出来然后赋值，<code>releaseTraverseContext</code> 就是将 traverseContext 的属性赋值为空，然后重新放会到池子里面。这样做是因为减少 创建对线和释放对象的性能消耗。</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 从池中拿一个对象然后赋值，要是池子没有那直接返回一个对象\n * @param {Array} mapResult  遍历后的结果存放\n * @param {string} keyPrefix key 值\n * @param {func} maoFunction (item) => {}\n * @param {*} mapContext undefined \n * @returns {result, keyPrefix, func, context, count = 0}\n*/</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPooledTraverseContext</span><span class=\"token punctuation\">(</span>\n  mapResult<span class=\"token punctuation\">,</span>\n  keyPrefix<span class=\"token punctuation\">,</span>\n  mapFunction<span class=\"token punctuation\">,</span>\n  mapContext<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>traverseContextPool<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> traverseContext <span class=\"token operator\">=</span> traverseContextPool<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    traverseContext<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> mapResult<span class=\"token punctuation\">;</span>\n    traverseContext<span class=\"token punctuation\">.</span>keyPrefix <span class=\"token operator\">=</span> keyPrefix<span class=\"token punctuation\">;</span>\n    traverseContext<span class=\"token punctuation\">.</span>func <span class=\"token operator\">=</span> mapFunction<span class=\"token punctuation\">;</span>\n    traverseContext<span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> mapContext<span class=\"token punctuation\">;</span>\n    traverseContext<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> traverseContext<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">:</span> mapResult<span class=\"token punctuation\">,</span>\n      keyPrefix<span class=\"token punctuation\">:</span> keyPrefix<span class=\"token punctuation\">,</span>\n      func<span class=\"token punctuation\">:</span> mapFunction<span class=\"token punctuation\">,</span>\n      context<span class=\"token punctuation\">:</span> mapContext<span class=\"token punctuation\">,</span>\n      count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 将对象置空然后放回池子</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">releaseTraverseContext</span><span class=\"token punctuation\">(</span>traverseContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  traverseContext<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  traverseContext<span class=\"token punctuation\">.</span>keyPrefix <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  traverseContext<span class=\"token punctuation\">.</span>func <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  traverseContext<span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  traverseContext<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>traverseContextPool<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> POOL_SIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    traverseContextPool<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>traverseContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"traverseAllChildren\"><a href=\"#traverseAllChildren\" class=\"headerlink\" title=\"traverseAllChildren\"></a>traverseAllChildren</h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {*} children &lt;p>123&lt;/p> 或者是 [&lt;p>123&lt;/p>, &lt;p>456&lt;/p>]\n * @param callback mapSingleChildIntoContext\n * @param {result, keyPrefix, func, context, count = 0} traverseContext\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">traverseAllChildren</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> traverseContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>children <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">traverseAllChildrenImpl</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> traverseContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"traverseAllChildrenImple\"><a href=\"#traverseAllChildrenImple\" class=\"headerlink\" title=\"traverseAllChildrenImple\"></a>traverseAllChildrenImple</h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {?*} children &lt;p>123&lt;/p> 或者是 [&lt;p>123&lt;/p>, &lt;p>456&lt;/p>]\n * @param {!string} nameSoFar 名字路径\n * @param {!function} callback mapSingleChildIntoContext\n * @param {?*} traverseContext {result, keyPrefix, func, context, count = 0} \n * @return {!number} The number of children in this subtree.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">traverseAllChildrenImpl</span><span class=\"token punctuation\">(</span>\n  children<span class=\"token punctuation\">,</span>\n  nameSoFar<span class=\"token punctuation\">,</span>\n  callback<span class=\"token punctuation\">,</span>\n  traverseContext<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 这个函数核心作用就是通过把传入的 children 数组通过遍历摊平成单个节点</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 然后去执行 mapSingleChildIntoContext</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 开始判断 children 的类型</span>\n  <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> children<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">||</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// All of the above are perceived as null.</span>\n    children <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> invokeCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>children <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    invokeCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">:</span>\n        invokeCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">.</span>$$<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> REACT_ELEMENT_TYPE<span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">case</span> REACT_PORTAL_TYPE<span class=\"token punctuation\">:</span>\n            invokeCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 如果 children 是可以渲染的节点的话， 比如是&lt;Demo>123&lt;/Demo>, 这种情况下，children 是“123”, 就直接调用 callback, </span>\n  <span class=\"token comment\" spellcheck=\"true\">// 如果 children 是 [&lt;p>123&lt;/p>, &lt;p>&lt;/p>] 就跳过往下走</span>\n  <span class=\"token comment\" spellcheck=\"true\">// callback 是 mapSingleChildIntoContext</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>invokeCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>\n      traverseContext<span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">,</span>\n      nameSoFar <span class=\"token operator\">===</span> <span class=\"token string\">''</span> <span class=\"token operator\">?</span> SEPARATOR <span class=\"token operator\">+</span> <span class=\"token function\">getComponentKey</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> nameSoFar<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// nextName 和 nextNamePrefix 都是在处理 key 的命名</span>\n  <span class=\"token keyword\">let</span> child<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nextName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> subtreeCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Count of children found in the current subtree.</span>\n  <span class=\"token keyword\">const</span> nextNamePrefix <span class=\"token operator\">=</span>\n    nameSoFar <span class=\"token operator\">===</span> <span class=\"token string\">''</span> <span class=\"token operator\">?</span> SEPARATOR <span class=\"token punctuation\">:</span> nameSoFar <span class=\"token operator\">+</span> SUBSEPARATOR<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 节点是数组的话，就开始遍历数组，并且把数组中的每个元素再递归执行 traverseAllChildrenImpl</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 如果children 是数据的话，遍历children数组， 然后在对每个元素进行</span>\n  <span class=\"token comment\" spellcheck=\"true\">// mapSingleChildIntoContext</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      child <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      nextName <span class=\"token operator\">=</span> nextNamePrefix <span class=\"token operator\">+</span> <span class=\"token function\">getComponentKey</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      subtreeCount <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">traverseAllChildrenImpl</span><span class=\"token punctuation\">(</span>\n        child<span class=\"token punctuation\">,</span>\n        nextName<span class=\"token punctuation\">,</span>\n        callback<span class=\"token punctuation\">,</span>\n        traverseContext<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 不是数组的话，就看看 children 是否可以支持迭代</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 就是通过 obj[Symbol.iterator] 的方式去取</span>\n    <span class=\"token keyword\">const</span> iteratorFn <span class=\"token operator\">=</span> <span class=\"token function\">getIteratorFn</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 只有取出来对象是个函数类型才是正确的</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> iteratorFn <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 然后就是执行迭代器，重复上面 if 中的逻辑了</span>\n      <span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> iteratorFn<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> step<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> ii <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>step <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        child <span class=\"token operator\">=</span> step<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        nextName <span class=\"token operator\">=</span> nextNamePrefix <span class=\"token operator\">+</span> <span class=\"token function\">getComponentKey</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> ii<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subtreeCount <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">traverseAllChildrenImpl</span><span class=\"token punctuation\">(</span>\n          child<span class=\"token punctuation\">,</span>\n          nextName<span class=\"token punctuation\">,</span>\n          callback<span class=\"token punctuation\">,</span>\n          traverseContext<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> addendum <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> childrenString <span class=\"token operator\">=</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> children<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> subtreeCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>该函数用于平铺节点</li>\n<li>我们要记住callback 是 <code>mapSingleChildIntoContext</code></li>\n<li>判断<code>children</code>类型<ul>\n<li>为数字，字符串，还有单个节点的时候直接执行<code>mapSingleChildIntoContext</code></li>\n<li>要是为数组的话遍历数组，再执行<code>traverseAllChildrenImpl</code></li>\n<li>不是数组的话判断一下children 是不是可迭代的，要是是对象的话就抛出对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"mapSingleChildIntoContext\"><a href=\"#mapSingleChildIntoContext\" class=\"headerlink\" title=\"mapSingleChildIntoContext\"></a>mapSingleChildIntoContext</h4><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 这个函数只有当传入的 child 是单个节点是才会调用\n * @param bookKeeping traverseContext \n * @param child 传入的节点\n * @param childKey 节点的 key\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapSingleChildIntoContext</span><span class=\"token punctuation\">(</span>bookKeeping<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> childKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">,</span> keyPrefix<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> bookKeeping<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// func  => (item) => [item, [item, [item]]]</span>\n  <span class=\"token keyword\">let</span> mappedChild <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> bookKeeping<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 判断函数返回值是否为数组</span>\n  <span class=\"token comment\" spellcheck=\"true\">// mappedChild 的结果是 [item, [item, [item]]]</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 我们说 (item) => [item, [item, [item]]] 会平铺成 [item, item, item]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>mappedChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 是数组的话就回到最先调用的函数中</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 然后回到之前 traverseAllChildrenImpl 摊平数组的问题</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 假如 c => [item, [item, [item]]]，当执行这个函数时，返回值应该是 [item, [item, [item]]]</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 然后 [item, [item, [item]]] 会被当成 children 传入</span>\n    <span class=\"token comment\" spellcheck=\"true\">// traverseAllChildrenImpl 内部逻辑判断是数组又会重新递归执行</span>\n\n    <span class=\"token function\">mapIntoWithKeyPrefixInternal</span><span class=\"token punctuation\">(</span>mappedChild<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> childKey<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span><span class=\"token operator\">></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mappedChild <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 不是数组且返回值不为空，判断返回值是否为有效的 Element</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 是的话就把这个元素 clone 一遍并且替换掉 key</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span>mappedChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mappedChild <span class=\"token operator\">=</span> <span class=\"token function\">cloneAndReplaceKey</span><span class=\"token punctuation\">(</span>\n        mappedChild<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Keep both the (mapped) and old keys if they differ, just as</span>\n        <span class=\"token comment\" spellcheck=\"true\">// traverseAllChildren used to do for objects as children</span>\n        keyPrefix <span class=\"token operator\">+</span>\n          <span class=\"token punctuation\">(</span>mappedChild<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>child <span class=\"token operator\">||</span> child<span class=\"token punctuation\">.</span>key <span class=\"token operator\">!==</span> mappedChild<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token function\">escapeUserProvidedKey</span><span class=\"token punctuation\">(</span>mappedChild<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span>\n            <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          childKey<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>mappedChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>看看流程<br><strong>eg.</strong></p>\n<ul>\n<li><code>React.Children.map(this.props.children, (item) =&gt; [item, [item, [item]]])</code></li>\n<li>children =&gt; <code>[&lt;p&gt;123&lt;/p&gt;, &lt;p&gt;456&lt;/p&gt;]</code>, func =&gt; <code>(item) =&gt; [item, [item, [item]]</code>, result = []</li>\n</ul>\n<ol>\n<li><p>先进行 <code>mapIntoWithKeyPrefixInternal</code>, 传入上面三个值， 我们直接忽略key</p>\n</li>\n<li><p>然后从池里赋值 <code>func</code> 和<code>result</code>, <code>prefix</code>， 此时 <code>traverseContext</code></p>\n<ul>\n<li><pre class=\" language-js\"><code class=\"language-js\"> result<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n keyPrefix<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n func<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n context<span class=\"token punctuation\">:</span> undefined\n count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>然后执行 <code>traverseAllChildren</code></p>\n</li>\n<li><p>再执行 <code>traverseAllChildrenImpl</code>, 判断 当前children 是不是可以直接渲染</p>\n<ul>\n<li><p>是的话：那直接执行 mapSingleChildIntoContext， 将当前节点放到result</p>\n</li>\n<li><p>但现在我们的 <code>children</code> 是数组， 所以我们要逐个遍历， 再执行<code>traverseAllChildrenImpl</code></p>\n<ul>\n<li><p><strong>eg.</strong>此时我们拿到<code>children[0]</code>, 然后执行<code>traverseAllChildrenImpl</code>,然后进入 <code>mapSingleChildIntoContext，</code></p>\n</li>\n<li><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// mapSingleChildIntoContext</span>\n<span class=\"token comment\" spellcheck=\"true\">// bookKeeping：{ result: [], keyPrefix: \"\", func: (item) => [item, [item, [item]]] }</span>\n<span class=\"token comment\" spellcheck=\"true\">// child: &lt;p>123&lt;/p></span></code></pre>\n</li>\n<li><p>在<code>mapSingleChildIntoContext</code>内执行了func, 所以得到的结果是<code>mappedChild = [item, [item, [item]]]</code>， 然后<strong>判断mappedChild是否是数组</strong>，是的话把 mappedChild 当成children 从第一步开始, 但递归后此时func是<code>c =&gt; c</code>,</p>\n</li>\n<li><p>从 <code>traverseAllChildrenImpl</code> 判断 <code>mappedChild</code> 是数组，然后遍历他，拿出第一个item，再执行了一次 <code>traverseAllChildrenImpl</code>,然后是ReactElement,就执行了<code>mapSingleChildIntoContext</code>, 但<strong>注意</strong>此时的func 是 <code>c =&gt; c</code>, 判定结果不是数组，将结果push 进result，<code>mapSingleChildIntoContext结束</code>。回到<code>traverseAllChildrenImpl</code>, 然后执行 <code>mappedChild[1]</code>, 又在<code>traverseAllChildrenImpl</code>方法判定是数组，再取<code>mappedChild[1][0]</code> 去做 <code>mapSingleChildIntoContext</code>, 然后执行 func <code>c =&gt; c</code>,再push进result，<code>mapSingleChildIntoContext结束</code>, 再一次回到<code>traverseAllChildrenImpl</code>，直到<code>mapChildren</code>遍历完。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>以上如此类推</p>\n</li>\n</ol>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><!-- ![1592636860_1_.jpg](https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png) -->\n\n<a class=\"group\" rel=\"group1 noopener\" href=\"https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png\" target=\"_blank\">\n    <img src=\"https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png\">    \n</a>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><p><code>/packages/react/src/ReactChildren</code></p>\n<h2 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h2><p><a href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactchildren\" target=\"_blank\" rel=\"noopener\">文档地址</a></p>\n<p>ReactChildren 主要用于组合模式，详细可以去看看ant-design的<code>Radio.Group</code>, <code>CheckBox.Group</code>;</p>\n<h2 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\"children\"></a>children</h2><p><code>this.props.children</code> 其实是一个 <strong>ReactElement</strong>对象或者是一个数组它的值也是<code>ReactElement</code>, <a href=\"https://codesandbox.io/s/happy-gould-ve16n?file=/src/App.js\" target=\"_blank\" rel=\"noopener\">查看demo</a>可以看到控制台的输出。</p>\n<h2 id=\"React-Children-map\"><a href=\"#React-Children-map\" class=\"headerlink\" title=\"React.Children.map\"></a>React.Children.map</h2><p><img src=\"https://i.loli.net/2020/06/19/dQw3hM68FRs4vUG.png\" alt=\"1592548713_1_.jpg\"><br><code>React.Children.map(this.props.children, (item) =&gt; [item, [item, [item]]])</code>可以看到一个挺有趣的现象，多层嵌套的数组平铺成一维数组，即<code>[item, [item, [item]]]</code> =&gt; <code>[item, item, item]</code>, 但可以注意一下各item的<strong>key</strong></p>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><h4 id=\"先看看-mapChildren\"><a href=\"#先看看-mapChildren\" class=\"headerlink\" title=\"先看看 mapChildren\"></a>先看看 <code>mapChildren</code></h4><pre><code class=\"jsx\">/**\n * @param {?*} children  \n * @param {function(*, int)} func 遍历的方式\n * @param {*} context 上下文\n * @return {object} 遍历完后的结果\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n  // 遍历出来的元素会丢到 result 中最后返回出去\n  const result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}</code></pre>\n<h4 id=\"mapIntoWithKeyPrefixInternal\"><a href=\"#mapIntoWithKeyPrefixInternal\" class=\"headerlink\" title=\"mapIntoWithKeyPrefixInternal\"></a><code>mapIntoWithKeyPrefixInternal</code></h4><pre><code class=\"jsx\">/**\n * @param {?*} children   &lt;p&gt;123&lt;p&gt;\n * @param {Array} array   []\n * @param {string} prefix &quot;&quot;\n * @param {func} func     item =&gt; [item, [item, [item]]]\n * @param {*} context     undefined\n*/\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n\n  // 这里是处理 key, 看下面\n  let escapedPrefix = &#39;&#39;;\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + &#39;/&#39;;\n  }\n  // getPooledTraverseContext 和 releaseTraverseContext 是配套的函数\n  // 用处其实很简单，就是维护一个大小为 10 的对象重用池\n  // 每次从这个池子里取一个对象去赋值，用完了就将对象上的属性置空然后丢回池子\n\n  const traverseContext = getPooledTraverseContext(\n    array,\n    escapedPrefix,\n    func,\n    context,\n  );\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n\n  // 将当前 traverseContext 都的属性置空，然后丢回池子\n  releaseTraverseContext(traverseContext);\n}</code></pre>\n<h4 id=\"escapeUserProvidedKey\"><a href=\"#escapeUserProvidedKey\" class=\"headerlink\" title=\"escapeUserProvidedKey\"></a>escapeUserProvidedKey</h4><p><strong>eg.</strong> <code>&quot;.0/.0&quot;</code>, <code>&quot;.0/.1:0&quot;</code>, <code>&quot;.0/.1:1:0&quot;</code> 将 <code>/</code> 匹配，然后在<code>/</code>加一个<code>/</code> =&gt; <code>&quot;.0//.0&quot;</code>, </p>\n<p><strong>replace</strong> 的 第二个参数 <code>&#39;$&amp;&#39;</code> 表示匹配的内容</p>\n<pre><code class=\"jsx\">const userProvidedKeyEscapeRegex = /\\/+/g;\nfunction escapeUserProvidedKey(text) {\n  return (&#39;&#39; + text).replace(userProvidedKeyEscapeRegex, &#39;$&amp;/&#39;);\n}</code></pre>\n<h4 id=\"getPooledTraverseContext-和-releaseTraverseContext\"><a href=\"#getPooledTraverseContext-和-releaseTraverseContext\" class=\"headerlink\" title=\"getPooledTraverseContext 和 releaseTraverseContext\"></a>getPooledTraverseContext 和 releaseTraverseContext</h4><p><code>getPooledTraverseContext</code> 和 <code>releaseTraverseContext</code> 是配套使用的，他们主要是维护一个长度为10对象池，<code>getPooledTraverseContext</code> 就是从对象池中拿一个对象出来然后赋值，<code>releaseTraverseContext</code> 就是将 traverseContext 的属性赋值为空，然后重新放会到池子里面。这样做是因为减少 创建对线和释放对象的性能消耗。</p>\n<pre><code class=\"jsx\">/**\n * 从池中拿一个对象然后赋值，要是池子没有那直接返回一个对象\n * @param {Array} mapResult  遍历后的结果存放\n * @param {string} keyPrefix key 值\n * @param {func} maoFunction (item) =&gt; {}\n * @param {*} mapContext undefined \n * @returns {result, keyPrefix, func, context, count = 0}\n*/\n\nfunction getPooledTraverseContext(\n  mapResult,\n  keyPrefix,\n  mapFunction,\n  mapContext,\n) {\n  if (traverseContextPool.length) {\n    const traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0,\n    };\n  }\n}\n\n// 将对象置空然后放回池子\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n  if (traverseContextPool.length &lt; POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}</code></pre>\n<h4 id=\"traverseAllChildren\"><a href=\"#traverseAllChildren\" class=\"headerlink\" title=\"traverseAllChildren\"></a>traverseAllChildren</h4><pre><code class=\"jsx\">/**\n * @param {*} children &lt;p&gt;123&lt;/p&gt; 或者是 [&lt;p&gt;123&lt;/p&gt;, &lt;p&gt;456&lt;/p&gt;]\n * @param callback mapSingleChildIntoContext\n * @param {result, keyPrefix, func, context, count = 0} traverseContext\n*/\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, &#39;&#39;, callback, traverseContext);\n}</code></pre>\n<h4 id=\"traverseAllChildrenImple\"><a href=\"#traverseAllChildrenImple\" class=\"headerlink\" title=\"traverseAllChildrenImple\"></a>traverseAllChildrenImple</h4><pre><code class=\"jsx\">/**\n * @param {?*} children &lt;p&gt;123&lt;/p&gt; 或者是 [&lt;p&gt;123&lt;/p&gt;, &lt;p&gt;456&lt;/p&gt;]\n * @param {!string} nameSoFar 名字路径\n * @param {!function} callback mapSingleChildIntoContext\n * @param {?*} traverseContext {result, keyPrefix, func, context, count = 0} \n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(\n  children,\n  nameSoFar,\n  callback,\n  traverseContext,\n) {\n  // 这个函数核心作用就是通过把传入的 children 数组通过遍历摊平成单个节点\n  // 然后去执行 mapSingleChildIntoContext\n\n  // 开始判断 children 的类型\n  const type = typeof children;\n\n  if (type === &#39;undefined&#39; || type === &#39;boolean&#39;) {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  let invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case &#39;string&#39;:\n      case &#39;number&#39;:\n        invokeCallback = true;\n        break;\n      case &#39;object&#39;:\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n    }\n  }\n  // 如果 children 是可以渲染的节点的话， 比如是&lt;Demo&gt;123&lt;/Demo&gt;, 这种情况下，children 是“123”, 就直接调用 callback, \n  // 如果 children 是 [&lt;p&gt;123&lt;/p&gt;, &lt;p&gt;&lt;/p&gt;] 就跳过往下走\n  // callback 是 mapSingleChildIntoContext\n  if (invokeCallback) {\n    callback(\n      traverseContext,\n      children,\n      nameSoFar === &#39;&#39; ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,\n    );\n    return 1;\n  }\n\n  // nextName 和 nextNamePrefix 都是在处理 key 的命名\n  let child;\n  let nextName;\n  let subtreeCount = 0; // Count of children found in the current subtree.\n  const nextNamePrefix =\n    nameSoFar === &#39;&#39; ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  // 节点是数组的话，就开始遍历数组，并且把数组中的每个元素再递归执行 traverseAllChildrenImpl\n  // 如果children 是数据的话，遍历children数组， 然后在对每个元素进行\n  // mapSingleChildIntoContext\n  if (Array.isArray(children)) {\n    for (let i = 0; i &lt; children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(\n        child,\n        nextName,\n        callback,\n        traverseContext,\n      );\n    }\n  } else {\n    // 不是数组的话，就看看 children 是否可以支持迭代\n    // 就是通过 obj[Symbol.iterator] 的方式去取\n    const iteratorFn = getIteratorFn(children);\n    // 只有取出来对象是个函数类型才是正确的\n    if (typeof iteratorFn === &#39;function&#39;) {\n      // 然后就是执行迭代器，重复上面 if 中的逻辑了\n      const iterator = iteratorFn.call(children);\n      let step;\n      let ii = 0;\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(\n          child,\n          nextName,\n          callback,\n          traverseContext,\n        );\n      }\n    } else if (type === &#39;object&#39;) {\n      let addendum = &#39;&#39;;\n      const childrenString = &#39;&#39; + children;\n\n    }\n  }\n\n  return subtreeCount;\n}</code></pre>\n<ul>\n<li>该函数用于平铺节点</li>\n<li>我们要记住callback 是 <code>mapSingleChildIntoContext</code></li>\n<li>判断<code>children</code>类型<ul>\n<li>为数字，字符串，还有单个节点的时候直接执行<code>mapSingleChildIntoContext</code></li>\n<li>要是为数组的话遍历数组，再执行<code>traverseAllChildrenImpl</code></li>\n<li>不是数组的话判断一下children 是不是可迭代的，要是是对象的话就抛出对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"mapSingleChildIntoContext\"><a href=\"#mapSingleChildIntoContext\" class=\"headerlink\" title=\"mapSingleChildIntoContext\"></a>mapSingleChildIntoContext</h4><pre><code class=\"js\">/**\n * 这个函数只有当传入的 child 是单个节点是才会调用\n * @param bookKeeping traverseContext \n * @param child 传入的节点\n * @param childKey 节点的 key\n */\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  const {result, keyPrefix, func, context} = bookKeeping;\n  // func  =&gt; (item) =&gt; [item, [item, [item]]]\n  let mappedChild = func.call(context, child, bookKeeping.count++);\n  // 判断函数返回值是否为数组\n  // mappedChild 的结果是 [item, [item, [item]]]\n  // 我们说 (item) =&gt; [item, [item, [item]]] 会平铺成 [item, item, item]\n  if (Array.isArray(mappedChild)) {\n    // 是数组的话就回到最先调用的函数中\n    // 然后回到之前 traverseAllChildrenImpl 摊平数组的问题\n    // 假如 c =&gt; [item, [item, [item]]]，当执行这个函数时，返回值应该是 [item, [item, [item]]]\n    // 然后 [item, [item, [item]]] 会被当成 children 传入\n    // traverseAllChildrenImpl 内部逻辑判断是数组又会重新递归执行\n\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, c =&gt; c);\n  } else if (mappedChild != null) {\n    // 不是数组且返回值不为空，判断返回值是否为有效的 Element\n    // 是的话就把这个元素 clone 一遍并且替换掉 key\n    if (isValidElement(mappedChild)) {\n      mappedChild = cloneAndReplaceKey(\n        mappedChild,\n        // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        keyPrefix +\n          (mappedChild.key &amp;&amp; (!child || child.key !== mappedChild.key)\n            ? escapeUserProvidedKey(mappedChild.key) + &#39;/&#39;\n            : &#39;&#39;) +\n          childKey,\n      );\n    }\n    result.push(mappedChild);\n  }\n}</code></pre>\n<p>看看流程<br><strong>eg.</strong></p>\n<ul>\n<li><code>React.Children.map(this.props.children, (item) =&gt; [item, [item, [item]]])</code></li>\n<li>children =&gt; <code>[&lt;p&gt;123&lt;/p&gt;, &lt;p&gt;456&lt;/p&gt;]</code>, func =&gt; <code>(item) =&gt; [item, [item, [item]]</code>, result = []</li>\n</ul>\n<ol>\n<li><p>先进行 <code>mapIntoWithKeyPrefixInternal</code>, 传入上面三个值， 我们直接忽略key</p>\n</li>\n<li><p>然后从池里赋值 <code>func</code> 和<code>result</code>, <code>prefix</code>， 此时 <code>traverseContext</code></p>\n<ul>\n<li><pre><code class=\"js\"> result: [],\n keyPrefix: &#39;&#39;,\n func: (item) =&gt; [item, [item, item]],\n context: undefined\n count: 0</code></pre>\n</li>\n</ul>\n</li>\n<li><p>然后执行 <code>traverseAllChildren</code></p>\n</li>\n<li><p>再执行 <code>traverseAllChildrenImpl</code>, 判断 当前children 是不是可以直接渲染</p>\n<ul>\n<li><p>是的话：那直接执行 mapSingleChildIntoContext， 将当前节点放到result</p>\n</li>\n<li><p>但现在我们的 <code>children</code> 是数组， 所以我们要逐个遍历， 再执行<code>traverseAllChildrenImpl</code></p>\n<ul>\n<li><p><strong>eg.</strong>此时我们拿到<code>children[0]</code>, 然后执行<code>traverseAllChildrenImpl</code>,然后进入 <code>mapSingleChildIntoContext，</code></p>\n</li>\n<li><pre><code class=\"jsx\">// mapSingleChildIntoContext\n// bookKeeping：{ result: [], keyPrefix: &quot;&quot;, func: (item) =&gt; [item, [item, [item]]] }\n// child: &lt;p&gt;123&lt;/p&gt;</code></pre>\n</li>\n<li><p>在<code>mapSingleChildIntoContext</code>内执行了func, 所以得到的结果是<code>mappedChild = [item, [item, [item]]]</code>， 然后<strong>判断mappedChild是否是数组</strong>，是的话把 mappedChild 当成children 从第一步开始, 但递归后此时func是<code>c =&gt; c</code>,</p>\n</li>\n<li><p>从 <code>traverseAllChildrenImpl</code> 判断 <code>mappedChild</code> 是数组，然后遍历他，拿出第一个item，再执行了一次 <code>traverseAllChildrenImpl</code>,然后是ReactElement,就执行了<code>mapSingleChildIntoContext</code>, 但<strong>注意</strong>此时的func 是 <code>c =&gt; c</code>, 判定结果不是数组，将结果push 进result，<code>mapSingleChildIntoContext结束</code>。回到<code>traverseAllChildrenImpl</code>, 然后执行 <code>mappedChild[1]</code>, 又在<code>traverseAllChildrenImpl</code>方法判定是数组，再取<code>mappedChild[1][0]</code> 去做 <code>mapSingleChildIntoContext</code>, 然后执行 func <code>c =&gt; c</code>,再push进result，<code>mapSingleChildIntoContext结束</code>, 再一次回到<code>traverseAllChildrenImpl</code>，直到<code>mapChildren</code>遍历完。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>以上如此类推</p>\n</li>\n</ol>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><!-- ![1592636860_1_.jpg](https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png) -->\n\n<a class=\"group\" rel=\"group1 noopener\" href=\"https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png\" target=\"_blank\">\n    <img src=\"https://i.loli.net/2020/06/20/gDGK3Jal8bYx7Pp.png\">    \n</a>"},{"title":"React源码-ReactDOM","date":"2020-06-28T10:46:51.000Z","_content":"\n## 文件目录\n\n`packages/react-dom/src/ReactDOM.js`\n\n## 用法\n\n```jsx\nReactDOM.render(<App />, document.getElementById(\"root\"));\n```\n\n## 源码\n\n### ReactDOM.render\n\n```jsx\nconst ReactDOM: Object = {\n    /**\n     * element => <App />\n     * container => document.getElementById(\"root\")\n     * callback => 回调函数 很少用\n    */\n    render(\n        element: React$Element<any>,\n        container: DOMContainer,\n        callback: ?Function,\n    ) {\n    // 下面第四个参数为false， 如果为true那么说明是服务端渲染\n    return legacyRenderSubtreeIntoContainer(\n        null,\n        element,\n        container,\n        false,\n        callback,\n    );\n};\n```\n\n* 先为`container`创建`_reactRootContainer`属性，其类型是ReactRoot, 同时在这一步中**删除掉container中的所有子集**\n\n### legacyRenderSubtreeIntoContainer\n\n```jsx\n/**\n * parentComponent => null\n * children => <App>\n * container => document.getElementById(\"root\")\n * forceHydrate => false\n * callback => callback\n*/\nfunction legacyRenderSubtreeIntoContainer(\n    parentComponent: ?React$Component<any, any>,\n    children: ReactNodeList,\n    container: DOMContainer,\n    forceHydrate: boolean,\n    callback: ?Function,\n) {\n    let root: Root = (container._reactRootContainer: any);\n    // 当前 container 没有 _reactRootContainer, 进去if操作执行legacyCreateRootFromDOMContainer\n    if (!root) {\n        // 初始化操作，创建_reactRootContainer属性， 类型是ReactRoot\n        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(\n            container,\n            forceHydrate,\n        );\n        // 反正我从没传过 callback，不关心实现\n        if (typeof callback === 'function') {\n            const originalCallback = callback;\n            callback = function() {\n                const instance = getPublicRootInstance(root._internalRoot);\n                originalCallback.call(instance);\n            };\n        }\n        // Initial mount should not be batched.\n        // 第一次加载的话不需要打包更新\n        unbatchedUpdates(() => {\n            // 第一次不存在 parentComponent, 然后调用ReactRoot.prototype.render\n            if (parentComponent != null) {\n                root.legacy_renderSubtreeIntoContainer(\n                parentComponent,\n                children,\n                callback,\n                );\n            } else {\n                root.render(children, callback);\n            }\n        });\n    } else {\n        if (typeof callback === 'function') {\n            const originalCallback = callback;\n            callback = function() {\n                const instance = getPublicRootInstance(root._internalRoot);\n                originalCallback.call(instance);\n            };\n        }\n        // Update\n        if (parentComponent != null) {\n            root.legacy_renderSubtreeIntoContainer(\n                parentComponent,\n                children,\n                callback,\n            );\n        } else {\n            root.render(children, callback);\n        }\n    }\n    return getPublicRootInstance(root._internalRoot);\n}\n```\n\n### legacyCreateRootFromDOMContainer\n\n* 该方法是删除container下的子节点，并且生成`ReactRoot`\n\n```jsx\nfunction legacyCreateRootFromDOMContainer(\n    container: DOMContainer,\n    forceHydrate: boolean,\n): Root {\n    // 这个变量跟服务端渲染有关，我们直接把他看成false\n    const shouldHydrate =\n        forceHydrate || shouldHydrateDueToLegacyHeuristic(container);\n   \n    if (!shouldHydrate) {\n        let rootSibling;\n        // 这里直接把container的子节点删除，直到没有子节点\n        // <div id=\"root\"></div>\n        while ((rootSibling = container.lastChild)) {\n            container.removeChild(rootSibling);\n        }\n    }\n    \n    // 默认情况下root不用异步\n    const isConcurrent = false;\n    return new ReactRoot(container, isConcurrent, shouldHydrate);\n}\n```\n\n### ReactRoot\n\n* 我们看ReactRoot这个结构函数 `createContainer`就是一行代码它的作用是创建FiberRoot, 而这个root 其实又是 `FiberRootNode`\n* 然后创建Fiber, `createFiber(HostRoot, null, null, mode);`, 然后又返回了`FiberNode`, 此时`container`拥有**_reactRootContainer**属性, 而 `_reactRootContainer` 拥有 `_internalRoot`属性, 而`_internalRoot`又拥有`current`属性，这个属性类型就是FiberNode\n* 我们可以在react 项目下 打印一下 `document.getElementById(\"root\")._reactRootContainer`\n\n```js\n/**\n * container => <div id=\"root\"></div>\n * isConcurrent => false\n * hydrate => false\n*/\nfunction ReactRoot(\n    container: DOMContainer,\n    isConcurrent: boolean,\n    hydrate: boolean,\n) {\n    // 这个 root 指的是 FiberRoot\n    // 文件路径 packages/react-reconciler/src/ReactFiberReconciler.js\n    // createContainer 很简单就一行代码 \n    // return createFiberRoot(containerInfo, isConcurrent, hydrate);\n    const root = createContainer(container, isConcurrent, hydrate);\n    this._internalRoot = root;\n}\n\nReactRoot.prototype.render = function(\n  children: ReactNodeList,\n  callback: ?() => mixed,\n): Work {\n  // 这里就是之前的那个createFiberRoot创建的FiberRoot\n  const root = this._internalRoot;\n  // ReactWork 的功能就是为了在组件渲染或更新后把所有传入\n  // ReactDom.render 中的回调函数全部执行一遍\n  const work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n  // 如果有 callback，就 push 进 work 中的数组\n  if (callback !== null) {\n    work.then(callback);\n  }\n  // work._onCommit 就是用于执行所有回调函数的\n  updateContainer(children, root, null, work._onCommit);\n  return work;\n};\n\n// 其实这里的名字已经表达了意思了，将subTree渲染进container\nReactRoot.prototype.legacy_renderSubtreeIntoContainer = function(\n  parentComponent: ?React$Component<any, any>,\n  children: ReactNodeList,\n  callback: ?() => mixed,\n): Work {\n  const root = this._internalRoot;\n  const work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n \n  if (callback !== null) {\n    work.then(callback);\n  }\n  updateContainer(children, root, parentComponent, work._onCommit);\n  return work;\n};\n```\n\n#### createContainer\n\n```jsx\nexport function createContainer(\n    containerInfo: Container,\n    isConcurrent: boolean,\n    hydrate: boolean,\n): OpaqueRoot {\n    return createFiberRoot(containerInfo, isConcurrent, hydrate);\n}\n```\n\n#### createFiberRoot\n\n```jsx\nexport function createFiberRoot(\n  containerInfo: any,\n  isConcurrent: boolean,\n  hydrate: boolean,\n): FiberRoot {\n    // FiberRootNode 内部创建了很多属性\n    const root: FiberRoot = (new FiberRootNode(containerInfo, hydrate): any);\n    // document.getElementById(\"root\").._reactRootContainer._internalRoot 是 FiberRoot\n    // document.querySelector('#root')._reactRootContainer._internalRoot.current 是 Fiber\n    const uninitializedFiber = createHostRootFiber(isConcurrent);\n    root.current = uninitializedFiber;\n    uninitializedFiber.stateNode = root;\n\n    return root;\n}\n\n```\n\n#### createHostRootFiber \n\n```js\nexport function createHostRootFiber(isConcurrent: boolean): Fiber {\n    let mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;\n\n    if (enableProfilerTimer && isDevToolsPresent) {\n        mode |= ProfileMode;\n    }\n    \n    // HostRoot 指的是 classComponent, lazyComponent, functionCompoenent 等等\n    return createFiber(HostRoot, null, null, mode);\n}\n\n```\n\n#### createFiber \n\n我们可以从 `packages/react-reconciler/src/ReactFiber.js` 查看Fiber 的属性\n\n```jsx\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n```\n\n\n## FiberRoot 的结构\n<details>\n<summary><mark>点击查看FiberRoot</mark></summary>\n\n```jsx\ntype BaseFiberRootProperties = {|\n  // Any additional information from the host associated with this root.\n  // 就是 document.getElementById(\"root\")\n  containerInfo: any,\n  // 仅用于持久更新。\n  pendingChildren: any,\n  // 当前应用对应的Fiber对象，是Root Fiber\n  current: Fiber,\n\n  // 以下优先级用于区分\n  // 1) 没有提交(committed)的任务\n  // 2) 没有提交的挂起任务\n  // 3) 没有提交的可能被挂起的任务\n  // 我们选择不追踪每个单独的阻塞登记，为了兼顾性能而是按交易粒度来衡量绩效。\n\n  earliestSuspendedTime: ExpirationTime,\n  latestSuspendedTime: ExpirationTime,\n  // The earliest and latest priority levels that are not known to be suspended.\n  earliestPendingTime: ExpirationTime,\n  latestPendingTime: ExpirationTime,\n  // 最新通过的一个被reslove并且可以重新尝试的优先级\n  latestPingedTime: ExpirationTime,\n\n  pingCache:\n    | WeakMap<Thenable, Set<ExpirationTime>>\n    | Map<Thenable, Set<ExpirationTime>>\n    | null,\n\n  // 如果抛出错误，并且队列中没有更多更新，则在处理该错误之前，我们尝试从根目录再次进行一次同步渲染。\n  didError: boolean,\n\n  // 正在等待提交的任务的`expirationTime`\n  pendingCommitExpirationTime: ExpirationTime,\n \n  finishedWork: Fiber | null,\n  // 超时的操作\n  timeoutHandle: TimeoutHandle | NoTimeout,\n  // Top context object, used by renderSubtreeIntoContainer\n  context: Object | null,\n  pendingContext: Object | null,\n  // Determines if we should attempt to hydrate on the initial mount\n  +hydrate: boolean,\n  // Remaining expiration time on this root.\n  // TODO: Lift this into the renderer\n  nextExpirationTimeToWorkOn: ExpirationTime,\n  expirationTime: ExpirationTime,\n  // List of top-level batches. This list indicates whether a commit should be\n  // deferred. Also contains completion callbacks.\n  // TODO: Lift this into the renderer\n  firstBatch: Batch | null,\n  // root之间关联的链表结构\n  nextScheduledRoot: FiberRoot | null,\n\n  // New Scheduler fields\n  callbackNode: *,\n  callbackExpirationTime: ExpirationTime,\n  firstPendingTime: ExpirationTime,\n  lastPendingTime: ExpirationTime,\n  pingTime: ExpirationTime,\n|};\n\ntype ProfilingOnlyFiberRootProperties = {|\n  interactionThreadID: number,\n  memoizedInteractions: Set<Interaction>,\n  pendingInteractionMap: PendingInteractionMap,\n|};\n\nexport type FiberRoot = {\n  ...BaseFiberRootProperties,\n  ...ProfilingOnlyFiberRootProperties,\n};\n```\n</details>\nFiberRoot 的结构是上面两个合起来\n\n## Fiber 结构\n\n<details>\n<summary><mark>点击查看Fiber</mark></summary>\n\n```js\nexport type Fiber = {|\n\n  // 指的是functionComponent 还是 classComponent等等， lazyComponent\n  tag: WorkTag,\n\n  // Unique identifier of this child.\n  key: null | string,\n\n  // The value of element.type which is used to preserve the identity during\n  // reconciliation of this child.\n  elementType: any,\n\n  // The resolved function/class/ associated with this fiber.\n  type: any,\n\n  //  本地相关联的Fiber\n  stateNode: any,\n\n  // 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回\n  return: Fiber | null,\n\n  // 子节点，兄弟节点\n  child: Fiber | null,\n  sibling: Fiber | null,\n  index: number,\n\n  // 就是ref\n  ref: null | (((handle: mixed) => void) & {_stringRef: ?string}) | RefObject,\n\n  // 将要处理的props, 罪行的props\n  pendingProps: any, // This type will be more specific once we overload the tag.\n  // 上一次的props\n  memoizedProps: any, // The props used to create the output.\n\n  // A queue of state updates and callbacks.\n  // 用来存放 update，也就是用来记录改变状态的\n  updateQueue: UpdateQueue<any> | null,\n\n  // 上一次的state\n  memoizedState: any,\n\n  // A linked-list of contexts that this fiber depends on\n  contextDependencies: ContextDependencyList | null,\n  mode: TypeOfMode,\n\n  // Effect\n  effectTag: SideEffectTag,\n\n  // Singly linked list fast path to the next fiber with side-effects.\n  nextEffect: Fiber | null,\n\n  firstEffect: Fiber | null,\n  lastEffect: Fiber | null,\n\n  // Represents a time in the future by which this work should be completed.\n  // Does not include work found in its subtree.\n  expirationTime: ExpirationTime,\n\n  // This is used to quickly determine if a subtree has no pending changes.\n  childExpirationTime: ExpirationTime,\n\n  alternate: Fiber | null,\n\n  actualDuration?: number,\n\n  actualStartTime?: number,\n\n  selfBaseDuration?: number,\n\n  treeBaseDuration?: number,\n\n|};\n```\n</details>\n\n## Fiber结构图\n\n![Fiber结构图](https://i.loli.net/2020/06/29/zJLutWEVHIZjKvr.png)\n\n## 函数运行流程图\n\n![运行流程图](./React源码-ReactDOM/函数运行流程图.jpg)\n\n\n> [从demo查看](https://codesandbox.io/s/heuristic-gagarin-edqiv?file=/src/App.js)\n\n\n\n","source":"_posts/React源码-ReactDOM.md","raw":"---\ntitle: React源码-ReactDOM\ndate: 2020-06-28 10:46:51\ntags: [react, react源码系列]\ncategories: [react, react源码系列]\n---\n\n## 文件目录\n\n`packages/react-dom/src/ReactDOM.js`\n\n## 用法\n\n```jsx\nReactDOM.render(<App />, document.getElementById(\"root\"));\n```\n\n## 源码\n\n### ReactDOM.render\n\n```jsx\nconst ReactDOM: Object = {\n    /**\n     * element => <App />\n     * container => document.getElementById(\"root\")\n     * callback => 回调函数 很少用\n    */\n    render(\n        element: React$Element<any>,\n        container: DOMContainer,\n        callback: ?Function,\n    ) {\n    // 下面第四个参数为false， 如果为true那么说明是服务端渲染\n    return legacyRenderSubtreeIntoContainer(\n        null,\n        element,\n        container,\n        false,\n        callback,\n    );\n};\n```\n\n* 先为`container`创建`_reactRootContainer`属性，其类型是ReactRoot, 同时在这一步中**删除掉container中的所有子集**\n\n### legacyRenderSubtreeIntoContainer\n\n```jsx\n/**\n * parentComponent => null\n * children => <App>\n * container => document.getElementById(\"root\")\n * forceHydrate => false\n * callback => callback\n*/\nfunction legacyRenderSubtreeIntoContainer(\n    parentComponent: ?React$Component<any, any>,\n    children: ReactNodeList,\n    container: DOMContainer,\n    forceHydrate: boolean,\n    callback: ?Function,\n) {\n    let root: Root = (container._reactRootContainer: any);\n    // 当前 container 没有 _reactRootContainer, 进去if操作执行legacyCreateRootFromDOMContainer\n    if (!root) {\n        // 初始化操作，创建_reactRootContainer属性， 类型是ReactRoot\n        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(\n            container,\n            forceHydrate,\n        );\n        // 反正我从没传过 callback，不关心实现\n        if (typeof callback === 'function') {\n            const originalCallback = callback;\n            callback = function() {\n                const instance = getPublicRootInstance(root._internalRoot);\n                originalCallback.call(instance);\n            };\n        }\n        // Initial mount should not be batched.\n        // 第一次加载的话不需要打包更新\n        unbatchedUpdates(() => {\n            // 第一次不存在 parentComponent, 然后调用ReactRoot.prototype.render\n            if (parentComponent != null) {\n                root.legacy_renderSubtreeIntoContainer(\n                parentComponent,\n                children,\n                callback,\n                );\n            } else {\n                root.render(children, callback);\n            }\n        });\n    } else {\n        if (typeof callback === 'function') {\n            const originalCallback = callback;\n            callback = function() {\n                const instance = getPublicRootInstance(root._internalRoot);\n                originalCallback.call(instance);\n            };\n        }\n        // Update\n        if (parentComponent != null) {\n            root.legacy_renderSubtreeIntoContainer(\n                parentComponent,\n                children,\n                callback,\n            );\n        } else {\n            root.render(children, callback);\n        }\n    }\n    return getPublicRootInstance(root._internalRoot);\n}\n```\n\n### legacyCreateRootFromDOMContainer\n\n* 该方法是删除container下的子节点，并且生成`ReactRoot`\n\n```jsx\nfunction legacyCreateRootFromDOMContainer(\n    container: DOMContainer,\n    forceHydrate: boolean,\n): Root {\n    // 这个变量跟服务端渲染有关，我们直接把他看成false\n    const shouldHydrate =\n        forceHydrate || shouldHydrateDueToLegacyHeuristic(container);\n   \n    if (!shouldHydrate) {\n        let rootSibling;\n        // 这里直接把container的子节点删除，直到没有子节点\n        // <div id=\"root\"></div>\n        while ((rootSibling = container.lastChild)) {\n            container.removeChild(rootSibling);\n        }\n    }\n    \n    // 默认情况下root不用异步\n    const isConcurrent = false;\n    return new ReactRoot(container, isConcurrent, shouldHydrate);\n}\n```\n\n### ReactRoot\n\n* 我们看ReactRoot这个结构函数 `createContainer`就是一行代码它的作用是创建FiberRoot, 而这个root 其实又是 `FiberRootNode`\n* 然后创建Fiber, `createFiber(HostRoot, null, null, mode);`, 然后又返回了`FiberNode`, 此时`container`拥有**_reactRootContainer**属性, 而 `_reactRootContainer` 拥有 `_internalRoot`属性, 而`_internalRoot`又拥有`current`属性，这个属性类型就是FiberNode\n* 我们可以在react 项目下 打印一下 `document.getElementById(\"root\")._reactRootContainer`\n\n```js\n/**\n * container => <div id=\"root\"></div>\n * isConcurrent => false\n * hydrate => false\n*/\nfunction ReactRoot(\n    container: DOMContainer,\n    isConcurrent: boolean,\n    hydrate: boolean,\n) {\n    // 这个 root 指的是 FiberRoot\n    // 文件路径 packages/react-reconciler/src/ReactFiberReconciler.js\n    // createContainer 很简单就一行代码 \n    // return createFiberRoot(containerInfo, isConcurrent, hydrate);\n    const root = createContainer(container, isConcurrent, hydrate);\n    this._internalRoot = root;\n}\n\nReactRoot.prototype.render = function(\n  children: ReactNodeList,\n  callback: ?() => mixed,\n): Work {\n  // 这里就是之前的那个createFiberRoot创建的FiberRoot\n  const root = this._internalRoot;\n  // ReactWork 的功能就是为了在组件渲染或更新后把所有传入\n  // ReactDom.render 中的回调函数全部执行一遍\n  const work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n  // 如果有 callback，就 push 进 work 中的数组\n  if (callback !== null) {\n    work.then(callback);\n  }\n  // work._onCommit 就是用于执行所有回调函数的\n  updateContainer(children, root, null, work._onCommit);\n  return work;\n};\n\n// 其实这里的名字已经表达了意思了，将subTree渲染进container\nReactRoot.prototype.legacy_renderSubtreeIntoContainer = function(\n  parentComponent: ?React$Component<any, any>,\n  children: ReactNodeList,\n  callback: ?() => mixed,\n): Work {\n  const root = this._internalRoot;\n  const work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n \n  if (callback !== null) {\n    work.then(callback);\n  }\n  updateContainer(children, root, parentComponent, work._onCommit);\n  return work;\n};\n```\n\n#### createContainer\n\n```jsx\nexport function createContainer(\n    containerInfo: Container,\n    isConcurrent: boolean,\n    hydrate: boolean,\n): OpaqueRoot {\n    return createFiberRoot(containerInfo, isConcurrent, hydrate);\n}\n```\n\n#### createFiberRoot\n\n```jsx\nexport function createFiberRoot(\n  containerInfo: any,\n  isConcurrent: boolean,\n  hydrate: boolean,\n): FiberRoot {\n    // FiberRootNode 内部创建了很多属性\n    const root: FiberRoot = (new FiberRootNode(containerInfo, hydrate): any);\n    // document.getElementById(\"root\").._reactRootContainer._internalRoot 是 FiberRoot\n    // document.querySelector('#root')._reactRootContainer._internalRoot.current 是 Fiber\n    const uninitializedFiber = createHostRootFiber(isConcurrent);\n    root.current = uninitializedFiber;\n    uninitializedFiber.stateNode = root;\n\n    return root;\n}\n\n```\n\n#### createHostRootFiber \n\n```js\nexport function createHostRootFiber(isConcurrent: boolean): Fiber {\n    let mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;\n\n    if (enableProfilerTimer && isDevToolsPresent) {\n        mode |= ProfileMode;\n    }\n    \n    // HostRoot 指的是 classComponent, lazyComponent, functionCompoenent 等等\n    return createFiber(HostRoot, null, null, mode);\n}\n\n```\n\n#### createFiber \n\n我们可以从 `packages/react-reconciler/src/ReactFiber.js` 查看Fiber 的属性\n\n```jsx\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n```\n\n\n## FiberRoot 的结构\n<details>\n<summary><mark>点击查看FiberRoot</mark></summary>\n\n```jsx\ntype BaseFiberRootProperties = {|\n  // Any additional information from the host associated with this root.\n  // 就是 document.getElementById(\"root\")\n  containerInfo: any,\n  // 仅用于持久更新。\n  pendingChildren: any,\n  // 当前应用对应的Fiber对象，是Root Fiber\n  current: Fiber,\n\n  // 以下优先级用于区分\n  // 1) 没有提交(committed)的任务\n  // 2) 没有提交的挂起任务\n  // 3) 没有提交的可能被挂起的任务\n  // 我们选择不追踪每个单独的阻塞登记，为了兼顾性能而是按交易粒度来衡量绩效。\n\n  earliestSuspendedTime: ExpirationTime,\n  latestSuspendedTime: ExpirationTime,\n  // The earliest and latest priority levels that are not known to be suspended.\n  earliestPendingTime: ExpirationTime,\n  latestPendingTime: ExpirationTime,\n  // 最新通过的一个被reslove并且可以重新尝试的优先级\n  latestPingedTime: ExpirationTime,\n\n  pingCache:\n    | WeakMap<Thenable, Set<ExpirationTime>>\n    | Map<Thenable, Set<ExpirationTime>>\n    | null,\n\n  // 如果抛出错误，并且队列中没有更多更新，则在处理该错误之前，我们尝试从根目录再次进行一次同步渲染。\n  didError: boolean,\n\n  // 正在等待提交的任务的`expirationTime`\n  pendingCommitExpirationTime: ExpirationTime,\n \n  finishedWork: Fiber | null,\n  // 超时的操作\n  timeoutHandle: TimeoutHandle | NoTimeout,\n  // Top context object, used by renderSubtreeIntoContainer\n  context: Object | null,\n  pendingContext: Object | null,\n  // Determines if we should attempt to hydrate on the initial mount\n  +hydrate: boolean,\n  // Remaining expiration time on this root.\n  // TODO: Lift this into the renderer\n  nextExpirationTimeToWorkOn: ExpirationTime,\n  expirationTime: ExpirationTime,\n  // List of top-level batches. This list indicates whether a commit should be\n  // deferred. Also contains completion callbacks.\n  // TODO: Lift this into the renderer\n  firstBatch: Batch | null,\n  // root之间关联的链表结构\n  nextScheduledRoot: FiberRoot | null,\n\n  // New Scheduler fields\n  callbackNode: *,\n  callbackExpirationTime: ExpirationTime,\n  firstPendingTime: ExpirationTime,\n  lastPendingTime: ExpirationTime,\n  pingTime: ExpirationTime,\n|};\n\ntype ProfilingOnlyFiberRootProperties = {|\n  interactionThreadID: number,\n  memoizedInteractions: Set<Interaction>,\n  pendingInteractionMap: PendingInteractionMap,\n|};\n\nexport type FiberRoot = {\n  ...BaseFiberRootProperties,\n  ...ProfilingOnlyFiberRootProperties,\n};\n```\n</details>\nFiberRoot 的结构是上面两个合起来\n\n## Fiber 结构\n\n<details>\n<summary><mark>点击查看Fiber</mark></summary>\n\n```js\nexport type Fiber = {|\n\n  // 指的是functionComponent 还是 classComponent等等， lazyComponent\n  tag: WorkTag,\n\n  // Unique identifier of this child.\n  key: null | string,\n\n  // The value of element.type which is used to preserve the identity during\n  // reconciliation of this child.\n  elementType: any,\n\n  // The resolved function/class/ associated with this fiber.\n  type: any,\n\n  //  本地相关联的Fiber\n  stateNode: any,\n\n  // 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回\n  return: Fiber | null,\n\n  // 子节点，兄弟节点\n  child: Fiber | null,\n  sibling: Fiber | null,\n  index: number,\n\n  // 就是ref\n  ref: null | (((handle: mixed) => void) & {_stringRef: ?string}) | RefObject,\n\n  // 将要处理的props, 罪行的props\n  pendingProps: any, // This type will be more specific once we overload the tag.\n  // 上一次的props\n  memoizedProps: any, // The props used to create the output.\n\n  // A queue of state updates and callbacks.\n  // 用来存放 update，也就是用来记录改变状态的\n  updateQueue: UpdateQueue<any> | null,\n\n  // 上一次的state\n  memoizedState: any,\n\n  // A linked-list of contexts that this fiber depends on\n  contextDependencies: ContextDependencyList | null,\n  mode: TypeOfMode,\n\n  // Effect\n  effectTag: SideEffectTag,\n\n  // Singly linked list fast path to the next fiber with side-effects.\n  nextEffect: Fiber | null,\n\n  firstEffect: Fiber | null,\n  lastEffect: Fiber | null,\n\n  // Represents a time in the future by which this work should be completed.\n  // Does not include work found in its subtree.\n  expirationTime: ExpirationTime,\n\n  // This is used to quickly determine if a subtree has no pending changes.\n  childExpirationTime: ExpirationTime,\n\n  alternate: Fiber | null,\n\n  actualDuration?: number,\n\n  actualStartTime?: number,\n\n  selfBaseDuration?: number,\n\n  treeBaseDuration?: number,\n\n|};\n```\n</details>\n\n## Fiber结构图\n\n![Fiber结构图](https://i.loli.net/2020/06/29/zJLutWEVHIZjKvr.png)\n\n## 函数运行流程图\n\n![运行流程图](./React源码-ReactDOM/函数运行流程图.jpg)\n\n\n> [从demo查看](https://codesandbox.io/s/heuristic-gagarin-edqiv?file=/src/App.js)\n\n\n\n","slug":"React源码-ReactDOM","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lreu000fmroj81d7aqzi","content":"<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><p><code>packages/react-dom/src/ReactDOM.js</code></p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><pre class=\" language-jsx\"><code class=\"language-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><h3 id=\"ReactDOM-render\"><a href=\"#ReactDOM-render\" class=\"headerlink\" title=\"ReactDOM.render\"></a>ReactDOM.render</h3><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> ReactDOM<span class=\"token punctuation\">:</span> Object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * element => &lt;App />\n     * container => document.getElementById(\"root\")\n     * callback => 回调函数 很少用\n    */</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n        element<span class=\"token punctuation\">:</span> React$Element<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>any</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n        container<span class=\"token punctuation\">:</span> DOMContainer<span class=\"token punctuation\">,</span>\n        callback<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>Function<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 下面第四个参数为false， 如果为true那么说明是服务端渲染</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">legacyRenderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        element<span class=\"token punctuation\">,</span>\n        container<span class=\"token punctuation\">,</span>\n        <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        callback<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>先为<code>container</code>创建<code>_reactRootContainer</code>属性，其类型是ReactRoot, 同时在这一步中<strong>删除掉container中的所有子集</strong></li>\n</ul>\n<h3 id=\"legacyRenderSubtreeIntoContainer\"><a href=\"#legacyRenderSubtreeIntoContainer\" class=\"headerlink\" title=\"legacyRenderSubtreeIntoContainer\"></a>legacyRenderSubtreeIntoContainer</h3><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * parentComponent => null\n * children => &lt;App>\n * container => document.getElementById(\"root\")\n * forceHydrate => false\n * callback => callback\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">legacyRenderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n    parentComponent<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>React$Component<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> ReactNodeList<span class=\"token punctuation\">,</span>\n    container<span class=\"token punctuation\">:</span> DOMContainer<span class=\"token punctuation\">,</span>\n    forceHydrate<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n    callback<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>Function<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> root<span class=\"token punctuation\">:</span> Root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>_reactRootContainer<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 当前 container 没有 _reactRootContainer, 进去if操作执行legacyCreateRootFromDOMContainer</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 初始化操作，创建_reactRootContainer属性， 类型是ReactRoot</span>\n        root <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>_reactRootContainer <span class=\"token operator\">=</span> <span class=\"token function\">legacyCreateRootFromDOMContainer</span><span class=\"token punctuation\">(</span>\n            container<span class=\"token punctuation\">,</span>\n            forceHydrate<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 反正我从没传过 callback，不关心实现</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> originalCallback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n            callback <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">getPublicRootInstance</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>_internalRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                originalCallback<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Initial mount should not be batched.</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 第一次加载的话不需要打包更新</span>\n        <span class=\"token function\">unbatchedUpdates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 第一次不存在 parentComponent, 然后调用ReactRoot.prototype.render</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentComponent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                root<span class=\"token punctuation\">.</span><span class=\"token function\">legacy_renderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n                parentComponent<span class=\"token punctuation\">,</span>\n                children<span class=\"token punctuation\">,</span>\n                callback<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> originalCallback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n            callback <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">getPublicRootInstance</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>_internalRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                originalCallback<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Update</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentComponent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            root<span class=\"token punctuation\">.</span><span class=\"token function\">legacy_renderSubtreeIntoContainer</span><span class=\"token punctuation\">(</span>\n                parentComponent<span class=\"token punctuation\">,</span>\n                children<span class=\"token punctuation\">,</span>\n                callback<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getPublicRootInstance</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>_internalRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"legacyCreateRootFromDOMContainer\"><a href=\"#legacyCreateRootFromDOMContainer\" class=\"headerlink\" title=\"legacyCreateRootFromDOMContainer\"></a>legacyCreateRootFromDOMContainer</h3><ul>\n<li>该方法是删除container下的子节点，并且生成<code>ReactRoot</code></li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">legacyCreateRootFromDOMContainer</span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">:</span> DOMContainer<span class=\"token punctuation\">,</span>\n    forceHydrate<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Root <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这个变量跟服务端渲染有关，我们直接把他看成false</span>\n    <span class=\"token keyword\">const</span> shouldHydrate <span class=\"token operator\">=</span>\n        forceHydrate <span class=\"token operator\">||</span> <span class=\"token function\">shouldHydrateDueToLegacyHeuristic</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>shouldHydrate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> rootSibling<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 这里直接把container的子节点删除，直到没有子节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// &lt;div id=\"root\">&lt;/div></span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rootSibling <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>lastChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            container<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>rootSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 默认情况下root不用异步</span>\n    <span class=\"token keyword\">const</span> isConcurrent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactRoot</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> isConcurrent<span class=\"token punctuation\">,</span> shouldHydrate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"ReactRoot\"><a href=\"#ReactRoot\" class=\"headerlink\" title=\"ReactRoot\"></a>ReactRoot</h3><ul>\n<li>我们看ReactRoot这个结构函数 <code>createContainer</code>就是一行代码它的作用是创建FiberRoot, 而这个root 其实又是 <code>FiberRootNode</code></li>\n<li>然后创建Fiber, <code>createFiber(HostRoot, null, null, mode);</code>, 然后又返回了<code>FiberNode</code>, 此时<code>container</code>拥有<strong>_reactRootContainer</strong>属性, 而 <code>_reactRootContainer</code> 拥有 <code>_internalRoot</code>属性, 而<code>_internalRoot</code>又拥有<code>current</code>属性，这个属性类型就是FiberNode</li>\n<li>我们可以在react 项目下 打印一下 <code>document.getElementById(&quot;root&quot;)._reactRootContainer</code></li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * container => &lt;div id=\"root\">&lt;/div>\n * isConcurrent => false\n * hydrate => false\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ReactRoot</span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">:</span> DOMContainer<span class=\"token punctuation\">,</span>\n    isConcurrent<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n    hydrate<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这个 root 指的是 FiberRoot</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 文件路径 packages/react-reconciler/src/ReactFiberReconciler.js</span>\n    <span class=\"token comment\" spellcheck=\"true\">// createContainer 很简单就一行代码 </span>\n    <span class=\"token comment\" spellcheck=\"true\">// return createFiberRoot(containerInfo, isConcurrent, hydrate);</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> isConcurrent<span class=\"token punctuation\">,</span> hydrate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internalRoot <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactRoot<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>render <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n  children<span class=\"token punctuation\">:</span> ReactNodeList<span class=\"token punctuation\">,</span>\n  callback<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> mixed<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Work <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 这里就是之前的那个createFiberRoot创建的FiberRoot</span>\n  <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internalRoot<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ReactWork 的功能就是为了在组件渲染或更新后把所有传入</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ReactDom.render 中的回调函数全部执行一遍</span>\n  <span class=\"token keyword\">const</span> work <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  callback <span class=\"token operator\">=</span> callback <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> callback<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 如果有 callback，就 push 进 work 中的数组</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    work<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// work._onCommit 就是用于执行所有回调函数的</span>\n  <span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> work<span class=\"token punctuation\">.</span>_onCommit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> work<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 其实这里的名字已经表达了意思了，将subTree渲染进container</span>\nReactRoot<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>legacy_renderSubtreeIntoContainer <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n  parentComponent<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>React$Component<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">:</span> ReactNodeList<span class=\"token punctuation\">,</span>\n  callback<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> mixed<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Work <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_internalRoot<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> work <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  callback <span class=\"token operator\">=</span> callback <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> callback<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    work<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> parentComponent<span class=\"token punctuation\">,</span> work<span class=\"token punctuation\">.</span>_onCommit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> work<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"createContainer\"><a href=\"#createContainer\" class=\"headerlink\" title=\"createContainer\"></a>createContainer</h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>\n    containerInfo<span class=\"token punctuation\">:</span> Container<span class=\"token punctuation\">,</span>\n    isConcurrent<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n    hydrate<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> OpaqueRoot <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createFiberRoot</span><span class=\"token punctuation\">(</span>containerInfo<span class=\"token punctuation\">,</span> isConcurrent<span class=\"token punctuation\">,</span> hydrate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"createFiberRoot\"><a href=\"#createFiberRoot\" class=\"headerlink\" title=\"createFiberRoot\"></a>createFiberRoot</h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createFiberRoot</span><span class=\"token punctuation\">(</span>\n  containerInfo<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n  isConcurrent<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n  hydrate<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> FiberRoot <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// FiberRootNode 内部创建了很多属性</span>\n    <span class=\"token keyword\">const</span> root<span class=\"token punctuation\">:</span> FiberRoot <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FiberRootNode</span><span class=\"token punctuation\">(</span>containerInfo<span class=\"token punctuation\">,</span> hydrate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// document.getElementById(\"root\").._reactRootContainer._internalRoot 是 FiberRoot</span>\n    <span class=\"token comment\" spellcheck=\"true\">// document.querySelector('#root')._reactRootContainer._internalRoot.current 是 Fiber</span>\n    <span class=\"token keyword\">const</span> uninitializedFiber <span class=\"token operator\">=</span> <span class=\"token function\">createHostRootFiber</span><span class=\"token punctuation\">(</span>isConcurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> uninitializedFiber<span class=\"token punctuation\">;</span>\n    uninitializedFiber<span class=\"token punctuation\">.</span>stateNode <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"createHostRootFiber\"><a href=\"#createHostRootFiber\" class=\"headerlink\" title=\"createHostRootFiber\"></a>createHostRootFiber</h4><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createHostRootFiber</span><span class=\"token punctuation\">(</span>isConcurrent<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Fiber <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> mode <span class=\"token operator\">=</span> isConcurrent <span class=\"token operator\">?</span> ConcurrentMode <span class=\"token operator\">|</span> StrictMode <span class=\"token punctuation\">:</span> NoContext<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enableProfilerTimer <span class=\"token operator\">&amp;&amp;</span> isDevToolsPresent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mode <span class=\"token operator\">|</span><span class=\"token operator\">=</span> ProfileMode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// HostRoot 指的是 classComponent, lazyComponent, functionCompoenent 等等</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createFiber</span><span class=\"token punctuation\">(</span>HostRoot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"createFiber\"><a href=\"#createFiber\" class=\"headerlink\" title=\"createFiber\"></a>createFiber</h4><p>我们可以从 <code>packages/react-reconciler/src/ReactFiber.js</code> 查看Fiber 的属性</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> createFiber <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n  tag<span class=\"token punctuation\">:</span> WorkTag<span class=\"token punctuation\">,</span>\n  pendingProps<span class=\"token punctuation\">:</span> mixed<span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> string<span class=\"token punctuation\">,</span>\n  mode<span class=\"token punctuation\">:</span> TypeOfMode<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Fiber <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FiberNode</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> pendingProps<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"FiberRoot-的结构\"><a href=\"#FiberRoot-的结构\" class=\"headerlink\" title=\"FiberRoot 的结构\"></a>FiberRoot 的结构</h2><details>\n<summary><mark>点击查看FiberRoot</mark></summary>\n\n<pre class=\" language-jsx\"><code class=\"language-jsx\">type BaseFiberRootProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Any additional information from the host associated with this root.</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 就是 document.getElementById(\"root\")</span>\n  containerInfo<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 仅用于持久更新。</span>\n  pendingChildren<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 当前应用对应的Fiber对象，是Root Fiber</span>\n  current<span class=\"token punctuation\">:</span> Fiber<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 以下优先级用于区分</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 1) 没有提交(committed)的任务</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 2) 没有提交的挂起任务</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 3) 没有提交的可能被挂起的任务</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 我们选择不追踪每个单独的阻塞登记，为了兼顾性能而是按交易粒度来衡量绩效。</span>\n\n  earliestSuspendedTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  latestSuspendedTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// The earliest and latest priority levels that are not known to be suspended.</span>\n  earliestPendingTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  latestPendingTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 最新通过的一个被reslove并且可以重新尝试的优先级</span>\n  latestPingedTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n\n  pingCache<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">|</span> WeakMap<span class=\"token operator\">&lt;</span>Thenable<span class=\"token punctuation\">,</span> Set<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ExpirationTime</span><span class=\"token punctuation\">></span></span><span class=\"token operator\">></span>\n    <span class=\"token operator\">|</span> Map<span class=\"token operator\">&lt;</span>Thenable<span class=\"token punctuation\">,</span> Set<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ExpirationTime</span><span class=\"token punctuation\">></span></span><span class=\"token operator\">></span>\n    <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 如果抛出错误，并且队列中没有更多更新，则在处理该错误之前，我们尝试从根目录再次进行一次同步渲染。</span>\n  didError<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 正在等待提交的任务的`expirationTime`</span>\n  pendingCommitExpirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n\n  finishedWork<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 超时的操作</span>\n  timeoutHandle<span class=\"token punctuation\">:</span> TimeoutHandle <span class=\"token operator\">|</span> NoTimeout<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Top context object, used by renderSubtreeIntoContainer</span>\n  context<span class=\"token punctuation\">:</span> Object <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  pendingContext<span class=\"token punctuation\">:</span> Object <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Determines if we should attempt to hydrate on the initial mount</span>\n  <span class=\"token operator\">+</span>hydrate<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Remaining expiration time on this root.</span>\n  <span class=\"token comment\" spellcheck=\"true\">// TODO: Lift this into the renderer</span>\n  nextExpirationTimeToWorkOn<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  expirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// List of top-level batches. This list indicates whether a commit should be</span>\n  <span class=\"token comment\" spellcheck=\"true\">// deferred. Also contains completion callbacks.</span>\n  <span class=\"token comment\" spellcheck=\"true\">// TODO: Lift this into the renderer</span>\n  firstBatch<span class=\"token punctuation\">:</span> Batch <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// root之间关联的链表结构</span>\n  nextScheduledRoot<span class=\"token punctuation\">:</span> FiberRoot <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// New Scheduler fields</span>\n  callbackNode<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n  callbackExpirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  firstPendingTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  lastPendingTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n  pingTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n<span class=\"token operator\">|</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntype ProfilingOnlyFiberRootProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>\n  interactionThreadID<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n  memoizedInteractions<span class=\"token punctuation\">:</span> Set<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Interaction</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  pendingInteractionMap<span class=\"token punctuation\">:</span> PendingInteractionMap<span class=\"token punctuation\">,</span>\n<span class=\"token operator\">|</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> type FiberRoot <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>BaseFiberRootProperties<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>ProfilingOnlyFiberRootProperties<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</details>\nFiberRoot 的结构是上面两个合起来\n\n<h2 id=\"Fiber-结构\"><a href=\"#Fiber-结构\" class=\"headerlink\" title=\"Fiber 结构\"></a>Fiber 结构</h2><details>\n<summary><mark>点击查看Fiber</mark></summary>\n\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Fiber <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 指的是functionComponent 还是 classComponent等等， lazyComponent</span>\n  tag<span class=\"token punctuation\">:</span> WorkTag<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Unique identifier of this child.</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> string<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// The value of element.type which is used to preserve the identity during</span>\n  <span class=\"token comment\" spellcheck=\"true\">// reconciliation of this child.</span>\n  elementType<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// The resolved function/class/ associated with this fiber.</span>\n  type<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">//  本地相关联的Fiber</span>\n  stateNode<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 子节点，兄弟节点</span>\n  child<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  sibling<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  index<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 就是ref</span>\n  ref<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">:</span> mixed<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>_stringRef<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>string<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> RefObject<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 将要处理的props, 罪行的props</span>\n  pendingProps<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// This type will be more specific once we overload the tag.</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 上一次的props</span>\n  memoizedProps<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// The props used to create the output.</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// A queue of state updates and callbacks.</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 用来存放 update，也就是用来记录改变状态的</span>\n  updateQueue<span class=\"token punctuation\">:</span> UpdateQueue<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 上一次的state</span>\n  memoizedState<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// A linked-list of contexts that this fiber depends on</span>\n  contextDependencies<span class=\"token punctuation\">:</span> ContextDependencyList <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  mode<span class=\"token punctuation\">:</span> TypeOfMode<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Effect</span>\n  effectTag<span class=\"token punctuation\">:</span> SideEffectTag<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Singly linked list fast path to the next fiber with side-effects.</span>\n  nextEffect<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  firstEffect<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  lastEffect<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Represents a time in the future by which this work should be completed.</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Does not include work found in its subtree.</span>\n  expirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// This is used to quickly determine if a subtree has no pending changes.</span>\n  childExpirationTime<span class=\"token punctuation\">:</span> ExpirationTime<span class=\"token punctuation\">,</span>\n\n  alternate<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  actualDuration<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n\n  actualStartTime<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n\n  selfBaseDuration<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n\n  treeBaseDuration<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n\n<span class=\"token operator\">|</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</details>\n\n<h2 id=\"Fiber结构图\"><a href=\"#Fiber结构图\" class=\"headerlink\" title=\"Fiber结构图\"></a>Fiber结构图</h2><p><img src=\"https://i.loli.net/2020/06/29/zJLutWEVHIZjKvr.png\" alt=\"Fiber结构图\"></p>\n<h2 id=\"函数运行流程图\"><a href=\"#函数运行流程图\" class=\"headerlink\" title=\"函数运行流程图\"></a>函数运行流程图</h2><p><img src=\"/2020/06/28/React%E6%BA%90%E7%A0%81-ReactDOM/%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg\" alt=\"运行流程图\"></p>\n<blockquote>\n<p><a href=\"https://codesandbox.io/s/heuristic-gagarin-edqiv?file=/src/App.js\" target=\"_blank\" rel=\"noopener\">从demo查看</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><p><code>packages/react-dom/src/ReactDOM.js</code></p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><pre><code class=\"jsx\">ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));</code></pre>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><h3 id=\"ReactDOM-render\"><a href=\"#ReactDOM-render\" class=\"headerlink\" title=\"ReactDOM.render\"></a>ReactDOM.render</h3><pre><code class=\"jsx\">const ReactDOM: Object = {\n    /**\n     * element =&gt; &lt;App /&gt;\n     * container =&gt; document.getElementById(&quot;root&quot;)\n     * callback =&gt; 回调函数 很少用\n    */\n    render(\n        element: React$Element&lt;any&gt;,\n        container: DOMContainer,\n        callback: ?Function,\n    ) {\n    // 下面第四个参数为false， 如果为true那么说明是服务端渲染\n    return legacyRenderSubtreeIntoContainer(\n        null,\n        element,\n        container,\n        false,\n        callback,\n    );\n};</code></pre>\n<ul>\n<li>先为<code>container</code>创建<code>_reactRootContainer</code>属性，其类型是ReactRoot, 同时在这一步中<strong>删除掉container中的所有子集</strong></li>\n</ul>\n<h3 id=\"legacyRenderSubtreeIntoContainer\"><a href=\"#legacyRenderSubtreeIntoContainer\" class=\"headerlink\" title=\"legacyRenderSubtreeIntoContainer\"></a>legacyRenderSubtreeIntoContainer</h3><pre><code class=\"jsx\">/**\n * parentComponent =&gt; null\n * children =&gt; &lt;App&gt;\n * container =&gt; document.getElementById(&quot;root&quot;)\n * forceHydrate =&gt; false\n * callback =&gt; callback\n*/\nfunction legacyRenderSubtreeIntoContainer(\n    parentComponent: ?React$Component&lt;any, any&gt;,\n    children: ReactNodeList,\n    container: DOMContainer,\n    forceHydrate: boolean,\n    callback: ?Function,\n) {\n    let root: Root = (container._reactRootContainer: any);\n    // 当前 container 没有 _reactRootContainer, 进去if操作执行legacyCreateRootFromDOMContainer\n    if (!root) {\n        // 初始化操作，创建_reactRootContainer属性， 类型是ReactRoot\n        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(\n            container,\n            forceHydrate,\n        );\n        // 反正我从没传过 callback，不关心实现\n        if (typeof callback === &#39;function&#39;) {\n            const originalCallback = callback;\n            callback = function() {\n                const instance = getPublicRootInstance(root._internalRoot);\n                originalCallback.call(instance);\n            };\n        }\n        // Initial mount should not be batched.\n        // 第一次加载的话不需要打包更新\n        unbatchedUpdates(() =&gt; {\n            // 第一次不存在 parentComponent, 然后调用ReactRoot.prototype.render\n            if (parentComponent != null) {\n                root.legacy_renderSubtreeIntoContainer(\n                parentComponent,\n                children,\n                callback,\n                );\n            } else {\n                root.render(children, callback);\n            }\n        });\n    } else {\n        if (typeof callback === &#39;function&#39;) {\n            const originalCallback = callback;\n            callback = function() {\n                const instance = getPublicRootInstance(root._internalRoot);\n                originalCallback.call(instance);\n            };\n        }\n        // Update\n        if (parentComponent != null) {\n            root.legacy_renderSubtreeIntoContainer(\n                parentComponent,\n                children,\n                callback,\n            );\n        } else {\n            root.render(children, callback);\n        }\n    }\n    return getPublicRootInstance(root._internalRoot);\n}</code></pre>\n<h3 id=\"legacyCreateRootFromDOMContainer\"><a href=\"#legacyCreateRootFromDOMContainer\" class=\"headerlink\" title=\"legacyCreateRootFromDOMContainer\"></a>legacyCreateRootFromDOMContainer</h3><ul>\n<li>该方法是删除container下的子节点，并且生成<code>ReactRoot</code></li>\n</ul>\n<pre><code class=\"jsx\">function legacyCreateRootFromDOMContainer(\n    container: DOMContainer,\n    forceHydrate: boolean,\n): Root {\n    // 这个变量跟服务端渲染有关，我们直接把他看成false\n    const shouldHydrate =\n        forceHydrate || shouldHydrateDueToLegacyHeuristic(container);\n\n    if (!shouldHydrate) {\n        let rootSibling;\n        // 这里直接把container的子节点删除，直到没有子节点\n        // &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n        while ((rootSibling = container.lastChild)) {\n            container.removeChild(rootSibling);\n        }\n    }\n\n    // 默认情况下root不用异步\n    const isConcurrent = false;\n    return new ReactRoot(container, isConcurrent, shouldHydrate);\n}</code></pre>\n<h3 id=\"ReactRoot\"><a href=\"#ReactRoot\" class=\"headerlink\" title=\"ReactRoot\"></a>ReactRoot</h3><ul>\n<li>我们看ReactRoot这个结构函数 <code>createContainer</code>就是一行代码它的作用是创建FiberRoot, 而这个root 其实又是 <code>FiberRootNode</code></li>\n<li>然后创建Fiber, <code>createFiber(HostRoot, null, null, mode);</code>, 然后又返回了<code>FiberNode</code>, 此时<code>container</code>拥有<strong>_reactRootContainer</strong>属性, 而 <code>_reactRootContainer</code> 拥有 <code>_internalRoot</code>属性, 而<code>_internalRoot</code>又拥有<code>current</code>属性，这个属性类型就是FiberNode</li>\n<li>我们可以在react 项目下 打印一下 <code>document.getElementById(&quot;root&quot;)._reactRootContainer</code></li>\n</ul>\n<pre><code class=\"js\">/**\n * container =&gt; &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n * isConcurrent =&gt; false\n * hydrate =&gt; false\n*/\nfunction ReactRoot(\n    container: DOMContainer,\n    isConcurrent: boolean,\n    hydrate: boolean,\n) {\n    // 这个 root 指的是 FiberRoot\n    // 文件路径 packages/react-reconciler/src/ReactFiberReconciler.js\n    // createContainer 很简单就一行代码 \n    // return createFiberRoot(containerInfo, isConcurrent, hydrate);\n    const root = createContainer(container, isConcurrent, hydrate);\n    this._internalRoot = root;\n}\n\nReactRoot.prototype.render = function(\n  children: ReactNodeList,\n  callback: ?() =&gt; mixed,\n): Work {\n  // 这里就是之前的那个createFiberRoot创建的FiberRoot\n  const root = this._internalRoot;\n  // ReactWork 的功能就是为了在组件渲染或更新后把所有传入\n  // ReactDom.render 中的回调函数全部执行一遍\n  const work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n  // 如果有 callback，就 push 进 work 中的数组\n  if (callback !== null) {\n    work.then(callback);\n  }\n  // work._onCommit 就是用于执行所有回调函数的\n  updateContainer(children, root, null, work._onCommit);\n  return work;\n};\n\n// 其实这里的名字已经表达了意思了，将subTree渲染进container\nReactRoot.prototype.legacy_renderSubtreeIntoContainer = function(\n  parentComponent: ?React$Component&lt;any, any&gt;,\n  children: ReactNodeList,\n  callback: ?() =&gt; mixed,\n): Work {\n  const root = this._internalRoot;\n  const work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n\n  if (callback !== null) {\n    work.then(callback);\n  }\n  updateContainer(children, root, parentComponent, work._onCommit);\n  return work;\n};</code></pre>\n<h4 id=\"createContainer\"><a href=\"#createContainer\" class=\"headerlink\" title=\"createContainer\"></a>createContainer</h4><pre><code class=\"jsx\">export function createContainer(\n    containerInfo: Container,\n    isConcurrent: boolean,\n    hydrate: boolean,\n): OpaqueRoot {\n    return createFiberRoot(containerInfo, isConcurrent, hydrate);\n}</code></pre>\n<h4 id=\"createFiberRoot\"><a href=\"#createFiberRoot\" class=\"headerlink\" title=\"createFiberRoot\"></a>createFiberRoot</h4><pre><code class=\"jsx\">export function createFiberRoot(\n  containerInfo: any,\n  isConcurrent: boolean,\n  hydrate: boolean,\n): FiberRoot {\n    // FiberRootNode 内部创建了很多属性\n    const root: FiberRoot = (new FiberRootNode(containerInfo, hydrate): any);\n    // document.getElementById(&quot;root&quot;).._reactRootContainer._internalRoot 是 FiberRoot\n    // document.querySelector(&#39;#root&#39;)._reactRootContainer._internalRoot.current 是 Fiber\n    const uninitializedFiber = createHostRootFiber(isConcurrent);\n    root.current = uninitializedFiber;\n    uninitializedFiber.stateNode = root;\n\n    return root;\n}\n</code></pre>\n<h4 id=\"createHostRootFiber\"><a href=\"#createHostRootFiber\" class=\"headerlink\" title=\"createHostRootFiber\"></a>createHostRootFiber</h4><pre><code class=\"js\">export function createHostRootFiber(isConcurrent: boolean): Fiber {\n    let mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;\n\n    if (enableProfilerTimer &amp;&amp; isDevToolsPresent) {\n        mode |= ProfileMode;\n    }\n\n    // HostRoot 指的是 classComponent, lazyComponent, functionCompoenent 等等\n    return createFiber(HostRoot, null, null, mode);\n}\n</code></pre>\n<h4 id=\"createFiber\"><a href=\"#createFiber\" class=\"headerlink\" title=\"createFiber\"></a>createFiber</h4><p>我们可以从 <code>packages/react-reconciler/src/ReactFiber.js</code> 查看Fiber 的属性</p>\n<pre><code class=\"jsx\">const createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  return new FiberNode(tag, pendingProps, key, mode);\n};</code></pre>\n<h2 id=\"FiberRoot-的结构\"><a href=\"#FiberRoot-的结构\" class=\"headerlink\" title=\"FiberRoot 的结构\"></a>FiberRoot 的结构</h2><details>\n<summary><mark>点击查看FiberRoot</mark></summary>\n\n<pre><code class=\"jsx\">type BaseFiberRootProperties = {|\n  // Any additional information from the host associated with this root.\n  // 就是 document.getElementById(&quot;root&quot;)\n  containerInfo: any,\n  // 仅用于持久更新。\n  pendingChildren: any,\n  // 当前应用对应的Fiber对象，是Root Fiber\n  current: Fiber,\n\n  // 以下优先级用于区分\n  // 1) 没有提交(committed)的任务\n  // 2) 没有提交的挂起任务\n  // 3) 没有提交的可能被挂起的任务\n  // 我们选择不追踪每个单独的阻塞登记，为了兼顾性能而是按交易粒度来衡量绩效。\n\n  earliestSuspendedTime: ExpirationTime,\n  latestSuspendedTime: ExpirationTime,\n  // The earliest and latest priority levels that are not known to be suspended.\n  earliestPendingTime: ExpirationTime,\n  latestPendingTime: ExpirationTime,\n  // 最新通过的一个被reslove并且可以重新尝试的优先级\n  latestPingedTime: ExpirationTime,\n\n  pingCache:\n    | WeakMap&lt;Thenable, Set&lt;ExpirationTime&gt;&gt;\n    | Map&lt;Thenable, Set&lt;ExpirationTime&gt;&gt;\n    | null,\n\n  // 如果抛出错误，并且队列中没有更多更新，则在处理该错误之前，我们尝试从根目录再次进行一次同步渲染。\n  didError: boolean,\n\n  // 正在等待提交的任务的`expirationTime`\n  pendingCommitExpirationTime: ExpirationTime,\n\n  finishedWork: Fiber | null,\n  // 超时的操作\n  timeoutHandle: TimeoutHandle | NoTimeout,\n  // Top context object, used by renderSubtreeIntoContainer\n  context: Object | null,\n  pendingContext: Object | null,\n  // Determines if we should attempt to hydrate on the initial mount\n  +hydrate: boolean,\n  // Remaining expiration time on this root.\n  // TODO: Lift this into the renderer\n  nextExpirationTimeToWorkOn: ExpirationTime,\n  expirationTime: ExpirationTime,\n  // List of top-level batches. This list indicates whether a commit should be\n  // deferred. Also contains completion callbacks.\n  // TODO: Lift this into the renderer\n  firstBatch: Batch | null,\n  // root之间关联的链表结构\n  nextScheduledRoot: FiberRoot | null,\n\n  // New Scheduler fields\n  callbackNode: *,\n  callbackExpirationTime: ExpirationTime,\n  firstPendingTime: ExpirationTime,\n  lastPendingTime: ExpirationTime,\n  pingTime: ExpirationTime,\n|};\n\ntype ProfilingOnlyFiberRootProperties = {|\n  interactionThreadID: number,\n  memoizedInteractions: Set&lt;Interaction&gt;,\n  pendingInteractionMap: PendingInteractionMap,\n|};\n\nexport type FiberRoot = {\n  ...BaseFiberRootProperties,\n  ...ProfilingOnlyFiberRootProperties,\n};</code></pre>\n</details>\nFiberRoot 的结构是上面两个合起来\n\n<h2 id=\"Fiber-结构\"><a href=\"#Fiber-结构\" class=\"headerlink\" title=\"Fiber 结构\"></a>Fiber 结构</h2><details>\n<summary><mark>点击查看Fiber</mark></summary>\n\n<pre><code class=\"js\">export type Fiber = {|\n\n  // 指的是functionComponent 还是 classComponent等等， lazyComponent\n  tag: WorkTag,\n\n  // Unique identifier of this child.\n  key: null | string,\n\n  // The value of element.type which is used to preserve the identity during\n  // reconciliation of this child.\n  elementType: any,\n\n  // The resolved function/class/ associated with this fiber.\n  type: any,\n\n  //  本地相关联的Fiber\n  stateNode: any,\n\n  // 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回\n  return: Fiber | null,\n\n  // 子节点，兄弟节点\n  child: Fiber | null,\n  sibling: Fiber | null,\n  index: number,\n\n  // 就是ref\n  ref: null | (((handle: mixed) =&gt; void) &amp; {_stringRef: ?string}) | RefObject,\n\n  // 将要处理的props, 罪行的props\n  pendingProps: any, // This type will be more specific once we overload the tag.\n  // 上一次的props\n  memoizedProps: any, // The props used to create the output.\n\n  // A queue of state updates and callbacks.\n  // 用来存放 update，也就是用来记录改变状态的\n  updateQueue: UpdateQueue&lt;any&gt; | null,\n\n  // 上一次的state\n  memoizedState: any,\n\n  // A linked-list of contexts that this fiber depends on\n  contextDependencies: ContextDependencyList | null,\n  mode: TypeOfMode,\n\n  // Effect\n  effectTag: SideEffectTag,\n\n  // Singly linked list fast path to the next fiber with side-effects.\n  nextEffect: Fiber | null,\n\n  firstEffect: Fiber | null,\n  lastEffect: Fiber | null,\n\n  // Represents a time in the future by which this work should be completed.\n  // Does not include work found in its subtree.\n  expirationTime: ExpirationTime,\n\n  // This is used to quickly determine if a subtree has no pending changes.\n  childExpirationTime: ExpirationTime,\n\n  alternate: Fiber | null,\n\n  actualDuration?: number,\n\n  actualStartTime?: number,\n\n  selfBaseDuration?: number,\n\n  treeBaseDuration?: number,\n\n|};</code></pre>\n</details>\n\n<h2 id=\"Fiber结构图\"><a href=\"#Fiber结构图\" class=\"headerlink\" title=\"Fiber结构图\"></a>Fiber结构图</h2><p><img src=\"https://i.loli.net/2020/06/29/zJLutWEVHIZjKvr.png\" alt=\"Fiber结构图\"></p>\n<h2 id=\"函数运行流程图\"><a href=\"#函数运行流程图\" class=\"headerlink\" title=\"函数运行流程图\"></a>函数运行流程图</h2><p><img src=\"/2020/06/28/React%E6%BA%90%E7%A0%81-ReactDOM/%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg\" alt=\"运行流程图\"></p>\n<blockquote>\n<p><a href=\"https://codesandbox.io/s/heuristic-gagarin-edqiv?file=/src/App.js\" target=\"_blank\" rel=\"noopener\">从demo查看</a></p>\n</blockquote>\n"},{"title":"React源码--ReactElement","date":"2020-06-18T14:21:43.000Z","_content":"\n## 文件目录\n\npackages/react/src/ReactElement\n\n## ReactElement\n\n指定当前元素是 ReactElement, 但该元素是由 createElement 创建的, 来看一下**ReactElement** 源码\n\n\n```jsx\nconst ReactElement = function(type, key, ref, self, source, owner, props) {\n  const element = {\n    $$typeof: REACT_ELEMENT_TYPE,   // 指Element元素\n\n    // 下面几个都是我们 元素的属性，\n    // eg. <div key=\"1\" ref=\"string\" value=\"123\"></div>\n    type: type,                \n    key: key,                    \n    ref: ref,                      \n    props: props, \n    \n    // 记录负责创建此元素的组件。\n    _owner: owner,  // 其实是一个FiberNode\n  };\n\n  return element;\n};\n\n```\n\n## createElement\n\n[文档](https://react.docschina.org/docs/react-api.html#createelement)\n\n根据type 创建一个ReactElement。同时处理**ref, key, props, 还有children, 另外对defaultProps 赋值**。\n\n我们看一下babel 的转化吧！\n\n```html\n<div key=\"1\" ref=\"string\" value=\"123\">\n    <p>children1</p>\n    <p>children2</p>\n</div>\n```\n\n会转换成\n\n```jsx\nReact.createElement(\n    \"div\", \n    {\n        ref: \"string\",\n        value: \"123\",\n        key: \"1\"\n    },\n    React.createElement(\n        \"p\", \n        null,\n        \"children1\",\n    )\n    React.createElement(\n        \"p\", \n        null,\n        \"children12\",\n    )\n)\n```\n\n\n### 源码：\n\n```jsx\nexport function createElement(type, config, children) {\n    // type => div\n    // config => {ref: \"string\",value: \"123\",key: \"1\"}\n    // children => <p>children1</p>, <p>children2</p>\n\n    let propName;\n\n    const props = {};\n\n    let key = null;\n    let ref = null;\n    let self = null;\n    let source = null;\n\n    //  验证config, 把key 和 ref 从config 单独抽离出来放到props 中\n    if (config != null) {\n        // 验证 ref 和 key\n        if (hasValidRef(config)) {\n            ref = config.ref;\n        }\n        if (hasValidKey(config)) {\n            key = '' + config.key;\n        }\n        \n        // self 正确获取this, 检测this与 ReactElement.owner是否相等，不相等就发出警告\n        // source 一个注释对象（由编译器或其他方式添加），指示文件名，行号和/或其他信息。\n        self = config.__self === undefined ? null : config.__self;\n        source = config.__source === undefined ? null : config.__source;\n       \n        // 遍历配置，把除了key, ref, _self, _source这些以外的数据放到props\n        for (propName in config) {\n            if (\n                hasOwnProperty.call(config, propName) &&\n                !RESERVED_PROPS.hasOwnProperty(propName)\n            ) {\n                props[propName] = config[propName];\n            }\n        }\n    }\n\n    // 处理children, arguments 后面的参数都是children\n    // 如果children 数大于1个，那么放入到数组中\n    const childrenLength = arguments.length - 2;\n    if (childrenLength === 1) {\n        props.children = children;\n    } else if (childrenLength > 1) {\n        const childArray = Array(childrenLength);\n        for (let i = 0; i < childrenLength; i++) {\n            childArray[i] = arguments[i + 2];\n        }\n        props.children = childArray;\n    }\n\n    // 判断是否有给组件设置 defaultProps，有的话判断是否有给 props 赋值，\n    // 只有当值为 undefined 时，才会设置默认值\n    if (type && type.defaultProps) {\n        const defaultProps = type.defaultProps;\n            for (propName in defaultProps) {\n            if (props[propName] === undefined) {\n                props[propName] = defaultProps[propName];\n            }\n        }\n    }\n\n    return ReactElement(\n        type,\n        key,\n        ref,\n        self,\n        source,\n        ReactCurrentOwner.current,\n        props,\n    );\n}\n```\n\n## cloneElement\n\n[文档](https://react.docschina.org/docs/react-api.html#cloneelement)\n\ncloneElement 克隆元素， 大致跟createElement 的处理方式一样 。\n\n","source":"_posts/React源码-ReactElement.md","raw":"---\ntitle: React源码--ReactElement\ndate: 2020-06-18 14:21:43\ntags: [react, react源码系列]\ncategories: [react, react源码系列]\n---\n\n## 文件目录\n\npackages/react/src/ReactElement\n\n## ReactElement\n\n指定当前元素是 ReactElement, 但该元素是由 createElement 创建的, 来看一下**ReactElement** 源码\n\n\n```jsx\nconst ReactElement = function(type, key, ref, self, source, owner, props) {\n  const element = {\n    $$typeof: REACT_ELEMENT_TYPE,   // 指Element元素\n\n    // 下面几个都是我们 元素的属性，\n    // eg. <div key=\"1\" ref=\"string\" value=\"123\"></div>\n    type: type,                \n    key: key,                    \n    ref: ref,                      \n    props: props, \n    \n    // 记录负责创建此元素的组件。\n    _owner: owner,  // 其实是一个FiberNode\n  };\n\n  return element;\n};\n\n```\n\n## createElement\n\n[文档](https://react.docschina.org/docs/react-api.html#createelement)\n\n根据type 创建一个ReactElement。同时处理**ref, key, props, 还有children, 另外对defaultProps 赋值**。\n\n我们看一下babel 的转化吧！\n\n```html\n<div key=\"1\" ref=\"string\" value=\"123\">\n    <p>children1</p>\n    <p>children2</p>\n</div>\n```\n\n会转换成\n\n```jsx\nReact.createElement(\n    \"div\", \n    {\n        ref: \"string\",\n        value: \"123\",\n        key: \"1\"\n    },\n    React.createElement(\n        \"p\", \n        null,\n        \"children1\",\n    )\n    React.createElement(\n        \"p\", \n        null,\n        \"children12\",\n    )\n)\n```\n\n\n### 源码：\n\n```jsx\nexport function createElement(type, config, children) {\n    // type => div\n    // config => {ref: \"string\",value: \"123\",key: \"1\"}\n    // children => <p>children1</p>, <p>children2</p>\n\n    let propName;\n\n    const props = {};\n\n    let key = null;\n    let ref = null;\n    let self = null;\n    let source = null;\n\n    //  验证config, 把key 和 ref 从config 单独抽离出来放到props 中\n    if (config != null) {\n        // 验证 ref 和 key\n        if (hasValidRef(config)) {\n            ref = config.ref;\n        }\n        if (hasValidKey(config)) {\n            key = '' + config.key;\n        }\n        \n        // self 正确获取this, 检测this与 ReactElement.owner是否相等，不相等就发出警告\n        // source 一个注释对象（由编译器或其他方式添加），指示文件名，行号和/或其他信息。\n        self = config.__self === undefined ? null : config.__self;\n        source = config.__source === undefined ? null : config.__source;\n       \n        // 遍历配置，把除了key, ref, _self, _source这些以外的数据放到props\n        for (propName in config) {\n            if (\n                hasOwnProperty.call(config, propName) &&\n                !RESERVED_PROPS.hasOwnProperty(propName)\n            ) {\n                props[propName] = config[propName];\n            }\n        }\n    }\n\n    // 处理children, arguments 后面的参数都是children\n    // 如果children 数大于1个，那么放入到数组中\n    const childrenLength = arguments.length - 2;\n    if (childrenLength === 1) {\n        props.children = children;\n    } else if (childrenLength > 1) {\n        const childArray = Array(childrenLength);\n        for (let i = 0; i < childrenLength; i++) {\n            childArray[i] = arguments[i + 2];\n        }\n        props.children = childArray;\n    }\n\n    // 判断是否有给组件设置 defaultProps，有的话判断是否有给 props 赋值，\n    // 只有当值为 undefined 时，才会设置默认值\n    if (type && type.defaultProps) {\n        const defaultProps = type.defaultProps;\n            for (propName in defaultProps) {\n            if (props[propName] === undefined) {\n                props[propName] = defaultProps[propName];\n            }\n        }\n    }\n\n    return ReactElement(\n        type,\n        key,\n        ref,\n        self,\n        source,\n        ReactCurrentOwner.current,\n        props,\n    );\n}\n```\n\n## cloneElement\n\n[文档](https://react.docschina.org/docs/react-api.html#cloneelement)\n\ncloneElement 克隆元素， 大致跟createElement 的处理方式一样 。\n\n","slug":"React源码-ReactElement","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrew000imrojg6x9b3wr","content":"<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><p>packages/react/src/ReactElement</p>\n<h2 id=\"ReactElement\"><a href=\"#ReactElement\" class=\"headerlink\" title=\"ReactElement\"></a>ReactElement</h2><p>指定当前元素是 ReactElement, 但该元素是由 createElement 创建的, 来看一下<strong>ReactElement</strong> 源码</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> ReactElement <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">:</span> REACT_ELEMENT_TYPE<span class=\"token punctuation\">,</span>   <span class=\"token comment\" spellcheck=\"true\">// 指Element元素</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 下面几个都是我们 元素的属性，</span>\n    <span class=\"token comment\" spellcheck=\"true\">// eg. &lt;div key=\"1\" ref=\"string\" value=\"123\">&lt;/div></span>\n    type<span class=\"token punctuation\">:</span> type<span class=\"token punctuation\">,</span>                \n    key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">,</span>                    \n    ref<span class=\"token punctuation\">:</span> ref<span class=\"token punctuation\">,</span>                      \n    props<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">,</span> \n\n    <span class=\"token comment\" spellcheck=\"true\">// 记录负责创建此元素的组件。</span>\n    _owner<span class=\"token punctuation\">:</span> owner<span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// 其实是一个FiberNode</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"createElement\"><a href=\"#createElement\" class=\"headerlink\" title=\"createElement\"></a>createElement</h2><p><a href=\"https://react.docschina.org/docs/react-api.html#createelement\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p>根据type 创建一个ReactElement。同时处理<strong>ref, key, props, 还有children, 另外对defaultProps 赋值</strong>。</p>\n<p>我们看一下babel 的转化吧！</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>123<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>children1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>children2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>会转换成</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">{</span>\n        ref<span class=\"token punctuation\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n        key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"children1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"children12\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h3><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// type => div</span>\n    <span class=\"token comment\" spellcheck=\"true\">// config => {ref: \"string\",value: \"123\",key: \"1\"}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// children => &lt;p>children1&lt;/p>, &lt;p>children2&lt;/p></span>\n\n    <span class=\"token keyword\">let</span> propName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> ref <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//  验证config, 把key 和 ref 从config 单独抽离出来放到props 中</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 验证 ref 和 key</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasValidRef</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ref <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasValidKey</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            key <span class=\"token operator\">=</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> config<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// self 正确获取this, 检测this与 ReactElement.owner是否相等，不相等就发出警告</span>\n        <span class=\"token comment\" spellcheck=\"true\">// source 一个注释对象（由编译器或其他方式添加），指示文件名，行号和/或其他信息。</span>\n        self <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>__self <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>__self<span class=\"token punctuation\">;</span>\n        source <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>__source <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>__source<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 遍历配置，把除了key, ref, _self, _source这些以外的数据放到props</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>propName <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n                hasOwnProperty<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token operator\">!</span>RESERVED_PROPS<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 处理children, arguments 后面的参数都是children</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 如果children 数大于1个，那么放入到数组中</span>\n    <span class=\"token keyword\">const</span> childrenLength <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childrenLength <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childrenLength <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> childArray <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>childrenLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> childrenLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            childArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> childArray<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 判断是否有给组件设置 defaultProps，有的话判断是否有给 props 赋值，</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 只有当值为 undefined 时，才会设置默认值</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">&amp;&amp;</span> type<span class=\"token punctuation\">.</span>defaultProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> defaultProps <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span>defaultProps<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>propName <span class=\"token keyword\">in</span> defaultProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> defaultProps<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ReactElement</span><span class=\"token punctuation\">(</span>\n        type<span class=\"token punctuation\">,</span>\n        key<span class=\"token punctuation\">,</span>\n        ref<span class=\"token punctuation\">,</span>\n        self<span class=\"token punctuation\">,</span>\n        source<span class=\"token punctuation\">,</span>\n        ReactCurrentOwner<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"cloneElement\"><a href=\"#cloneElement\" class=\"headerlink\" title=\"cloneElement\"></a>cloneElement</h2><p><a href=\"https://react.docschina.org/docs/react-api.html#cloneelement\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p>cloneElement 克隆元素， 大致跟createElement 的处理方式一样 。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><p>packages/react/src/ReactElement</p>\n<h2 id=\"ReactElement\"><a href=\"#ReactElement\" class=\"headerlink\" title=\"ReactElement\"></a>ReactElement</h2><p>指定当前元素是 ReactElement, 但该元素是由 createElement 创建的, 来看一下<strong>ReactElement</strong> 源码</p>\n<pre><code class=\"jsx\">const ReactElement = function(type, key, ref, self, source, owner, props) {\n  const element = {\n    $$typeof: REACT_ELEMENT_TYPE,   // 指Element元素\n\n    // 下面几个都是我们 元素的属性，\n    // eg. &lt;div key=&quot;1&quot; ref=&quot;string&quot; value=&quot;123&quot;&gt;&lt;/div&gt;\n    type: type,                \n    key: key,                    \n    ref: ref,                      \n    props: props, \n\n    // 记录负责创建此元素的组件。\n    _owner: owner,  // 其实是一个FiberNode\n  };\n\n  return element;\n};\n</code></pre>\n<h2 id=\"createElement\"><a href=\"#createElement\" class=\"headerlink\" title=\"createElement\"></a>createElement</h2><p><a href=\"https://react.docschina.org/docs/react-api.html#createelement\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p>根据type 创建一个ReactElement。同时处理<strong>ref, key, props, 还有children, 另外对defaultProps 赋值</strong>。</p>\n<p>我们看一下babel 的转化吧！</p>\n<pre><code class=\"html\">&lt;div key=&quot;1&quot; ref=&quot;string&quot; value=&quot;123&quot;&gt;\n    &lt;p&gt;children1&lt;/p&gt;\n    &lt;p&gt;children2&lt;/p&gt;\n&lt;/div&gt;</code></pre>\n<p>会转换成</p>\n<pre><code class=\"jsx\">React.createElement(\n    &quot;div&quot;, \n    {\n        ref: &quot;string&quot;,\n        value: &quot;123&quot;,\n        key: &quot;1&quot;\n    },\n    React.createElement(\n        &quot;p&quot;, \n        null,\n        &quot;children1&quot;,\n    )\n    React.createElement(\n        &quot;p&quot;, \n        null,\n        &quot;children12&quot;,\n    )\n)</code></pre>\n<h3 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h3><pre><code class=\"jsx\">export function createElement(type, config, children) {\n    // type =&gt; div\n    // config =&gt; {ref: &quot;string&quot;,value: &quot;123&quot;,key: &quot;1&quot;}\n    // children =&gt; &lt;p&gt;children1&lt;/p&gt;, &lt;p&gt;children2&lt;/p&gt;\n\n    let propName;\n\n    const props = {};\n\n    let key = null;\n    let ref = null;\n    let self = null;\n    let source = null;\n\n    //  验证config, 把key 和 ref 从config 单独抽离出来放到props 中\n    if (config != null) {\n        // 验证 ref 和 key\n        if (hasValidRef(config)) {\n            ref = config.ref;\n        }\n        if (hasValidKey(config)) {\n            key = &#39;&#39; + config.key;\n        }\n\n        // self 正确获取this, 检测this与 ReactElement.owner是否相等，不相等就发出警告\n        // source 一个注释对象（由编译器或其他方式添加），指示文件名，行号和/或其他信息。\n        self = config.__self === undefined ? null : config.__self;\n        source = config.__source === undefined ? null : config.__source;\n\n        // 遍历配置，把除了key, ref, _self, _source这些以外的数据放到props\n        for (propName in config) {\n            if (\n                hasOwnProperty.call(config, propName) &amp;&amp;\n                !RESERVED_PROPS.hasOwnProperty(propName)\n            ) {\n                props[propName] = config[propName];\n            }\n        }\n    }\n\n    // 处理children, arguments 后面的参数都是children\n    // 如果children 数大于1个，那么放入到数组中\n    const childrenLength = arguments.length - 2;\n    if (childrenLength === 1) {\n        props.children = children;\n    } else if (childrenLength &gt; 1) {\n        const childArray = Array(childrenLength);\n        for (let i = 0; i &lt; childrenLength; i++) {\n            childArray[i] = arguments[i + 2];\n        }\n        props.children = childArray;\n    }\n\n    // 判断是否有给组件设置 defaultProps，有的话判断是否有给 props 赋值，\n    // 只有当值为 undefined 时，才会设置默认值\n    if (type &amp;&amp; type.defaultProps) {\n        const defaultProps = type.defaultProps;\n            for (propName in defaultProps) {\n            if (props[propName] === undefined) {\n                props[propName] = defaultProps[propName];\n            }\n        }\n    }\n\n    return ReactElement(\n        type,\n        key,\n        ref,\n        self,\n        source,\n        ReactCurrentOwner.current,\n        props,\n    );\n}</code></pre>\n<h2 id=\"cloneElement\"><a href=\"#cloneElement\" class=\"headerlink\" title=\"cloneElement\"></a>cloneElement</h2><p><a href=\"https://react.docschina.org/docs/react-api.html#cloneelement\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p>cloneElement 克隆元素， 大致跟createElement 的处理方式一样 。</p>\n"},{"title":"Z 字形变换","date":"2020-06-30T18:34:47.000Z","type":"algorithm","_content":"\n[Z 字形变换](https://leetcode-cn.com/problems/zigzag-conversion/)\n\n其实这道题就是移到数学题\n\n## 分析\n\n> 以 LEETCODEISHIRING 为示例，分别对row = 3, row = 4, row = 5, 进行分析, 括号表示index\n\n### row = 3\n\n|row/column| c = 0 | c = 1 | c = 2 | c = 3 | c = 4 | c = 5 | c = 6 | c = 7 |\n| :------: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :--:  |\n| r = 0    | L(0)  |       | C(4)  |       |  I(8) |       | R(12) |       |\n| r = 1    | E(1)  | T(3)  | O(5)  |  E(7) |  S(9) | I(11) | I(13) | G(15) |\n| r = 2    | E(2)  |       | D(6)  |       |  H(10)|       | N(14) |       |\n\n### row = 4\n\n|row/column| c = 0 | c = 1 | c = 2 | c = 3 | c = 4 | c = 5 | c = 6 |\n| :------: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| r = 0    | L(0)  |       |       |  D(6) |       |       | R(12) |\n| r = 1    | E(1)  |       | O(5)  |  E(7) |       |  I(11)| I(13) |\n| r = 2    | E(2)  | C(4)  |       |  I(8) |  H(10)|       | N(14) |\n| r = 3    | T(3)  |       |       |  S(9) |       |       | G(15) |\n\n### row = 5\n\n|row/column| c = 0 | c = 1 | c = 2 | c = 3 | c = 4 | c = 5 | c = 6 | c = 7 |\n| :------: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| r = 0    | L(0)  |       |       |       |  I(8) |       |       |       |\n| r = 1    | E(1)  |       |       |  E(7) |  S(9) |       |       | G(15) |\n| r = 2    | E(2)  |       | D(6)  |       |  H(10)|       | N(14) |       |\n| r = 3    | T(3)  | O(5)  |       |       |  I(11)|  I(13)|       |       |\n| r = 4    | C(4)  |       |       |       |  R(12)|       |       |       |\n\n* 我们看这三个 `r = 0`时，第一个数跟第二数的偏移， 我们称这个为总偏移量\n    * row = 3时, 偏移为 4 - 0 = 4\n    * row = 4时，偏移为 6 - 0 = 6\n    * row = 5时，偏移为 8 - 0 = 8\n    * **总结：** 偏移 = 2 * row - 2\n* 再看 `r = 1`时，就是第二行数据， 第一个数跟第二个数以及第三个数的偏移\n    * row = 3 时，偏移为 3 - 1 = 2， 5 - 3 = 2， 上面总偏移量为4，所以第3个数跟第2个数的偏移量为 4-2 =2 \n    * row = 4 时，偏移为 5 - 1 = 4， 7 - 5 = 2， 上面总偏移量为6，所以第3个数跟第2个数的偏移量为 6-4 =2。 这一行往后的偏移是 4, 2, 4, 2, 4, 2 这样走  \n    * row = 5 时，偏移为 7 - 1 = 6， 9 - 7 = 2， 上面总偏移量为8，所以第3个数跟第2个数的偏移量为 6-4 =2。 这一行往后的偏移是 6, 2, 6, 2, 6, 2 这样\n    * 直到**前一个数 + 偏移量 >= s.length**换下一行。\n    * **总结：**第一个数与第二个数偏移量为 2 * (row - (r + 1)), 而第二个数跟第三个数的偏移量为 （总偏移量 - 第一个数跟第二个数的偏移量）\n* 往后如此类推，但最后一行跟第一行的偏移量应该一样\n\n\n## 源码\n\n```js\nvar convert = function(s, numRows) {\n    let result = [];\n    let length = s.length;\n    if(numRows == 1) {\n        return s;\n    }\n    let totalOffset = 2 * numRows - 2; // 总偏移量\n    let flag = true;  // 标志位\n    let i = 0;      // 表示数组中有几个数\n    let row = 1;    // 表示 第几行\n    let start = 0;  // 表示 当前index\n    let offset = 2 * (numRows - row);\n    while(i < length) {\n        result.push(s[start]);\n        // 第一行的偏移量跟最后一行的偏移量一样\n        if(row == 1 || row == numRows) {\n            start = start + totalOffset;\n        } else {\n            if(flag) {\n                start = start + offset;\n                flag = false;\n            } else {\n                start = start + (totalOffset - offset);\n                flag = true;\n            }\n        }\n        \n        i++;\n        // 换下一行，同时计算他的偏移值，把flag 重置\n        if(start >= length) {\n            row++;\n            start = row - 1;\n            flag = true\n            offset = 2 * (numRows - row);\n        }\n    }\n    return result.join(\"\")\n};\n```","source":"_posts/Z-字形变换.md","raw":"---\ntitle: Z 字形变换\ndate: 2020-06-30 18:34:47\ntype: algorithm\ntags: [algorithm-基础, algorithm-数组]\n---\n\n[Z 字形变换](https://leetcode-cn.com/problems/zigzag-conversion/)\n\n其实这道题就是移到数学题\n\n## 分析\n\n> 以 LEETCODEISHIRING 为示例，分别对row = 3, row = 4, row = 5, 进行分析, 括号表示index\n\n### row = 3\n\n|row/column| c = 0 | c = 1 | c = 2 | c = 3 | c = 4 | c = 5 | c = 6 | c = 7 |\n| :------: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :--:  |\n| r = 0    | L(0)  |       | C(4)  |       |  I(8) |       | R(12) |       |\n| r = 1    | E(1)  | T(3)  | O(5)  |  E(7) |  S(9) | I(11) | I(13) | G(15) |\n| r = 2    | E(2)  |       | D(6)  |       |  H(10)|       | N(14) |       |\n\n### row = 4\n\n|row/column| c = 0 | c = 1 | c = 2 | c = 3 | c = 4 | c = 5 | c = 6 |\n| :------: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| r = 0    | L(0)  |       |       |  D(6) |       |       | R(12) |\n| r = 1    | E(1)  |       | O(5)  |  E(7) |       |  I(11)| I(13) |\n| r = 2    | E(2)  | C(4)  |       |  I(8) |  H(10)|       | N(14) |\n| r = 3    | T(3)  |       |       |  S(9) |       |       | G(15) |\n\n### row = 5\n\n|row/column| c = 0 | c = 1 | c = 2 | c = 3 | c = 4 | c = 5 | c = 6 | c = 7 |\n| :------: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| r = 0    | L(0)  |       |       |       |  I(8) |       |       |       |\n| r = 1    | E(1)  |       |       |  E(7) |  S(9) |       |       | G(15) |\n| r = 2    | E(2)  |       | D(6)  |       |  H(10)|       | N(14) |       |\n| r = 3    | T(3)  | O(5)  |       |       |  I(11)|  I(13)|       |       |\n| r = 4    | C(4)  |       |       |       |  R(12)|       |       |       |\n\n* 我们看这三个 `r = 0`时，第一个数跟第二数的偏移， 我们称这个为总偏移量\n    * row = 3时, 偏移为 4 - 0 = 4\n    * row = 4时，偏移为 6 - 0 = 6\n    * row = 5时，偏移为 8 - 0 = 8\n    * **总结：** 偏移 = 2 * row - 2\n* 再看 `r = 1`时，就是第二行数据， 第一个数跟第二个数以及第三个数的偏移\n    * row = 3 时，偏移为 3 - 1 = 2， 5 - 3 = 2， 上面总偏移量为4，所以第3个数跟第2个数的偏移量为 4-2 =2 \n    * row = 4 时，偏移为 5 - 1 = 4， 7 - 5 = 2， 上面总偏移量为6，所以第3个数跟第2个数的偏移量为 6-4 =2。 这一行往后的偏移是 4, 2, 4, 2, 4, 2 这样走  \n    * row = 5 时，偏移为 7 - 1 = 6， 9 - 7 = 2， 上面总偏移量为8，所以第3个数跟第2个数的偏移量为 6-4 =2。 这一行往后的偏移是 6, 2, 6, 2, 6, 2 这样\n    * 直到**前一个数 + 偏移量 >= s.length**换下一行。\n    * **总结：**第一个数与第二个数偏移量为 2 * (row - (r + 1)), 而第二个数跟第三个数的偏移量为 （总偏移量 - 第一个数跟第二个数的偏移量）\n* 往后如此类推，但最后一行跟第一行的偏移量应该一样\n\n\n## 源码\n\n```js\nvar convert = function(s, numRows) {\n    let result = [];\n    let length = s.length;\n    if(numRows == 1) {\n        return s;\n    }\n    let totalOffset = 2 * numRows - 2; // 总偏移量\n    let flag = true;  // 标志位\n    let i = 0;      // 表示数组中有几个数\n    let row = 1;    // 表示 第几行\n    let start = 0;  // 表示 当前index\n    let offset = 2 * (numRows - row);\n    while(i < length) {\n        result.push(s[start]);\n        // 第一行的偏移量跟最后一行的偏移量一样\n        if(row == 1 || row == numRows) {\n            start = start + totalOffset;\n        } else {\n            if(flag) {\n                start = start + offset;\n                flag = false;\n            } else {\n                start = start + (totalOffset - offset);\n                flag = true;\n            }\n        }\n        \n        i++;\n        // 换下一行，同时计算他的偏移值，把flag 重置\n        if(start >= length) {\n            row++;\n            start = row - 1;\n            flag = true\n            offset = 2 * (numRows - row);\n        }\n    }\n    return result.join(\"\")\n};\n```","slug":"Z-字形变换","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrey000lmrojfdiz283t","content":"<p><a href=\"https://leetcode-cn.com/problems/zigzag-conversion/\" target=\"_blank\" rel=\"noopener\">Z 字形变换</a></p>\n<p>其实这道题就是移到数学题</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p>以 LEETCODEISHIRING 为示例，分别对row = 3, row = 4, row = 5, 进行分析, 括号表示index</p>\n</blockquote>\n<h3 id=\"row-3\"><a href=\"#row-3\" class=\"headerlink\" title=\"row = 3\"></a>row = 3</h3><table>\n<thead>\n<tr>\n<th align=\"center\">row/column</th>\n<th align=\"center\">c = 0</th>\n<th align=\"center\">c = 1</th>\n<th align=\"center\">c = 2</th>\n<th align=\"center\">c = 3</th>\n<th align=\"center\">c = 4</th>\n<th align=\"center\">c = 5</th>\n<th align=\"center\">c = 6</th>\n<th align=\"center\">c = 7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">r = 0</td>\n<td align=\"center\">L(0)</td>\n<td align=\"center\"></td>\n<td align=\"center\">C(4)</td>\n<td align=\"center\"></td>\n<td align=\"center\">I(8)</td>\n<td align=\"center\"></td>\n<td align=\"center\">R(12)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">r = 1</td>\n<td align=\"center\">E(1)</td>\n<td align=\"center\">T(3)</td>\n<td align=\"center\">O(5)</td>\n<td align=\"center\">E(7)</td>\n<td align=\"center\">S(9)</td>\n<td align=\"center\">I(11)</td>\n<td align=\"center\">I(13)</td>\n<td align=\"center\">G(15)</td>\n</tr>\n<tr>\n<td align=\"center\">r = 2</td>\n<td align=\"center\">E(2)</td>\n<td align=\"center\"></td>\n<td align=\"center\">D(6)</td>\n<td align=\"center\"></td>\n<td align=\"center\">H(10)</td>\n<td align=\"center\"></td>\n<td align=\"center\">N(14)</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"row-4\"><a href=\"#row-4\" class=\"headerlink\" title=\"row = 4\"></a>row = 4</h3><table>\n<thead>\n<tr>\n<th align=\"center\">row/column</th>\n<th align=\"center\">c = 0</th>\n<th align=\"center\">c = 1</th>\n<th align=\"center\">c = 2</th>\n<th align=\"center\">c = 3</th>\n<th align=\"center\">c = 4</th>\n<th align=\"center\">c = 5</th>\n<th align=\"center\">c = 6</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">r = 0</td>\n<td align=\"center\">L(0)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">D(6)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">R(12)</td>\n</tr>\n<tr>\n<td align=\"center\">r = 1</td>\n<td align=\"center\">E(1)</td>\n<td align=\"center\"></td>\n<td align=\"center\">O(5)</td>\n<td align=\"center\">E(7)</td>\n<td align=\"center\"></td>\n<td align=\"center\">I(11)</td>\n<td align=\"center\">I(13)</td>\n</tr>\n<tr>\n<td align=\"center\">r = 2</td>\n<td align=\"center\">E(2)</td>\n<td align=\"center\">C(4)</td>\n<td align=\"center\"></td>\n<td align=\"center\">I(8)</td>\n<td align=\"center\">H(10)</td>\n<td align=\"center\"></td>\n<td align=\"center\">N(14)</td>\n</tr>\n<tr>\n<td align=\"center\">r = 3</td>\n<td align=\"center\">T(3)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">S(9)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">G(15)</td>\n</tr>\n</tbody></table>\n<h3 id=\"row-5\"><a href=\"#row-5\" class=\"headerlink\" title=\"row = 5\"></a>row = 5</h3><table>\n<thead>\n<tr>\n<th align=\"center\">row/column</th>\n<th align=\"center\">c = 0</th>\n<th align=\"center\">c = 1</th>\n<th align=\"center\">c = 2</th>\n<th align=\"center\">c = 3</th>\n<th align=\"center\">c = 4</th>\n<th align=\"center\">c = 5</th>\n<th align=\"center\">c = 6</th>\n<th align=\"center\">c = 7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">r = 0</td>\n<td align=\"center\">L(0)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">I(8)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">r = 1</td>\n<td align=\"center\">E(1)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">E(7)</td>\n<td align=\"center\">S(9)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">G(15)</td>\n</tr>\n<tr>\n<td align=\"center\">r = 2</td>\n<td align=\"center\">E(2)</td>\n<td align=\"center\"></td>\n<td align=\"center\">D(6)</td>\n<td align=\"center\"></td>\n<td align=\"center\">H(10)</td>\n<td align=\"center\"></td>\n<td align=\"center\">N(14)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">r = 3</td>\n<td align=\"center\">T(3)</td>\n<td align=\"center\">O(5)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">I(11)</td>\n<td align=\"center\">I(13)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">r = 4</td>\n<td align=\"center\">C(4)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">R(12)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>我们看这三个 <code>r = 0</code>时，第一个数跟第二数的偏移， 我们称这个为总偏移量<ul>\n<li>row = 3时, 偏移为 4 - 0 = 4</li>\n<li>row = 4时，偏移为 6 - 0 = 6</li>\n<li>row = 5时，偏移为 8 - 0 = 8</li>\n<li><strong>总结：</strong> 偏移 = 2 * row - 2</li>\n</ul>\n</li>\n<li>再看 <code>r = 1</code>时，就是第二行数据， 第一个数跟第二个数以及第三个数的偏移<ul>\n<li>row = 3 时，偏移为 3 - 1 = 2， 5 - 3 = 2， 上面总偏移量为4，所以第3个数跟第2个数的偏移量为 4-2 =2 </li>\n<li>row = 4 时，偏移为 5 - 1 = 4， 7 - 5 = 2， 上面总偏移量为6，所以第3个数跟第2个数的偏移量为 6-4 =2。 这一行往后的偏移是 4, 2, 4, 2, 4, 2 这样走  </li>\n<li>row = 5 时，偏移为 7 - 1 = 6， 9 - 7 = 2， 上面总偏移量为8，所以第3个数跟第2个数的偏移量为 6-4 =2。 这一行往后的偏移是 6, 2, 6, 2, 6, 2 这样</li>\n<li>直到<strong>前一个数 + 偏移量 &gt;= s.length</strong>换下一行。</li>\n<li><strong>总结：</strong>第一个数与第二个数偏移量为 2 * (row - (r + 1)), 而第二个数跟第三个数的偏移量为 （总偏移量 - 第一个数跟第二个数的偏移量）</li>\n</ul>\n</li>\n<li>往后如此类推，但最后一行跟第一行的偏移量应该一样</li>\n</ul>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> convert <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> numRows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>numRows <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> totalOffset <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> numRows <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 总偏移量</span>\n    <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 标志位</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// 表示数组中有几个数</span>\n    <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// 表示 第几行</span>\n    <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 表示 当前index</span>\n    <span class=\"token keyword\">let</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>numRows <span class=\"token operator\">-</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 第一行的偏移量跟最后一行的偏移量一样</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> row <span class=\"token operator\">==</span> numRows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            start <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> totalOffset<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                start <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">;</span>\n                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                start <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>totalOffset <span class=\"token operator\">-</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 换下一行，同时计算他的偏移值，把flag 重置</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">>=</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            row<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">=</span> row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n            offset <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>numRows <span class=\"token operator\">-</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/zigzag-conversion/\" target=\"_blank\" rel=\"noopener\">Z 字形变换</a></p>\n<p>其实这道题就是移到数学题</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p>以 LEETCODEISHIRING 为示例，分别对row = 3, row = 4, row = 5, 进行分析, 括号表示index</p>\n</blockquote>\n<h3 id=\"row-3\"><a href=\"#row-3\" class=\"headerlink\" title=\"row = 3\"></a>row = 3</h3><table>\n<thead>\n<tr>\n<th align=\"center\">row/column</th>\n<th align=\"center\">c = 0</th>\n<th align=\"center\">c = 1</th>\n<th align=\"center\">c = 2</th>\n<th align=\"center\">c = 3</th>\n<th align=\"center\">c = 4</th>\n<th align=\"center\">c = 5</th>\n<th align=\"center\">c = 6</th>\n<th align=\"center\">c = 7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">r = 0</td>\n<td align=\"center\">L(0)</td>\n<td align=\"center\"></td>\n<td align=\"center\">C(4)</td>\n<td align=\"center\"></td>\n<td align=\"center\">I(8)</td>\n<td align=\"center\"></td>\n<td align=\"center\">R(12)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">r = 1</td>\n<td align=\"center\">E(1)</td>\n<td align=\"center\">T(3)</td>\n<td align=\"center\">O(5)</td>\n<td align=\"center\">E(7)</td>\n<td align=\"center\">S(9)</td>\n<td align=\"center\">I(11)</td>\n<td align=\"center\">I(13)</td>\n<td align=\"center\">G(15)</td>\n</tr>\n<tr>\n<td align=\"center\">r = 2</td>\n<td align=\"center\">E(2)</td>\n<td align=\"center\"></td>\n<td align=\"center\">D(6)</td>\n<td align=\"center\"></td>\n<td align=\"center\">H(10)</td>\n<td align=\"center\"></td>\n<td align=\"center\">N(14)</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"row-4\"><a href=\"#row-4\" class=\"headerlink\" title=\"row = 4\"></a>row = 4</h3><table>\n<thead>\n<tr>\n<th align=\"center\">row/column</th>\n<th align=\"center\">c = 0</th>\n<th align=\"center\">c = 1</th>\n<th align=\"center\">c = 2</th>\n<th align=\"center\">c = 3</th>\n<th align=\"center\">c = 4</th>\n<th align=\"center\">c = 5</th>\n<th align=\"center\">c = 6</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">r = 0</td>\n<td align=\"center\">L(0)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">D(6)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">R(12)</td>\n</tr>\n<tr>\n<td align=\"center\">r = 1</td>\n<td align=\"center\">E(1)</td>\n<td align=\"center\"></td>\n<td align=\"center\">O(5)</td>\n<td align=\"center\">E(7)</td>\n<td align=\"center\"></td>\n<td align=\"center\">I(11)</td>\n<td align=\"center\">I(13)</td>\n</tr>\n<tr>\n<td align=\"center\">r = 2</td>\n<td align=\"center\">E(2)</td>\n<td align=\"center\">C(4)</td>\n<td align=\"center\"></td>\n<td align=\"center\">I(8)</td>\n<td align=\"center\">H(10)</td>\n<td align=\"center\"></td>\n<td align=\"center\">N(14)</td>\n</tr>\n<tr>\n<td align=\"center\">r = 3</td>\n<td align=\"center\">T(3)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">S(9)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">G(15)</td>\n</tr>\n</tbody></table>\n<h3 id=\"row-5\"><a href=\"#row-5\" class=\"headerlink\" title=\"row = 5\"></a>row = 5</h3><table>\n<thead>\n<tr>\n<th align=\"center\">row/column</th>\n<th align=\"center\">c = 0</th>\n<th align=\"center\">c = 1</th>\n<th align=\"center\">c = 2</th>\n<th align=\"center\">c = 3</th>\n<th align=\"center\">c = 4</th>\n<th align=\"center\">c = 5</th>\n<th align=\"center\">c = 6</th>\n<th align=\"center\">c = 7</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">r = 0</td>\n<td align=\"center\">L(0)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">I(8)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">r = 1</td>\n<td align=\"center\">E(1)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">E(7)</td>\n<td align=\"center\">S(9)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">G(15)</td>\n</tr>\n<tr>\n<td align=\"center\">r = 2</td>\n<td align=\"center\">E(2)</td>\n<td align=\"center\"></td>\n<td align=\"center\">D(6)</td>\n<td align=\"center\"></td>\n<td align=\"center\">H(10)</td>\n<td align=\"center\"></td>\n<td align=\"center\">N(14)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">r = 3</td>\n<td align=\"center\">T(3)</td>\n<td align=\"center\">O(5)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">I(11)</td>\n<td align=\"center\">I(13)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">r = 4</td>\n<td align=\"center\">C(4)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">R(12)</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>我们看这三个 <code>r = 0</code>时，第一个数跟第二数的偏移， 我们称这个为总偏移量<ul>\n<li>row = 3时, 偏移为 4 - 0 = 4</li>\n<li>row = 4时，偏移为 6 - 0 = 6</li>\n<li>row = 5时，偏移为 8 - 0 = 8</li>\n<li><strong>总结：</strong> 偏移 = 2 * row - 2</li>\n</ul>\n</li>\n<li>再看 <code>r = 1</code>时，就是第二行数据， 第一个数跟第二个数以及第三个数的偏移<ul>\n<li>row = 3 时，偏移为 3 - 1 = 2， 5 - 3 = 2， 上面总偏移量为4，所以第3个数跟第2个数的偏移量为 4-2 =2 </li>\n<li>row = 4 时，偏移为 5 - 1 = 4， 7 - 5 = 2， 上面总偏移量为6，所以第3个数跟第2个数的偏移量为 6-4 =2。 这一行往后的偏移是 4, 2, 4, 2, 4, 2 这样走  </li>\n<li>row = 5 时，偏移为 7 - 1 = 6， 9 - 7 = 2， 上面总偏移量为8，所以第3个数跟第2个数的偏移量为 6-4 =2。 这一行往后的偏移是 6, 2, 6, 2, 6, 2 这样</li>\n<li>直到<strong>前一个数 + 偏移量 &gt;= s.length</strong>换下一行。</li>\n<li><strong>总结：</strong>第一个数与第二个数偏移量为 2 * (row - (r + 1)), 而第二个数跟第三个数的偏移量为 （总偏移量 - 第一个数跟第二个数的偏移量）</li>\n</ul>\n</li>\n<li>往后如此类推，但最后一行跟第一行的偏移量应该一样</li>\n</ul>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><pre><code class=\"js\">var convert = function(s, numRows) {\n    let result = [];\n    let length = s.length;\n    if(numRows == 1) {\n        return s;\n    }\n    let totalOffset = 2 * numRows - 2; // 总偏移量\n    let flag = true;  // 标志位\n    let i = 0;      // 表示数组中有几个数\n    let row = 1;    // 表示 第几行\n    let start = 0;  // 表示 当前index\n    let offset = 2 * (numRows - row);\n    while(i &lt; length) {\n        result.push(s[start]);\n        // 第一行的偏移量跟最后一行的偏移量一样\n        if(row == 1 || row == numRows) {\n            start = start + totalOffset;\n        } else {\n            if(flag) {\n                start = start + offset;\n                flag = false;\n            } else {\n                start = start + (totalOffset - offset);\n                flag = true;\n            }\n        }\n\n        i++;\n        // 换下一行，同时计算他的偏移值，把flag 重置\n        if(start &gt;= length) {\n            row++;\n            start = row - 1;\n            flag = true\n            offset = 2 * (numRows - row);\n        }\n    }\n    return result.join(&quot;&quot;)\n};</code></pre>\n"},{"title":"ant Modal 组件","date":"2021-09-08T20:31:00.000Z","_content":"\n* 这里记录一下查看antd 组件库时学到的东西，或者是想法\n\n[源码地址](https://github1s.com/ant-design/ant-design/blob/master/components/modal/Modal.tsx#L200)\n\n## Modal\n\n其实我们可以简单想一下我们需要一个Modal 框那些属性是必要的，很容易想象的到就是`visible`, `onCancel`, `onOk` 这几个属性, 因为这几个属性是\n控制我们这个`Modal` 显示隐藏的\n\n所以就有了以下下简易传值\n\n```jsx\nconst { toggle, setToggle } = useToggle();\n<Modal \n    visible={toggle} \n    onCancel={() => setToggle(false)} \n    onOk={() => doSome()}\n>\n</Modal>\n```\n\n### Modal.tsx\n\n查看源码`Modal.tsx`,  这个组件很简单，其实就是使用了`rc-component` 的`rc-dialog`, 把我们传的`visble`, `onCancel` 等传到 `Dialog` 里面\n\n```jsx\nimport Dialog from 'rc-dialog'\n\ninterface Iprop {\n\tvisible: boolean,\n\tonCancel: () => void,\n\tonOk: () => void\n}\n\nconst Modal: React.FC<Iprops> = (props: Iprops) => {\n\tconst { visbile, onCancel, onOk } = props;\n\n\tconst handleCancel = () => {\n\t\tonCancel?.()\n\t}\n\tconst handleOk = () => {\n\t\tonOk?.()\n\t}\n\n\treturn (\n\t\t<Dialog \n\t\t\tvisible={visible}\n\t\t\tonCancel={handleCancel}\n\t\t\tonOk={handleOk}\n\t\t>\n\t)\n}\n\n```\n\n在`Modal` 中我们还有一些用法，比如：\n\n```jsx\nModal.confirm({\n\ttitle: 'hello,',\n\tcontent: 'world',\n\tonOk() {\n\t\tconsole.log('OK');\n\t},\n\tonCancel() {\n\t\tconsole.log('Cancel');\n\t},\n});\n```\n这样子可以直接调出`Modal`\n\n看看`Modal.confirm` 的实现[源码地址](https://github1s.com/ant-design/ant-design/blob/master/components/modal/index.tsx#L27)\n\n## Modal.confirm\n\n它用了一个高阶函数`confirm(withxxx(props))`, `withxxx`函数就是给props 附加一个`type`, 即 类似`Object.assign(props, { type: 'xxx' })`;\n\n```jsx\nModal.info = function infoFn(props: ModalFuncProps) {\n  return confirm(withInfo(props));\n};\n```\n\n* withInfo 函数\n```jsx\n/** withInfo 函数 */\nfunction withInfo(props: ModalFuncProps): ModalFuncProps {\n  return {\n    icon: <InfoCircleOutlined />,\n    okCancel: false,\n    ...props,\n    type: 'info',\n  };\n}\n```\n\n### 重头戏 Confirm 函数\n\n其实就是在`body` 下面 创建一个节点`const div = document.createElement('div');` 然后将`div` append 到body下， 最后调用 `React.render(Modal, div)`将model 渲染到div上, \n\n```jsx\nfunction confirm(config: ModalFuncProps) {\n  const div = document.createElement('div');\n  document.body.appendChild(div);\n  let currentConfig = { ...config, close, visible: true } as any;\n\n\t/** destroy 的时候将visbile 改成false，然后如果有onCancel 就执行onCancle, 将当前div remove掉 **/\n  function destroy(...args: any[]) {\n    const unmountResult = ReactDOM.unmountComponentAtNode(div);\n    if (unmountResult && div.parentNode) {\n      div.parentNode.removeChild(div);\n    }\n    const triggerCancel = args.some(param => param && param.triggerCancel);\n    if (config.onCancel && triggerCancel) {\n      config.onCancel(...args);\n    }\n    for (let i = 0; i < destroyFns.length; i++) {\n      const fn = destroyFns[i];\n    \n      if (fn === close) {\n        destroyFns.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n\t/** render 到div上  */\n  function render(props: { visible: boolean, onOk: () => void, onCancel: () => void }) {\n \n    setTimeout(() => {\n      ReactDOM.render(\n        <ConfirmDialog\n          {...props}\n        />,\n        div,\n      );\n    });\n  }\n\n\t/** close 的时候将visbile 改成false，然后如果有afterClose afterClose, 然后destroy掉 **/\n  function close(...args: any[]) {\n    currentConfig = {\n      ...currentConfig,\n      visible: false,\n      afterClose: () => {\n        if (typeof config.afterClose === 'function') {\n          config.afterClose();\n        }\n        destroy.apply(this, args);\n      },\n    };\n    render(currentConfig);\n  }\n\n\t/** 向外暴露update 方法，可以修改props等，修改完props然后render一下 */\n  function update(configUpdate: ConfigUpdate) {\n    if (typeof configUpdate === 'function') {\n      currentConfig = configUpdate(currentConfig);\n    } else {\n      currentConfig = {\n        ...currentConfig,\n        ...configUpdate,\n      };\n    }\n    render(currentConfig);\n  }\n\n  render(currentConfig);\n\n  destroyFns.push(close);\n\n\t/** 暴露update 和destroy 方法 */\n\t/** 可以用 const modal = Modal.info({title: '123'}) */\n\t/** 可以用 modal.update({title: '345'}) 去更新title*/\n\t/** 可以用 modal.destory() 去关闭modal*/\n  return {\n    destroy: close,\n    update,\n  };\n}\n```\n\n注意看这个`<ConfirmDialog />`\n## ConfirmDialog\n\n[源码](https://github1s.com/ant-design/ant-design/blob/master/components/modal/ConfirmDialog.tsx#L70)\n\n这个ConfirmDialog 里面的**确认**和**取消** 按钮都用了一个`<ActionButton  onOk={onOk}/>` 其实就是一个`<Button />`\n\n下面只看他如何处理`onOk` 方法\n\n```jsx\nconst ActionButton = () => {\n\tconst handlePromiseOnOk = (returnValueOfOnOk?: PromiseLike<any>) => {\n    const { close } = props;\n    if (!isThenable(returnValueOfOnOk)) {\n      return;\n    }\n    setLoading(true);\n\t\t/** promise 完成后直接close 掉 */\n    returnValueOfOnOk!.then(\n      (...args: any[]) => {\n        setLoading(false);\n        close(...args);\n        clickedRef.current = false;\n      },\n      (e: Error) => {\n        console.error(e);\n        setLoading(false);\n        clickedRef.current = false;\n      },\n    );\n  };\n\n  const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const { actionFn, close } = props;\n\t\t// 这里处理按钮是否被点击了，如果是, 直接return掉\n    if (clickedRef.current) {\n      return;\n    }\n    clickedRef.current = true;\n\t\t/** 如果没有onOk 或者是onCancel 方法，直接调用modal.close() 方法，光比弹窗 */\n    if (!actionFn) {\n      close();\n      return;\n    }\n    let returnValueOfOnOk;\n\t\t/** 这里我的理解是 处理是否冒泡？ */\n    if (props.emitEvent) {\n      returnValueOfOnOk = actionFn(e);\n\t\t\t/** 判断是否是一个promise , 处理onOk 直接return new Promise() */\n      if (props.quitOnNullishReturnValue && !isThenable(returnValueOfOnOk)) {\n        clickedRef.current = false;\n        close(e);\n        return;\n      }\n    } else if (actionFn.length) {\n\t\t\t/** onOk 是否有参数 function onOk(close) 的情况， */\n      returnValueOfOnOk = actionFn(close);\n      clickedRef.current = false;\n    } else {\n\t\t\t/** 无参数 */\n      returnValueOfOnOk = actionFn();\n      if (!returnValueOfOnOk) {\n        close();\n        return;\n      }\n    }\n\t\t/** 处理promise 方法 */\n    handlePromiseOnOk(returnValueOfOnOk);\n  };\n\n\treturn (\n\t\t<Button OnClick={onClick}>\n\t\t</Button>\n\t)\n}\n\n```\n\n\n\n\n\n\n","source":"_posts/antd Modal 组件.md","raw":"---\ntitle: ant Modal 组件\ndate: 2021-09-08 20:31:00\ntags: [antd, 组件]\n---\n\n* 这里记录一下查看antd 组件库时学到的东西，或者是想法\n\n[源码地址](https://github1s.com/ant-design/ant-design/blob/master/components/modal/Modal.tsx#L200)\n\n## Modal\n\n其实我们可以简单想一下我们需要一个Modal 框那些属性是必要的，很容易想象的到就是`visible`, `onCancel`, `onOk` 这几个属性, 因为这几个属性是\n控制我们这个`Modal` 显示隐藏的\n\n所以就有了以下下简易传值\n\n```jsx\nconst { toggle, setToggle } = useToggle();\n<Modal \n    visible={toggle} \n    onCancel={() => setToggle(false)} \n    onOk={() => doSome()}\n>\n</Modal>\n```\n\n### Modal.tsx\n\n查看源码`Modal.tsx`,  这个组件很简单，其实就是使用了`rc-component` 的`rc-dialog`, 把我们传的`visble`, `onCancel` 等传到 `Dialog` 里面\n\n```jsx\nimport Dialog from 'rc-dialog'\n\ninterface Iprop {\n\tvisible: boolean,\n\tonCancel: () => void,\n\tonOk: () => void\n}\n\nconst Modal: React.FC<Iprops> = (props: Iprops) => {\n\tconst { visbile, onCancel, onOk } = props;\n\n\tconst handleCancel = () => {\n\t\tonCancel?.()\n\t}\n\tconst handleOk = () => {\n\t\tonOk?.()\n\t}\n\n\treturn (\n\t\t<Dialog \n\t\t\tvisible={visible}\n\t\t\tonCancel={handleCancel}\n\t\t\tonOk={handleOk}\n\t\t>\n\t)\n}\n\n```\n\n在`Modal` 中我们还有一些用法，比如：\n\n```jsx\nModal.confirm({\n\ttitle: 'hello,',\n\tcontent: 'world',\n\tonOk() {\n\t\tconsole.log('OK');\n\t},\n\tonCancel() {\n\t\tconsole.log('Cancel');\n\t},\n});\n```\n这样子可以直接调出`Modal`\n\n看看`Modal.confirm` 的实现[源码地址](https://github1s.com/ant-design/ant-design/blob/master/components/modal/index.tsx#L27)\n\n## Modal.confirm\n\n它用了一个高阶函数`confirm(withxxx(props))`, `withxxx`函数就是给props 附加一个`type`, 即 类似`Object.assign(props, { type: 'xxx' })`;\n\n```jsx\nModal.info = function infoFn(props: ModalFuncProps) {\n  return confirm(withInfo(props));\n};\n```\n\n* withInfo 函数\n```jsx\n/** withInfo 函数 */\nfunction withInfo(props: ModalFuncProps): ModalFuncProps {\n  return {\n    icon: <InfoCircleOutlined />,\n    okCancel: false,\n    ...props,\n    type: 'info',\n  };\n}\n```\n\n### 重头戏 Confirm 函数\n\n其实就是在`body` 下面 创建一个节点`const div = document.createElement('div');` 然后将`div` append 到body下， 最后调用 `React.render(Modal, div)`将model 渲染到div上, \n\n```jsx\nfunction confirm(config: ModalFuncProps) {\n  const div = document.createElement('div');\n  document.body.appendChild(div);\n  let currentConfig = { ...config, close, visible: true } as any;\n\n\t/** destroy 的时候将visbile 改成false，然后如果有onCancel 就执行onCancle, 将当前div remove掉 **/\n  function destroy(...args: any[]) {\n    const unmountResult = ReactDOM.unmountComponentAtNode(div);\n    if (unmountResult && div.parentNode) {\n      div.parentNode.removeChild(div);\n    }\n    const triggerCancel = args.some(param => param && param.triggerCancel);\n    if (config.onCancel && triggerCancel) {\n      config.onCancel(...args);\n    }\n    for (let i = 0; i < destroyFns.length; i++) {\n      const fn = destroyFns[i];\n    \n      if (fn === close) {\n        destroyFns.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n\t/** render 到div上  */\n  function render(props: { visible: boolean, onOk: () => void, onCancel: () => void }) {\n \n    setTimeout(() => {\n      ReactDOM.render(\n        <ConfirmDialog\n          {...props}\n        />,\n        div,\n      );\n    });\n  }\n\n\t/** close 的时候将visbile 改成false，然后如果有afterClose afterClose, 然后destroy掉 **/\n  function close(...args: any[]) {\n    currentConfig = {\n      ...currentConfig,\n      visible: false,\n      afterClose: () => {\n        if (typeof config.afterClose === 'function') {\n          config.afterClose();\n        }\n        destroy.apply(this, args);\n      },\n    };\n    render(currentConfig);\n  }\n\n\t/** 向外暴露update 方法，可以修改props等，修改完props然后render一下 */\n  function update(configUpdate: ConfigUpdate) {\n    if (typeof configUpdate === 'function') {\n      currentConfig = configUpdate(currentConfig);\n    } else {\n      currentConfig = {\n        ...currentConfig,\n        ...configUpdate,\n      };\n    }\n    render(currentConfig);\n  }\n\n  render(currentConfig);\n\n  destroyFns.push(close);\n\n\t/** 暴露update 和destroy 方法 */\n\t/** 可以用 const modal = Modal.info({title: '123'}) */\n\t/** 可以用 modal.update({title: '345'}) 去更新title*/\n\t/** 可以用 modal.destory() 去关闭modal*/\n  return {\n    destroy: close,\n    update,\n  };\n}\n```\n\n注意看这个`<ConfirmDialog />`\n## ConfirmDialog\n\n[源码](https://github1s.com/ant-design/ant-design/blob/master/components/modal/ConfirmDialog.tsx#L70)\n\n这个ConfirmDialog 里面的**确认**和**取消** 按钮都用了一个`<ActionButton  onOk={onOk}/>` 其实就是一个`<Button />`\n\n下面只看他如何处理`onOk` 方法\n\n```jsx\nconst ActionButton = () => {\n\tconst handlePromiseOnOk = (returnValueOfOnOk?: PromiseLike<any>) => {\n    const { close } = props;\n    if (!isThenable(returnValueOfOnOk)) {\n      return;\n    }\n    setLoading(true);\n\t\t/** promise 完成后直接close 掉 */\n    returnValueOfOnOk!.then(\n      (...args: any[]) => {\n        setLoading(false);\n        close(...args);\n        clickedRef.current = false;\n      },\n      (e: Error) => {\n        console.error(e);\n        setLoading(false);\n        clickedRef.current = false;\n      },\n    );\n  };\n\n  const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const { actionFn, close } = props;\n\t\t// 这里处理按钮是否被点击了，如果是, 直接return掉\n    if (clickedRef.current) {\n      return;\n    }\n    clickedRef.current = true;\n\t\t/** 如果没有onOk 或者是onCancel 方法，直接调用modal.close() 方法，光比弹窗 */\n    if (!actionFn) {\n      close();\n      return;\n    }\n    let returnValueOfOnOk;\n\t\t/** 这里我的理解是 处理是否冒泡？ */\n    if (props.emitEvent) {\n      returnValueOfOnOk = actionFn(e);\n\t\t\t/** 判断是否是一个promise , 处理onOk 直接return new Promise() */\n      if (props.quitOnNullishReturnValue && !isThenable(returnValueOfOnOk)) {\n        clickedRef.current = false;\n        close(e);\n        return;\n      }\n    } else if (actionFn.length) {\n\t\t\t/** onOk 是否有参数 function onOk(close) 的情况， */\n      returnValueOfOnOk = actionFn(close);\n      clickedRef.current = false;\n    } else {\n\t\t\t/** 无参数 */\n      returnValueOfOnOk = actionFn();\n      if (!returnValueOfOnOk) {\n        close();\n        return;\n      }\n    }\n\t\t/** 处理promise 方法 */\n    handlePromiseOnOk(returnValueOfOnOk);\n  };\n\n\treturn (\n\t\t<Button OnClick={onClick}>\n\t\t</Button>\n\t)\n}\n\n```\n\n\n\n\n\n\n","slug":"antd Modal 组件","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrf2000pmrojdmbw62x9","content":"<ul>\n<li>这里记录一下查看antd 组件库时学到的东西，或者是想法</li>\n</ul>\n<p><a href=\"https://github1s.com/ant-design/ant-design/blob/master/components/modal/Modal.tsx#L200\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<h2 id=\"Modal\"><a href=\"#Modal\" class=\"headerlink\" title=\"Modal\"></a>Modal</h2><p>其实我们可以简单想一下我们需要一个Modal 框那些属性是必要的，很容易想象的到就是<code>visible</code>, <code>onCancel</code>, <code>onOk</code> 这几个属性, 因为这几个属性是<br>控制我们这个<code>Modal</code> 显示隐藏的</p>\n<p>所以就有了以下下简易传值</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> toggle<span class=\"token punctuation\">,</span> setToggle <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Modal</span> \n    <span class=\"token attr-name\">visible</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span></span> \n    <span class=\"token attr-name\">onCancel</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">setToggle</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> \n    <span class=\"token attr-name\">onOk</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">doSome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Modal</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"Modal-tsx\"><a href=\"#Modal-tsx\" class=\"headerlink\" title=\"Modal.tsx\"></a>Modal.tsx</h3><p>查看源码<code>Modal.tsx</code>,  这个组件很简单，其实就是使用了<code>rc-component</code> 的<code>rc-dialog</code>, 把我们传的<code>visble</code>, <code>onCancel</code> 等传到 <code>Dialog</code> 里面</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> Dialog <span class=\"token keyword\">from</span> <span class=\"token string\">'rc-dialog'</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iprop</span> <span class=\"token punctuation\">{</span>\n    visible<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n    onCancel<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    onOk<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Modal<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Iprops</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> Iprops<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> visbile<span class=\"token punctuation\">,</span> onCancel<span class=\"token punctuation\">,</span> onOk <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> handleCancel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        onCancel<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> handleOk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        onOk<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Dialog</span> \n            <span class=\"token attr-name\">visible</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>visible<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">onCancel</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>handleCancel<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">onOk</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>handleOk<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在<code>Modal</code> 中我们还有一些用法，比如：</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">Modal<span class=\"token punctuation\">.</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello,'</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">onCancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cancel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>这样子可以直接调出<code>Modal</code></p>\n<p>看看<code>Modal.confirm</code> 的实现<a href=\"https://github1s.com/ant-design/ant-design/blob/master/components/modal/index.tsx#L27\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<h2 id=\"Modal-confirm\"><a href=\"#Modal-confirm\" class=\"headerlink\" title=\"Modal.confirm\"></a>Modal.confirm</h2><p>它用了一个高阶函数<code>confirm(withxxx(props))</code>, <code>withxxx</code>函数就是给props 附加一个<code>type</code>, 即 类似<code>Object.assign(props, { type: &#39;xxx&#39; })</code>;</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">Modal<span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">infoFn</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> ModalFuncProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token function\">withInfo</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>withInfo 函数<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/** withInfo 函数 */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">withInfo</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> ModalFuncProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ModalFuncProps <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n  icon<span class=\"token punctuation\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>InfoCircleOutlined</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  okCancel<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ul>\n<h3 id=\"重头戏-Confirm-函数\"><a href=\"#重头戏-Confirm-函数\" class=\"headerlink\" title=\"重头戏 Confirm 函数\"></a>重头戏 Confirm 函数</h3><p>其实就是在<code>body</code> 下面 创建一个节点<code>const div = document.createElement(&#39;div&#39;);</code> 然后将<code>div</code> append 到body下， 最后调用 <code>React.render(Modal, div)</code>将model 渲染到div上, </p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> ModalFuncProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> currentConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span> close<span class=\"token punctuation\">,</span> visible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** destroy 的时候将visbile 改成false，然后如果有onCancel 就执行onCancle, 将当前div remove掉 **/</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> unmountResult <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unmountResult <span class=\"token operator\">&amp;&amp;</span> div<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      div<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> triggerCancel <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>param <span class=\"token operator\">=</span><span class=\"token operator\">></span> param <span class=\"token operator\">&amp;&amp;</span> param<span class=\"token punctuation\">.</span>triggerCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>onCancel <span class=\"token operator\">&amp;&amp;</span> triggerCancel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      config<span class=\"token punctuation\">.</span><span class=\"token function\">onCancel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> destroyFns<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> destroyFns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fn <span class=\"token operator\">===</span> close<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        destroyFns<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** render 到div上  */</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> visible<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span> onOk<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> onCancel<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>ConfirmDialog\n          <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        div<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** close 的时候将visbile 改成false，然后如果有afterClose afterClose, 然后destroy掉 **/</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    currentConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>currentConfig<span class=\"token punctuation\">,</span>\n      visible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      afterClose<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> config<span class=\"token punctuation\">.</span>afterClose <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          config<span class=\"token punctuation\">.</span><span class=\"token function\">afterClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        destroy<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>currentConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** 向外暴露update 方法，可以修改props等，修改完props然后render一下 */</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>configUpdate<span class=\"token punctuation\">:</span> ConfigUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> configUpdate <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      currentConfig <span class=\"token operator\">=</span> <span class=\"token function\">configUpdate</span><span class=\"token punctuation\">(</span>currentConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      currentConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>currentConfig<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>configUpdate<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>currentConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>currentConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  destroyFns<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>close<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** 暴露update 和destroy 方法 */</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 可以用 const modal = Modal.info({title: '123'}) */</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 可以用 modal.update({title: '345'}) 去更新title*/</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 可以用 modal.destory() 去关闭modal*/</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    destroy<span class=\"token punctuation\">:</span> close<span class=\"token punctuation\">,</span>\n    update<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>注意看这个<code>&lt;ConfirmDialog /&gt;</code></p>\n<h2 id=\"ConfirmDialog\"><a href=\"#ConfirmDialog\" class=\"headerlink\" title=\"ConfirmDialog\"></a>ConfirmDialog</h2><p><a href=\"https://github1s.com/ant-design/ant-design/blob/master/components/modal/ConfirmDialog.tsx#L70\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<p>这个ConfirmDialog 里面的<strong>确认</strong>和<strong>取消</strong> 按钮都用了一个<code>&lt;ActionButton  onOk={onOk}/&gt;</code> 其实就是一个<code>&lt;Button /&gt;</code></p>\n<p>下面只看他如何处理<code>onOk</code> 方法</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> ActionButton <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> handlePromiseOnOk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>returnValueOfOnOk<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> PromiseLike<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>any</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> close <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isThenable</span><span class=\"token punctuation\">(</span>returnValueOfOnOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/** promise 完成后直接close 掉 */</span>\n    returnValueOfOnOk<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        clickedRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">:</span> Error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        clickedRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>HTMLButtonElement</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> actionFn<span class=\"token punctuation\">,</span> close <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 这里处理按钮是否被点击了，如果是, 直接return掉</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clickedRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    clickedRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/** 如果没有onOk 或者是onCancel 方法，直接调用modal.close() 方法，光比弹窗 */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>actionFn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> returnValueOfOnOk<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/** 这里我的理解是 处理是否冒泡？ */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>emitEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      returnValueOfOnOk <span class=\"token operator\">=</span> <span class=\"token function\">actionFn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">/** 判断是否是一个promise , 处理onOk 直接return new Promise() */</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>quitOnNullishReturnValue <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isThenable</span><span class=\"token punctuation\">(</span>returnValueOfOnOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        clickedRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>actionFn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/** onOk 是否有参数 function onOk(close) 的情况， */</span>\n      returnValueOfOnOk <span class=\"token operator\">=</span> <span class=\"token function\">actionFn</span><span class=\"token punctuation\">(</span>close<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      clickedRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/** 无参数 */</span>\n      returnValueOfOnOk <span class=\"token operator\">=</span> <span class=\"token function\">actionFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>returnValueOfOnOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">/** 处理promise 方法 */</span>\n    <span class=\"token function\">handlePromiseOnOk</span><span class=\"token punctuation\">(</span>returnValueOfOnOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">OnClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>这里记录一下查看antd 组件库时学到的东西，或者是想法</li>\n</ul>\n<p><a href=\"https://github1s.com/ant-design/ant-design/blob/master/components/modal/Modal.tsx#L200\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<h2 id=\"Modal\"><a href=\"#Modal\" class=\"headerlink\" title=\"Modal\"></a>Modal</h2><p>其实我们可以简单想一下我们需要一个Modal 框那些属性是必要的，很容易想象的到就是<code>visible</code>, <code>onCancel</code>, <code>onOk</code> 这几个属性, 因为这几个属性是<br>控制我们这个<code>Modal</code> 显示隐藏的</p>\n<p>所以就有了以下下简易传值</p>\n<pre><code class=\"jsx\">const { toggle, setToggle } = useToggle();\n&lt;Modal \n    visible={toggle} \n    onCancel={() =&gt; setToggle(false)} \n    onOk={() =&gt; doSome()}\n&gt;\n&lt;/Modal&gt;</code></pre>\n<h3 id=\"Modal-tsx\"><a href=\"#Modal-tsx\" class=\"headerlink\" title=\"Modal.tsx\"></a>Modal.tsx</h3><p>查看源码<code>Modal.tsx</code>,  这个组件很简单，其实就是使用了<code>rc-component</code> 的<code>rc-dialog</code>, 把我们传的<code>visble</code>, <code>onCancel</code> 等传到 <code>Dialog</code> 里面</p>\n<pre><code class=\"jsx\">import Dialog from &#39;rc-dialog&#39;\n\ninterface Iprop {\n    visible: boolean,\n    onCancel: () =&gt; void,\n    onOk: () =&gt; void\n}\n\nconst Modal: React.FC&lt;Iprops&gt; = (props: Iprops) =&gt; {\n    const { visbile, onCancel, onOk } = props;\n\n    const handleCancel = () =&gt; {\n        onCancel?.()\n    }\n    const handleOk = () =&gt; {\n        onOk?.()\n    }\n\n    return (\n        &lt;Dialog \n            visible={visible}\n            onCancel={handleCancel}\n            onOk={handleOk}\n        &gt;\n    )\n}\n</code></pre>\n<p>在<code>Modal</code> 中我们还有一些用法，比如：</p>\n<pre><code class=\"jsx\">Modal.confirm({\n    title: &#39;hello,&#39;,\n    content: &#39;world&#39;,\n    onOk() {\n        console.log(&#39;OK&#39;);\n    },\n    onCancel() {\n        console.log(&#39;Cancel&#39;);\n    },\n});</code></pre>\n<p>这样子可以直接调出<code>Modal</code></p>\n<p>看看<code>Modal.confirm</code> 的实现<a href=\"https://github1s.com/ant-design/ant-design/blob/master/components/modal/index.tsx#L27\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<h2 id=\"Modal-confirm\"><a href=\"#Modal-confirm\" class=\"headerlink\" title=\"Modal.confirm\"></a>Modal.confirm</h2><p>它用了一个高阶函数<code>confirm(withxxx(props))</code>, <code>withxxx</code>函数就是给props 附加一个<code>type</code>, 即 类似<code>Object.assign(props, { type: &#39;xxx&#39; })</code>;</p>\n<pre><code class=\"jsx\">Modal.info = function infoFn(props: ModalFuncProps) {\n  return confirm(withInfo(props));\n};</code></pre>\n<ul>\n<li>withInfo 函数<pre><code class=\"jsx\">/** withInfo 函数 */\nfunction withInfo(props: ModalFuncProps): ModalFuncProps {\nreturn {\n  icon: &lt;InfoCircleOutlined /&gt;,\n  okCancel: false,\n  ...props,\n  type: &#39;info&#39;,\n};\n}</code></pre>\n</li>\n</ul>\n<h3 id=\"重头戏-Confirm-函数\"><a href=\"#重头戏-Confirm-函数\" class=\"headerlink\" title=\"重头戏 Confirm 函数\"></a>重头戏 Confirm 函数</h3><p>其实就是在<code>body</code> 下面 创建一个节点<code>const div = document.createElement(&#39;div&#39;);</code> 然后将<code>div</code> append 到body下， 最后调用 <code>React.render(Modal, div)</code>将model 渲染到div上, </p>\n<pre><code class=\"jsx\">function confirm(config: ModalFuncProps) {\n  const div = document.createElement(&#39;div&#39;);\n  document.body.appendChild(div);\n  let currentConfig = { ...config, close, visible: true } as any;\n\n    /** destroy 的时候将visbile 改成false，然后如果有onCancel 就执行onCancle, 将当前div remove掉 **/\n  function destroy(...args: any[]) {\n    const unmountResult = ReactDOM.unmountComponentAtNode(div);\n    if (unmountResult &amp;&amp; div.parentNode) {\n      div.parentNode.removeChild(div);\n    }\n    const triggerCancel = args.some(param =&gt; param &amp;&amp; param.triggerCancel);\n    if (config.onCancel &amp;&amp; triggerCancel) {\n      config.onCancel(...args);\n    }\n    for (let i = 0; i &lt; destroyFns.length; i++) {\n      const fn = destroyFns[i];\n\n      if (fn === close) {\n        destroyFns.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n    /** render 到div上  */\n  function render(props: { visible: boolean, onOk: () =&gt; void, onCancel: () =&gt; void }) {\n\n    setTimeout(() =&gt; {\n      ReactDOM.render(\n        &lt;ConfirmDialog\n          {...props}\n        /&gt;,\n        div,\n      );\n    });\n  }\n\n    /** close 的时候将visbile 改成false，然后如果有afterClose afterClose, 然后destroy掉 **/\n  function close(...args: any[]) {\n    currentConfig = {\n      ...currentConfig,\n      visible: false,\n      afterClose: () =&gt; {\n        if (typeof config.afterClose === &#39;function&#39;) {\n          config.afterClose();\n        }\n        destroy.apply(this, args);\n      },\n    };\n    render(currentConfig);\n  }\n\n    /** 向外暴露update 方法，可以修改props等，修改完props然后render一下 */\n  function update(configUpdate: ConfigUpdate) {\n    if (typeof configUpdate === &#39;function&#39;) {\n      currentConfig = configUpdate(currentConfig);\n    } else {\n      currentConfig = {\n        ...currentConfig,\n        ...configUpdate,\n      };\n    }\n    render(currentConfig);\n  }\n\n  render(currentConfig);\n\n  destroyFns.push(close);\n\n    /** 暴露update 和destroy 方法 */\n    /** 可以用 const modal = Modal.info({title: &#39;123&#39;}) */\n    /** 可以用 modal.update({title: &#39;345&#39;}) 去更新title*/\n    /** 可以用 modal.destory() 去关闭modal*/\n  return {\n    destroy: close,\n    update,\n  };\n}</code></pre>\n<p>注意看这个<code>&lt;ConfirmDialog /&gt;</code></p>\n<h2 id=\"ConfirmDialog\"><a href=\"#ConfirmDialog\" class=\"headerlink\" title=\"ConfirmDialog\"></a>ConfirmDialog</h2><p><a href=\"https://github1s.com/ant-design/ant-design/blob/master/components/modal/ConfirmDialog.tsx#L70\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<p>这个ConfirmDialog 里面的<strong>确认</strong>和<strong>取消</strong> 按钮都用了一个<code>&lt;ActionButton  onOk={onOk}/&gt;</code> 其实就是一个<code>&lt;Button /&gt;</code></p>\n<p>下面只看他如何处理<code>onOk</code> 方法</p>\n<pre><code class=\"jsx\">const ActionButton = () =&gt; {\n    const handlePromiseOnOk = (returnValueOfOnOk?: PromiseLike&lt;any&gt;) =&gt; {\n    const { close } = props;\n    if (!isThenable(returnValueOfOnOk)) {\n      return;\n    }\n    setLoading(true);\n        /** promise 完成后直接close 掉 */\n    returnValueOfOnOk!.then(\n      (...args: any[]) =&gt; {\n        setLoading(false);\n        close(...args);\n        clickedRef.current = false;\n      },\n      (e: Error) =&gt; {\n        console.error(e);\n        setLoading(false);\n        clickedRef.current = false;\n      },\n    );\n  };\n\n  const onClick = (e: React.MouseEvent&lt;HTMLButtonElement&gt;) =&gt; {\n    const { actionFn, close } = props;\n        // 这里处理按钮是否被点击了，如果是, 直接return掉\n    if (clickedRef.current) {\n      return;\n    }\n    clickedRef.current = true;\n        /** 如果没有onOk 或者是onCancel 方法，直接调用modal.close() 方法，光比弹窗 */\n    if (!actionFn) {\n      close();\n      return;\n    }\n    let returnValueOfOnOk;\n        /** 这里我的理解是 处理是否冒泡？ */\n    if (props.emitEvent) {\n      returnValueOfOnOk = actionFn(e);\n            /** 判断是否是一个promise , 处理onOk 直接return new Promise() */\n      if (props.quitOnNullishReturnValue &amp;&amp; !isThenable(returnValueOfOnOk)) {\n        clickedRef.current = false;\n        close(e);\n        return;\n      }\n    } else if (actionFn.length) {\n            /** onOk 是否有参数 function onOk(close) 的情况， */\n      returnValueOfOnOk = actionFn(close);\n      clickedRef.current = false;\n    } else {\n            /** 无参数 */\n      returnValueOfOnOk = actionFn();\n      if (!returnValueOfOnOk) {\n        close();\n        return;\n      }\n    }\n        /** 处理promise 方法 */\n    handlePromiseOnOk(returnValueOfOnOk);\n  };\n\n    return (\n        &lt;Button OnClick={onClick}&gt;\n        &lt;/Button&gt;\n    )\n}\n</code></pre>\n"},{"title":"Antd Alert 组件","date":"2021-09-13T22:31:00.000Z","_content":"\n## Antd Alert 组件\n\n[源码地址](https://github1s.com/ant-design/ant-design/blob/master/components/alert/index.tsx#L153)\n\n这个组件相对简单，就是一个布局组件\n\n### 传参\n\n```jsx\n/** 简化后的属性 **/\nexport interface AlertProps {\n  type?: 'success' | 'info' | 'warning' | 'error';\n  message?: React.ReactNode;\n  description?: React.ReactNode;\n  onClose?: React.MouseEventHandler<HTMLButtonElement>;\n  afterClose?: () => void;\n  showIcon?: boolean;\n  icon?: React.ReactNode;\n}\n```\n\n其实也就是一个用`CSSMotion` 包裹住的`div` 组件， 里面渲染了`message`. `description`, 等\n\n```jsx\n<CSSMotion\n\tvisible={!closed}\n\tmotionName={`${prefixCls}-motion`}\n\tmotionAppear={false}\n\tmotionEnter={false}\n\tonLeaveStart={node => ({\n\tmaxHeight: node.offsetHeight,\n\t})}\n\tonLeaveEnd={afterClose}\n>\n\t{({ className: motionClassName, style: motionStyle }) => (\n\t<div\n\t\t\tref={ref}\n\t\t\tclassName={classNames(alertCls, motionClassName)}\n\t\t\tstyle={{ ...style, ...motionStyle }}\n\t\t\t{...props}\n\t>\n\t\t\t{isShowIcon ? renderIconNode() : null}\n\t\t\t<div className={`${prefixCls}-content`}>\n\t\t\t{message ? <div className={`${prefixCls}-message`}>{message}</div> : null}\n\t\t\t{description ? <div className={`${prefixCls}-description`}>{description}</div> : null}\n\t\t\t</div>\n\t\t\t{action ? <div className={`${prefixCls}-action`}>{action}</div> : null}\n\t\t\t{renderCloseIcon()}\n\t</div>\n\t)}\n</CSSMotion>\n```\n\n值得学习的地方是，`renderIconNode` 函数\n\n```jsx\nconst renderIconNode = () => {\n\tconst { icon } = props;\n\t// 这里源码中 iconMapOutlined 是一个map, 里面是一个 { [type: string]: AntdIcon } \n\tconst iconType = (description ? iconMapOutlined : iconMapFilled)[type] || null;\n\tif (icon) {\n\t\t/** 这里replaceElement 其实源码是用 React.cloneElement 去实现的， \n\t\t\t* 就是判断icon 是否是element 不是的话就用第二参数， 是的话就克隆element，然后添加其余属性 \n\t\t\t*/\n\t\treturn replaceElement(icon, <span className={`${prefixCls}-icon`}>{icon}</span>, () => ({\n\t\t\tclassName: classNames(`${prefixCls}-icon`, {\n\t\t\t\t[(icon as any).props.className]: (icon as any).props.className,\n\t\t\t}),\n\t\t}));\n\t}\n\t/** 这里如果是自己写的话, 是用一个div 去包裹着， 而不是像他那样创建一个element， 这里如果换成React.cloneElement是不是更加合适？ */\n\treturn React.createElement(iconType, { className: `${prefixCls}-icon` });\n  };\n```\n\n","source":"_posts/antd alert.md","raw":"---\ntitle: Antd Alert 组件\ndate: 2021-09-013 22:31:00\ntags: [antd, 组件]\n---\n\n## Antd Alert 组件\n\n[源码地址](https://github1s.com/ant-design/ant-design/blob/master/components/alert/index.tsx#L153)\n\n这个组件相对简单，就是一个布局组件\n\n### 传参\n\n```jsx\n/** 简化后的属性 **/\nexport interface AlertProps {\n  type?: 'success' | 'info' | 'warning' | 'error';\n  message?: React.ReactNode;\n  description?: React.ReactNode;\n  onClose?: React.MouseEventHandler<HTMLButtonElement>;\n  afterClose?: () => void;\n  showIcon?: boolean;\n  icon?: React.ReactNode;\n}\n```\n\n其实也就是一个用`CSSMotion` 包裹住的`div` 组件， 里面渲染了`message`. `description`, 等\n\n```jsx\n<CSSMotion\n\tvisible={!closed}\n\tmotionName={`${prefixCls}-motion`}\n\tmotionAppear={false}\n\tmotionEnter={false}\n\tonLeaveStart={node => ({\n\tmaxHeight: node.offsetHeight,\n\t})}\n\tonLeaveEnd={afterClose}\n>\n\t{({ className: motionClassName, style: motionStyle }) => (\n\t<div\n\t\t\tref={ref}\n\t\t\tclassName={classNames(alertCls, motionClassName)}\n\t\t\tstyle={{ ...style, ...motionStyle }}\n\t\t\t{...props}\n\t>\n\t\t\t{isShowIcon ? renderIconNode() : null}\n\t\t\t<div className={`${prefixCls}-content`}>\n\t\t\t{message ? <div className={`${prefixCls}-message`}>{message}</div> : null}\n\t\t\t{description ? <div className={`${prefixCls}-description`}>{description}</div> : null}\n\t\t\t</div>\n\t\t\t{action ? <div className={`${prefixCls}-action`}>{action}</div> : null}\n\t\t\t{renderCloseIcon()}\n\t</div>\n\t)}\n</CSSMotion>\n```\n\n值得学习的地方是，`renderIconNode` 函数\n\n```jsx\nconst renderIconNode = () => {\n\tconst { icon } = props;\n\t// 这里源码中 iconMapOutlined 是一个map, 里面是一个 { [type: string]: AntdIcon } \n\tconst iconType = (description ? iconMapOutlined : iconMapFilled)[type] || null;\n\tif (icon) {\n\t\t/** 这里replaceElement 其实源码是用 React.cloneElement 去实现的， \n\t\t\t* 就是判断icon 是否是element 不是的话就用第二参数， 是的话就克隆element，然后添加其余属性 \n\t\t\t*/\n\t\treturn replaceElement(icon, <span className={`${prefixCls}-icon`}>{icon}</span>, () => ({\n\t\t\tclassName: classNames(`${prefixCls}-icon`, {\n\t\t\t\t[(icon as any).props.className]: (icon as any).props.className,\n\t\t\t}),\n\t\t}));\n\t}\n\t/** 这里如果是自己写的话, 是用一个div 去包裹着， 而不是像他那样创建一个element， 这里如果换成React.cloneElement是不是更加合适？ */\n\treturn React.createElement(iconType, { className: `${prefixCls}-icon` });\n  };\n```\n\n","slug":"antd alert","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrf3000rmroj0bld7rje","content":"<h2 id=\"Antd-Alert-组件\"><a href=\"#Antd-Alert-组件\" class=\"headerlink\" title=\"Antd Alert 组件\"></a>Antd Alert 组件</h2><p><a href=\"https://github1s.com/ant-design/ant-design/blob/master/components/alert/index.tsx#L153\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<p>这个组件相对简单，就是一个布局组件</p>\n<h3 id=\"传参\"><a href=\"#传参\" class=\"headerlink\" title=\"传参\"></a>传参</h3><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/** 简化后的属性 **/</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AlertProps</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'success'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'info'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'warning'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">;</span>\n  message<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n  onClose<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>MouseEventHandler<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>HTMLButtonElement</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  afterClose<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  showIcon<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n  icon<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>其实也就是一个用<code>CSSMotion</code> 包裹住的<code>div</code> 组件， 里面渲染了<code>message</code>. <code>description</code>, 等</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CSSMotion</span>\n    <span class=\"token attr-name\">visible</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>closed<span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">motionName</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-motion`</span></span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">motionAppear</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">motionEnter</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">onLeaveStart</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>node <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    maxHeight<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>offsetHeight<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">onLeaveEnd</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>afterClose<span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> className<span class=\"token punctuation\">:</span> motionClassName<span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">:</span> motionStyle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n            <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span>alertCls<span class=\"token punctuation\">,</span> motionClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>motionStyle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">{...props}</span>\n    <span class=\"token punctuation\">></span></span>\n            <span class=\"token punctuation\">{</span>isShowIcon <span class=\"token operator\">?</span> <span class=\"token function\">renderIconNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-content`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token punctuation\">{</span>message <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-message`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span>description <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-description`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>description<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token punctuation\">{</span>action <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-action`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>action<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token function\">renderCloseIcon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CSSMotion</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>值得学习的地方是，<code>renderIconNode</code> 函数</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> renderIconNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> icon <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这里源码中 iconMapOutlined 是一个map, 里面是一个 { [type: string]: AntdIcon } </span>\n    <span class=\"token keyword\">const</span> iconType <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>description <span class=\"token operator\">?</span> iconMapOutlined <span class=\"token punctuation\">:</span> iconMapFilled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>icon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">/** 这里replaceElement 其实源码是用 React.cloneElement 去实现的， \n            * 就是判断icon 是否是element 不是的话就用第二参数， 是的话就克隆element，然后添加其余属性 \n            */</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">replaceElement</span><span class=\"token punctuation\">(</span>icon<span class=\"token punctuation\">,</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-icon`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>icon<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            className<span class=\"token punctuation\">:</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-icon`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>icon <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>icon <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 这里如果是自己写的话, 是用一个div 去包裹着， 而不是像他那样创建一个element， 这里如果换成React.cloneElement是不是更加合适？ */</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>iconType<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> className<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-icon`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Antd-Alert-组件\"><a href=\"#Antd-Alert-组件\" class=\"headerlink\" title=\"Antd Alert 组件\"></a>Antd Alert 组件</h2><p><a href=\"https://github1s.com/ant-design/ant-design/blob/master/components/alert/index.tsx#L153\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<p>这个组件相对简单，就是一个布局组件</p>\n<h3 id=\"传参\"><a href=\"#传参\" class=\"headerlink\" title=\"传参\"></a>传参</h3><pre><code class=\"jsx\">/** 简化后的属性 **/\nexport interface AlertProps {\n  type?: &#39;success&#39; | &#39;info&#39; | &#39;warning&#39; | &#39;error&#39;;\n  message?: React.ReactNode;\n  description?: React.ReactNode;\n  onClose?: React.MouseEventHandler&lt;HTMLButtonElement&gt;;\n  afterClose?: () =&gt; void;\n  showIcon?: boolean;\n  icon?: React.ReactNode;\n}</code></pre>\n<p>其实也就是一个用<code>CSSMotion</code> 包裹住的<code>div</code> 组件， 里面渲染了<code>message</code>. <code>description</code>, 等</p>\n<pre><code class=\"jsx\">&lt;CSSMotion\n    visible={!closed}\n    motionName={`${prefixCls}-motion`}\n    motionAppear={false}\n    motionEnter={false}\n    onLeaveStart={node =&gt; ({\n    maxHeight: node.offsetHeight,\n    })}\n    onLeaveEnd={afterClose}\n&gt;\n    {({ className: motionClassName, style: motionStyle }) =&gt; (\n    &lt;div\n            ref={ref}\n            className={classNames(alertCls, motionClassName)}\n            style={{ ...style, ...motionStyle }}\n            {...props}\n    &gt;\n            {isShowIcon ? renderIconNode() : null}\n            &lt;div className={`${prefixCls}-content`}&gt;\n            {message ? &lt;div className={`${prefixCls}-message`}&gt;{message}&lt;/div&gt; : null}\n            {description ? &lt;div className={`${prefixCls}-description`}&gt;{description}&lt;/div&gt; : null}\n            &lt;/div&gt;\n            {action ? &lt;div className={`${prefixCls}-action`}&gt;{action}&lt;/div&gt; : null}\n            {renderCloseIcon()}\n    &lt;/div&gt;\n    )}\n&lt;/CSSMotion&gt;</code></pre>\n<p>值得学习的地方是，<code>renderIconNode</code> 函数</p>\n<pre><code class=\"jsx\">const renderIconNode = () =&gt; {\n    const { icon } = props;\n    // 这里源码中 iconMapOutlined 是一个map, 里面是一个 { [type: string]: AntdIcon } \n    const iconType = (description ? iconMapOutlined : iconMapFilled)[type] || null;\n    if (icon) {\n        /** 这里replaceElement 其实源码是用 React.cloneElement 去实现的， \n            * 就是判断icon 是否是element 不是的话就用第二参数， 是的话就克隆element，然后添加其余属性 \n            */\n        return replaceElement(icon, &lt;span className={`${prefixCls}-icon`}&gt;{icon}&lt;/span&gt;, () =&gt; ({\n            className: classNames(`${prefixCls}-icon`, {\n                [(icon as any).props.className]: (icon as any).props.className,\n            }),\n        }));\n    }\n    /** 这里如果是自己写的话, 是用一个div 去包裹着， 而不是像他那样创建一个element， 这里如果换成React.cloneElement是不是更加合适？ */\n    return React.createElement(iconType, { className: `${prefixCls}-icon` });\n  };</code></pre>\n"},{"title":"ant Switch 组件","date":"2021-09-13T20:31:00.000Z","_content":"\n## Antd Switch\n\n[源码地址](https://github.com/ant-design/ant-design/blob/master/components/switch/index.tsx)\n\n\n## Switch 参数\n\n很明显，`Switch` 的作为一个受控组件， 那么他接受的组件应该有`checked`, `onChange` 这两个属性， 查看`Switch` 的`interface`\n\n### interface\n\n```jsx\n/** 简化后的interface */\nexport interface SwitchProps {\n  /** switch 大小 */\n  size?: SwitchSize;\n\t/** 开关状态 */\n  checked?: boolean;\n\t/** 开关状态 */\n  defaultChecked?: boolean;\n\t/** onChange 事件 */\n  onChange?: (checked: boolean, event: MouseEvent) => void;\n  checkedChildren?: React.ReactNode;\n  unCheckedChildren?: React.ReactNode;\n  disabled?: boolean;\n}\n```\n\n`antd` 源码中`Switch` 调用的是 `RcSwitch`\n\n```jsx\n/** 简化后的代码 */\nimport * as React from 'react';\nimport RcSwitch from 'rc-switch';\n\nconst Switch = React.forwardRef<unknown, SwitchProps>(props, ref) => {\n\tconst { disabled, ...rest } = props;\n\n\treturn (\n\t\t <RcSwitch\n\t\t\t{...props}\n\t\t\tdisabled={disabled || loading}\n\t\t\tref={ref}\n\t\t/>\n\t)\n}\n```\n\n## RcSwitch\n\n[源码地址](https://github1s.com/react-component/switch/blob/master/src/index.tsx)\n\n直接看 `RcSwitch` 的`render` 函数， 其实就是一个`button` 包裹着两个propsChildren\n\n```jsx\nconst RcSwitch = () => {\n\treturn (\n\t\t<button\n\t\t\t{...restProps}\n\t\t\taria-checked={innerChecked}\n\t\t\tdisabled={disabled}\n\t\t\tref={ref}\n\t\t\tonClick={onInternalClick}\n\t\t>\n\t\t\t{loadingIcon}\n\t\t\t<span className={`${prefixCls}-inner`}>\n\t\t\t\t{innerChecked ? checkedChildren : unCheckedChildren}\n\t\t\t</span>\n\t\t</button>\n\t)\n}\n```\n\n值得学习的是，rc-switch 用一个`hook 函数`，将`value`, `defaultValue`, `onChange` 三者抽离出来，这样就可以封装一个受控组件或者是一个非受控组件了\n其实 `useMergedState`  就是 `umi hook` 里面的 [useControllableValue](https://hooks.umijs.org/zh-CN/hooks/state/use-controllable-value\t)\n\n\n```jsx\nconst RcSwitch = () => {\n\tconst [innerChecked, setInnerChecked] = useMergedState<boolean>(false, {\n\t\tvalue: checked,\n\t\tdefaultValue: defaultChecked,\n\t});\n\n\t/** 就是一个onChange 函数，同时改变自身innerCheck 状态，如果props 有onChange，那么也触发父级事件 */\n\tfunction triggerChange(\n\t\tnewChecked: boolean,\n\t\tevent: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLButtonElement>,\n\t) {\n\t\tlet mergedChecked = innerChecked;\n\n\t\tif (!disabled) {\n\t\t\tmergedChecked = newChecked;\n\t\t\tsetInnerChecked(mergedChecked);\n\t\t\tonChange?.(mergedChecked, event);\n\t\t}\n\n\t\treturn mergedChecked;\n\t}\n\treturn (\n\t\t<button\n\t\t\taria-checked={innerChecked}\n\t\t\tdisabled={disabled}\n\t\t\tref={ref}\n\t\t\tonClick={(e) => triggerChange(!innerChecked, e)}\n\t\t>\n\t\t\t{loadingIcon}\n\t\t\t<span className={`${prefixCls}-inner`}>\n\t\t\t\t{innerChecked ? checkedChildren : unCheckedChildren}\n\t\t\t</span>\n\t\t</button>\n\t)\n}\n```\n\n## useMergedState 或者 useControllableValue \n\n我们直接查看`useControllableValue` 这个hooks 是怎么实现的\n[源码](https://github.com/alibaba/hooks/blob/master/packages/hooks/src/useControllableValue/index.ts)\n\n```jsx\ninterface StandardProps<T> {\n  value: T;\n  defaultValue?: T;\n  onChange: (val: T) => void;\n}\nfunction useControllableValue<T = any>(props: StandardProps<T>): [T, (val: T) => void];\nfunction useControllableValue<T = any>(\n  props?: Props,\n  options?: Options<T>,\n): [T, (v: T, ...args: any[]) => void];\nfunction useControllableValue<T = any>(props: Props = {}, options: Options<T> = {}) {\n\t/** 首先获取options 的默认参数， 一般为 value， onChange */\n  const {\n    defaultValue,\n    defaultValuePropName = 'defaultValue',\n    valuePropName = 'value',\n    trigger = 'onChange',\n  } = options;\n\n\t/** 获取 prop['value'] 的值 */\n  const value = props[valuePropName] as T;\n\n\t/** 如果value 在 props 中， 那么我们直接用 props[value] 的值， 不然就是用默认值 */ \n  const [state, setState] = useState<T>(() => {\n    if (valuePropName in props) {\n      return value;\n    }\n    if (defaultValuePropName in props) {\n      return props[defaultValuePropName];\n    }\n    return defaultValue;\n  });\n\n  /* init 的时候不用执行了， 当我们传入的props[value] 发生变化的时候，重新setState, 保证state 跟 props[value] 同步 */\n  useUpdateEffect(() => {\n    if (valuePropName in props) {\n      setState(value);\n    }\n  }, [value, valuePropName]);\n\n\t/** onChange 事件， 分为非受控组件，与受控组件 */\n  const handleSetState = useCallback(\n    (v: T, ...args: any[]) => {\n\t\t\t/** 这里判断一下 我们用组件的时候有没有传入value, 有的话就是受控组件， 没有的话就是非受控组件，非受控组件维护内部值 */\n      if (!(valuePropName in props)) {\n        setState(v);\n      }\n\t\t\t/** 受控组件， 判断一下是否有onChange, 如果有那么就调用props.onChange */\n      if (props[trigger]) {\n        props[trigger](v, ...args);\n      }\n    },\n    [props, valuePropName, trigger],\n  );\n\n  return [valuePropName in props ? value : state, handleSetState] as const;\n}\n```\n\n这个`hooks` 在antd 中经常被使用到\n\n\n\n\n","source":"_posts/antd-switch.md","raw":"---\ntitle: ant Switch 组件\ndate: 2021-09-013 20:31:00\ntags: [antd, 组件]\n---\n\n## Antd Switch\n\n[源码地址](https://github.com/ant-design/ant-design/blob/master/components/switch/index.tsx)\n\n\n## Switch 参数\n\n很明显，`Switch` 的作为一个受控组件， 那么他接受的组件应该有`checked`, `onChange` 这两个属性， 查看`Switch` 的`interface`\n\n### interface\n\n```jsx\n/** 简化后的interface */\nexport interface SwitchProps {\n  /** switch 大小 */\n  size?: SwitchSize;\n\t/** 开关状态 */\n  checked?: boolean;\n\t/** 开关状态 */\n  defaultChecked?: boolean;\n\t/** onChange 事件 */\n  onChange?: (checked: boolean, event: MouseEvent) => void;\n  checkedChildren?: React.ReactNode;\n  unCheckedChildren?: React.ReactNode;\n  disabled?: boolean;\n}\n```\n\n`antd` 源码中`Switch` 调用的是 `RcSwitch`\n\n```jsx\n/** 简化后的代码 */\nimport * as React from 'react';\nimport RcSwitch from 'rc-switch';\n\nconst Switch = React.forwardRef<unknown, SwitchProps>(props, ref) => {\n\tconst { disabled, ...rest } = props;\n\n\treturn (\n\t\t <RcSwitch\n\t\t\t{...props}\n\t\t\tdisabled={disabled || loading}\n\t\t\tref={ref}\n\t\t/>\n\t)\n}\n```\n\n## RcSwitch\n\n[源码地址](https://github1s.com/react-component/switch/blob/master/src/index.tsx)\n\n直接看 `RcSwitch` 的`render` 函数， 其实就是一个`button` 包裹着两个propsChildren\n\n```jsx\nconst RcSwitch = () => {\n\treturn (\n\t\t<button\n\t\t\t{...restProps}\n\t\t\taria-checked={innerChecked}\n\t\t\tdisabled={disabled}\n\t\t\tref={ref}\n\t\t\tonClick={onInternalClick}\n\t\t>\n\t\t\t{loadingIcon}\n\t\t\t<span className={`${prefixCls}-inner`}>\n\t\t\t\t{innerChecked ? checkedChildren : unCheckedChildren}\n\t\t\t</span>\n\t\t</button>\n\t)\n}\n```\n\n值得学习的是，rc-switch 用一个`hook 函数`，将`value`, `defaultValue`, `onChange` 三者抽离出来，这样就可以封装一个受控组件或者是一个非受控组件了\n其实 `useMergedState`  就是 `umi hook` 里面的 [useControllableValue](https://hooks.umijs.org/zh-CN/hooks/state/use-controllable-value\t)\n\n\n```jsx\nconst RcSwitch = () => {\n\tconst [innerChecked, setInnerChecked] = useMergedState<boolean>(false, {\n\t\tvalue: checked,\n\t\tdefaultValue: defaultChecked,\n\t});\n\n\t/** 就是一个onChange 函数，同时改变自身innerCheck 状态，如果props 有onChange，那么也触发父级事件 */\n\tfunction triggerChange(\n\t\tnewChecked: boolean,\n\t\tevent: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLButtonElement>,\n\t) {\n\t\tlet mergedChecked = innerChecked;\n\n\t\tif (!disabled) {\n\t\t\tmergedChecked = newChecked;\n\t\t\tsetInnerChecked(mergedChecked);\n\t\t\tonChange?.(mergedChecked, event);\n\t\t}\n\n\t\treturn mergedChecked;\n\t}\n\treturn (\n\t\t<button\n\t\t\taria-checked={innerChecked}\n\t\t\tdisabled={disabled}\n\t\t\tref={ref}\n\t\t\tonClick={(e) => triggerChange(!innerChecked, e)}\n\t\t>\n\t\t\t{loadingIcon}\n\t\t\t<span className={`${prefixCls}-inner`}>\n\t\t\t\t{innerChecked ? checkedChildren : unCheckedChildren}\n\t\t\t</span>\n\t\t</button>\n\t)\n}\n```\n\n## useMergedState 或者 useControllableValue \n\n我们直接查看`useControllableValue` 这个hooks 是怎么实现的\n[源码](https://github.com/alibaba/hooks/blob/master/packages/hooks/src/useControllableValue/index.ts)\n\n```jsx\ninterface StandardProps<T> {\n  value: T;\n  defaultValue?: T;\n  onChange: (val: T) => void;\n}\nfunction useControllableValue<T = any>(props: StandardProps<T>): [T, (val: T) => void];\nfunction useControllableValue<T = any>(\n  props?: Props,\n  options?: Options<T>,\n): [T, (v: T, ...args: any[]) => void];\nfunction useControllableValue<T = any>(props: Props = {}, options: Options<T> = {}) {\n\t/** 首先获取options 的默认参数， 一般为 value， onChange */\n  const {\n    defaultValue,\n    defaultValuePropName = 'defaultValue',\n    valuePropName = 'value',\n    trigger = 'onChange',\n  } = options;\n\n\t/** 获取 prop['value'] 的值 */\n  const value = props[valuePropName] as T;\n\n\t/** 如果value 在 props 中， 那么我们直接用 props[value] 的值， 不然就是用默认值 */ \n  const [state, setState] = useState<T>(() => {\n    if (valuePropName in props) {\n      return value;\n    }\n    if (defaultValuePropName in props) {\n      return props[defaultValuePropName];\n    }\n    return defaultValue;\n  });\n\n  /* init 的时候不用执行了， 当我们传入的props[value] 发生变化的时候，重新setState, 保证state 跟 props[value] 同步 */\n  useUpdateEffect(() => {\n    if (valuePropName in props) {\n      setState(value);\n    }\n  }, [value, valuePropName]);\n\n\t/** onChange 事件， 分为非受控组件，与受控组件 */\n  const handleSetState = useCallback(\n    (v: T, ...args: any[]) => {\n\t\t\t/** 这里判断一下 我们用组件的时候有没有传入value, 有的话就是受控组件， 没有的话就是非受控组件，非受控组件维护内部值 */\n      if (!(valuePropName in props)) {\n        setState(v);\n      }\n\t\t\t/** 受控组件， 判断一下是否有onChange, 如果有那么就调用props.onChange */\n      if (props[trigger]) {\n        props[trigger](v, ...args);\n      }\n    },\n    [props, valuePropName, trigger],\n  );\n\n  return [valuePropName in props ? value : state, handleSetState] as const;\n}\n```\n\n这个`hooks` 在antd 中经常被使用到\n\n\n\n\n","slug":"antd-switch","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrf5000tmrojfe0daqwi","content":"<h2 id=\"Antd-Switch\"><a href=\"#Antd-Switch\" class=\"headerlink\" title=\"Antd Switch\"></a>Antd Switch</h2><p><a href=\"https://github.com/ant-design/ant-design/blob/master/components/switch/index.tsx\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<h2 id=\"Switch-参数\"><a href=\"#Switch-参数\" class=\"headerlink\" title=\"Switch 参数\"></a>Switch 参数</h2><p>很明显，<code>Switch</code> 的作为一个受控组件， 那么他接受的组件应该有<code>checked</code>, <code>onChange</code> 这两个属性， 查看<code>Switch</code> 的<code>interface</code></p>\n<h3 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h3><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/** 简化后的interface */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SwitchProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">/** switch 大小 */</span>\n  size<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> SwitchSize<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 开关状态 */</span>\n  checked<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 开关状态 */</span>\n  defaultChecked<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** onChange 事件 */</span>\n  onChange<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>checked<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> MouseEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  checkedChildren<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n  unCheckedChildren<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n  disabled<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code>antd</code> 源码中<code>Switch</code> 调用的是 <code>RcSwitch</code></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/** 简化后的代码 */</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RcSwitch <span class=\"token keyword\">from</span> <span class=\"token string\">'rc-switch'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Switch <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>forwardRef<span class=\"token operator\">&lt;</span>unknown<span class=\"token punctuation\">,</span> SwitchProps<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> disabled<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n         <span class=\"token operator\">&lt;</span>RcSwitch\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n            disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>disabled <span class=\"token operator\">||</span> loading<span class=\"token punctuation\">}</span>\n            ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"RcSwitch\"><a href=\"#RcSwitch\" class=\"headerlink\" title=\"RcSwitch\"></a>RcSwitch</h2><p><a href=\"https://github1s.com/react-component/switch/blob/master/src/index.tsx\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<p>直接看 <code>RcSwitch</code> 的<code>render</code> 函数， 其实就是一个<code>button</code> 包裹着两个propsChildren</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> RcSwitch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>button\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">}</span>\n            aria<span class=\"token operator\">-</span>checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>innerChecked<span class=\"token punctuation\">}</span>\n            disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>disabled<span class=\"token punctuation\">}</span>\n            ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span>\n            onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onInternalClick<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>loadingIcon<span class=\"token punctuation\">}</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-inner`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token punctuation\">{</span>innerChecked <span class=\"token operator\">?</span> checkedChildren <span class=\"token punctuation\">:</span> unCheckedChildren<span class=\"token punctuation\">}</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>值得学习的是，rc-switch 用一个<code>hook 函数</code>，将<code>value</code>, <code>defaultValue</code>, <code>onChange</code> 三者抽离出来，这样就可以封装一个受控组件或者是一个非受控组件了<br>其实 <code>useMergedState</code>  就是 <code>umi hook</code> 里面的 <a href=\"https://hooks.umijs.org/zh-CN/hooks/state/use-controllable-value\" target=\"_blank\" rel=\"noopener\">useControllableValue</a></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> RcSwitch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>innerChecked<span class=\"token punctuation\">,</span> setInnerChecked<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useMergedState<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>boolean</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token punctuation\">:</span> checked<span class=\"token punctuation\">,</span>\n        defaultValue<span class=\"token punctuation\">:</span> defaultChecked<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** 就是一个onChange 函数，同时改变自身innerCheck 状态，如果props 有onChange，那么也触发父级事件 */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">triggerChange</span><span class=\"token punctuation\">(</span>\n        newChecked<span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">,</span>\n        event<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>HTMLButtonElement</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">|</span> React<span class=\"token punctuation\">.</span>KeyboardEvent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>HTMLButtonElement</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> mergedChecked <span class=\"token operator\">=</span> innerChecked<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>disabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mergedChecked <span class=\"token operator\">=</span> newChecked<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">setInnerChecked</span><span class=\"token punctuation\">(</span>mergedChecked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            onChange<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>mergedChecked<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> mergedChecked<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n            <span class=\"token attr-name\">aria-checked</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>innerChecked<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>disabled<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">triggerChange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>innerChecked<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span>\n            <span class=\"token punctuation\">{</span>loadingIcon<span class=\"token punctuation\">}</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefixCls<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-inner`</span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token punctuation\">{</span>innerChecked <span class=\"token operator\">?</span> checkedChildren <span class=\"token punctuation\">:</span> unCheckedChildren<span class=\"token punctuation\">}</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"useMergedState-或者-useControllableValue\"><a href=\"#useMergedState-或者-useControllableValue\" class=\"headerlink\" title=\"useMergedState 或者 useControllableValue\"></a>useMergedState 或者 useControllableValue</h2><p>我们直接查看<code>useControllableValue</code> 这个hooks 是怎么实现的<br><a href=\"https://github.com/alibaba/hooks/blob/master/packages/hooks/src/useControllableValue/index.ts\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StandardProps</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">;</span>\n  defaultValue<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">;</span>\n  onChange<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> useControllableValue<span class=\"token operator\">&lt;</span>T <span class=\"token operator\">=</span> any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> StandardProps<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> useControllableValue<span class=\"token operator\">&lt;</span>T <span class=\"token operator\">=</span> any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  props<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Props<span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Options<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> useControllableValue<span class=\"token operator\">&lt;</span>T <span class=\"token operator\">=</span> any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> Options<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 首先获取options 的默认参数， 一般为 value， onChange */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    defaultValue<span class=\"token punctuation\">,</span>\n    defaultValuePropName <span class=\"token operator\">=</span> <span class=\"token string\">'defaultValue'</span><span class=\"token punctuation\">,</span>\n    valuePropName <span class=\"token operator\">=</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n    trigger <span class=\"token operator\">=</span> <span class=\"token string\">'onChange'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** 获取 prop['value'] 的值 */</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>valuePropName<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> T<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** 如果value 在 props 中， 那么我们直接用 props[value] 的值， 不然就是用默认值 */</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valuePropName <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>defaultValuePropName <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">[</span>defaultValuePropName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> defaultValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/* init 的时候不用执行了， 当我们传入的props[value] 发生变化的时候，重新setState, 保证state 跟 props[value] 同步 */</span>\n  <span class=\"token function\">useUpdateEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valuePropName <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> valuePropName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** onChange 事件， 分为非受控组件，与受控组件 */</span>\n  <span class=\"token keyword\">const</span> handleSetState <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/** 这里判断一下 我们用组件的时候有没有传入value, 有的话就是受控组件， 没有的话就是非受控组件，非受控组件维护内部值 */</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>valuePropName <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">/** 受控组件， 判断一下是否有onChange, 如果有那么就调用props.onChange */</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>trigger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token punctuation\">[</span>trigger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">,</span> valuePropName<span class=\"token punctuation\">,</span> trigger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>valuePropName <span class=\"token keyword\">in</span> props <span class=\"token operator\">?</span> value <span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">,</span> handleSetState<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>这个<code>hooks</code> 在antd 中经常被使用到</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Antd-Switch\"><a href=\"#Antd-Switch\" class=\"headerlink\" title=\"Antd Switch\"></a>Antd Switch</h2><p><a href=\"https://github.com/ant-design/ant-design/blob/master/components/switch/index.tsx\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<h2 id=\"Switch-参数\"><a href=\"#Switch-参数\" class=\"headerlink\" title=\"Switch 参数\"></a>Switch 参数</h2><p>很明显，<code>Switch</code> 的作为一个受控组件， 那么他接受的组件应该有<code>checked</code>, <code>onChange</code> 这两个属性， 查看<code>Switch</code> 的<code>interface</code></p>\n<h3 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h3><pre><code class=\"jsx\">/** 简化后的interface */\nexport interface SwitchProps {\n  /** switch 大小 */\n  size?: SwitchSize;\n    /** 开关状态 */\n  checked?: boolean;\n    /** 开关状态 */\n  defaultChecked?: boolean;\n    /** onChange 事件 */\n  onChange?: (checked: boolean, event: MouseEvent) =&gt; void;\n  checkedChildren?: React.ReactNode;\n  unCheckedChildren?: React.ReactNode;\n  disabled?: boolean;\n}</code></pre>\n<p><code>antd</code> 源码中<code>Switch</code> 调用的是 <code>RcSwitch</code></p>\n<pre><code class=\"jsx\">/** 简化后的代码 */\nimport * as React from &#39;react&#39;;\nimport RcSwitch from &#39;rc-switch&#39;;\n\nconst Switch = React.forwardRef&lt;unknown, SwitchProps&gt;(props, ref) =&gt; {\n    const { disabled, ...rest } = props;\n\n    return (\n         &lt;RcSwitch\n            {...props}\n            disabled={disabled || loading}\n            ref={ref}\n        /&gt;\n    )\n}</code></pre>\n<h2 id=\"RcSwitch\"><a href=\"#RcSwitch\" class=\"headerlink\" title=\"RcSwitch\"></a>RcSwitch</h2><p><a href=\"https://github1s.com/react-component/switch/blob/master/src/index.tsx\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<p>直接看 <code>RcSwitch</code> 的<code>render</code> 函数， 其实就是一个<code>button</code> 包裹着两个propsChildren</p>\n<pre><code class=\"jsx\">const RcSwitch = () =&gt; {\n    return (\n        &lt;button\n            {...restProps}\n            aria-checked={innerChecked}\n            disabled={disabled}\n            ref={ref}\n            onClick={onInternalClick}\n        &gt;\n            {loadingIcon}\n            &lt;span className={`${prefixCls}-inner`}&gt;\n                {innerChecked ? checkedChildren : unCheckedChildren}\n            &lt;/span&gt;\n        &lt;/button&gt;\n    )\n}</code></pre>\n<p>值得学习的是，rc-switch 用一个<code>hook 函数</code>，将<code>value</code>, <code>defaultValue</code>, <code>onChange</code> 三者抽离出来，这样就可以封装一个受控组件或者是一个非受控组件了<br>其实 <code>useMergedState</code>  就是 <code>umi hook</code> 里面的 <a href=\"https://hooks.umijs.org/zh-CN/hooks/state/use-controllable-value\" target=\"_blank\" rel=\"noopener\">useControllableValue</a></p>\n<pre><code class=\"jsx\">const RcSwitch = () =&gt; {\n    const [innerChecked, setInnerChecked] = useMergedState&lt;boolean&gt;(false, {\n        value: checked,\n        defaultValue: defaultChecked,\n    });\n\n    /** 就是一个onChange 函数，同时改变自身innerCheck 状态，如果props 有onChange，那么也触发父级事件 */\n    function triggerChange(\n        newChecked: boolean,\n        event: React.MouseEvent&lt;HTMLButtonElement&gt; | React.KeyboardEvent&lt;HTMLButtonElement&gt;,\n    ) {\n        let mergedChecked = innerChecked;\n\n        if (!disabled) {\n            mergedChecked = newChecked;\n            setInnerChecked(mergedChecked);\n            onChange?.(mergedChecked, event);\n        }\n\n        return mergedChecked;\n    }\n    return (\n        &lt;button\n            aria-checked={innerChecked}\n            disabled={disabled}\n            ref={ref}\n            onClick={(e) =&gt; triggerChange(!innerChecked, e)}\n        &gt;\n            {loadingIcon}\n            &lt;span className={`${prefixCls}-inner`}&gt;\n                {innerChecked ? checkedChildren : unCheckedChildren}\n            &lt;/span&gt;\n        &lt;/button&gt;\n    )\n}</code></pre>\n<h2 id=\"useMergedState-或者-useControllableValue\"><a href=\"#useMergedState-或者-useControllableValue\" class=\"headerlink\" title=\"useMergedState 或者 useControllableValue\"></a>useMergedState 或者 useControllableValue</h2><p>我们直接查看<code>useControllableValue</code> 这个hooks 是怎么实现的<br><a href=\"https://github.com/alibaba/hooks/blob/master/packages/hooks/src/useControllableValue/index.ts\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<pre><code class=\"jsx\">interface StandardProps&lt;T&gt; {\n  value: T;\n  defaultValue?: T;\n  onChange: (val: T) =&gt; void;\n}\nfunction useControllableValue&lt;T = any&gt;(props: StandardProps&lt;T&gt;): [T, (val: T) =&gt; void];\nfunction useControllableValue&lt;T = any&gt;(\n  props?: Props,\n  options?: Options&lt;T&gt;,\n): [T, (v: T, ...args: any[]) =&gt; void];\nfunction useControllableValue&lt;T = any&gt;(props: Props = {}, options: Options&lt;T&gt; = {}) {\n    /** 首先获取options 的默认参数， 一般为 value， onChange */\n  const {\n    defaultValue,\n    defaultValuePropName = &#39;defaultValue&#39;,\n    valuePropName = &#39;value&#39;,\n    trigger = &#39;onChange&#39;,\n  } = options;\n\n    /** 获取 prop[&#39;value&#39;] 的值 */\n  const value = props[valuePropName] as T;\n\n    /** 如果value 在 props 中， 那么我们直接用 props[value] 的值， 不然就是用默认值 */ \n  const [state, setState] = useState&lt;T&gt;(() =&gt; {\n    if (valuePropName in props) {\n      return value;\n    }\n    if (defaultValuePropName in props) {\n      return props[defaultValuePropName];\n    }\n    return defaultValue;\n  });\n\n  /* init 的时候不用执行了， 当我们传入的props[value] 发生变化的时候，重新setState, 保证state 跟 props[value] 同步 */\n  useUpdateEffect(() =&gt; {\n    if (valuePropName in props) {\n      setState(value);\n    }\n  }, [value, valuePropName]);\n\n    /** onChange 事件， 分为非受控组件，与受控组件 */\n  const handleSetState = useCallback(\n    (v: T, ...args: any[]) =&gt; {\n            /** 这里判断一下 我们用组件的时候有没有传入value, 有的话就是受控组件， 没有的话就是非受控组件，非受控组件维护内部值 */\n      if (!(valuePropName in props)) {\n        setState(v);\n      }\n            /** 受控组件， 判断一下是否有onChange, 如果有那么就调用props.onChange */\n      if (props[trigger]) {\n        props[trigger](v, ...args);\n      }\n    },\n    [props, valuePropName, trigger],\n  );\n\n  return [valuePropName in props ? value : state, handleSetState] as const;\n}</code></pre>\n<p>这个<code>hooks</code> 在antd 中经常被使用到</p>\n"},{"title":"expo 极光推送","date":"2020-07-23T10:53:00.000Z","_content":"\n## 这里记录一下在用expo 接入极光推送时的坑\n\n**貌似极光推送不能在ios模拟器中显示，推送的预估人数一直为0**\n\n**注意：因为expo不支持第三方sdk, 即不支持react-native link 这种方式，所以需要expo eject的方式使用Bare workflow**\n\n这里我使用的是[jpush-react-native](https://github.com/jpush/jpush-react-native) 极光官方维护的sdk\n\n1. `yarn add jpush-react-native`\n2. `yarn add jcore-react-native`\n3. `expo eject`\n4. 在`eject`的时候建立包名， 我这里ios/react 都一样`com.notice.test`\n5. eject 之后我们可以在项目得到原始的`react-native`包, 即包含了`ios` 以及`android` 两个包\n6. 这里官方文档写的不好，我们直接使用pod 自动引入的方式， issues 有人提到如果两种方式一起引用的话会报错\n7. `cd ios && pod deintegrate`\n8. `pod install`\n\n**ios需要进行证书设置**, 这里直接看[官方指南](https://docs.jiguang.cn/jpush/client/iOS/ios_cer_guide/)就可以了\n\n接下来就是修改 `AppDelegate.m`， 用xcode 打开ios目录下的`.xcworkspace`文件， 展开项目名`notice`即可看到`AppDelegate.m`, 以下可以参考[官方例子](https://github.com/jpush/jpush-react-native/blob/master/example/ios/example/AppDelegate.m)\n\n在头部加入\n```tsx\n#import <RCTJPushModule.h>\n#ifdef NSFoundationVersionNumber_iOS_9_x_Max\n#import <UserNotifications/UserNotifications.h>\n#endif\n```\n\n在`didFinishLaunchingWithOptions` 方法加入, 同时修改`appKey`\n\n```tsx\n // JPush初始化配置\n  [JPUSHService setupWithOption:launchOptions appKey:@\"57012733695b98e936ada5b0\"\n                        channel:@\"default\" apsForProduction:YES];\n  // APNS\n  JPUSHRegisterEntity * entity = [[JPUSHRegisterEntity alloc] init];\n  if (@available(iOS 12.0, *)) {\n    entity.types = JPAuthorizationOptionAlert|JPAuthorizationOptionBadge|JPAuthorizationOptionSound|JPAuthorizationOptionProvidesAppNotificationSettings;\n  }\n  [JPUSHService registerForRemoteNotificationConfig:entity delegate:self];\n  [launchOptions objectForKey: UIApplicationLaunchOptionsRemoteNotificationKey];\n  // 自定义消息\n  NSNotificationCenter *defaultCenter = [NSNotificationCenter defaultCenter];\n  [defaultCenter addObserver:self selector:@selector(networkDidReceiveMessage:) name:kJPFNetworkDidReceiveMessageNotification object:nil];\n  // 地理围栏\n  [JPUSHService registerLbsGeofenceDelegate:self withLaunchOptions:launchOptions];\n```\n\n在最后加入\n\n```tsx\n//************************************************JPush start************************************************\n\n//注册 APNS 成功并上报 DeviceToken\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  [JPUSHService registerDeviceToken:deviceToken];\n}\n\n//iOS 7 APNS\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:  (NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {\n  // iOS 10 以下 Required\n  NSLog(@\"iOS 7 APNS\");\n  [JPUSHService handleRemoteNotification:userInfo];\n  [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  completionHandler(UIBackgroundFetchResultNewData);\n}\n\n//iOS 10 前台收到消息\n- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center  willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(NSInteger))completionHandler {\n  NSDictionary * userInfo = notification.request.content.userInfo;\n  if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n    // Apns\n    NSLog(@\"iOS 10 APNS 前台收到消息\");\n    [JPUSHService handleRemoteNotification:userInfo];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  }\n  else {\n    // 本地通知 todo\n    NSLog(@\"iOS 10 本地通知 前台收到消息\");\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_LOCAL_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  }\n  //需要执行这个方法，选择是否提醒用户，有 Badge、Sound、Alert 三种类型可以选择设置\n  completionHandler(UNNotificationPresentationOptionAlert);\n}\n\n//iOS 10 消息事件回调\n- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler: (void (^)(void))completionHandler {\n  NSDictionary * userInfo = response.notification.request.content.userInfo;\n  if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n    // Apns\n    NSLog(@\"iOS 10 APNS 消息事件回调\");\n    [JPUSHService handleRemoteNotification:userInfo];\n    // 保障应用被杀死状态下，用户点击推送消息，打开app后可以收到点击通知事件\n    [[RCTJPushEventQueue sharedInstance]._notificationQueue insertObject:userInfo atIndex:0];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_OPENED_EVENT object:userInfo];\n  }\n  else {\n    // 本地通知\n    NSLog(@\"iOS 10 本地通知 消息事件回调\");\n    // 保障应用被杀死状态下，用户点击推送消息，打开app后可以收到点击通知事件\n    [[RCTJPushEventQueue sharedInstance]._localNotificationQueue insertObject:userInfo atIndex:0];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_LOCAL_NOTIFICATION_OPENED_EVENT object:userInfo];\n  }\n  // 系统要求执行这个方法\n  completionHandler();\n}\n\n//自定义消息\n- (void)networkDidReceiveMessage:(NSNotification *)notification {\n  NSDictionary * userInfo = [notification userInfo];\n  [[NSNotificationCenter defaultCenter] postNotificationName:J_CUSTOM_NOTIFICATION_EVENT object:userInfo];\n}\n\n//************************************************JPush end************************************************\n```\n\n## 后记\n\n这里可以建议封装一个简单的hook, 来给我们注册用\n\n\n\n## 运行\n\n* 用`usb`将`iphone`跟`mac` 链接\n* 这里有时候会遇到一个问题, 就是`iphone`跟mac一直连上又断开， 解决方法`sudo killall -STOP -c usbd`\n* 最后运行 `npx react-native run-ios --device \"Bill@iPhone\"`\n","source":"_posts/expo 极光推送.md","raw":"---\ntitle: expo 极光推送\ndate: 2020-07-23 10:53:00\ntags: [react-native, expo]\n---\n\n## 这里记录一下在用expo 接入极光推送时的坑\n\n**貌似极光推送不能在ios模拟器中显示，推送的预估人数一直为0**\n\n**注意：因为expo不支持第三方sdk, 即不支持react-native link 这种方式，所以需要expo eject的方式使用Bare workflow**\n\n这里我使用的是[jpush-react-native](https://github.com/jpush/jpush-react-native) 极光官方维护的sdk\n\n1. `yarn add jpush-react-native`\n2. `yarn add jcore-react-native`\n3. `expo eject`\n4. 在`eject`的时候建立包名， 我这里ios/react 都一样`com.notice.test`\n5. eject 之后我们可以在项目得到原始的`react-native`包, 即包含了`ios` 以及`android` 两个包\n6. 这里官方文档写的不好，我们直接使用pod 自动引入的方式， issues 有人提到如果两种方式一起引用的话会报错\n7. `cd ios && pod deintegrate`\n8. `pod install`\n\n**ios需要进行证书设置**, 这里直接看[官方指南](https://docs.jiguang.cn/jpush/client/iOS/ios_cer_guide/)就可以了\n\n接下来就是修改 `AppDelegate.m`， 用xcode 打开ios目录下的`.xcworkspace`文件， 展开项目名`notice`即可看到`AppDelegate.m`, 以下可以参考[官方例子](https://github.com/jpush/jpush-react-native/blob/master/example/ios/example/AppDelegate.m)\n\n在头部加入\n```tsx\n#import <RCTJPushModule.h>\n#ifdef NSFoundationVersionNumber_iOS_9_x_Max\n#import <UserNotifications/UserNotifications.h>\n#endif\n```\n\n在`didFinishLaunchingWithOptions` 方法加入, 同时修改`appKey`\n\n```tsx\n // JPush初始化配置\n  [JPUSHService setupWithOption:launchOptions appKey:@\"57012733695b98e936ada5b0\"\n                        channel:@\"default\" apsForProduction:YES];\n  // APNS\n  JPUSHRegisterEntity * entity = [[JPUSHRegisterEntity alloc] init];\n  if (@available(iOS 12.0, *)) {\n    entity.types = JPAuthorizationOptionAlert|JPAuthorizationOptionBadge|JPAuthorizationOptionSound|JPAuthorizationOptionProvidesAppNotificationSettings;\n  }\n  [JPUSHService registerForRemoteNotificationConfig:entity delegate:self];\n  [launchOptions objectForKey: UIApplicationLaunchOptionsRemoteNotificationKey];\n  // 自定义消息\n  NSNotificationCenter *defaultCenter = [NSNotificationCenter defaultCenter];\n  [defaultCenter addObserver:self selector:@selector(networkDidReceiveMessage:) name:kJPFNetworkDidReceiveMessageNotification object:nil];\n  // 地理围栏\n  [JPUSHService registerLbsGeofenceDelegate:self withLaunchOptions:launchOptions];\n```\n\n在最后加入\n\n```tsx\n//************************************************JPush start************************************************\n\n//注册 APNS 成功并上报 DeviceToken\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  [JPUSHService registerDeviceToken:deviceToken];\n}\n\n//iOS 7 APNS\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:  (NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {\n  // iOS 10 以下 Required\n  NSLog(@\"iOS 7 APNS\");\n  [JPUSHService handleRemoteNotification:userInfo];\n  [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  completionHandler(UIBackgroundFetchResultNewData);\n}\n\n//iOS 10 前台收到消息\n- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center  willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(NSInteger))completionHandler {\n  NSDictionary * userInfo = notification.request.content.userInfo;\n  if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n    // Apns\n    NSLog(@\"iOS 10 APNS 前台收到消息\");\n    [JPUSHService handleRemoteNotification:userInfo];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  }\n  else {\n    // 本地通知 todo\n    NSLog(@\"iOS 10 本地通知 前台收到消息\");\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_LOCAL_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  }\n  //需要执行这个方法，选择是否提醒用户，有 Badge、Sound、Alert 三种类型可以选择设置\n  completionHandler(UNNotificationPresentationOptionAlert);\n}\n\n//iOS 10 消息事件回调\n- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler: (void (^)(void))completionHandler {\n  NSDictionary * userInfo = response.notification.request.content.userInfo;\n  if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n    // Apns\n    NSLog(@\"iOS 10 APNS 消息事件回调\");\n    [JPUSHService handleRemoteNotification:userInfo];\n    // 保障应用被杀死状态下，用户点击推送消息，打开app后可以收到点击通知事件\n    [[RCTJPushEventQueue sharedInstance]._notificationQueue insertObject:userInfo atIndex:0];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_OPENED_EVENT object:userInfo];\n  }\n  else {\n    // 本地通知\n    NSLog(@\"iOS 10 本地通知 消息事件回调\");\n    // 保障应用被杀死状态下，用户点击推送消息，打开app后可以收到点击通知事件\n    [[RCTJPushEventQueue sharedInstance]._localNotificationQueue insertObject:userInfo atIndex:0];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_LOCAL_NOTIFICATION_OPENED_EVENT object:userInfo];\n  }\n  // 系统要求执行这个方法\n  completionHandler();\n}\n\n//自定义消息\n- (void)networkDidReceiveMessage:(NSNotification *)notification {\n  NSDictionary * userInfo = [notification userInfo];\n  [[NSNotificationCenter defaultCenter] postNotificationName:J_CUSTOM_NOTIFICATION_EVENT object:userInfo];\n}\n\n//************************************************JPush end************************************************\n```\n\n## 后记\n\n这里可以建议封装一个简单的hook, 来给我们注册用\n\n\n\n## 运行\n\n* 用`usb`将`iphone`跟`mac` 链接\n* 这里有时候会遇到一个问题, 就是`iphone`跟mac一直连上又断开， 解决方法`sudo killall -STOP -c usbd`\n* 最后运行 `npx react-native run-ios --device \"Bill@iPhone\"`\n","slug":"expo 极光推送","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrf6000vmroja075bvmy","content":"<h2 id=\"这里记录一下在用expo-接入极光推送时的坑\"><a href=\"#这里记录一下在用expo-接入极光推送时的坑\" class=\"headerlink\" title=\"这里记录一下在用expo 接入极光推送时的坑\"></a>这里记录一下在用expo 接入极光推送时的坑</h2><p><strong>貌似极光推送不能在ios模拟器中显示，推送的预估人数一直为0</strong></p>\n<p><strong>注意：因为expo不支持第三方sdk, 即不支持react-native link 这种方式，所以需要expo eject的方式使用Bare workflow</strong></p>\n<p>这里我使用的是<a href=\"https://github.com/jpush/jpush-react-native\" target=\"_blank\" rel=\"noopener\">jpush-react-native</a> 极光官方维护的sdk</p>\n<ol>\n<li><code>yarn add jpush-react-native</code></li>\n<li><code>yarn add jcore-react-native</code></li>\n<li><code>expo eject</code></li>\n<li>在<code>eject</code>的时候建立包名， 我这里ios/react 都一样<code>com.notice.test</code></li>\n<li>eject 之后我们可以在项目得到原始的<code>react-native</code>包, 即包含了<code>ios</code> 以及<code>android</code> 两个包</li>\n<li>这里官方文档写的不好，我们直接使用pod 自动引入的方式， issues 有人提到如果两种方式一起引用的话会报错</li>\n<li><code>cd ios &amp;&amp; pod deintegrate</code></li>\n<li><code>pod install</code></li>\n</ol>\n<p><strong>ios需要进行证书设置</strong>, 这里直接看<a href=\"https://docs.jiguang.cn/jpush/client/iOS/ios_cer_guide/\" target=\"_blank\" rel=\"noopener\">官方指南</a>就可以了</p>\n<p>接下来就是修改 <code>AppDelegate.m</code>， 用xcode 打开ios目录下的<code>.xcworkspace</code>文件， 展开项目名<code>notice</code>即可看到<code>AppDelegate.m</code>, 以下可以参考<a href=\"https://github.com/jpush/jpush-react-native/blob/master/example/ios/example/AppDelegate.m\" target=\"_blank\" rel=\"noopener\">官方例子</a></p>\n<p>在头部加入</p>\n<pre class=\" language-tsx\"><code class=\"language-tsx\">#import <RCTJPushModule.h>\n#ifdef NSFoundationVersionNumber_iOS_9_x_Max\n#import <UserNotifications/UserNotifications.h>\n#endif</code></pre>\n<p>在<code>didFinishLaunchingWithOptions</code> 方法加入, 同时修改<code>appKey</code></p>\n<pre class=\" language-tsx\"><code class=\"language-tsx\"> // JPush初始化配置\n  [JPUSHService setupWithOption:launchOptions appKey:@\"57012733695b98e936ada5b0\"\n                        channel:@\"default\" apsForProduction:YES];\n  // APNS\n  JPUSHRegisterEntity * entity = [[JPUSHRegisterEntity alloc] init];\n  if (@available(iOS 12.0, *)) {\n    entity.types = JPAuthorizationOptionAlert|JPAuthorizationOptionBadge|JPAuthorizationOptionSound|JPAuthorizationOptionProvidesAppNotificationSettings;\n  }\n  [JPUSHService registerForRemoteNotificationConfig:entity delegate:self];\n  [launchOptions objectForKey: UIApplicationLaunchOptionsRemoteNotificationKey];\n  // 自定义消息\n  NSNotificationCenter *defaultCenter = [NSNotificationCenter defaultCenter];\n  [defaultCenter addObserver:self selector:@selector(networkDidReceiveMessage:) name:kJPFNetworkDidReceiveMessageNotification object:nil];\n  // 地理围栏\n  [JPUSHService registerLbsGeofenceDelegate:self withLaunchOptions:launchOptions];</code></pre>\n<p>在最后加入</p>\n<pre class=\" language-tsx\"><code class=\"language-tsx\">//************************************************JPush start************************************************\n\n//注册 APNS 成功并上报 DeviceToken\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  [JPUSHService registerDeviceToken:deviceToken];\n}\n\n//iOS 7 APNS\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:  (NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {\n  // iOS 10 以下 Required\n  NSLog(@\"iOS 7 APNS\");\n  [JPUSHService handleRemoteNotification:userInfo];\n  [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  completionHandler(UIBackgroundFetchResultNewData);\n}\n\n//iOS 10 前台收到消息\n- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center  willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(NSInteger))completionHandler {\n  NSDictionary * userInfo = notification.request.content.userInfo;\n  if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n    // Apns\n    NSLog(@\"iOS 10 APNS 前台收到消息\");\n    [JPUSHService handleRemoteNotification:userInfo];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  }\n  else {\n    // 本地通知 todo\n    NSLog(@\"iOS 10 本地通知 前台收到消息\");\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_LOCAL_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  }\n  //需要执行这个方法，选择是否提醒用户，有 Badge、Sound、Alert 三种类型可以选择设置\n  completionHandler(UNNotificationPresentationOptionAlert);\n}\n\n//iOS 10 消息事件回调\n- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler: (void (^)(void))completionHandler {\n  NSDictionary * userInfo = response.notification.request.content.userInfo;\n  if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n    // Apns\n    NSLog(@\"iOS 10 APNS 消息事件回调\");\n    [JPUSHService handleRemoteNotification:userInfo];\n    // 保障应用被杀死状态下，用户点击推送消息，打开app后可以收到点击通知事件\n    [[RCTJPushEventQueue sharedInstance]._notificationQueue insertObject:userInfo atIndex:0];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_OPENED_EVENT object:userInfo];\n  }\n  else {\n    // 本地通知\n    NSLog(@\"iOS 10 本地通知 消息事件回调\");\n    // 保障应用被杀死状态下，用户点击推送消息，打开app后可以收到点击通知事件\n    [[RCTJPushEventQueue sharedInstance]._localNotificationQueue insertObject:userInfo atIndex:0];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_LOCAL_NOTIFICATION_OPENED_EVENT object:userInfo];\n  }\n  // 系统要求执行这个方法\n  completionHandler();\n}\n\n//自定义消息\n- (void)networkDidReceiveMessage:(NSNotification *)notification {\n  NSDictionary * userInfo = [notification userInfo];\n  [[NSNotificationCenter defaultCenter] postNotificationName:J_CUSTOM_NOTIFICATION_EVENT object:userInfo];\n}\n\n//************************************************JPush end************************************************</code></pre>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这里可以建议封装一个简单的hook, 来给我们注册用</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ul>\n<li>用<code>usb</code>将<code>iphone</code>跟<code>mac</code> 链接</li>\n<li>这里有时候会遇到一个问题, 就是<code>iphone</code>跟mac一直连上又断开， 解决方法<code>sudo killall -STOP -c usbd</code></li>\n<li>最后运行 <code>npx react-native run-ios --device &quot;Bill@iPhone&quot;</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"这里记录一下在用expo-接入极光推送时的坑\"><a href=\"#这里记录一下在用expo-接入极光推送时的坑\" class=\"headerlink\" title=\"这里记录一下在用expo 接入极光推送时的坑\"></a>这里记录一下在用expo 接入极光推送时的坑</h2><p><strong>貌似极光推送不能在ios模拟器中显示，推送的预估人数一直为0</strong></p>\n<p><strong>注意：因为expo不支持第三方sdk, 即不支持react-native link 这种方式，所以需要expo eject的方式使用Bare workflow</strong></p>\n<p>这里我使用的是<a href=\"https://github.com/jpush/jpush-react-native\" target=\"_blank\" rel=\"noopener\">jpush-react-native</a> 极光官方维护的sdk</p>\n<ol>\n<li><code>yarn add jpush-react-native</code></li>\n<li><code>yarn add jcore-react-native</code></li>\n<li><code>expo eject</code></li>\n<li>在<code>eject</code>的时候建立包名， 我这里ios/react 都一样<code>com.notice.test</code></li>\n<li>eject 之后我们可以在项目得到原始的<code>react-native</code>包, 即包含了<code>ios</code> 以及<code>android</code> 两个包</li>\n<li>这里官方文档写的不好，我们直接使用pod 自动引入的方式， issues 有人提到如果两种方式一起引用的话会报错</li>\n<li><code>cd ios &amp;&amp; pod deintegrate</code></li>\n<li><code>pod install</code></li>\n</ol>\n<p><strong>ios需要进行证书设置</strong>, 这里直接看<a href=\"https://docs.jiguang.cn/jpush/client/iOS/ios_cer_guide/\" target=\"_blank\" rel=\"noopener\">官方指南</a>就可以了</p>\n<p>接下来就是修改 <code>AppDelegate.m</code>， 用xcode 打开ios目录下的<code>.xcworkspace</code>文件， 展开项目名<code>notice</code>即可看到<code>AppDelegate.m</code>, 以下可以参考<a href=\"https://github.com/jpush/jpush-react-native/blob/master/example/ios/example/AppDelegate.m\" target=\"_blank\" rel=\"noopener\">官方例子</a></p>\n<p>在头部加入</p>\n<pre><code class=\"tsx\">#import &lt;RCTJPushModule.h&gt;\n#ifdef NSFoundationVersionNumber_iOS_9_x_Max\n#import &lt;UserNotifications/UserNotifications.h&gt;\n#endif</code></pre>\n<p>在<code>didFinishLaunchingWithOptions</code> 方法加入, 同时修改<code>appKey</code></p>\n<pre><code class=\"tsx\"> // JPush初始化配置\n  [JPUSHService setupWithOption:launchOptions appKey:@&quot;57012733695b98e936ada5b0&quot;\n                        channel:@&quot;default&quot; apsForProduction:YES];\n  // APNS\n  JPUSHRegisterEntity * entity = [[JPUSHRegisterEntity alloc] init];\n  if (@available(iOS 12.0, *)) {\n    entity.types = JPAuthorizationOptionAlert|JPAuthorizationOptionBadge|JPAuthorizationOptionSound|JPAuthorizationOptionProvidesAppNotificationSettings;\n  }\n  [JPUSHService registerForRemoteNotificationConfig:entity delegate:self];\n  [launchOptions objectForKey: UIApplicationLaunchOptionsRemoteNotificationKey];\n  // 自定义消息\n  NSNotificationCenter *defaultCenter = [NSNotificationCenter defaultCenter];\n  [defaultCenter addObserver:self selector:@selector(networkDidReceiveMessage:) name:kJPFNetworkDidReceiveMessageNotification object:nil];\n  // 地理围栏\n  [JPUSHService registerLbsGeofenceDelegate:self withLaunchOptions:launchOptions];</code></pre>\n<p>在最后加入</p>\n<pre><code class=\"tsx\">//************************************************JPush start************************************************\n\n//注册 APNS 成功并上报 DeviceToken\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  [JPUSHService registerDeviceToken:deviceToken];\n}\n\n//iOS 7 APNS\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:  (NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {\n  // iOS 10 以下 Required\n  NSLog(@&quot;iOS 7 APNS&quot;);\n  [JPUSHService handleRemoteNotification:userInfo];\n  [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  completionHandler(UIBackgroundFetchResultNewData);\n}\n\n//iOS 10 前台收到消息\n- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center  willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(NSInteger))completionHandler {\n  NSDictionary * userInfo = notification.request.content.userInfo;\n  if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n    // Apns\n    NSLog(@&quot;iOS 10 APNS 前台收到消息&quot;);\n    [JPUSHService handleRemoteNotification:userInfo];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  }\n  else {\n    // 本地通知 todo\n    NSLog(@&quot;iOS 10 本地通知 前台收到消息&quot;);\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_LOCAL_NOTIFICATION_ARRIVED_EVENT object:userInfo];\n  }\n  //需要执行这个方法，选择是否提醒用户，有 Badge、Sound、Alert 三种类型可以选择设置\n  completionHandler(UNNotificationPresentationOptionAlert);\n}\n\n//iOS 10 消息事件回调\n- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler: (void (^)(void))completionHandler {\n  NSDictionary * userInfo = response.notification.request.content.userInfo;\n  if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n    // Apns\n    NSLog(@&quot;iOS 10 APNS 消息事件回调&quot;);\n    [JPUSHService handleRemoteNotification:userInfo];\n    // 保障应用被杀死状态下，用户点击推送消息，打开app后可以收到点击通知事件\n    [[RCTJPushEventQueue sharedInstance]._notificationQueue insertObject:userInfo atIndex:0];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_APNS_NOTIFICATION_OPENED_EVENT object:userInfo];\n  }\n  else {\n    // 本地通知\n    NSLog(@&quot;iOS 10 本地通知 消息事件回调&quot;);\n    // 保障应用被杀死状态下，用户点击推送消息，打开app后可以收到点击通知事件\n    [[RCTJPushEventQueue sharedInstance]._localNotificationQueue insertObject:userInfo atIndex:0];\n    [[NSNotificationCenter defaultCenter] postNotificationName:J_LOCAL_NOTIFICATION_OPENED_EVENT object:userInfo];\n  }\n  // 系统要求执行这个方法\n  completionHandler();\n}\n\n//自定义消息\n- (void)networkDidReceiveMessage:(NSNotification *)notification {\n  NSDictionary * userInfo = [notification userInfo];\n  [[NSNotificationCenter defaultCenter] postNotificationName:J_CUSTOM_NOTIFICATION_EVENT object:userInfo];\n}\n\n//************************************************JPush end************************************************</code></pre>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这里可以建议封装一个简单的hook, 来给我们注册用</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ul>\n<li>用<code>usb</code>将<code>iphone</code>跟<code>mac</code> 链接</li>\n<li>这里有时候会遇到一个问题, 就是<code>iphone</code>跟mac一直连上又断开， 解决方法<code>sudo killall -STOP -c usbd</code></li>\n<li>最后运行 <code>npx react-native run-ios --device &quot;Bill@iPhone&quot;</code></li>\n</ul>\n"},{"date":"2021-04-08T11:33:51.000Z","title":"git 操作","_content":"\n## 三大工作区\n\n* **工作区**：工作区可以理解成两个分区，一个是**已控制的区域**，另一个是`新文件或文件变动区`\n* **暂存区**：可以理解成 执行了`git add` 之后的操作\n* **版本库**：可以理解成执行了`git commit` 之后的操作\n\n记录一下 git 的常用操作\n\n## 简单操作\n\n* `git add .`\n* `git commit -m \"\"`\n* `git pull`\n* `git push`\n\n以上是常用操作，就不多解释了\n\n## reset 回滚\n\ngit 回滚可以从3大工作区来回切换\n\n* `git reset --soft 版本号` 指的是从`版本库`回到`暂存区`\n* `git reset HEAD .` 表示从`暂存区`回到 `工作区(新文件或文件变动区)`\n\n* `git reset -mix 版本号` 表示从`版本号` 回到`工作区(新文件或文件变动区)`\n\n* `git reset --hard 版本号` 表示从`版本号`回到`工作区（以控制的区域）`\n\n![具体图](./git/git_reset.jpg)\n\n\n## 变基(rebase)\n\n简单说就是可以简化提交记录，\n\n使用场景\n\n* 合并提交记录\n\n\n\n","source":"_posts/git.md","raw":"---\ndate: 2021-04-08 11:33:51\ntitle: git 操作\ntags: [git]\ncategory: [git]\n---\n\n## 三大工作区\n\n* **工作区**：工作区可以理解成两个分区，一个是**已控制的区域**，另一个是`新文件或文件变动区`\n* **暂存区**：可以理解成 执行了`git add` 之后的操作\n* **版本库**：可以理解成执行了`git commit` 之后的操作\n\n记录一下 git 的常用操作\n\n## 简单操作\n\n* `git add .`\n* `git commit -m \"\"`\n* `git pull`\n* `git push`\n\n以上是常用操作，就不多解释了\n\n## reset 回滚\n\ngit 回滚可以从3大工作区来回切换\n\n* `git reset --soft 版本号` 指的是从`版本库`回到`暂存区`\n* `git reset HEAD .` 表示从`暂存区`回到 `工作区(新文件或文件变动区)`\n\n* `git reset -mix 版本号` 表示从`版本号` 回到`工作区(新文件或文件变动区)`\n\n* `git reset --hard 版本号` 表示从`版本号`回到`工作区（以控制的区域）`\n\n![具体图](./git/git_reset.jpg)\n\n\n## 变基(rebase)\n\n简单说就是可以简化提交记录，\n\n使用场景\n\n* 合并提交记录\n\n\n\n","slug":"git","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrf7000ymrojcnacgtx2","content":"<h2 id=\"三大工作区\"><a href=\"#三大工作区\" class=\"headerlink\" title=\"三大工作区\"></a>三大工作区</h2><ul>\n<li><strong>工作区</strong>：工作区可以理解成两个分区，一个是<strong>已控制的区域</strong>，另一个是<code>新文件或文件变动区</code></li>\n<li><strong>暂存区</strong>：可以理解成 执行了<code>git add</code> 之后的操作</li>\n<li><strong>版本库</strong>：可以理解成执行了<code>git commit</code> 之后的操作</li>\n</ul>\n<p>记录一下 git 的常用操作</p>\n<h2 id=\"简单操作\"><a href=\"#简单操作\" class=\"headerlink\" title=\"简单操作\"></a>简单操作</h2><ul>\n<li><code>git add .</code></li>\n<li><code>git commit -m &quot;&quot;</code></li>\n<li><code>git pull</code></li>\n<li><code>git push</code></li>\n</ul>\n<p>以上是常用操作，就不多解释了</p>\n<h2 id=\"reset-回滚\"><a href=\"#reset-回滚\" class=\"headerlink\" title=\"reset 回滚\"></a>reset 回滚</h2><p>git 回滚可以从3大工作区来回切换</p>\n<ul>\n<li><p><code>git reset --soft 版本号</code> 指的是从<code>版本库</code>回到<code>暂存区</code></p>\n</li>\n<li><p><code>git reset HEAD .</code> 表示从<code>暂存区</code>回到 <code>工作区(新文件或文件变动区)</code></p>\n</li>\n<li><p><code>git reset -mix 版本号</code> 表示从<code>版本号</code> 回到<code>工作区(新文件或文件变动区)</code></p>\n</li>\n<li><p><code>git reset --hard 版本号</code> 表示从<code>版本号</code>回到<code>工作区（以控制的区域）</code></p>\n</li>\n</ul>\n<p><img src=\"/2021/04/08/git/git_reset.jpg\" alt=\"具体图\"></p>\n<h2 id=\"变基-rebase\"><a href=\"#变基-rebase\" class=\"headerlink\" title=\"变基(rebase)\"></a>变基(rebase)</h2><p>简单说就是可以简化提交记录，</p>\n<p>使用场景</p>\n<ul>\n<li>合并提交记录</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"三大工作区\"><a href=\"#三大工作区\" class=\"headerlink\" title=\"三大工作区\"></a>三大工作区</h2><ul>\n<li><strong>工作区</strong>：工作区可以理解成两个分区，一个是<strong>已控制的区域</strong>，另一个是<code>新文件或文件变动区</code></li>\n<li><strong>暂存区</strong>：可以理解成 执行了<code>git add</code> 之后的操作</li>\n<li><strong>版本库</strong>：可以理解成执行了<code>git commit</code> 之后的操作</li>\n</ul>\n<p>记录一下 git 的常用操作</p>\n<h2 id=\"简单操作\"><a href=\"#简单操作\" class=\"headerlink\" title=\"简单操作\"></a>简单操作</h2><ul>\n<li><code>git add .</code></li>\n<li><code>git commit -m &quot;&quot;</code></li>\n<li><code>git pull</code></li>\n<li><code>git push</code></li>\n</ul>\n<p>以上是常用操作，就不多解释了</p>\n<h2 id=\"reset-回滚\"><a href=\"#reset-回滚\" class=\"headerlink\" title=\"reset 回滚\"></a>reset 回滚</h2><p>git 回滚可以从3大工作区来回切换</p>\n<ul>\n<li><p><code>git reset --soft 版本号</code> 指的是从<code>版本库</code>回到<code>暂存区</code></p>\n</li>\n<li><p><code>git reset HEAD .</code> 表示从<code>暂存区</code>回到 <code>工作区(新文件或文件变动区)</code></p>\n</li>\n<li><p><code>git reset -mix 版本号</code> 表示从<code>版本号</code> 回到<code>工作区(新文件或文件变动区)</code></p>\n</li>\n<li><p><code>git reset --hard 版本号</code> 表示从<code>版本号</code>回到<code>工作区（以控制的区域）</code></p>\n</li>\n</ul>\n<p><img src=\"/2021/04/08/git/git_reset.jpg\" alt=\"具体图\"></p>\n<h2 id=\"变基-rebase\"><a href=\"#变基-rebase\" class=\"headerlink\" title=\"变基(rebase)\"></a>变基(rebase)</h2><p>简单说就是可以简化提交记录，</p>\n<p>使用场景</p>\n<ul>\n<li>合并提交记录</li>\n</ul>\n"},{"date":"2020-04-08T11:33:51.000Z","title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ndate: 2020-04-08 11:33:51\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrf80010mroj668u7up7","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Hexo自定义案例","date":"2020-07-09T14:54:57.000Z","_content":"\n我使用的主题是[chic](https://github.com/Siricee/hexo-theme-Chic)\n\n\n## 修改主题markdown的高亮代码\n\n我当前使用的主题是不支持`jsx`的，所以对于`react`代码不能友好支持。所以使用`hexo-prism-plugin`修改了高亮部分\n\n* `坑:` 我安装了 `hexo-prism-plugin` 之后发现还是无法高亮 `jsx` 代码， 后来发现还要要安装 `hexo-inject` 模块\n\n- `npm install hexo-prism-plugin hexo-inject --save`\n- 修改`_config.yml`\n\n```yml\nhighlight:\n  enable: false  # 关闭默认的highlight\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'base16-ateliersulphurpool.light' # 主题\n  line_number: false    # default false\n  # custom_css: 'path/to/your/custom.css'  \n```\n\n## 为主题图片添加大图\n\n主题无法对图片进行放大，图片最大也只是 `780 * 562`, 体验上不是很好，这里我使用了fancybox 进行修改\n\n下载fancybox的文件\n\n* 将 `jquery.fancybox.min.js`, `jquery.min.js` 放入 `theme/chic/source/js` 目录下\n* 将 `jquery.fancybox.min.css` 放入 `theme/chic/source/css/_lib/`目录下\n* 修改 `chic/_config.yml`, 添加代码\n\n  ```yml\n  fancybox: \n    enable: true\n    jquery: /js/jquery.min.js\n    fancyjs: /js/jquery.fancybox.min.js\n  ```\n* 修改 `Chic/layout/_partial/head.ejs` 添加以下代码\n\n```js\n<% if(theme.fancybox.enable!==null&&theme.fancybox.enable===true){ %>\n    <script type=\"text/javascript\"  src=\"<%- url_for(theme.fancybox.jquery) %>\"></script>\n    <script type=\"text/javascript\"  src=\"<%- url_for(theme.fancybox.fancyjs) %>\"></script>\n<% } %>\n```\n\n* 在 `Chic/source/css/style.styl` 添加,\n\n```css\n@import \"_lib/jquery.fancybox.min.css\"\n```\n这里添加css 不知道为什么不可以直接 跟上面添加js 一样，我找了很久都没找到解决方案，只能够在style 下强行添加css\n\n* 最后在 `source/js/script.js` 的document.ready()的回调回调函数添加 以下代码就可以\n\n```js\n$(\"a.group\").fancybox({\n    'transitionIn'\t:\t'elastic',\n    'transitionOut'\t:\t'elastic',\n    'speedIn'\t\t:\t600, \n    'speedOut'\t\t:\t200, \n    'overlayShow'\t:\tfalse\n});\n```\n\n### 使用\n\n这里强行使用`<a class=\"group\">`链接 包裹这img 表示使用fancybox\n```html\n<a class=\"group\" rel=\"group1\" href=\"图片url\">\n    <img src=\"图片url\" />    \n</a>\n```\n\n\n## 添加力扣页面\n\n> 我这里是想自定义添加一个新的页面，主要放自己练习算法时的解题思路，叫力扣，但又不想跟原来发表的文章混在一起\n\n\n* 添加文件夹 `source/algorithm`, 只有一个文件`index.md`\n\n```md\n# index.md\n---\ntitle: 力扣\ndate: 2020-04-08 16:09:43\nlayout: algorithm\n---\n```\n\n* 在`Chic/layout` 添加 `algorithm.ejs`\n\n```js\n<%- partial('_page/algorithm', {pagination: config.archive, index: true}) %>\n```\n\n* 在`Chic/layout/_page` 添加 `algorithm.ejs`\n\n```js\n// Chic/layout/_page/algorithm.ejs\n<div class=\"post-wrap algorithm-page archive\">\n    <div class=\"tags-algorithm\">\n        // 这里就是算法 tag, 我只筛选出 tag包含 algorithm- 的那些\n        <%site.tags.forEach(item=>{%>\n            <% if(item.name.includes(\"algorithm-\")) { %>\n                <a class=\"tags-item\" href=\"<%-url_for(item.path)%>\"><%- item.name.split(\"algorithm-\")[1] %><span class=\"nums\"><%-item.length%></span></a>\n            <% } %>\n        <%})%>\n    </div>\n    <div class=\"archive\">\n        // 每页条数\n        <% var perPage = config.algorithm_generator.per_page %>\n        // 这里我直接获取当前页面是第几页，没有page的话就是第一页\n        <% var currentPage = url.match(/page\\/(.*)\\//) ? url.match(/page\\/(.*)\\//)[1] : 1 %>\n        <% var last_year = ''; %>\n        // 然后我过滤掉 只是type == 'algorithm'的那些文章， 这个type, 在我们新键文章的时候跟title，tag那些写在一起\n        <% var posts = site.posts.filter((item) => item.type && item.type == 'algorithm') %>\n        // 做一个排序, 按最新的排\n        <% posts.data = posts.data.sort((a, b) => b.date - a.date) %>\n        // 选择当前页面的文章\n        <% posts.slice((currentPage - 1) * perPage, currentPage * perPage ).each(function (post) { %>\n                <% var cur_year = post.date.year(); %>\n                <% if(last_year !== cur_year){ %>\n                    <h3><%- cur_year %></h3>\n                <% last_year = cur_year; } %>\n                <article class=\"archive-item\">\n                    <a class=\"archive-item-link\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n                    <span class=\"archive-item-date\"><%- date(post.date, theme.date_format) %></span>\n                </article>\n        <% }) %>\n        // 分页\n        <% if(Math.ceil(posts.length /  perPage) > 1) { %>\n        <nav class=\"pagination\">\n            <%- paginator({\n                prev_next: false,\n                end_size: 1,\n                mid_size: 2,\n                total: Math.ceil(posts.length /  perPage)\n            }) %>\n        </nav>\n        <% } %>\n    </div>\n</div>\n```\n这里有个坑，我们点击 `/algorithm/page/2` 的时候会报当前页面存在，我通过 `hexo-generator-category` 找到类似的解决方案，\n我通过文档的[生成器](https://hexo.io/zh-cn/api/generator.html#%E5%BD%92%E6%A1%A3%E9%A1%B5%E9%9D%A2)写了一个类似的解决方案\n\n\n* 在 `Chic/script` 下添加 `algorithm.js`, 这里为了搞一个分页出来而已\n\n```js\nvar pagination = require('hexo-pagination'); // 要安装模块啊\nhexo.extend.generator.register('algorithm', function(locals){\n    // 这里不能对locals.post 进行更改，一旦发生更改，网站变量 site.posts 的内容也会跟着更改，这里不知道是为什么，我纠结了很久\n    let allPost = locals.posts; \n   \n    return pagination('/algorithm', allPost, {\n        perPage: this.config.algorithm_generator.per_page, // 在 _config.yml 添加 algorithm_generator: 配置 类似 category_generator\n        layout: ['algorithm', 'archive', 'index'], // 如果algorith这个layout,没有就会用 archive， 如此类推\n        format: 'page' + '/%d/',\n        data: {\n            __index: true\n        }\n    });\n\n});\n\n```\n\n* 最后只要修改一下 `Chic/layout/_page/archive.ejs` 文件跟上面类似第三部就行了, 这里说一下 config ,可以从最外层 `_config.yml`进行配置\n\n## 文章搜索\n\n\n* 先执行 `npm install hexo-generator-search -s`, 这个插件是为了生成`search.json`, 他包含的是文章的基本信息\n* 然后就是写 html 和 css了，我这里使用的是模态框，所以可以根据form 表单提交后唤出modal,然后进行ajax对search.json进行查询.\n* 我们根据关键字对文章content进行匹配，匹配有的加入数组，然后对匹配成功的那些数据进行字符截取，另外对关键字做highlight操作\n\n\n### 配置 _config.yml\n这里需要配置一下 root 下的 `_config.yml`, 添加以下代码\n\n```yml\n# search\nsearch:\n  enable: true\n  path: search.json\n  field: post\n  content: true\n```\n\n\n### 添加modal\n\n我这里直接写在了`Chic/layout/layout.ejs`, 我们只需要控制这个`modal`的`display`属性就好了\n\n#### html\n\n```html\n<!-- Chic/layout.ejs -->\n <div id=\"u-search\">\n        <div class=\"modal\">\n            <div class=\"modal-header\">\n                <div class=\"container\">\n                    <form id=\"u-search-modal-form\" class=\"u-search-modal-form\">\n                        <button type=\"submit\" class=\"form-submit-btn\">\n                            <img src=\"<%- url_for(theme.searchImg) %>\" class=\"search-btn-img\" />\n                        </button>\n                        <input placeholder=\"搜索文章。。。\" class=\"form-input\" id=\"modal-form-input\">\n                    </form>\n                    <a class=\"modal-close\">x</a>\n                </div>\n                <div class=\"search-loading\">\n                    <div class=\"search-loading-bar\"></div>\n                </div>\n            </div>\n            <div class=\"modal-body\">\n                <!-- ul 格式如下 -->\n                <!-- <ul class=\"modal-results\">\n                    <li class=\"result-item\">\n                        <a class=\"result-item-detail\">\n                            <span class=\"title\">页面配置</span>\n                            <span class=\"content\">\n                                content\n                            </span>\n                        </a>\n                    </li>\n                </ul> -->\n            </div>\n        </div>\n        <div class=\"modal-overlay\"></div>\n    </div>\n```\n\n#### modal 样式\n\n我把他放在了`Chic/source/css/_lib/search.css`\n\n这个要在 `Chic\\source\\css\\style.styl` 引用,添加代码 \n\n```css\n@import \"_lib/search.css\"\n```\n\n<details>\n<summary><mark>点击查看样式，这里是search.css 代码</mark></summary>\n\n```css\n    #u-search {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        padding: 60px 20px;\n        z-index: 1001;\n    }\n\n\n    #u-search .modal {\n        position: fixed;\n        height: 80%;\n        width: 100%;\n        max-width: 640px;\n        left: 50%;\n        top: 0;\n        margin: 64px 0px 0px -320px;\n        background: #fff;\n        z-index: 3;\n        border-radius: 4px;\n        overflow: hidden;\n    }\n\n    #u-search .modal-header {\n        position: relative;\n        width: 100%;\n        height: 64px;\n        z-index: 3;\n        border-top-left-radius: 4px;\n        border-top-right-radius: 4px;\n        font-size: 16px;\n        box-shadow: 0 1px 2px 0px rgba(0,0,0,0.1);\n        background: #fff;\n        transition: all 0.28s ease;\n        -moz-transition: all 0.28s ease;\n        -webkit-transition: all 0.28s ease;\n        -o-transition: all 0.28s ease;\n    }\n\n    #u-search .modal-header .container{\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        padding: 0px;\n    }\n\n    #u-search .modal-header .container .u-search-modal-form {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        flex: 1;\n    }\n\n    #u-search .u-search-modal-form .form-submit-btn {\n        width: 50px;\n        height: 64px;\n        background: none;\n        border: none;\n        outline: none;\n        margin:  0 5px 0 5px ;\n    }\n\n    #u-search .u-search-modal-form .form-submit-btn img {\n        width: 33px;\n        height: 33px;\n    }\n\n    #u-search .modal-header .container .u-search-modal-form .form-input {\n        flex: 1;\n        margin-right: 15px;\n        border: none;\n        padding: 10px 10px;\n        outline: none;\n    }\n\n\n    #u-search .modal-header .modal-close {\n        display: block;\n        width: 55px;\n        height: 64px;\n        top: 0;\n        right: 0;\n        color: #2196f3;\n        cursor: pointer;\n        text-align: center;\n        line-height: 64px;\n        vertical-align: middle;\n        transition: all 0.28s ease;\n        -moz-transition: all 0.28s ease;\n        -webkit-transition: all 0.28s ease;\n        -o-transition: all 0.28s ease;\n        z-index: 2;\n        font-size: 22px;\n    }\n\n    #u-search .modal-header .search-loading {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 2px;\n        background: transparent;\n        z-index: 1;\n        \n    }\n\n    #u-search .modal-header .search-loading .search-loading-bar {\n        transition: all 0.28s ease;\n        -moz-transition: all 0.28s ease;\n        -webkit-transition: all 0.28s ease;\n        -o-transition: all 0.28s ease;\n        position: relative;\n        display: none;\n        width: 0%;\n        height: 100%;\n        background: #2196f3;\n    \n    }\n\n    #u-search .modal .modal-body {\n        padding: 15px;\n        height: calc(100% - 85px);\n        overflow: auto;\n\n    }\n\n    #u-search .modal .modal-body::-webkit-scrollbar{\n        width: 5px;\n        height: 5px;\n        /**/\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-track{\n        background: rgb(239, 239, 239);\n        border-radius:2px;\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-thumb{\n        background: #bfbfbf;\n        border-radius:10px;\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-thumb:hover{\n        background: #333;\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-corner{\n        background: #179a16;\n    }\n\n    #u-search .modal .modal-body .modal-results {\n        list-style: none;\n        padding-left: 0;\n        margin: 0px;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item {\n        padding: 15px;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item:hover {\n        background: #e8f4fd;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item .result-item-detail {\n        display: flex;\n        flex-direction: column;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item .result-item-detail .title {\n        color: #6e6e6e;\n        font-weight: 700;\n        font-size: 18px;\n        margin-bottom: 10px;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item .result-item-detail .content {\n        display: block;\n        white-space: inherit;\n        word-break: break-all;\n        text-overflow: ellipsis;\n        font-size: 14px;\n        color: rgba(85,85,85,0.65);\n        letter-spacing: 1px;\n        user-select: none;\n    }\n\n    #u-search .search-keyword {\n        color: #0c7cd5;\n        text-decoration: underline;\n        font-weight: bold;\n        font-style:normal\n    }\n\n    #u-search .modal-body .no-result {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n    }\n\n    #u-search .modal-overlay {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0,0,0,0.7);\n        z-index: 1;\n    }\n\n    @media screen and (max-width: 680px) {\n        #u-search {\n            padding: 0px;\n            display: none;\n        }\n\n        #u-search .modal {\n            box-shadow: none;\n            max-width: none;\n            top: 0;\n            left: 0;\n            margin: 0;\n            height: 100%;\n            border-radius: 0;\n        }\n        #u-search .modal-header {\n            border-radius: 0;\n            padding: 0px;\n        }\n    } \n\n    .modal-active {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n    }\n\n    /* 以下是搜索框 */\n    .search {\n        margin-right: 6px;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n    }\n        \n    .search .form-search {\n        padding: 10px 8px;\n    }\n            \n    .search .form-search .input {\n        display: block;\n        line-height: 1.3;\n        color: #555;\n        background: #e8e8e8;\n        padding: 5px 8px;\n        box-shadow: none;\n        box-sizing: border-box;\n        font-size: 1rem;\n        border-radius: 8px;\n        border: none;\n        outline: none;\n    }        \n            \n    .search .search-btn {\n        width: 22px;\n        height: 22px;\n        line-height: 22px;\n        margin-right: 5px;\n    }\n\n    .search .search-btn .search-btn-img {\n        height: 100%;\n        width: 100%;\n    }\n                \n\n    @media screen and (max-width: 479px) {\n\n        .navbar-mobile-right {\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n        }\n            \n        .search .search-btn {\n            cursor: pointer;\n        }\n        \n        .search .form-search {\n            display: none;\n        }\n\n        .mobile-search {\n            position: absolute;\n            top: 0px;\n            left: 0px;\n            right: 50px;\n            padding-left: 15px;\n            background: #fff;\n            height: 80px;\n            display: flex;\n            flex-direction: row;\n            margin-right: 15px;\n        }\n\n        .mobile-search .form-search {\n            display: block; \n            flex: 1;\n        }\n\n        .mobile-search .input {\n            width: 100%;\n        } \n    }\n```\n   \n</details>\n\n### 增加搜索框\n\n我把该文件放在了 `Chic/layout/_partial/search.ejs`\n\n```jsx\n<% if(config.search && config.search.enable ) { %>\n    <div class=\"search \">\n        <div class=\"search-btn\" onClick=\"searchToggle()\">\n            <img src=\"<%- url_for(theme.searchImg) %>\" class=\"search-btn-img\" />\n        </div>\n        <form class=\"form-search\">\n            <input class=\"input\" placeholder=\"搜索文章\" autocomplete=\"off\" id=\"<%= name %>-search-input\"/>\n        </form>\n    </div>\n<% } %>\n\n```\n\n我们在 `Chic\\layout\\_partial\\header.ejs` 添加这个搜索框, 要在**pc的menu, 和mobile的menu**添加,\n\n```js\n<% var defaultName = 'pc' %>\n<%- partial('_partial/search', { name: defaultName }) %>\n\n// 这里是 mobile 的menu\n<div class=\"navbar-mobile-right\">\n    <% var type = 'mobile' %>\n    <%- partial('_partial/search', { name: type }) %>\n    <div class=\"menu-toggle\" onclick=\"mobileBtn()\">&#9776; 目录</div>\n</div>\n```\n\n### 添加搜索框的js, 搜索代码\n\n创建搜索代码\n\n<details>\n<summary><mark>点击查看代码</mark></summary>\n\n```jsx\n<script>\n    function searchToggle() {\n        const width = $(document.body).width()\n        if(width > 479) {\n            return;\n        }\n        const search = $('.search');\n        const searchForm = $('.form-search')\n\n        if(!search.hasClass(\"mobile-search\")) {\n            search.addClass(\"mobile-search\");\n        } else {\n            search.removeClass(\"mobile-search\");\n        } \n    }\n\n    function search(searchInputEl, formEl, flag) {\n        const path = \"<%= config.root %>\" + \"<%= config.search.path %>\"; // 可以在public 下查看这个search.json\n        $(formEl).submit(function(e){\n            e.preventDefault();\n            let target = null\n            if(searchInputEl == null) {\n                const screenWidth = $(document.body).width();\n                target = screenWidth > 479 ? $('#pc-search-input') : $('#mobile-search-input');\n                console.log(target);\n            } else {\n                target = $(searchInputEl)\n            }\n\n            if(!flag && target.val() === '') {\n                return ;\n            }\n\n            $(\"#u-search\").fadeIn(500, function() {\n                $(\"body > .wrapper\").addClass(\"modal-active\");\n\n                $.ajax({\n                    url: path,\n                    dataType: \"json\",\n                    beforeSend: function (xhr) {\n                        $input = target.val();\n                        $(\".form-input\").val($input);\n                        const loadingBar = $('.search-loading-bar') \n                        loadingBar.css({\n                            width:'100%',\n                            display: 'block'\n                        });\n                    },\n                    success: function( datas ) {\n                        // console.log(datas);\n                        const $resultPanel = $(\".modal-body\")[0];\n                        let str = `<ul class=\"modal-results\">`;\n                        var keywords = $(\".form-input\").val().trim().toLowerCase().split(/[\\s\\-]+/);\n                        $resultPanel.innerHTML = \"\";\n                        let hasResult = false\n                        let text = `<div class=\"no-result\">找不到与关键词相关的内容....</div>`;\n\n                        if ($(\".form-input\").val().trim().length <= 0) {\n                            // 没有结果\n                            $resultPanel.innerHTML = text;\n                            return;\n                        }\n                        datas.forEach(function (data) {\n                            var isMatch = true;\n                            if (!data.title || data.title.trim() === '') {\n                                data.title = \"Untitled\";\n                            }\n                            var data_title = data.title.trim().toLowerCase();\n                            var data_content = data.content.trim().replace(/<[^>]+>/g, \"\").toLowerCase();\n                            var data_url = data.url;\n                            var index_title = -1;\n                            var index_content = -1;\n                            var first_occur = -1;\n                            // only match artiles with not empty contents\n                            if (data_content !== '') {\n                                keywords.forEach(function (keyword, i) {\n                                    index_title = data_title.indexOf(keyword);\n                                    index_content = data_content.indexOf(keyword);\n\n                                    if (index_title < 0 && index_content < 0) {\n                                        isMatch = false;\n                                    } else {\n                                        hasResult = true\n                                        if (index_content < 0) {\n                                            index_content = 0;\n                                        }\n                                        if (i == 0) {\n                                            first_occur = index_content;\n                                        }\n                                    }\n                                });\n                            } else {\n                                isMatch = false;\n                            }\n                            // show search results\n                            if (isMatch) {\n                                str += `<li class='result-item'><a href='${data_url}' class='result-item-detail'> <span class=\"title\">${data_title}</span>`;\n                                var content = data.content.trim().replace(/<[^>]+>/g, \"\");\n                                if (first_occur >= 0) {\n                                    // cut out 200 characters\n                                    var start = first_occur - 40;\n                                    var end = first_occur + 160;\n\n                                    if (start < 0) {\n                                        start = 0;\n                                    }\n\n                                    if (start == 0) {\n                                        end = 200;\n                                    }\n\n                                    if (end > content.length) {\n                                        end = content.length;\n                                    }\n\n                                    var match_content = content.substring(start, end);\n\n                                    // highlight all keywords\n                                    keywords.forEach(function (keyword) {\n                                        var regS = new RegExp(keyword, \"gi\");\n                                        match_content = match_content.replace(regS, `<em class=\"search-keyword\">${keyword}</em>`);\n                                    });\n\n                                    str += `<span class=\"content\"> ${match_content} ...</span></a>`;\n                                }\n                                str += \"</li>\";\n                            }\n                        });\n                        str += \"</ul>\";\n                        if(hasResult) {\n                            $resultPanel.innerHTML = str;\n                        } else {\n                            $resultPanel.innerHTML = text;\n                        }\n\n                    },\n                    complete: function() {\n                        setTimeout(() => {\n                                const loadingBar = $('.search-loading-bar') \n                                loadingBar.css({\n                                    width:'0%',\n                                    display: 'none'\n                                });\n                        }, 300)\n                    }\n                });\n            })\n        \n        });\n    }\n    \n    $(document).ready(function() {\n        $('.modal-close').click(function () { \n            $(\"#u-search\").fadeOut();\n            $(\"body > .wrapper\").removeClass(\"modal-active\")\n        })\n\n        $('.modal-overlay').click(function() {\n            $(\"#u-search\").fadeOut();\n            $(\"body > .wrapper\").removeClass(\"modal-active\")\n        })\n        search(null, \".form-search\", false)\n        search(\"#u-search-modal-form .form-input\", \".u-search-modal-form\", true)\n    })\n</script>\n```\n</details>\n\n\n在 `themes\\Chic\\layout\\_partial\\head.ejs`中添加上面的以下代码，表示启动js\n\n```js\n<%# search %>\n\n<% if(config.search && config.search.enable ) { %>\n    <%- partial('_plugins/search.ejs') %>\n<% } %>\n\n```\n以上就是创建搜索框的全过程了，当然了我上面写的有点乱，可以自行整理一下\n\n\n\n\n","source":"_posts/hexo自定义.md","raw":"---\ntitle: Hexo自定义案例\ndate: 2020-07-09 14:54:57\ntags: [hexo]\ncategory: [hexo]\n---\n\n我使用的主题是[chic](https://github.com/Siricee/hexo-theme-Chic)\n\n\n## 修改主题markdown的高亮代码\n\n我当前使用的主题是不支持`jsx`的，所以对于`react`代码不能友好支持。所以使用`hexo-prism-plugin`修改了高亮部分\n\n* `坑:` 我安装了 `hexo-prism-plugin` 之后发现还是无法高亮 `jsx` 代码， 后来发现还要要安装 `hexo-inject` 模块\n\n- `npm install hexo-prism-plugin hexo-inject --save`\n- 修改`_config.yml`\n\n```yml\nhighlight:\n  enable: false  # 关闭默认的highlight\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'base16-ateliersulphurpool.light' # 主题\n  line_number: false    # default false\n  # custom_css: 'path/to/your/custom.css'  \n```\n\n## 为主题图片添加大图\n\n主题无法对图片进行放大，图片最大也只是 `780 * 562`, 体验上不是很好，这里我使用了fancybox 进行修改\n\n下载fancybox的文件\n\n* 将 `jquery.fancybox.min.js`, `jquery.min.js` 放入 `theme/chic/source/js` 目录下\n* 将 `jquery.fancybox.min.css` 放入 `theme/chic/source/css/_lib/`目录下\n* 修改 `chic/_config.yml`, 添加代码\n\n  ```yml\n  fancybox: \n    enable: true\n    jquery: /js/jquery.min.js\n    fancyjs: /js/jquery.fancybox.min.js\n  ```\n* 修改 `Chic/layout/_partial/head.ejs` 添加以下代码\n\n```js\n<% if(theme.fancybox.enable!==null&&theme.fancybox.enable===true){ %>\n    <script type=\"text/javascript\"  src=\"<%- url_for(theme.fancybox.jquery) %>\"></script>\n    <script type=\"text/javascript\"  src=\"<%- url_for(theme.fancybox.fancyjs) %>\"></script>\n<% } %>\n```\n\n* 在 `Chic/source/css/style.styl` 添加,\n\n```css\n@import \"_lib/jquery.fancybox.min.css\"\n```\n这里添加css 不知道为什么不可以直接 跟上面添加js 一样，我找了很久都没找到解决方案，只能够在style 下强行添加css\n\n* 最后在 `source/js/script.js` 的document.ready()的回调回调函数添加 以下代码就可以\n\n```js\n$(\"a.group\").fancybox({\n    'transitionIn'\t:\t'elastic',\n    'transitionOut'\t:\t'elastic',\n    'speedIn'\t\t:\t600, \n    'speedOut'\t\t:\t200, \n    'overlayShow'\t:\tfalse\n});\n```\n\n### 使用\n\n这里强行使用`<a class=\"group\">`链接 包裹这img 表示使用fancybox\n```html\n<a class=\"group\" rel=\"group1\" href=\"图片url\">\n    <img src=\"图片url\" />    \n</a>\n```\n\n\n## 添加力扣页面\n\n> 我这里是想自定义添加一个新的页面，主要放自己练习算法时的解题思路，叫力扣，但又不想跟原来发表的文章混在一起\n\n\n* 添加文件夹 `source/algorithm`, 只有一个文件`index.md`\n\n```md\n# index.md\n---\ntitle: 力扣\ndate: 2020-04-08 16:09:43\nlayout: algorithm\n---\n```\n\n* 在`Chic/layout` 添加 `algorithm.ejs`\n\n```js\n<%- partial('_page/algorithm', {pagination: config.archive, index: true}) %>\n```\n\n* 在`Chic/layout/_page` 添加 `algorithm.ejs`\n\n```js\n// Chic/layout/_page/algorithm.ejs\n<div class=\"post-wrap algorithm-page archive\">\n    <div class=\"tags-algorithm\">\n        // 这里就是算法 tag, 我只筛选出 tag包含 algorithm- 的那些\n        <%site.tags.forEach(item=>{%>\n            <% if(item.name.includes(\"algorithm-\")) { %>\n                <a class=\"tags-item\" href=\"<%-url_for(item.path)%>\"><%- item.name.split(\"algorithm-\")[1] %><span class=\"nums\"><%-item.length%></span></a>\n            <% } %>\n        <%})%>\n    </div>\n    <div class=\"archive\">\n        // 每页条数\n        <% var perPage = config.algorithm_generator.per_page %>\n        // 这里我直接获取当前页面是第几页，没有page的话就是第一页\n        <% var currentPage = url.match(/page\\/(.*)\\//) ? url.match(/page\\/(.*)\\//)[1] : 1 %>\n        <% var last_year = ''; %>\n        // 然后我过滤掉 只是type == 'algorithm'的那些文章， 这个type, 在我们新键文章的时候跟title，tag那些写在一起\n        <% var posts = site.posts.filter((item) => item.type && item.type == 'algorithm') %>\n        // 做一个排序, 按最新的排\n        <% posts.data = posts.data.sort((a, b) => b.date - a.date) %>\n        // 选择当前页面的文章\n        <% posts.slice((currentPage - 1) * perPage, currentPage * perPage ).each(function (post) { %>\n                <% var cur_year = post.date.year(); %>\n                <% if(last_year !== cur_year){ %>\n                    <h3><%- cur_year %></h3>\n                <% last_year = cur_year; } %>\n                <article class=\"archive-item\">\n                    <a class=\"archive-item-link\" href=\"<%- url_for(post.path) %>\"><%= post.title %></a>\n                    <span class=\"archive-item-date\"><%- date(post.date, theme.date_format) %></span>\n                </article>\n        <% }) %>\n        // 分页\n        <% if(Math.ceil(posts.length /  perPage) > 1) { %>\n        <nav class=\"pagination\">\n            <%- paginator({\n                prev_next: false,\n                end_size: 1,\n                mid_size: 2,\n                total: Math.ceil(posts.length /  perPage)\n            }) %>\n        </nav>\n        <% } %>\n    </div>\n</div>\n```\n这里有个坑，我们点击 `/algorithm/page/2` 的时候会报当前页面存在，我通过 `hexo-generator-category` 找到类似的解决方案，\n我通过文档的[生成器](https://hexo.io/zh-cn/api/generator.html#%E5%BD%92%E6%A1%A3%E9%A1%B5%E9%9D%A2)写了一个类似的解决方案\n\n\n* 在 `Chic/script` 下添加 `algorithm.js`, 这里为了搞一个分页出来而已\n\n```js\nvar pagination = require('hexo-pagination'); // 要安装模块啊\nhexo.extend.generator.register('algorithm', function(locals){\n    // 这里不能对locals.post 进行更改，一旦发生更改，网站变量 site.posts 的内容也会跟着更改，这里不知道是为什么，我纠结了很久\n    let allPost = locals.posts; \n   \n    return pagination('/algorithm', allPost, {\n        perPage: this.config.algorithm_generator.per_page, // 在 _config.yml 添加 algorithm_generator: 配置 类似 category_generator\n        layout: ['algorithm', 'archive', 'index'], // 如果algorith这个layout,没有就会用 archive， 如此类推\n        format: 'page' + '/%d/',\n        data: {\n            __index: true\n        }\n    });\n\n});\n\n```\n\n* 最后只要修改一下 `Chic/layout/_page/archive.ejs` 文件跟上面类似第三部就行了, 这里说一下 config ,可以从最外层 `_config.yml`进行配置\n\n## 文章搜索\n\n\n* 先执行 `npm install hexo-generator-search -s`, 这个插件是为了生成`search.json`, 他包含的是文章的基本信息\n* 然后就是写 html 和 css了，我这里使用的是模态框，所以可以根据form 表单提交后唤出modal,然后进行ajax对search.json进行查询.\n* 我们根据关键字对文章content进行匹配，匹配有的加入数组，然后对匹配成功的那些数据进行字符截取，另外对关键字做highlight操作\n\n\n### 配置 _config.yml\n这里需要配置一下 root 下的 `_config.yml`, 添加以下代码\n\n```yml\n# search\nsearch:\n  enable: true\n  path: search.json\n  field: post\n  content: true\n```\n\n\n### 添加modal\n\n我这里直接写在了`Chic/layout/layout.ejs`, 我们只需要控制这个`modal`的`display`属性就好了\n\n#### html\n\n```html\n<!-- Chic/layout.ejs -->\n <div id=\"u-search\">\n        <div class=\"modal\">\n            <div class=\"modal-header\">\n                <div class=\"container\">\n                    <form id=\"u-search-modal-form\" class=\"u-search-modal-form\">\n                        <button type=\"submit\" class=\"form-submit-btn\">\n                            <img src=\"<%- url_for(theme.searchImg) %>\" class=\"search-btn-img\" />\n                        </button>\n                        <input placeholder=\"搜索文章。。。\" class=\"form-input\" id=\"modal-form-input\">\n                    </form>\n                    <a class=\"modal-close\">x</a>\n                </div>\n                <div class=\"search-loading\">\n                    <div class=\"search-loading-bar\"></div>\n                </div>\n            </div>\n            <div class=\"modal-body\">\n                <!-- ul 格式如下 -->\n                <!-- <ul class=\"modal-results\">\n                    <li class=\"result-item\">\n                        <a class=\"result-item-detail\">\n                            <span class=\"title\">页面配置</span>\n                            <span class=\"content\">\n                                content\n                            </span>\n                        </a>\n                    </li>\n                </ul> -->\n            </div>\n        </div>\n        <div class=\"modal-overlay\"></div>\n    </div>\n```\n\n#### modal 样式\n\n我把他放在了`Chic/source/css/_lib/search.css`\n\n这个要在 `Chic\\source\\css\\style.styl` 引用,添加代码 \n\n```css\n@import \"_lib/search.css\"\n```\n\n<details>\n<summary><mark>点击查看样式，这里是search.css 代码</mark></summary>\n\n```css\n    #u-search {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        padding: 60px 20px;\n        z-index: 1001;\n    }\n\n\n    #u-search .modal {\n        position: fixed;\n        height: 80%;\n        width: 100%;\n        max-width: 640px;\n        left: 50%;\n        top: 0;\n        margin: 64px 0px 0px -320px;\n        background: #fff;\n        z-index: 3;\n        border-radius: 4px;\n        overflow: hidden;\n    }\n\n    #u-search .modal-header {\n        position: relative;\n        width: 100%;\n        height: 64px;\n        z-index: 3;\n        border-top-left-radius: 4px;\n        border-top-right-radius: 4px;\n        font-size: 16px;\n        box-shadow: 0 1px 2px 0px rgba(0,0,0,0.1);\n        background: #fff;\n        transition: all 0.28s ease;\n        -moz-transition: all 0.28s ease;\n        -webkit-transition: all 0.28s ease;\n        -o-transition: all 0.28s ease;\n    }\n\n    #u-search .modal-header .container{\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        padding: 0px;\n    }\n\n    #u-search .modal-header .container .u-search-modal-form {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        flex: 1;\n    }\n\n    #u-search .u-search-modal-form .form-submit-btn {\n        width: 50px;\n        height: 64px;\n        background: none;\n        border: none;\n        outline: none;\n        margin:  0 5px 0 5px ;\n    }\n\n    #u-search .u-search-modal-form .form-submit-btn img {\n        width: 33px;\n        height: 33px;\n    }\n\n    #u-search .modal-header .container .u-search-modal-form .form-input {\n        flex: 1;\n        margin-right: 15px;\n        border: none;\n        padding: 10px 10px;\n        outline: none;\n    }\n\n\n    #u-search .modal-header .modal-close {\n        display: block;\n        width: 55px;\n        height: 64px;\n        top: 0;\n        right: 0;\n        color: #2196f3;\n        cursor: pointer;\n        text-align: center;\n        line-height: 64px;\n        vertical-align: middle;\n        transition: all 0.28s ease;\n        -moz-transition: all 0.28s ease;\n        -webkit-transition: all 0.28s ease;\n        -o-transition: all 0.28s ease;\n        z-index: 2;\n        font-size: 22px;\n    }\n\n    #u-search .modal-header .search-loading {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 2px;\n        background: transparent;\n        z-index: 1;\n        \n    }\n\n    #u-search .modal-header .search-loading .search-loading-bar {\n        transition: all 0.28s ease;\n        -moz-transition: all 0.28s ease;\n        -webkit-transition: all 0.28s ease;\n        -o-transition: all 0.28s ease;\n        position: relative;\n        display: none;\n        width: 0%;\n        height: 100%;\n        background: #2196f3;\n    \n    }\n\n    #u-search .modal .modal-body {\n        padding: 15px;\n        height: calc(100% - 85px);\n        overflow: auto;\n\n    }\n\n    #u-search .modal .modal-body::-webkit-scrollbar{\n        width: 5px;\n        height: 5px;\n        /**/\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-track{\n        background: rgb(239, 239, 239);\n        border-radius:2px;\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-thumb{\n        background: #bfbfbf;\n        border-radius:10px;\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-thumb:hover{\n        background: #333;\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-corner{\n        background: #179a16;\n    }\n\n    #u-search .modal .modal-body .modal-results {\n        list-style: none;\n        padding-left: 0;\n        margin: 0px;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item {\n        padding: 15px;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item:hover {\n        background: #e8f4fd;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item .result-item-detail {\n        display: flex;\n        flex-direction: column;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item .result-item-detail .title {\n        color: #6e6e6e;\n        font-weight: 700;\n        font-size: 18px;\n        margin-bottom: 10px;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item .result-item-detail .content {\n        display: block;\n        white-space: inherit;\n        word-break: break-all;\n        text-overflow: ellipsis;\n        font-size: 14px;\n        color: rgba(85,85,85,0.65);\n        letter-spacing: 1px;\n        user-select: none;\n    }\n\n    #u-search .search-keyword {\n        color: #0c7cd5;\n        text-decoration: underline;\n        font-weight: bold;\n        font-style:normal\n    }\n\n    #u-search .modal-body .no-result {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n    }\n\n    #u-search .modal-overlay {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0,0,0,0.7);\n        z-index: 1;\n    }\n\n    @media screen and (max-width: 680px) {\n        #u-search {\n            padding: 0px;\n            display: none;\n        }\n\n        #u-search .modal {\n            box-shadow: none;\n            max-width: none;\n            top: 0;\n            left: 0;\n            margin: 0;\n            height: 100%;\n            border-radius: 0;\n        }\n        #u-search .modal-header {\n            border-radius: 0;\n            padding: 0px;\n        }\n    } \n\n    .modal-active {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n    }\n\n    /* 以下是搜索框 */\n    .search {\n        margin-right: 6px;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n    }\n        \n    .search .form-search {\n        padding: 10px 8px;\n    }\n            \n    .search .form-search .input {\n        display: block;\n        line-height: 1.3;\n        color: #555;\n        background: #e8e8e8;\n        padding: 5px 8px;\n        box-shadow: none;\n        box-sizing: border-box;\n        font-size: 1rem;\n        border-radius: 8px;\n        border: none;\n        outline: none;\n    }        \n            \n    .search .search-btn {\n        width: 22px;\n        height: 22px;\n        line-height: 22px;\n        margin-right: 5px;\n    }\n\n    .search .search-btn .search-btn-img {\n        height: 100%;\n        width: 100%;\n    }\n                \n\n    @media screen and (max-width: 479px) {\n\n        .navbar-mobile-right {\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n        }\n            \n        .search .search-btn {\n            cursor: pointer;\n        }\n        \n        .search .form-search {\n            display: none;\n        }\n\n        .mobile-search {\n            position: absolute;\n            top: 0px;\n            left: 0px;\n            right: 50px;\n            padding-left: 15px;\n            background: #fff;\n            height: 80px;\n            display: flex;\n            flex-direction: row;\n            margin-right: 15px;\n        }\n\n        .mobile-search .form-search {\n            display: block; \n            flex: 1;\n        }\n\n        .mobile-search .input {\n            width: 100%;\n        } \n    }\n```\n   \n</details>\n\n### 增加搜索框\n\n我把该文件放在了 `Chic/layout/_partial/search.ejs`\n\n```jsx\n<% if(config.search && config.search.enable ) { %>\n    <div class=\"search \">\n        <div class=\"search-btn\" onClick=\"searchToggle()\">\n            <img src=\"<%- url_for(theme.searchImg) %>\" class=\"search-btn-img\" />\n        </div>\n        <form class=\"form-search\">\n            <input class=\"input\" placeholder=\"搜索文章\" autocomplete=\"off\" id=\"<%= name %>-search-input\"/>\n        </form>\n    </div>\n<% } %>\n\n```\n\n我们在 `Chic\\layout\\_partial\\header.ejs` 添加这个搜索框, 要在**pc的menu, 和mobile的menu**添加,\n\n```js\n<% var defaultName = 'pc' %>\n<%- partial('_partial/search', { name: defaultName }) %>\n\n// 这里是 mobile 的menu\n<div class=\"navbar-mobile-right\">\n    <% var type = 'mobile' %>\n    <%- partial('_partial/search', { name: type }) %>\n    <div class=\"menu-toggle\" onclick=\"mobileBtn()\">&#9776; 目录</div>\n</div>\n```\n\n### 添加搜索框的js, 搜索代码\n\n创建搜索代码\n\n<details>\n<summary><mark>点击查看代码</mark></summary>\n\n```jsx\n<script>\n    function searchToggle() {\n        const width = $(document.body).width()\n        if(width > 479) {\n            return;\n        }\n        const search = $('.search');\n        const searchForm = $('.form-search')\n\n        if(!search.hasClass(\"mobile-search\")) {\n            search.addClass(\"mobile-search\");\n        } else {\n            search.removeClass(\"mobile-search\");\n        } \n    }\n\n    function search(searchInputEl, formEl, flag) {\n        const path = \"<%= config.root %>\" + \"<%= config.search.path %>\"; // 可以在public 下查看这个search.json\n        $(formEl).submit(function(e){\n            e.preventDefault();\n            let target = null\n            if(searchInputEl == null) {\n                const screenWidth = $(document.body).width();\n                target = screenWidth > 479 ? $('#pc-search-input') : $('#mobile-search-input');\n                console.log(target);\n            } else {\n                target = $(searchInputEl)\n            }\n\n            if(!flag && target.val() === '') {\n                return ;\n            }\n\n            $(\"#u-search\").fadeIn(500, function() {\n                $(\"body > .wrapper\").addClass(\"modal-active\");\n\n                $.ajax({\n                    url: path,\n                    dataType: \"json\",\n                    beforeSend: function (xhr) {\n                        $input = target.val();\n                        $(\".form-input\").val($input);\n                        const loadingBar = $('.search-loading-bar') \n                        loadingBar.css({\n                            width:'100%',\n                            display: 'block'\n                        });\n                    },\n                    success: function( datas ) {\n                        // console.log(datas);\n                        const $resultPanel = $(\".modal-body\")[0];\n                        let str = `<ul class=\"modal-results\">`;\n                        var keywords = $(\".form-input\").val().trim().toLowerCase().split(/[\\s\\-]+/);\n                        $resultPanel.innerHTML = \"\";\n                        let hasResult = false\n                        let text = `<div class=\"no-result\">找不到与关键词相关的内容....</div>`;\n\n                        if ($(\".form-input\").val().trim().length <= 0) {\n                            // 没有结果\n                            $resultPanel.innerHTML = text;\n                            return;\n                        }\n                        datas.forEach(function (data) {\n                            var isMatch = true;\n                            if (!data.title || data.title.trim() === '') {\n                                data.title = \"Untitled\";\n                            }\n                            var data_title = data.title.trim().toLowerCase();\n                            var data_content = data.content.trim().replace(/<[^>]+>/g, \"\").toLowerCase();\n                            var data_url = data.url;\n                            var index_title = -1;\n                            var index_content = -1;\n                            var first_occur = -1;\n                            // only match artiles with not empty contents\n                            if (data_content !== '') {\n                                keywords.forEach(function (keyword, i) {\n                                    index_title = data_title.indexOf(keyword);\n                                    index_content = data_content.indexOf(keyword);\n\n                                    if (index_title < 0 && index_content < 0) {\n                                        isMatch = false;\n                                    } else {\n                                        hasResult = true\n                                        if (index_content < 0) {\n                                            index_content = 0;\n                                        }\n                                        if (i == 0) {\n                                            first_occur = index_content;\n                                        }\n                                    }\n                                });\n                            } else {\n                                isMatch = false;\n                            }\n                            // show search results\n                            if (isMatch) {\n                                str += `<li class='result-item'><a href='${data_url}' class='result-item-detail'> <span class=\"title\">${data_title}</span>`;\n                                var content = data.content.trim().replace(/<[^>]+>/g, \"\");\n                                if (first_occur >= 0) {\n                                    // cut out 200 characters\n                                    var start = first_occur - 40;\n                                    var end = first_occur + 160;\n\n                                    if (start < 0) {\n                                        start = 0;\n                                    }\n\n                                    if (start == 0) {\n                                        end = 200;\n                                    }\n\n                                    if (end > content.length) {\n                                        end = content.length;\n                                    }\n\n                                    var match_content = content.substring(start, end);\n\n                                    // highlight all keywords\n                                    keywords.forEach(function (keyword) {\n                                        var regS = new RegExp(keyword, \"gi\");\n                                        match_content = match_content.replace(regS, `<em class=\"search-keyword\">${keyword}</em>`);\n                                    });\n\n                                    str += `<span class=\"content\"> ${match_content} ...</span></a>`;\n                                }\n                                str += \"</li>\";\n                            }\n                        });\n                        str += \"</ul>\";\n                        if(hasResult) {\n                            $resultPanel.innerHTML = str;\n                        } else {\n                            $resultPanel.innerHTML = text;\n                        }\n\n                    },\n                    complete: function() {\n                        setTimeout(() => {\n                                const loadingBar = $('.search-loading-bar') \n                                loadingBar.css({\n                                    width:'0%',\n                                    display: 'none'\n                                });\n                        }, 300)\n                    }\n                });\n            })\n        \n        });\n    }\n    \n    $(document).ready(function() {\n        $('.modal-close').click(function () { \n            $(\"#u-search\").fadeOut();\n            $(\"body > .wrapper\").removeClass(\"modal-active\")\n        })\n\n        $('.modal-overlay').click(function() {\n            $(\"#u-search\").fadeOut();\n            $(\"body > .wrapper\").removeClass(\"modal-active\")\n        })\n        search(null, \".form-search\", false)\n        search(\"#u-search-modal-form .form-input\", \".u-search-modal-form\", true)\n    })\n</script>\n```\n</details>\n\n\n在 `themes\\Chic\\layout\\_partial\\head.ejs`中添加上面的以下代码，表示启动js\n\n```js\n<%# search %>\n\n<% if(config.search && config.search.enable ) { %>\n    <%- partial('_plugins/search.ejs') %>\n<% } %>\n\n```\n以上就是创建搜索框的全过程了，当然了我上面写的有点乱，可以自行整理一下\n\n\n\n\n","slug":"hexo自定义","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfa0014mroj3v2u1c48","content":"<p>我使用的主题是<a href=\"https://github.com/Siricee/hexo-theme-Chic\" target=\"_blank\" rel=\"noopener\">chic</a></p>\n<h2 id=\"修改主题markdown的高亮代码\"><a href=\"#修改主题markdown的高亮代码\" class=\"headerlink\" title=\"修改主题markdown的高亮代码\"></a>修改主题markdown的高亮代码</h2><p>我当前使用的主题是不支持<code>jsx</code>的，所以对于<code>react</code>代码不能友好支持。所以使用<code>hexo-prism-plugin</code>修改了高亮部分</p>\n<ul>\n<li><code>坑:</code> 我安装了 <code>hexo-prism-plugin</code> 之后发现还是无法高亮 <code>jsx</code> 代码， 后来发现还要要安装 <code>hexo-inject</code> 模块</li>\n</ul>\n<ul>\n<li><code>npm install hexo-prism-plugin hexo-inject --save</code></li>\n<li>修改<code>_config.yml</code></li>\n</ul>\n<pre class=\" language-yml\"><code class=\"language-yml\">highlight:\n  enable: false  # 关闭默认的highlight\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'base16-ateliersulphurpool.light' # 主题\n  line_number: false    # default false\n  # custom_css: 'path/to/your/custom.css'  </code></pre>\n<h2 id=\"为主题图片添加大图\"><a href=\"#为主题图片添加大图\" class=\"headerlink\" title=\"为主题图片添加大图\"></a>为主题图片添加大图</h2><p>主题无法对图片进行放大，图片最大也只是 <code>780 * 562</code>, 体验上不是很好，这里我使用了fancybox 进行修改</p>\n<p>下载fancybox的文件</p>\n<ul>\n<li><p>将 <code>jquery.fancybox.min.js</code>, <code>jquery.min.js</code> 放入 <code>theme/chic/source/js</code> 目录下</p>\n</li>\n<li><p>将 <code>jquery.fancybox.min.css</code> 放入 <code>theme/chic/source/css/_lib/</code>目录下</p>\n</li>\n<li><p>修改 <code>chic/_config.yml</code>, 添加代码</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">fancybox: \n  enable: true\n  jquery: /js/jquery.min.js\n  fancyjs: /js/jquery.fancybox.min.js</code></pre>\n</li>\n<li><p>修改 <code>Chic/layout/_partial/head.ejs</code> 添加以下代码</p>\n</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>theme<span class=\"token punctuation\">.</span>fancybox<span class=\"token punctuation\">.</span>enable<span class=\"token operator\">!==</span><span class=\"token keyword\">null</span><span class=\"token operator\">&amp;&amp;</span>theme<span class=\"token punctuation\">.</span>fancybox<span class=\"token punctuation\">.</span>enable<span class=\"token operator\">===</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span>  src<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;%- url_for(theme.fancybox.jquery) %>\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span>  src<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;%- url_for(theme.fancybox.fancyjs) %>\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span></code></pre>\n<ul>\n<li>在 <code>Chic/source/css/style.styl</code> 添加,</li>\n</ul>\n<pre class=\" language-css\"><code class=\"language-css\">@import <span class=\"token string\">\"_lib/jquery.fancybox.min.css\"</span></code></pre>\n<p>这里添加css 不知道为什么不可以直接 跟上面添加js 一样，我找了很久都没找到解决方案，只能够在style 下强行添加css</p>\n<ul>\n<li>最后在 <code>source/js/script.js</code> 的document.ready()的回调回调函数添加 以下代码就可以</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.group\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fancybox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'transitionIn'</span>    <span class=\"token punctuation\">:</span>    <span class=\"token string\">'elastic'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'transitionOut'</span>    <span class=\"token punctuation\">:</span>    <span class=\"token string\">'elastic'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'speedIn'</span>        <span class=\"token punctuation\">:</span>    <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'speedOut'</span>        <span class=\"token punctuation\">:</span>    <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">'overlayShow'</span>    <span class=\"token punctuation\">:</span>    <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>这里强行使用<code>&lt;a class=&quot;group&quot;&gt;</code>链接 包裹这img 表示使用fancybox</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>group<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>group1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>图片url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>图片url<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"添加力扣页面\"><a href=\"#添加力扣页面\" class=\"headerlink\" title=\"添加力扣页面\"></a>添加力扣页面</h2><blockquote>\n<p>我这里是想自定义添加一个新的页面，主要放自己练习算法时的解题思路，叫力扣，但又不想跟原来发表的文章混在一起</p>\n</blockquote>\n<ul>\n<li>添加文件夹 <code>source/algorithm</code>, 只有一个文件<code>index.md</code></li>\n</ul>\n<pre class=\" language-md\"><code class=\"language-md\"># index.md\n---\ntitle: 力扣\ndate: 2020-04-08 16:09:43\nlayout: algorithm\n---</code></pre>\n<ul>\n<li>在<code>Chic/layout</code> 添加 <code>algorithm.ejs</code></li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_page/algorithm'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>pagination<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">.</span>archive<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span></code></pre>\n<ul>\n<li>在<code>Chic/layout/_page</code> 添加 <code>algorithm.ejs</code></li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// Chic/layout/_page/algorithm.ejs</span>\n<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"post-wrap algorithm-page archive\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"tags-algorithm\"</span><span class=\"token operator\">></span>\n        <span class=\"token comment\" spellcheck=\"true\">// 这里就是算法 tag, 我只筛选出 tag包含 algorithm- 的那些</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>site<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"algorithm-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>a <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"tags-item\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;%-url_for(item.path)%>\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"algorithm-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>span <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"nums\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span>item<span class=\"token punctuation\">.</span>length<span class=\"token operator\">%</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span>item<span class=\"token punctuation\">.</span>length<span class=\"token operator\">%</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> div<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>archive<span class=\"token string\">\">\"</span> 每页条数 <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">var</span> perpage<span class=\"token operator\">=</span><span class=\"token string\">\"config.algorithm_generator.per_page\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span> 这里我直接获取当前页面是第几页，没有page的话就是第一页 currentpage<span class=\"token operator\">=</span><span class=\"token string\">\"url.match(/page\\/(.*)\\//)\"</span> <span class=\"token operator\">?</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span> page\\ <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\\ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> last_year<span class=\"token operator\">=</span><span class=\"token string\">\"'';\"</span> 然后我过滤掉 只是type<span class=\"token operator\">=</span><span class=\"token string\">\"=\"</span> <span class=\"token string\">'algorithm'</span>的那些文章， 这个type<span class=\"token punctuation\">,</span> 在我们新键文章的时候跟title，tag那些写在一起 posts<span class=\"token operator\">=</span><span class=\"token string\">\"site.posts.filter((item)\"</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> item<span class=\"token punctuation\">.</span>type <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'algorithm'</span><span class=\"token punctuation\">)</span> 做一个排序<span class=\"token punctuation\">,</span> 按最新的排 posts<span class=\"token punctuation\">.</span>data<span class=\"token operator\">=</span><span class=\"token string\">\"posts.data.sort((a,\"</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token string\">\">\"</span> b<span class=\"token punctuation\">.</span>date <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span> 选择当前页面的文章 posts<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentpage <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> perpage<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> cur_year<span class=\"token operator\">=</span><span class=\"token string\">\"post.date.year();\"</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>last_year <span class=\"token operator\">!=</span><span class=\"token string\">\"=\"</span> cur_year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span> h3<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span>article <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span><span class=\"token string\">\" url_for(post.path) %>\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">=</span><span class=\"token string\">\"post.title\"</span> a<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>span <span class=\"token function\">date</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">.</span>date_format<span class=\"token punctuation\">)</span> span<span class=\"token operator\">></span> article<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> 分页 <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">.</span>length perpage<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>nav <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> <span class=\"token function\">paginator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> prev_next<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> end_size<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mid_size<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">:</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">.</span>length nav<span class=\"token operator\">></span> div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span> code<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">%</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">%</span><span class=\"token operator\">></span></code></pre>\n<p>这里有个坑，我们点击 <code>/algorithm/page/2</code> 的时候会报当前页面存在，我通过 <code>hexo-generator-category</code> 找到类似的解决方案，<br>我通过文档的<a href=\"https://hexo.io/zh-cn/api/generator.html#%E5%BD%92%E6%A1%A3%E9%A1%B5%E9%9D%A2\" target=\"_blank\" rel=\"noopener\">生成器</a>写了一个类似的解决方案</p>\n<ul>\n<li>在 <code>Chic/script</code> 下添加 <code>algorithm.js</code>, 这里为了搞一个分页出来而已</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> pagination <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hexo-pagination'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 要安装模块啊</span>\nhexo<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'algorithm'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>locals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这里不能对locals.post 进行更改，一旦发生更改，网站变量 site.posts 的内容也会跟着更改，这里不知道是为什么，我纠结了很久</span>\n    <span class=\"token keyword\">let</span> allPost <span class=\"token operator\">=</span> locals<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">;</span> \n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">pagination</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/algorithm'</span><span class=\"token punctuation\">,</span> allPost<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        perPage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>algorithm_generator<span class=\"token punctuation\">.</span>per_page<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 在 _config.yml 添加 algorithm_generator: 配置 类似 category_generator</span>\n        layout<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'algorithm'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'archive'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 如果algorith这个layout,没有就会用 archive， 如此类推</span>\n        format<span class=\"token punctuation\">:</span> <span class=\"token string\">'page'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/%d/'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            __index<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>最后只要修改一下 <code>Chic/layout/_page/archive.ejs</code> 文件跟上面类似第三部就行了, 这里说一下 config ,可以从最外层 <code>_config.yml</code>进行配置</li>\n</ul>\n<h2 id=\"文章搜索\"><a href=\"#文章搜索\" class=\"headerlink\" title=\"文章搜索\"></a>文章搜索</h2><ul>\n<li>先执行 <code>npm install hexo-generator-search -s</code>, 这个插件是为了生成<code>search.json</code>, 他包含的是文章的基本信息</li>\n<li>然后就是写 html 和 css了，我这里使用的是模态框，所以可以根据form 表单提交后唤出modal,然后进行ajax对search.json进行查询.</li>\n<li>我们根据关键字对文章content进行匹配，匹配有的加入数组，然后对匹配成功的那些数据进行字符截取，另外对关键字做highlight操作</li>\n</ul>\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置 _config.yml\"></a>配置 _config.yml</h3><p>这里需要配置一下 root 下的 <code>_config.yml</code>, 添加以下代码</p>\n<pre class=\" language-yml\"><code class=\"language-yml\"># search\nsearch:\n  enable: true\n  path: search.json\n  field: post\n  content: true</code></pre>\n<h3 id=\"添加modal\"><a href=\"#添加modal\" class=\"headerlink\" title=\"添加modal\"></a>添加modal</h3><p>我这里直接写在了<code>Chic/layout/layout.ejs</code>, 我们只需要控制这个<code>modal</code>的<code>display</code>属性就好了</p>\n<h4 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h4><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- Chic/layout.ejs --></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>u-search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>modal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>modal-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>u-search-modal-form<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>u-search-modal-form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-submit-btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>&lt;%- url_for(theme.searchImg) %<span class=\"token punctuation\">></span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>search-btn-img<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>搜索文章。。。<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-input<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>modal-form-input<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>modal-close<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>x<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>search-loading<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>search-loading-bar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>modal-body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token comment\" spellcheck=\"true\">&lt;!-- ul 格式如下 --></span>\n                <span class=\"token comment\" spellcheck=\"true\">&lt;!-- &lt;ul class=\"modal-results\">\n                    &lt;li class=\"result-item\">\n                        &lt;a class=\"result-item-detail\">\n                            &lt;span class=\"title\">页面配置&lt;/span>\n                            &lt;span class=\"content\">\n                                content\n                            &lt;/span>\n                        &lt;/a>\n                    &lt;/li>\n                &lt;/ul> --></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>modal-overlay<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"modal-样式\"><a href=\"#modal-样式\" class=\"headerlink\" title=\"modal 样式\"></a>modal 样式</h4><p>我把他放在了<code>Chic/source/css/_lib/search.css</code></p>\n<p>这个要在 <code>Chic\\source\\css\\style.styl</code> 引用,添加代码 </p>\n<pre class=\" language-css\"><code class=\"language-css\">@import <span class=\"token string\">\"_lib/search.css\"</span></code></pre>\n<details>\n<summary><mark>点击查看样式，这里是search.css 代码</mark></summary>\n\n<pre class=\" language-css\"><code class=\"language-css\">    <span class=\"token selector\"><span class=\"token id\">#u-search</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>px <span class=\"token number\">20</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">640</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">64</span>px <span class=\"token number\">0</span>px <span class=\"token number\">0</span>px -<span class=\"token number\">320</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal-header</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">64</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border-top-left-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border-top-right-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>px <span class=\"token number\">2</span>px <span class=\"token number\">0</span>px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token number\">0</span>,<span class=\"token number\">0</span>,<span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">-moz-transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">-o-transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal-header</span> <span class=\"token class\">.container</span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal-header</span> <span class=\"token class\">.container</span> <span class=\"token class\">.u-search-modal-form</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.u-search-modal-form</span> <span class=\"token class\">.form-submit-btn</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">64</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>  <span class=\"token number\">0</span> <span class=\"token number\">5</span>px <span class=\"token number\">0</span> <span class=\"token number\">5</span>px <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.u-search-modal-form</span> <span class=\"token class\">.form-submit-btn</span> img </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal-header</span> <span class=\"token class\">.container</span> <span class=\"token class\">.u-search-modal-form</span> <span class=\"token class\">.form-input</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal-header</span> <span class=\"token class\">.modal-close</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">55</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">64</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#2196f3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">64</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> middle<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">-moz-transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">-o-transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal-header</span> <span class=\"token class\">.search-loading</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal-header</span> <span class=\"token class\">.search-loading</span> <span class=\"token class\">.search-loading-bar</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">-moz-transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">-o-transition</span><span class=\"token punctuation\">:</span> all <span class=\"token number\">0.28</span>s ease<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#2196f3</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100%</span> - <span class=\"token number\">85</span>px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span><span class=\"token pseudo-element\">::-webkit-scrollbar</span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/**/</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span><span class=\"token pseudo-element\">::-webkit-scrollbar-track</span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span><span class=\"token number\">239</span>, <span class=\"token number\">239</span>, <span class=\"token number\">239</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span><span class=\"token pseudo-element\">::-webkit-scrollbar-thumb</span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#bfbfbf</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span><span class=\"token pseudo-element\">::-webkit-scrollbar-thumb</span><span class=\"token pseudo-class\">:hover</span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#333</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span><span class=\"token pseudo-element\">::-webkit-scrollbar-corner</span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#179a16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span> <span class=\"token class\">.modal-results</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span> <span class=\"token class\">.modal-results</span> <span class=\"token class\">.result-item</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span> <span class=\"token class\">.modal-results</span> <span class=\"token class\">.result-item</span><span class=\"token pseudo-class\">:hover</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#e8f4fd</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span> <span class=\"token class\">.modal-results</span> <span class=\"token class\">.result-item</span> <span class=\"token class\">.result-item-detail</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span> <span class=\"token class\">.modal-results</span> <span class=\"token class\">.result-item</span> <span class=\"token class\">.result-item-detail</span> <span class=\"token class\">.title</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#6e6e6e</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> <span class=\"token number\">700</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> <span class=\"token class\">.modal-body</span> <span class=\"token class\">.modal-results</span> <span class=\"token class\">.result-item</span> <span class=\"token class\">.result-item-detail</span> <span class=\"token class\">.content</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">word-break</span><span class=\"token punctuation\">:</span> break-all<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">14</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">85</span>,<span class=\"token number\">85</span>,<span class=\"token number\">85</span>,<span class=\"token number\">0.65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">letter-spacing</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.search-keyword</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#0c7cd5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span>normal\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal-body</span> <span class=\"token class\">.no-result</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal-overlay</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token number\">0</span>,<span class=\"token number\">0</span>,<span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 680px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token selector\"><span class=\"token id\">#u-search</span> </span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal</span> </span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\"><span class=\"token id\">#u-search</span> <span class=\"token class\">.modal-header</span> </span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n\n    <span class=\"token selector\"><span class=\"token class\">.modal-active</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/* 以下是搜索框 */</span>\n    <span class=\"token selector\"><span class=\"token class\">.search</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token class\">.search</span> <span class=\"token class\">.form-search</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px <span class=\"token number\">8</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token class\">.search</span> <span class=\"token class\">.form-search</span> <span class=\"token class\">.input</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#555</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#e8e8e8</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>px <span class=\"token number\">8</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>rem<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>        \n\n    <span class=\"token selector\"><span class=\"token class\">.search</span> <span class=\"token class\">.search-btn</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token class\">.search</span> <span class=\"token class\">.search-btn</span> <span class=\"token class\">.search-btn-img</span> </span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 479px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token selector\"><span class=\"token class\">.navbar-mobile-right</span> </span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token selector\"><span class=\"token class\">.search</span> <span class=\"token class\">.search-btn</span> </span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token selector\"><span class=\"token class\">.search</span> <span class=\"token class\">.form-search</span> </span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token selector\"><span class=\"token class\">.mobile-search</span> </span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token selector\"><span class=\"token class\">.mobile-search</span> <span class=\"token class\">.form-search</span> </span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span> \n            <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token selector\"><span class=\"token class\">.mobile-search</span> <span class=\"token class\">.input</span> </span><span class=\"token punctuation\">{</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span></code></pre>\n</details>\n\n<h3 id=\"增加搜索框\"><a href=\"#增加搜索框\" class=\"headerlink\" title=\"增加搜索框\"></a>增加搜索框</h3><p>我把该文件放在了 <code>Chic/layout/_partial/search.ejs</code></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>search <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span>enable <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>search</span> <span class=\"token attr-name\">\"</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>search-btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>searchToggle()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>&lt;%-</span> <span class=\"token attr-name\">url_for(theme.searchImg)</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span><span class=\"token attr-name\">\"</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>search-btn-img<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>input<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>搜索文章<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autocomplete</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>&lt;%<span class=\"token punctuation\">=</span></span> <span class=\"token attr-name\">name</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span><span class=\"token attr-name\">-search-input\"</span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n</code></pre>\n<p>我们在 <code>Chic\\layout\\_partial\\header.ejs</code> 添加这个搜索框, 要在<strong>pc的menu, 和mobile的menu</strong>添加,</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">var</span> defaultName <span class=\"token operator\">=</span> <span class=\"token string\">'pc'</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_partial/search'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> defaultName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 这里是 mobile 的menu</span>\n<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"navbar-mobile-right\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> <span class=\"token string\">'mobile'</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_partial/search'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"menu-toggle\"</span> onclick<span class=\"token operator\">=</span><span class=\"token string\">\"mobileBtn()\"</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">9776</span><span class=\"token punctuation\">;</span> 目录<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre>\n<h3 id=\"添加搜索框的js-搜索代码\"><a href=\"#添加搜索框的js-搜索代码\" class=\"headerlink\" title=\"添加搜索框的js, 搜索代码\"></a>添加搜索框的js, 搜索代码</h3><p>创建搜索代码</p>\n<details>\n<summary><mark>点击查看代码</mark></summary>\n\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">searchToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">></span> <span class=\"token number\">479</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> search <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.search'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> searchForm <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.form-search'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">hasClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mobile-search\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            search<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mobile-search\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            search<span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mobile-search\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>searchInputEl<span class=\"token punctuation\">,</span> formEl<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;%= config.root %>\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;%= config.search.path %>\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 可以在public 下查看这个search.json</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>formEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>searchInputEl <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> screenWidth <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                target <span class=\"token operator\">=</span> screenWidth <span class=\"token operator\">></span> <span class=\"token number\">479</span> <span class=\"token operator\">?</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#pc-search-input'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#mobile-search-input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                target <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>searchInputEl<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag <span class=\"token operator\">&amp;&amp;</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#u-search\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeIn</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body > .wrapper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"modal-active\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                    url<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">,</span>\n                    dataType<span class=\"token punctuation\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n                    beforeSend<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        $input <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".form-input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span>$input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">const</span> loadingBar <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.search-loading-bar'</span><span class=\"token punctuation\">)</span> \n                        loadingBar<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                            width<span class=\"token punctuation\">:</span><span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span>\n                            display<span class=\"token punctuation\">:</span> <span class=\"token string\">'block'</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    success<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> datas <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// console.log(datas);</span>\n                        <span class=\"token keyword\">const</span> $resultPanel <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".modal-body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;ul class=\"modal-results\">`</span></span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">var</span> keywords <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".form-input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[\\s\\-]+/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        $resultPanel<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">let</span> hasResult <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n                        <span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;div class=\"no-result\">找不到与关键词相关的内容....&lt;/div>`</span></span><span class=\"token punctuation\">;</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".form-input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\" spellcheck=\"true\">// 没有结果</span>\n                            $resultPanel<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        datas<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">var</span> isMatch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">.</span>title <span class=\"token operator\">||</span> data<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                data<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Untitled\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">var</span> data_title <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">var</span> data_content <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/&lt;[^>]+>/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">var</span> data_url <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">var</span> index_title <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">var</span> index_content <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">var</span> first_occur <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token comment\" spellcheck=\"true\">// only match artiles with not empty contents</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data_content <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                keywords<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                    index_title <span class=\"token operator\">=</span> data_title<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    index_content <span class=\"token operator\">=</span> data_content<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index_title <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> index_content <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        isMatch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                                        hasResult <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n                                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index_content <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                            index_content <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                                        <span class=\"token punctuation\">}</span>\n                                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                            first_occur <span class=\"token operator\">=</span> index_content<span class=\"token punctuation\">;</span>\n                                        <span class=\"token punctuation\">}</span>\n                                    <span class=\"token punctuation\">}</span>\n                                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                                isMatch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token comment\" spellcheck=\"true\">// show search results</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                str <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;li class='result-item'>&lt;a href='</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data_url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' class='result-item-detail'> &lt;span class=\"title\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data_title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span>`</span></span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">var</span> content <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/&lt;[^>]+>/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first_occur <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                    <span class=\"token comment\" spellcheck=\"true\">// cut out 200 characters</span>\n                                    <span class=\"token keyword\">var</span> start <span class=\"token operator\">=</span> first_occur <span class=\"token operator\">-</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token keyword\">var</span> end <span class=\"token operator\">=</span> first_occur <span class=\"token operator\">+</span> <span class=\"token number\">160</span><span class=\"token punctuation\">;</span>\n\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        end <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n\n                                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">></span> content<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        end <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span>\n\n                                    <span class=\"token keyword\">var</span> match_content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                                    <span class=\"token comment\" spellcheck=\"true\">// highlight all keywords</span>\n                                    keywords<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                        <span class=\"token keyword\">var</span> regS <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">,</span> <span class=\"token string\">\"gi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                        match_content <span class=\"token operator\">=</span> match_content<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>regS<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;em class=\"search-keyword\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>keyword<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/em>`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                                    str <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;span class=\"content\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match_content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> ...&lt;/span>&lt;/a>`</span></span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                str <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;/li>\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        str <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;/ul>\"</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hasResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            $resultPanel<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                            $resultPanel<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    complete<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">const</span> loadingBar <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.search-loading-bar'</span><span class=\"token punctuation\">)</span> \n                                loadingBar<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                                    width<span class=\"token punctuation\">:</span><span class=\"token string\">'0%'</span><span class=\"token punctuation\">,</span>\n                                    display<span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span>\n                                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.modal-close'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#u-search\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body > .wrapper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"modal-active\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.modal-overlay'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#u-search\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body > .wrapper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"modal-active\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".form-search\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#u-search-modal-form .form-input\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".u-search-modal-form\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n</details>\n\n\n<p>在 <code>themes\\Chic\\layout\\_partial\\head.ejs</code>中添加上面的以下代码，表示启动js</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span># search <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>search <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span>enable <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_plugins/search.ejs'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n</code></pre>\n<p>以上就是创建搜索框的全过程了，当然了我上面写的有点乱，可以自行整理一下</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我使用的主题是<a href=\"https://github.com/Siricee/hexo-theme-Chic\" target=\"_blank\" rel=\"noopener\">chic</a></p>\n<h2 id=\"修改主题markdown的高亮代码\"><a href=\"#修改主题markdown的高亮代码\" class=\"headerlink\" title=\"修改主题markdown的高亮代码\"></a>修改主题markdown的高亮代码</h2><p>我当前使用的主题是不支持<code>jsx</code>的，所以对于<code>react</code>代码不能友好支持。所以使用<code>hexo-prism-plugin</code>修改了高亮部分</p>\n<ul>\n<li><code>坑:</code> 我安装了 <code>hexo-prism-plugin</code> 之后发现还是无法高亮 <code>jsx</code> 代码， 后来发现还要要安装 <code>hexo-inject</code> 模块</li>\n</ul>\n<ul>\n<li><code>npm install hexo-prism-plugin hexo-inject --save</code></li>\n<li>修改<code>_config.yml</code></li>\n</ul>\n<pre><code class=\"yml\">highlight:\n  enable: false  # 关闭默认的highlight\n\nprism_plugin:\n  mode: &#39;preprocess&#39;    # realtime/preprocess\n  theme: &#39;base16-ateliersulphurpool.light&#39; # 主题\n  line_number: false    # default false\n  # custom_css: &#39;path/to/your/custom.css&#39;  </code></pre>\n<h2 id=\"为主题图片添加大图\"><a href=\"#为主题图片添加大图\" class=\"headerlink\" title=\"为主题图片添加大图\"></a>为主题图片添加大图</h2><p>主题无法对图片进行放大，图片最大也只是 <code>780 * 562</code>, 体验上不是很好，这里我使用了fancybox 进行修改</p>\n<p>下载fancybox的文件</p>\n<ul>\n<li><p>将 <code>jquery.fancybox.min.js</code>, <code>jquery.min.js</code> 放入 <code>theme/chic/source/js</code> 目录下</p>\n</li>\n<li><p>将 <code>jquery.fancybox.min.css</code> 放入 <code>theme/chic/source/css/_lib/</code>目录下</p>\n</li>\n<li><p>修改 <code>chic/_config.yml</code>, 添加代码</p>\n<pre><code class=\"yml\">fancybox: \n  enable: true\n  jquery: /js/jquery.min.js\n  fancyjs: /js/jquery.fancybox.min.js</code></pre>\n</li>\n<li><p>修改 <code>Chic/layout/_partial/head.ejs</code> 添加以下代码</p>\n</li>\n</ul>\n<pre><code class=\"js\">&lt;% if(theme.fancybox.enable!==null&amp;&amp;theme.fancybox.enable===true){ %&gt;\n    &lt;script type=&quot;text/javascript&quot;  src=&quot;&lt;%- url_for(theme.fancybox.jquery) %&gt;&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;  src=&quot;&lt;%- url_for(theme.fancybox.fancyjs) %&gt;&quot;&gt;&lt;/script&gt;\n&lt;% } %&gt;</code></pre>\n<ul>\n<li>在 <code>Chic/source/css/style.styl</code> 添加,</li>\n</ul>\n<pre><code class=\"css\">@import &quot;_lib/jquery.fancybox.min.css&quot;</code></pre>\n<p>这里添加css 不知道为什么不可以直接 跟上面添加js 一样，我找了很久都没找到解决方案，只能够在style 下强行添加css</p>\n<ul>\n<li>最后在 <code>source/js/script.js</code> 的document.ready()的回调回调函数添加 以下代码就可以</li>\n</ul>\n<pre><code class=\"js\">$(&quot;a.group&quot;).fancybox({\n    &#39;transitionIn&#39;    :    &#39;elastic&#39;,\n    &#39;transitionOut&#39;    :    &#39;elastic&#39;,\n    &#39;speedIn&#39;        :    600, \n    &#39;speedOut&#39;        :    200, \n    &#39;overlayShow&#39;    :    false\n});</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>这里强行使用<code>&lt;a class=&quot;group&quot;&gt;</code>链接 包裹这img 表示使用fancybox</p>\n<pre><code class=\"html\">&lt;a class=&quot;group&quot; rel=&quot;group1&quot; href=&quot;图片url&quot;&gt;\n    &lt;img src=&quot;图片url&quot; /&gt;    \n&lt;/a&gt;</code></pre>\n<h2 id=\"添加力扣页面\"><a href=\"#添加力扣页面\" class=\"headerlink\" title=\"添加力扣页面\"></a>添加力扣页面</h2><blockquote>\n<p>我这里是想自定义添加一个新的页面，主要放自己练习算法时的解题思路，叫力扣，但又不想跟原来发表的文章混在一起</p>\n</blockquote>\n<ul>\n<li>添加文件夹 <code>source/algorithm</code>, 只有一个文件<code>index.md</code></li>\n</ul>\n<pre><code class=\"md\"># index.md\n---\ntitle: 力扣\ndate: 2020-04-08 16:09:43\nlayout: algorithm\n---</code></pre>\n<ul>\n<li>在<code>Chic/layout</code> 添加 <code>algorithm.ejs</code></li>\n</ul>\n<pre><code class=\"js\">&lt;%- partial(&#39;_page/algorithm&#39;, {pagination: config.archive, index: true}) %&gt;</code></pre>\n<ul>\n<li>在<code>Chic/layout/_page</code> 添加 <code>algorithm.ejs</code></li>\n</ul>\n<pre><code class=\"js\">// Chic/layout/_page/algorithm.ejs\n&lt;div class=&quot;post-wrap algorithm-page archive&quot;&gt;\n    &lt;div class=&quot;tags-algorithm&quot;&gt;\n        // 这里就是算法 tag, 我只筛选出 tag包含 algorithm- 的那些\n        &lt;%site.tags.forEach(item=&gt;{%>\n            <% if(item.name.includes(\"algorithm-\")) { %>\n                <a class=\"tags-item\" href=\"<%-url_for(item.path)%>\"><%- item.name.split(\"algorithm-\")[1] %><span class=\"nums\"><%-item.length%></%-item.length%></span></%-></a>\n            <% } %>\n        <%})%&gt; 1 &lt; div&gt; &lt;div class=\"&quot;archive&quot;&gt;\" 每页条数 &lt;% var perpage=\"config.algorithm_generator.per_page\" %&gt; 这里我直接获取当前页面是第几页，没有page的话就是第一页 currentpage=\"url.match(/page\\/(.*)\\//)\" ? url.match( page\\ (.*)\\ )[1] : last_year=\"&#39;&#39;;\" 然后我过滤掉 只是type=\"=\" &#39;algorithm&#39;的那些文章， 这个type, 在我们新键文章的时候跟title，tag那些写在一起 posts=\"site.posts.filter((item)\" =&gt; item.type &amp;&amp; &#39;algorithm&#39;) 做一个排序, 按最新的排 posts.data=\"posts.data.sort((a,\" b)=\"&gt;\" b.date - a.date) 选择当前页面的文章 posts.slice((currentpage 1) * perpage, ).each(function (post) { cur_year=\"post.date.year();\" if(last_year !=\"=\" cur_year){ &lt;h3&gt;&lt;%- %&gt;&lt; h3&gt; } &lt;article &lt;a href=\"&quot;&lt;%-\" url_for(post.path) %&gt;&quot;&gt;&lt;%=\"post.title\" a&gt; &lt;span date(post.date, theme.date_format) span&gt; article&gt; }) 分页 if(math.ceil(posts.length perpage) &gt; &lt;nav &lt;%- paginator({ prev_next: false, end_size: 1, mid_size: 2, total: math.ceil(posts.length nav&gt; div&gt;< code></%})%&gt;></%></%></code></pre>\n<p>这里有个坑，我们点击 <code>/algorithm/page/2</code> 的时候会报当前页面存在，我通过 <code>hexo-generator-category</code> 找到类似的解决方案，<br>我通过文档的<a href=\"https://hexo.io/zh-cn/api/generator.html#%E5%BD%92%E6%A1%A3%E9%A1%B5%E9%9D%A2\" target=\"_blank\" rel=\"noopener\">生成器</a>写了一个类似的解决方案</p>\n<ul>\n<li>在 <code>Chic/script</code> 下添加 <code>algorithm.js</code>, 这里为了搞一个分页出来而已</li>\n</ul>\n<pre><code class=\"js\">var pagination = require(&#39;hexo-pagination&#39;); // 要安装模块啊\nhexo.extend.generator.register(&#39;algorithm&#39;, function(locals){\n    // 这里不能对locals.post 进行更改，一旦发生更改，网站变量 site.posts 的内容也会跟着更改，这里不知道是为什么，我纠结了很久\n    let allPost = locals.posts; \n\n    return pagination(&#39;/algorithm&#39;, allPost, {\n        perPage: this.config.algorithm_generator.per_page, // 在 _config.yml 添加 algorithm_generator: 配置 类似 category_generator\n        layout: [&#39;algorithm&#39;, &#39;archive&#39;, &#39;index&#39;], // 如果algorith这个layout,没有就会用 archive， 如此类推\n        format: &#39;page&#39; + &#39;/%d/&#39;,\n        data: {\n            __index: true\n        }\n    });\n\n});\n</code></pre>\n<ul>\n<li>最后只要修改一下 <code>Chic/layout/_page/archive.ejs</code> 文件跟上面类似第三部就行了, 这里说一下 config ,可以从最外层 <code>_config.yml</code>进行配置</li>\n</ul>\n<h2 id=\"文章搜索\"><a href=\"#文章搜索\" class=\"headerlink\" title=\"文章搜索\"></a>文章搜索</h2><ul>\n<li>先执行 <code>npm install hexo-generator-search -s</code>, 这个插件是为了生成<code>search.json</code>, 他包含的是文章的基本信息</li>\n<li>然后就是写 html 和 css了，我这里使用的是模态框，所以可以根据form 表单提交后唤出modal,然后进行ajax对search.json进行查询.</li>\n<li>我们根据关键字对文章content进行匹配，匹配有的加入数组，然后对匹配成功的那些数据进行字符截取，另外对关键字做highlight操作</li>\n</ul>\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置 _config.yml\"></a>配置 _config.yml</h3><p>这里需要配置一下 root 下的 <code>_config.yml</code>, 添加以下代码</p>\n<pre><code class=\"yml\"># search\nsearch:\n  enable: true\n  path: search.json\n  field: post\n  content: true</code></pre>\n<h3 id=\"添加modal\"><a href=\"#添加modal\" class=\"headerlink\" title=\"添加modal\"></a>添加modal</h3><p>我这里直接写在了<code>Chic/layout/layout.ejs</code>, 我们只需要控制这个<code>modal</code>的<code>display</code>属性就好了</p>\n<h4 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h4><pre><code class=\"html\">&lt;!-- Chic/layout.ejs --&gt;\n &lt;div id=&quot;u-search&quot;&gt;\n        &lt;div class=&quot;modal&quot;&gt;\n            &lt;div class=&quot;modal-header&quot;&gt;\n                &lt;div class=&quot;container&quot;&gt;\n                    &lt;form id=&quot;u-search-modal-form&quot; class=&quot;u-search-modal-form&quot;&gt;\n                        &lt;button type=&quot;submit&quot; class=&quot;form-submit-btn&quot;&gt;\n                            &lt;img src=&quot;&lt;%- url_for(theme.searchImg) %&gt;&quot; class=&quot;search-btn-img&quot; /&gt;\n                        &lt;/button&gt;\n                        &lt;input placeholder=&quot;搜索文章。。。&quot; class=&quot;form-input&quot; id=&quot;modal-form-input&quot;&gt;\n                    &lt;/form&gt;\n                    &lt;a class=&quot;modal-close&quot;&gt;x&lt;/a&gt;\n                &lt;/div&gt;\n                &lt;div class=&quot;search-loading&quot;&gt;\n                    &lt;div class=&quot;search-loading-bar&quot;&gt;&lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;modal-body&quot;&gt;\n                &lt;!-- ul 格式如下 --&gt;\n                &lt;!-- &lt;ul class=&quot;modal-results&quot;&gt;\n                    &lt;li class=&quot;result-item&quot;&gt;\n                        &lt;a class=&quot;result-item-detail&quot;&gt;\n                            &lt;span class=&quot;title&quot;&gt;页面配置&lt;/span&gt;\n                            &lt;span class=&quot;content&quot;&gt;\n                                content\n                            &lt;/span&gt;\n                        &lt;/a&gt;\n                    &lt;/li&gt;\n                &lt;/ul&gt; --&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;modal-overlay&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;</code></pre>\n<h4 id=\"modal-样式\"><a href=\"#modal-样式\" class=\"headerlink\" title=\"modal 样式\"></a>modal 样式</h4><p>我把他放在了<code>Chic/source/css/_lib/search.css</code></p>\n<p>这个要在 <code>Chic\\source\\css\\style.styl</code> 引用,添加代码 </p>\n<pre><code class=\"css\">@import &quot;_lib/search.css&quot;</code></pre>\n<details>\n<summary><mark>点击查看样式，这里是search.css 代码</mark></summary>\n\n<pre><code class=\"css\">    #u-search {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        padding: 60px 20px;\n        z-index: 1001;\n    }\n\n\n    #u-search .modal {\n        position: fixed;\n        height: 80%;\n        width: 100%;\n        max-width: 640px;\n        left: 50%;\n        top: 0;\n        margin: 64px 0px 0px -320px;\n        background: #fff;\n        z-index: 3;\n        border-radius: 4px;\n        overflow: hidden;\n    }\n\n    #u-search .modal-header {\n        position: relative;\n        width: 100%;\n        height: 64px;\n        z-index: 3;\n        border-top-left-radius: 4px;\n        border-top-right-radius: 4px;\n        font-size: 16px;\n        box-shadow: 0 1px 2px 0px rgba(0,0,0,0.1);\n        background: #fff;\n        transition: all 0.28s ease;\n        -moz-transition: all 0.28s ease;\n        -webkit-transition: all 0.28s ease;\n        -o-transition: all 0.28s ease;\n    }\n\n    #u-search .modal-header .container{\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        padding: 0px;\n    }\n\n    #u-search .modal-header .container .u-search-modal-form {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        flex: 1;\n    }\n\n    #u-search .u-search-modal-form .form-submit-btn {\n        width: 50px;\n        height: 64px;\n        background: none;\n        border: none;\n        outline: none;\n        margin:  0 5px 0 5px ;\n    }\n\n    #u-search .u-search-modal-form .form-submit-btn img {\n        width: 33px;\n        height: 33px;\n    }\n\n    #u-search .modal-header .container .u-search-modal-form .form-input {\n        flex: 1;\n        margin-right: 15px;\n        border: none;\n        padding: 10px 10px;\n        outline: none;\n    }\n\n\n    #u-search .modal-header .modal-close {\n        display: block;\n        width: 55px;\n        height: 64px;\n        top: 0;\n        right: 0;\n        color: #2196f3;\n        cursor: pointer;\n        text-align: center;\n        line-height: 64px;\n        vertical-align: middle;\n        transition: all 0.28s ease;\n        -moz-transition: all 0.28s ease;\n        -webkit-transition: all 0.28s ease;\n        -o-transition: all 0.28s ease;\n        z-index: 2;\n        font-size: 22px;\n    }\n\n    #u-search .modal-header .search-loading {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 2px;\n        background: transparent;\n        z-index: 1;\n\n    }\n\n    #u-search .modal-header .search-loading .search-loading-bar {\n        transition: all 0.28s ease;\n        -moz-transition: all 0.28s ease;\n        -webkit-transition: all 0.28s ease;\n        -o-transition: all 0.28s ease;\n        position: relative;\n        display: none;\n        width: 0%;\n        height: 100%;\n        background: #2196f3;\n\n    }\n\n    #u-search .modal .modal-body {\n        padding: 15px;\n        height: calc(100% - 85px);\n        overflow: auto;\n\n    }\n\n    #u-search .modal .modal-body::-webkit-scrollbar{\n        width: 5px;\n        height: 5px;\n        /**/\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-track{\n        background: rgb(239, 239, 239);\n        border-radius:2px;\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-thumb{\n        background: #bfbfbf;\n        border-radius:10px;\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-thumb:hover{\n        background: #333;\n    }\n    #u-search .modal .modal-body::-webkit-scrollbar-corner{\n        background: #179a16;\n    }\n\n    #u-search .modal .modal-body .modal-results {\n        list-style: none;\n        padding-left: 0;\n        margin: 0px;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item {\n        padding: 15px;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item:hover {\n        background: #e8f4fd;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item .result-item-detail {\n        display: flex;\n        flex-direction: column;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item .result-item-detail .title {\n        color: #6e6e6e;\n        font-weight: 700;\n        font-size: 18px;\n        margin-bottom: 10px;\n    }\n\n    #u-search .modal .modal-body .modal-results .result-item .result-item-detail .content {\n        display: block;\n        white-space: inherit;\n        word-break: break-all;\n        text-overflow: ellipsis;\n        font-size: 14px;\n        color: rgba(85,85,85,0.65);\n        letter-spacing: 1px;\n        user-select: none;\n    }\n\n    #u-search .search-keyword {\n        color: #0c7cd5;\n        text-decoration: underline;\n        font-weight: bold;\n        font-style:normal\n    }\n\n    #u-search .modal-body .no-result {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n    }\n\n    #u-search .modal-overlay {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0,0,0,0.7);\n        z-index: 1;\n    }\n\n    @media screen and (max-width: 680px) {\n        #u-search {\n            padding: 0px;\n            display: none;\n        }\n\n        #u-search .modal {\n            box-shadow: none;\n            max-width: none;\n            top: 0;\n            left: 0;\n            margin: 0;\n            height: 100%;\n            border-radius: 0;\n        }\n        #u-search .modal-header {\n            border-radius: 0;\n            padding: 0px;\n        }\n    } \n\n    .modal-active {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n    }\n\n    /* 以下是搜索框 */\n    .search {\n        margin-right: 6px;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n    }\n\n    .search .form-search {\n        padding: 10px 8px;\n    }\n\n    .search .form-search .input {\n        display: block;\n        line-height: 1.3;\n        color: #555;\n        background: #e8e8e8;\n        padding: 5px 8px;\n        box-shadow: none;\n        box-sizing: border-box;\n        font-size: 1rem;\n        border-radius: 8px;\n        border: none;\n        outline: none;\n    }        \n\n    .search .search-btn {\n        width: 22px;\n        height: 22px;\n        line-height: 22px;\n        margin-right: 5px;\n    }\n\n    .search .search-btn .search-btn-img {\n        height: 100%;\n        width: 100%;\n    }\n\n\n    @media screen and (max-width: 479px) {\n\n        .navbar-mobile-right {\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n        }\n\n        .search .search-btn {\n            cursor: pointer;\n        }\n\n        .search .form-search {\n            display: none;\n        }\n\n        .mobile-search {\n            position: absolute;\n            top: 0px;\n            left: 0px;\n            right: 50px;\n            padding-left: 15px;\n            background: #fff;\n            height: 80px;\n            display: flex;\n            flex-direction: row;\n            margin-right: 15px;\n        }\n\n        .mobile-search .form-search {\n            display: block; \n            flex: 1;\n        }\n\n        .mobile-search .input {\n            width: 100%;\n        } \n    }</code></pre>\n</details>\n\n<h3 id=\"增加搜索框\"><a href=\"#增加搜索框\" class=\"headerlink\" title=\"增加搜索框\"></a>增加搜索框</h3><p>我把该文件放在了 <code>Chic/layout/_partial/search.ejs</code></p>\n<pre><code class=\"jsx\">&lt;% if(config.search &amp;&amp; config.search.enable ) { %&gt;\n    &lt;div class=&quot;search &quot;&gt;\n        &lt;div class=&quot;search-btn&quot; onClick=&quot;searchToggle()&quot;&gt;\n            &lt;img src=&quot;&lt;%- url_for(theme.searchImg) %&gt;&quot; class=&quot;search-btn-img&quot; /&gt;\n        &lt;/div&gt;\n        &lt;form class=&quot;form-search&quot;&gt;\n            &lt;input class=&quot;input&quot; placeholder=&quot;搜索文章&quot; autocomplete=&quot;off&quot; id=&quot;&lt;%= name %&gt;-search-input&quot;/&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n&lt;% } %&gt;\n</code></pre>\n<p>我们在 <code>Chic\\layout\\_partial\\header.ejs</code> 添加这个搜索框, 要在<strong>pc的menu, 和mobile的menu</strong>添加,</p>\n<pre><code class=\"js\">&lt;% var defaultName = &#39;pc&#39; %&gt;\n&lt;%- partial(&#39;_partial/search&#39;, { name: defaultName }) %&gt;\n\n// 这里是 mobile 的menu\n&lt;div class=&quot;navbar-mobile-right&quot;&gt;\n    &lt;% var type = &#39;mobile&#39; %&gt;\n    &lt;%- partial(&#39;_partial/search&#39;, { name: type }) %&gt;\n    &lt;div class=&quot;menu-toggle&quot; onclick=&quot;mobileBtn()&quot;&gt;&amp;#9776; 目录&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<h3 id=\"添加搜索框的js-搜索代码\"><a href=\"#添加搜索框的js-搜索代码\" class=\"headerlink\" title=\"添加搜索框的js, 搜索代码\"></a>添加搜索框的js, 搜索代码</h3><p>创建搜索代码</p>\n<details>\n<summary><mark>点击查看代码</mark></summary>\n\n<pre><code class=\"jsx\">&lt;script&gt;\n    function searchToggle() {\n        const width = $(document.body).width()\n        if(width &gt; 479) {\n            return;\n        }\n        const search = $(&#39;.search&#39;);\n        const searchForm = $(&#39;.form-search&#39;)\n\n        if(!search.hasClass(&quot;mobile-search&quot;)) {\n            search.addClass(&quot;mobile-search&quot;);\n        } else {\n            search.removeClass(&quot;mobile-search&quot;);\n        } \n    }\n\n    function search(searchInputEl, formEl, flag) {\n        const path = &quot;&lt;%= config.root %&gt;&quot; + &quot;&lt;%= config.search.path %&gt;&quot;; // 可以在public 下查看这个search.json\n        $(formEl).submit(function(e){\n            e.preventDefault();\n            let target = null\n            if(searchInputEl == null) {\n                const screenWidth = $(document.body).width();\n                target = screenWidth &gt; 479 ? $(&#39;#pc-search-input&#39;) : $(&#39;#mobile-search-input&#39;);\n                console.log(target);\n            } else {\n                target = $(searchInputEl)\n            }\n\n            if(!flag &amp;&amp; target.val() === &#39;&#39;) {\n                return ;\n            }\n\n            $(&quot;#u-search&quot;).fadeIn(500, function() {\n                $(&quot;body &gt; .wrapper&quot;).addClass(&quot;modal-active&quot;);\n\n                $.ajax({\n                    url: path,\n                    dataType: &quot;json&quot;,\n                    beforeSend: function (xhr) {\n                        $input = target.val();\n                        $(&quot;.form-input&quot;).val($input);\n                        const loadingBar = $(&#39;.search-loading-bar&#39;) \n                        loadingBar.css({\n                            width:&#39;100%&#39;,\n                            display: &#39;block&#39;\n                        });\n                    },\n                    success: function( datas ) {\n                        // console.log(datas);\n                        const $resultPanel = $(&quot;.modal-body&quot;)[0];\n                        let str = `&lt;ul class=&quot;modal-results&quot;&gt;`;\n                        var keywords = $(&quot;.form-input&quot;).val().trim().toLowerCase().split(/[\\s\\-]+/);\n                        $resultPanel.innerHTML = &quot;&quot;;\n                        let hasResult = false\n                        let text = `&lt;div class=&quot;no-result&quot;&gt;找不到与关键词相关的内容....&lt;/div&gt;`;\n\n                        if ($(&quot;.form-input&quot;).val().trim().length &lt;= 0) {\n                            // 没有结果\n                            $resultPanel.innerHTML = text;\n                            return;\n                        }\n                        datas.forEach(function (data) {\n                            var isMatch = true;\n                            if (!data.title || data.title.trim() === &#39;&#39;) {\n                                data.title = &quot;Untitled&quot;;\n                            }\n                            var data_title = data.title.trim().toLowerCase();\n                            var data_content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g, &quot;&quot;).toLowerCase();\n                            var data_url = data.url;\n                            var index_title = -1;\n                            var index_content = -1;\n                            var first_occur = -1;\n                            // only match artiles with not empty contents\n                            if (data_content !== &#39;&#39;) {\n                                keywords.forEach(function (keyword, i) {\n                                    index_title = data_title.indexOf(keyword);\n                                    index_content = data_content.indexOf(keyword);\n\n                                    if (index_title &lt; 0 &amp;&amp; index_content &lt; 0) {\n                                        isMatch = false;\n                                    } else {\n                                        hasResult = true\n                                        if (index_content &lt; 0) {\n                                            index_content = 0;\n                                        }\n                                        if (i == 0) {\n                                            first_occur = index_content;\n                                        }\n                                    }\n                                });\n                            } else {\n                                isMatch = false;\n                            }\n                            // show search results\n                            if (isMatch) {\n                                str += `&lt;li class=&#39;result-item&#39;&gt;&lt;a href=&#39;${data_url}&#39; class=&#39;result-item-detail&#39;&gt; &lt;span class=&quot;title&quot;&gt;${data_title}&lt;/span&gt;`;\n                                var content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g, &quot;&quot;);\n                                if (first_occur &gt;= 0) {\n                                    // cut out 200 characters\n                                    var start = first_occur - 40;\n                                    var end = first_occur + 160;\n\n                                    if (start &lt; 0) {\n                                        start = 0;\n                                    }\n\n                                    if (start == 0) {\n                                        end = 200;\n                                    }\n\n                                    if (end &gt; content.length) {\n                                        end = content.length;\n                                    }\n\n                                    var match_content = content.substring(start, end);\n\n                                    // highlight all keywords\n                                    keywords.forEach(function (keyword) {\n                                        var regS = new RegExp(keyword, &quot;gi&quot;);\n                                        match_content = match_content.replace(regS, `&lt;em class=&quot;search-keyword&quot;&gt;${keyword}&lt;/em&gt;`);\n                                    });\n\n                                    str += `&lt;span class=&quot;content&quot;&gt; ${match_content} ...&lt;/span&gt;&lt;/a&gt;`;\n                                }\n                                str += &quot;&lt;/li&gt;&quot;;\n                            }\n                        });\n                        str += &quot;&lt;/ul&gt;&quot;;\n                        if(hasResult) {\n                            $resultPanel.innerHTML = str;\n                        } else {\n                            $resultPanel.innerHTML = text;\n                        }\n\n                    },\n                    complete: function() {\n                        setTimeout(() =&gt; {\n                                const loadingBar = $(&#39;.search-loading-bar&#39;) \n                                loadingBar.css({\n                                    width:&#39;0%&#39;,\n                                    display: &#39;none&#39;\n                                });\n                        }, 300)\n                    }\n                });\n            })\n\n        });\n    }\n\n    $(document).ready(function() {\n        $(&#39;.modal-close&#39;).click(function () { \n            $(&quot;#u-search&quot;).fadeOut();\n            $(&quot;body &gt; .wrapper&quot;).removeClass(&quot;modal-active&quot;)\n        })\n\n        $(&#39;.modal-overlay&#39;).click(function() {\n            $(&quot;#u-search&quot;).fadeOut();\n            $(&quot;body &gt; .wrapper&quot;).removeClass(&quot;modal-active&quot;)\n        })\n        search(null, &quot;.form-search&quot;, false)\n        search(&quot;#u-search-modal-form .form-input&quot;, &quot;.u-search-modal-form&quot;, true)\n    })\n&lt;/script&gt;</code></pre>\n</details>\n\n\n<p>在 <code>themes\\Chic\\layout\\_partial\\head.ejs</code>中添加上面的以下代码，表示启动js</p>\n<pre><code class=\"js\">&lt;%# search %&gt;\n\n&lt;% if(config.search &amp;&amp; config.search.enable ) { %&gt;\n    &lt;%- partial(&#39;_plugins/search.ejs&#39;) %&gt;\n&lt;% } %&gt;\n</code></pre>\n<p>以上就是创建搜索框的全过程了，当然了我上面写的有点乱，可以自行整理一下</p>\n"},{"title":"React Router 源码学习","date":"2022-05-03T10:11:25.000Z","_content":"\n## BrowserRouter\n\n先看一些例子\n\n```jsx\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Layout />}>\n            <Route index element={<Home/>} />\n            <Route path=\"/courses\" element={<CourseLayout />}>\n              <Route index element={<CourseIndex/>} />\n              <Route path=\"/courses/:id\" element={<Course/>} />\n            </Route>\n          </Route>\n          {/* <Route path=\"*\" element={<NotMatch/>} /> */}\n        </Routes>\n      </BrowserRouter>\n    </BrowserRouter>\n  )\n}\n\n```\n\n源码实现\n\n* 使用 `history` 库 创建 `BrowserHistory`\n* 监听当前`history`变化, 即当 url 中的location 发生变化时, 会重新setState\n* 讲这些参数传到`<Router />`组件中， `<Router />` 组件 其实就是包含两个 `provider` 的 context\n\n```jsx\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\n```\n\n* <Router /> 组件简易实现\n\n传下去的children 就是 <Routes />, 后面需要对 `Routes`下的children 进行遍历\n\n```jsx\nconst Router = (props) => {\n  const { \n    basename, \n    children, \n    location: locationProps \n    navigator\n  } = props;\n\n  // 对当前locationProps 做处理，最后返回, 这里我直接用‘’ 表示\n  const location = {\n    pathname: '',\n    search: '',\n    hash: '',\n    state: '',\n    key: '',\n  }\n\n  // navigator 就是 history\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  )\n}\n```\n\n* 再来看 <Routes />\n\n```jsx\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n```\n\n这里说明一下`<Route>` 就是一个空方法，但在下面遍历的时候会判断当前组件是不是`<Route />` 后面也是会直接收集`element` 属性\ncreateRoutesFromChildren 是对<Routes> 进行children 遍历，获取路由，这里会进行递归操作，如果<Route /> 进行嵌套的话，`element.props.children` 就会进行递归遍历\n在遍历过程中会**判断当前组件是不是<Route />，如果不是会报错**\n已上面例子为例： 就会生成以下结果：\n\n```jsx\n[\n  {\n    caseSensitive: '',\n    element: <Layout />,\n    index: '',\n    path: '/',\n    children: [\n      { \n        caseSensitive: '',\n        element: <Home />,\n        index: true,\n        path: undefined,\n      },\n      {\n        caseSensitive: '',\n        element: <CourseLayout />,\n        index: undefined,\n        path: \"/courses\",\n        children: [\n          // 略\n        ]\n      }\n    ]\n  }\n]\n```\n\n```jsx\n\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element) => {\n    if (!React.isValidElement(element)) {\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    // 判断当前children 是不是<Route /> 组件, 如果不是会报错，\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n```\n\n* 在来看 useRoutes 这个hook, 这个hook 生成了一个ReactNode, 是一个 RouterContext.Provider 生成的节点\n\n  * 从上面得到的`routes`列表以及 `url 上的location` 可以得到符合当前地址的所有路由，数组顺序为路由的辈分关系\n  比如上面的 `/courses` 连接, 会得到一下匹配的路由\n\n  ```jsx\n  matches = [\n    {\n      params: {},\n      pathname: \"/\",\n      pathnameBase: \"/\",\n      route: [\n        { \n          caseSensitive: '',\n          element: <Layout />,\n          index: '',\n          path: '/',\n          children: [\n            // 略\n          ]\n        }\n      ]\n    },\n    { \n      params: {},\n      pathname: \"/courses\",\n      pathnameBase: \"/courses\",\n      route: [\n        { \n          caseSensitive: '',\n          element: <CourseLayout />,\n          index: undefined,\n          path: \"/courses\",\n          children: [\n            // 略\n          ]\n        }\n      ]\n    },\n    { \n      params: {},\n      pathname: \"/courses/\",\n      pathnameBase: \"/courses\",\n      route: [\n        { \n          caseSensitive: '',\n          element: <CourseIndex />,\n          index: true,\n          path: undefined,\n        }\n      ]\n    }\n  ]\n  ``` \n\n  * 生成节点, 这里的outlet 可以当做children，在官网上可以用 `<Outlet />` 表示 `children`\n    \n    * 如果有`element`, 那么用`provider` 包裹一下，**注意：这里是从孙子节点到爷爷节点反序构建节点的**\n\n    ```jsx\n    export function _renderMatches(\n      matches: RouteMatch[] | null,\n      parentMatches: RouteMatch[] = []\n    ): React.ReactElement | null {\n      if (matches == null) return null;\n      \n      return matches.reduceRight((outlet, match, index) => {\n        return (\n          <RouteContext.Provider\n            children={\n              match.route.element !== undefined ? match.route.element : outlet\n            }\n            value={{\n              outlet,\n              matches: parentMatches.concat(matches.slice(0, index + 1)),\n            }}\n          />\n        );\n      }, null as React.ReactElement | null);\n    }\n    ```\n    * 可以这么理解\n\n    ```jsx\n    // 第一次\n    let first = (\n      <RouteContext.Provider>\n        children={\n          <CourseIndex />\n        }\n        value={{ \n          outlet: null,\n          matches: matches.slice(0, 3)\n        }}\n      >\n      </RouteContext.Provider>\n    )\n    \n    // 第二次\n    let second = (\n      <RouteContext.Provider>\n        children={\n          <CourseLayout />\n        }\n        value={{ \n          outlet: first,\n          matches: matches.slice(0, 2)\n        }}\n      >\n      </RouteContext.Provider>\n    )\n\n    // 第三次\n     let third = (\n      <RouteContext.Provider>\n        children={\n          <Layout />\n        }\n        value={{ \n          outlet: second,\n          matches: matches.slice(0, 1)\n        }}\n      >\n      </RouteContext.Provider>\n    )\n    ```\n\n## 在嵌套的路由中渲染 children\n\n* [文档地址](https://reactrouter.com/docs/en/v6/api#outlet)\n* 嵌套路由中使用`children`, 是使用 `API` 中的 `<Outlet />`,\n* 我们知道上面在匹配`matches` 的时候, 会进行`<RouteContext.Provider />`封装，同时传递 `outlet` 给他的子组件，那么`<OutLet /> `可以消费他的`context` \n* <Outlet /> 实现\n\n```jsx\nconst OutletContext = React.createContext<unknown>(null);\n\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n```\n\n## Link 组件实现\n\n* Link 其实是用 `<a />` 标签 做的,\n* 当我们传入自定义`onClick` 事件，会在点击时运行，后续会判断一下`event.defaultPrevented`， 表明当前事件是否被调用了，如果没有则调用内置`internalOnClick` 事件\n\n```jsx\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    { onClick, reloadDocument, replace = false, state, target, to, ...rest },\n    ref\n  ) {\n    let href = useHref(to);\n    let internalOnClick = useLinkClickHandler(to, { replace, state, target });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented && !reloadDocument) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      <a\n        {...rest}\n        href={href}\n        onClick={handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n```\n\n`useLinkClickHandler` 的实现\n\n其实就是调用了 `history.push` 或者是 `history.replace` 做跳转\n\n```jsx\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to);\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (\n        // 表示用户点击了鼠标左键\n        event.button === 0 &&\n        (!target || target === \"_self\") &&\n        !isModifiedEvent(event) \n      ) {\n        event.preventDefault();\n\n        // 判断一下当前应该用 history.replace 还是 history.push\n        let replace =\n          !!replaceProp || createPath(location) === createPath(path);\n\n        navigate(to, { replace, state });\n      }\n    },\n    [location, navigate, path, replaceProp, state, target, to]\n  );\n}\n\n```\n\n`useNavigation` 实现\n\n一开始 `<BrowserHistory />` 下的`<Router />` 使用 `<NavigationContext.Provider />` 下发 `navigator`,\n最后返回 `navigate` 方法，实际上就是 `history.replace` 或者是 `history.push`\n\n```jsx\nexport type Navigator = Pick<History, \"go\" | \"push\" | \"replace\" | \"createHref\">;\n```\n\n```jsx\nexport function useNavigate(): NavigateFunction {\n  // 这里拿到 navigator， 实际就是 history， 就是一开始 createBrowserHistory\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n      // 最后这里 进行 history.replace 或者是 history.push\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n```\n\n\n\n","source":"_posts/react-router 学习.md","raw":"---\ntitle: React Router 源码学习\ndate: 2022-05-03 10:11:25\ntags: [react-router]\ncategories: [react-router]\n---\n\n## BrowserRouter\n\n先看一些例子\n\n```jsx\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Layout />}>\n            <Route index element={<Home/>} />\n            <Route path=\"/courses\" element={<CourseLayout />}>\n              <Route index element={<CourseIndex/>} />\n              <Route path=\"/courses/:id\" element={<Course/>} />\n            </Route>\n          </Route>\n          {/* <Route path=\"*\" element={<NotMatch/>} /> */}\n        </Routes>\n      </BrowserRouter>\n    </BrowserRouter>\n  )\n}\n\n```\n\n源码实现\n\n* 使用 `history` 库 创建 `BrowserHistory`\n* 监听当前`history`变化, 即当 url 中的location 发生变化时, 会重新setState\n* 讲这些参数传到`<Router />`组件中， `<Router />` 组件 其实就是包含两个 `provider` 的 context\n\n```jsx\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\n```\n\n* <Router /> 组件简易实现\n\n传下去的children 就是 <Routes />, 后面需要对 `Routes`下的children 进行遍历\n\n```jsx\nconst Router = (props) => {\n  const { \n    basename, \n    children, \n    location: locationProps \n    navigator\n  } = props;\n\n  // 对当前locationProps 做处理，最后返回, 这里我直接用‘’ 表示\n  const location = {\n    pathname: '',\n    search: '',\n    hash: '',\n    state: '',\n    key: '',\n  }\n\n  // navigator 就是 history\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  )\n}\n```\n\n* 再来看 <Routes />\n\n```jsx\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n```\n\n这里说明一下`<Route>` 就是一个空方法，但在下面遍历的时候会判断当前组件是不是`<Route />` 后面也是会直接收集`element` 属性\ncreateRoutesFromChildren 是对<Routes> 进行children 遍历，获取路由，这里会进行递归操作，如果<Route /> 进行嵌套的话，`element.props.children` 就会进行递归遍历\n在遍历过程中会**判断当前组件是不是<Route />，如果不是会报错**\n已上面例子为例： 就会生成以下结果：\n\n```jsx\n[\n  {\n    caseSensitive: '',\n    element: <Layout />,\n    index: '',\n    path: '/',\n    children: [\n      { \n        caseSensitive: '',\n        element: <Home />,\n        index: true,\n        path: undefined,\n      },\n      {\n        caseSensitive: '',\n        element: <CourseLayout />,\n        index: undefined,\n        path: \"/courses\",\n        children: [\n          // 略\n        ]\n      }\n    ]\n  }\n]\n```\n\n```jsx\n\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element) => {\n    if (!React.isValidElement(element)) {\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    // 判断当前children 是不是<Route /> 组件, 如果不是会报错，\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n```\n\n* 在来看 useRoutes 这个hook, 这个hook 生成了一个ReactNode, 是一个 RouterContext.Provider 生成的节点\n\n  * 从上面得到的`routes`列表以及 `url 上的location` 可以得到符合当前地址的所有路由，数组顺序为路由的辈分关系\n  比如上面的 `/courses` 连接, 会得到一下匹配的路由\n\n  ```jsx\n  matches = [\n    {\n      params: {},\n      pathname: \"/\",\n      pathnameBase: \"/\",\n      route: [\n        { \n          caseSensitive: '',\n          element: <Layout />,\n          index: '',\n          path: '/',\n          children: [\n            // 略\n          ]\n        }\n      ]\n    },\n    { \n      params: {},\n      pathname: \"/courses\",\n      pathnameBase: \"/courses\",\n      route: [\n        { \n          caseSensitive: '',\n          element: <CourseLayout />,\n          index: undefined,\n          path: \"/courses\",\n          children: [\n            // 略\n          ]\n        }\n      ]\n    },\n    { \n      params: {},\n      pathname: \"/courses/\",\n      pathnameBase: \"/courses\",\n      route: [\n        { \n          caseSensitive: '',\n          element: <CourseIndex />,\n          index: true,\n          path: undefined,\n        }\n      ]\n    }\n  ]\n  ``` \n\n  * 生成节点, 这里的outlet 可以当做children，在官网上可以用 `<Outlet />` 表示 `children`\n    \n    * 如果有`element`, 那么用`provider` 包裹一下，**注意：这里是从孙子节点到爷爷节点反序构建节点的**\n\n    ```jsx\n    export function _renderMatches(\n      matches: RouteMatch[] | null,\n      parentMatches: RouteMatch[] = []\n    ): React.ReactElement | null {\n      if (matches == null) return null;\n      \n      return matches.reduceRight((outlet, match, index) => {\n        return (\n          <RouteContext.Provider\n            children={\n              match.route.element !== undefined ? match.route.element : outlet\n            }\n            value={{\n              outlet,\n              matches: parentMatches.concat(matches.slice(0, index + 1)),\n            }}\n          />\n        );\n      }, null as React.ReactElement | null);\n    }\n    ```\n    * 可以这么理解\n\n    ```jsx\n    // 第一次\n    let first = (\n      <RouteContext.Provider>\n        children={\n          <CourseIndex />\n        }\n        value={{ \n          outlet: null,\n          matches: matches.slice(0, 3)\n        }}\n      >\n      </RouteContext.Provider>\n    )\n    \n    // 第二次\n    let second = (\n      <RouteContext.Provider>\n        children={\n          <CourseLayout />\n        }\n        value={{ \n          outlet: first,\n          matches: matches.slice(0, 2)\n        }}\n      >\n      </RouteContext.Provider>\n    )\n\n    // 第三次\n     let third = (\n      <RouteContext.Provider>\n        children={\n          <Layout />\n        }\n        value={{ \n          outlet: second,\n          matches: matches.slice(0, 1)\n        }}\n      >\n      </RouteContext.Provider>\n    )\n    ```\n\n## 在嵌套的路由中渲染 children\n\n* [文档地址](https://reactrouter.com/docs/en/v6/api#outlet)\n* 嵌套路由中使用`children`, 是使用 `API` 中的 `<Outlet />`,\n* 我们知道上面在匹配`matches` 的时候, 会进行`<RouteContext.Provider />`封装，同时传递 `outlet` 给他的子组件，那么`<OutLet /> `可以消费他的`context` \n* <Outlet /> 实现\n\n```jsx\nconst OutletContext = React.createContext<unknown>(null);\n\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n```\n\n## Link 组件实现\n\n* Link 其实是用 `<a />` 标签 做的,\n* 当我们传入自定义`onClick` 事件，会在点击时运行，后续会判断一下`event.defaultPrevented`， 表明当前事件是否被调用了，如果没有则调用内置`internalOnClick` 事件\n\n```jsx\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    { onClick, reloadDocument, replace = false, state, target, to, ...rest },\n    ref\n  ) {\n    let href = useHref(to);\n    let internalOnClick = useLinkClickHandler(to, { replace, state, target });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented && !reloadDocument) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      <a\n        {...rest}\n        href={href}\n        onClick={handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n```\n\n`useLinkClickHandler` 的实现\n\n其实就是调用了 `history.push` 或者是 `history.replace` 做跳转\n\n```jsx\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to);\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (\n        // 表示用户点击了鼠标左键\n        event.button === 0 &&\n        (!target || target === \"_self\") &&\n        !isModifiedEvent(event) \n      ) {\n        event.preventDefault();\n\n        // 判断一下当前应该用 history.replace 还是 history.push\n        let replace =\n          !!replaceProp || createPath(location) === createPath(path);\n\n        navigate(to, { replace, state });\n      }\n    },\n    [location, navigate, path, replaceProp, state, target, to]\n  );\n}\n\n```\n\n`useNavigation` 实现\n\n一开始 `<BrowserHistory />` 下的`<Router />` 使用 `<NavigationContext.Provider />` 下发 `navigator`,\n最后返回 `navigate` 方法，实际上就是 `history.replace` 或者是 `history.push`\n\n```jsx\nexport type Navigator = Pick<History, \"go\" | \"push\" | \"replace\" | \"createHref\">;\n```\n\n```jsx\nexport function useNavigate(): NavigateFunction {\n  // 这里拿到 navigator， 实际就是 history， 就是一开始 createBrowserHistory\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n      // 最后这里 进行 history.replace 或者是 history.push\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n```\n\n\n\n","slug":"react-router 学习","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfb0015mroj0p26f1rf","content":"<h2 id=\"BrowserRouter\"><a href=\"#BrowserRouter\" class=\"headerlink\" title=\"BrowserRouter\"></a>BrowserRouter</h2><p>先看一些例子</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BrowserRouter</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BrowserRouter</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Routes</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Route</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">element={&lt;Layout</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Route</span> <span class=\"token attr-name\">index</span> <span class=\"token attr-name\">element={&lt;Home</span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Route</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/courses<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">element={&lt;CourseLayout</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Route</span> <span class=\"token attr-name\">index</span> <span class=\"token attr-name\">element={&lt;CourseIndex</span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Route</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/courses/:id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">element={&lt;Course</span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Route</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Route</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">/* &lt;Route path=\"*\" element={&lt;NotMatch/>} /> */</span><span class=\"token punctuation\">}</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Routes</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>BrowserRouter</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>BrowserRouter</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>源码实现</p>\n<ul>\n<li>使用 <code>history</code> 库 创建 <code>BrowserHistory</code></li>\n<li>监听当前<code>history</code>变化, 即当 url 中的location 发生变化时, 会重新setState</li>\n<li>讲这些参数传到<code>&lt;Router /&gt;</code>组件中， <code>&lt;Router /&gt;</code> 组件 其实就是包含两个 <code>provider</code> 的 context</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">BrowserRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  basename<span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">,</span>\n  window<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> BrowserRouterProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> historyRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>useRef<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BrowserHistory</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>historyRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    historyRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token function\">createBrowserHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> window <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> history <span class=\"token operator\">=</span> historyRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    action<span class=\"token punctuation\">:</span> history<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">,</span>\n    location<span class=\"token punctuation\">:</span> history<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> history<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>setState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>history<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Router</span>\n      <span class=\"token attr-name\">basename</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>basename<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">children</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">location</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">navigationType</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">navigator</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>history<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li><Router> 组件简易实现</Router></li>\n</ul>\n<p>传下去的children 就是 <Routes>, 后面需要对 <code>Routes</code>下的children 进行遍历</Routes></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> \n    basename<span class=\"token punctuation\">,</span> \n    children<span class=\"token punctuation\">,</span> \n    location<span class=\"token punctuation\">:</span> locationProps \n    navigator\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 对当前locationProps 做处理，最后返回, 这里我直接用‘’ 表示</span>\n  <span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    pathname<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    search<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    hash<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    state<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// navigator 就是 history</span>\n  <span class=\"token keyword\">let</span> navigationContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> basename<span class=\"token punctuation\">,</span> navigator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span> staticProp <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>basename<span class=\"token punctuation\">,</span> navigator<span class=\"token punctuation\">,</span> staticProp<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NavigationContext.Provider</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>navigationContext<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LocationContext.Provider</span>\n        <span class=\"token attr-name\">children</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">,</span> navigationType <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NavigationContext.Provider</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>再来看 <Routes></Routes></li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  children<span class=\"token punctuation\">,</span>\n  location<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> RoutesProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useRoutes</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRoutesFromChildren</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>这里说明一下<code>&lt;Route&gt;</code> 就是一个空方法，但在下面遍历的时候会判断当前组件是不是<code>&lt;Route /&gt;</code> 后面也是会直接收集<code>element</code> 属性<br>createRoutesFromChildren 是对<Routes> 进行children 遍历，获取路由，这里会进行递归操作，如果<Route> 进行嵌套的话，<code>element.props.children</code> 就会进行递归遍历<br>在遍历过程中会<strong>判断当前组件是不是<Route>，如果不是会报错</Route></strong><br>已上面例子为例： 就会生成以下结果：</Route></Routes></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    caseSensitive<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    element<span class=\"token punctuation\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Layout</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n    index<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> \n        caseSensitive<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        element<span class=\"token punctuation\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Home</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n        index<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        caseSensitive<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        element<span class=\"token punctuation\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CourseLayout</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n        index<span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/courses\"</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 略</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createRoutesFromChildren</span><span class=\"token punctuation\">(</span>\n  children<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> RouteObject<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> routes<span class=\"token punctuation\">:</span> RouteObject<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">isValidElement</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> React<span class=\"token punctuation\">.</span>Fragment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      routes<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>\n        routes<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">createRoutesFromChildren</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 判断当前children 是不是&lt;Route /> 组件, 如果不是会报错，</span>\n    <span class=\"token function\">invariant</span><span class=\"token punctuation\">(</span>\n      element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> Route<span class=\"token punctuation\">,</span>\n      <span class=\"token template-string\"><span class=\"token string\">`[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        <span class=\"token keyword\">typeof</span> element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">?</span> element<span class=\"token punctuation\">.</span>type <span class=\"token punctuation\">:</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span>name\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] is not a &lt;Route> component. All component children of &lt;Routes> must be a &lt;Route> or &lt;React.Fragment>`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> route<span class=\"token punctuation\">:</span> RouteObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      caseSensitive<span class=\"token punctuation\">:</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>caseSensitive<span class=\"token punctuation\">,</span>\n      element<span class=\"token punctuation\">:</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span>\n      index<span class=\"token punctuation\">:</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span>\n      path<span class=\"token punctuation\">:</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      route<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">createRoutesFromChildren</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    routes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> routes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li><p>在来看 useRoutes 这个hook, 这个hook 生成了一个ReactNode, 是一个 RouterContext.Provider 生成的节点</p>\n<ul>\n<li>从上面得到的<code>routes</code>列表以及 <code>url 上的location</code> 可以得到符合当前地址的所有路由，数组顺序为路由的辈分关系<br>比如上面的 <code>/courses</code> 连接, 会得到一下匹配的路由</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">matches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pathname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    pathnameBase<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    route<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> \n        caseSensitive<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        element<span class=\"token punctuation\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Layout</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n        index<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 略</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> \n    params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pathname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/courses\"</span><span class=\"token punctuation\">,</span>\n    pathnameBase<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/courses\"</span><span class=\"token punctuation\">,</span>\n    route<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> \n        caseSensitive<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        element<span class=\"token punctuation\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CourseLayout</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n        index<span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/courses\"</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 略</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> \n    params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pathname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/courses/\"</span><span class=\"token punctuation\">,</span>\n    pathnameBase<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/courses\"</span><span class=\"token punctuation\">,</span>\n    route<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> \n        caseSensitive<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        element<span class=\"token punctuation\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CourseIndex</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n        index<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<ul>\n<li><p>生成节点, 这里的outlet 可以当做children，在官网上可以用 <code>&lt;Outlet /&gt;</code> 表示 <code>children</code></p>\n<ul>\n<li>如果有<code>element</code>, 那么用<code>provider</code> 包裹一下，<strong>注意：这里是从孙子节点到爷爷节点反序构建节点的</strong></li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">_renderMatches</span><span class=\"token punctuation\">(</span>\n  matches<span class=\"token punctuation\">:</span> RouteMatch<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  parentMatches<span class=\"token punctuation\">:</span> RouteMatch<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matches <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">reduceRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>outlet<span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RouteContext.Provider</span>\n        <span class=\"token attr-name\">children</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>\n          match<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span>element <span class=\"token operator\">!==</span> undefined <span class=\"token operator\">?</span> match<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span>element <span class=\"token punctuation\">:</span> outlet\n        <span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n              outlet<span class=\"token punctuation\">,</span>\n              matches<span class=\"token punctuation\">:</span> parentMatches<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token keyword\">as</span> React<span class=\"token punctuation\">.</span>ReactElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>可以这么理解</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// 第一次</span>\n<span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RouteContext.Provider</span><span class=\"token punctuation\">></span></span>\n    children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CourseIndex</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">}</span>\n    value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> \n          outlet<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n          matches<span class=\"token punctuation\">:</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RouteContext.Provider</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 第二次</span>\n<span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RouteContext.Provider</span><span class=\"token punctuation\">></span></span>\n    children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CourseLayout</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">}</span>\n    value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> \n          outlet<span class=\"token punctuation\">:</span> first<span class=\"token punctuation\">,</span>\n          matches<span class=\"token punctuation\">:</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RouteContext.Provider</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 第三次</span>\n <span class=\"token keyword\">let</span> third <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RouteContext.Provider</span><span class=\"token punctuation\">></span></span>\n    children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Layout</span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">}</span>\n    value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> \n          outlet<span class=\"token punctuation\">:</span> second<span class=\"token punctuation\">,</span>\n          matches<span class=\"token punctuation\">:</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RouteContext.Provider</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"在嵌套的路由中渲染-children\"><a href=\"#在嵌套的路由中渲染-children\" class=\"headerlink\" title=\"在嵌套的路由中渲染 children\"></a>在嵌套的路由中渲染 children</h2><ul>\n<li><a href=\"https://reactrouter.com/docs/en/v6/api#outlet\" target=\"_blank\" rel=\"noopener\">文档地址</a></li>\n<li>嵌套路由中使用<code>children</code>, 是使用 <code>API</code> 中的 <code>&lt;Outlet /&gt;</code>,</li>\n<li>我们知道上面在匹配<code>matches</code> 的时候, 会进行<code>&lt;RouteContext.Provider /&gt;</code>封装，同时传递 <code>outlet</code> 给他的子组件，那么<code>&lt;OutLet /&gt;</code>可以消费他的<code>context</code> </li>\n<li><Outlet> 实现</Outlet></li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> OutletContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>createContext<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>unknown</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Outlet</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> OutletProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useOutlet</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useOutlet</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> unknown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> outlet <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>RouteContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>outlet<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>outlet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutletContext.Provider</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>outlet<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutletContext.Provider</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> outlet<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"Link-组件实现\"><a href=\"#Link-组件实现\" class=\"headerlink\" title=\"Link 组件实现\"></a>Link 组件实现</h2><ul>\n<li>Link 其实是用 <code>&lt;a /&gt;</code> 标签 做的,</li>\n<li>当我们传入自定义<code>onClick</code> 事件，会在点击时运行，后续会判断一下<code>event.defaultPrevented</code>， 表明当前事件是否被调用了，如果没有则调用内置<code>internalOnClick</code> 事件</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Link <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>forwardRef<span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token punctuation\">,</span> LinkProps<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">LinkWithRef</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> reloadDocument<span class=\"token punctuation\">,</span> replace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ref\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> href <span class=\"token operator\">=</span> <span class=\"token function\">useHref</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> internalOnClick <span class=\"token operator\">=</span> <span class=\"token function\">useLinkClickHandler</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> replace<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>\n      event<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token punctuation\">,</span> MouseEvent<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onClick<span class=\"token punctuation\">)</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>event<span class=\"token punctuation\">.</span>defaultPrevented <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>reloadDocument<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">internalOnClick</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>a\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span>\n        href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>href<span class=\"token punctuation\">}</span>\n        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span>\n        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span>\n        target<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>useLinkClickHandler</code> 的实现</p>\n<p>其实就是调用了 <code>history.push</code> 或者是 <code>history.replace</code> 做跳转</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> useLinkClickHandler<span class=\"token operator\">&lt;</span>E <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Element</span> <span class=\"token operator\">=</span> HTMLAnchorElement<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  to<span class=\"token punctuation\">:</span> To<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    target<span class=\"token punctuation\">,</span>\n    replace<span class=\"token punctuation\">:</span> replaceProp<span class=\"token punctuation\">,</span>\n    state<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    target<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>HTMLAttributeAnchorTarget<span class=\"token punctuation\">;</span>\n    replace<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">;</span>\n    state<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span> MouseEvent<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> navigate <span class=\"token operator\">=</span> <span class=\"token function\">useNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> location <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token function\">useResolvedPath</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token operator\">&lt;</span>E<span class=\"token punctuation\">,</span> MouseEvent<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 表示用户点击了鼠标左键</span>\n        event<span class=\"token punctuation\">.</span>button <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>target <span class=\"token operator\">||</span> target <span class=\"token operator\">===</span> <span class=\"token string\">\"_self\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token operator\">!</span><span class=\"token function\">isModifiedEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> \n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 判断一下当前应该用 history.replace 还是 history.push</span>\n        <span class=\"token keyword\">let</span> replace <span class=\"token operator\">=</span>\n          <span class=\"token operator\">!</span><span class=\"token operator\">!</span>replaceProp <span class=\"token operator\">||</span> <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> replace<span class=\"token punctuation\">,</span> state <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>location<span class=\"token punctuation\">,</span> navigate<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> replaceProp<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>useNavigation</code> 实现</p>\n<p>一开始 <code>&lt;BrowserHistory /&gt;</code> 下的<code>&lt;Router /&gt;</code> 使用 <code>&lt;NavigationContext.Provider /&gt;</code> 下发 <code>navigator</code>,<br>最后返回 <code>navigate</code> 方法，实际上就是 <code>history.replace</code> 或者是 <code>history.push</code></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> type Navigator <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>History<span class=\"token punctuation\">,</span> <span class=\"token string\">\"go\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"push\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"replace\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"createHref\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NavigateFunction <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 这里拿到 navigator， 实际就是 history， 就是一开始 createBrowserHistory</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> basename<span class=\"token punctuation\">,</span> navigator <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>NavigationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> matches <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>RouteContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> pathname<span class=\"token punctuation\">:</span> locationPathname <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> routePathnamesJson <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>\n    matches<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> match<span class=\"token punctuation\">.</span>pathnameBase<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> activeRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    activeRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> navigate<span class=\"token punctuation\">:</span> NavigateFunction <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> To <span class=\"token operator\">|</span> number<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> NavigateOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>activeRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> to <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        navigator<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token function\">resolveTo</span><span class=\"token punctuation\">(</span>\n        to<span class=\"token punctuation\">,</span>\n        JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>routePathnamesJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        locationPathname\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>basename <span class=\"token operator\">!==</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span>pathname <span class=\"token operator\">=</span> <span class=\"token function\">joinPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>basename<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 最后这里 进行 history.replace 或者是 history.push</span>\n      <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>replace <span class=\"token operator\">?</span> navigator<span class=\"token punctuation\">.</span>replace <span class=\"token punctuation\">:</span> navigator<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n        path<span class=\"token punctuation\">,</span>\n        options<span class=\"token punctuation\">.</span>state\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>basename<span class=\"token punctuation\">,</span> navigator<span class=\"token punctuation\">,</span> routePathnamesJson<span class=\"token punctuation\">,</span> locationPathname<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> navigate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"BrowserRouter\"><a href=\"#BrowserRouter\" class=\"headerlink\" title=\"BrowserRouter\"></a>BrowserRouter</h2><p>先看一些例子</p>\n<pre><code class=\"jsx\">const App = () =&gt; {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;BrowserRouter&gt;\n        &lt;Routes&gt;\n          &lt;Route path=&quot;/&quot; element={&lt;Layout /&gt;}&gt;\n            &lt;Route index element={&lt;Home/&gt;} /&gt;\n            &lt;Route path=&quot;/courses&quot; element={&lt;CourseLayout /&gt;}&gt;\n              &lt;Route index element={&lt;CourseIndex/&gt;} /&gt;\n              &lt;Route path=&quot;/courses/:id&quot; element={&lt;Course/&gt;} /&gt;\n            &lt;/Route&gt;\n          &lt;/Route&gt;\n          {/* &lt;Route path=&quot;*&quot; element={&lt;NotMatch/&gt;} /&gt; */}\n        &lt;/Routes&gt;\n      &lt;/BrowserRouter&gt;\n    &lt;/BrowserRouter&gt;\n  )\n}\n</code></pre>\n<p>源码实现</p>\n<ul>\n<li>使用 <code>history</code> 库 创建 <code>BrowserHistory</code></li>\n<li>监听当前<code>history</code>变化, 即当 url 中的location 发生变化时, 会重新setState</li>\n<li>讲这些参数传到<code>&lt;Router /&gt;</code>组件中， <code>&lt;Router /&gt;</code> 组件 其实就是包含两个 <code>provider</code> 的 context</li>\n</ul>\n<pre><code class=\"jsx\">export function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef&lt;BrowserHistory&gt;();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() =&gt; history.listen(setState), [history]);\n\n  return (\n    &lt;Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    /&gt;\n  );\n}\n</code></pre>\n<ul>\n<li><Router> 组件简易实现</Router></li>\n</ul>\n<p>传下去的children 就是 <Routes>, 后面需要对 <code>Routes</code>下的children 进行遍历</Routes></p>\n<pre><code class=\"jsx\">const Router = (props) =&gt; {\n  const { \n    basename, \n    children, \n    location: locationProps \n    navigator\n  } = props;\n\n  // 对当前locationProps 做处理，最后返回, 这里我直接用‘’ 表示\n  const location = {\n    pathname: &#39;&#39;,\n    search: &#39;&#39;,\n    hash: &#39;&#39;,\n    state: &#39;&#39;,\n    key: &#39;&#39;,\n  }\n\n  // navigator 就是 history\n  let navigationContext = React.useMemo(\n    () =&gt; ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  return (\n    &lt;NavigationContext.Provider value={navigationContext}&gt;\n      &lt;LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      /&gt;\n    &lt;/NavigationContext.Provider&gt;\n  )\n}</code></pre>\n<ul>\n<li>再来看 <Routes></Routes></li>\n</ul>\n<pre><code class=\"jsx\">export function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}</code></pre>\n<p>这里说明一下<code>&lt;Route&gt;</code> 就是一个空方法，但在下面遍历的时候会判断当前组件是不是<code>&lt;Route /&gt;</code> 后面也是会直接收集<code>element</code> 属性<br>createRoutesFromChildren 是对<Routes> 进行children 遍历，获取路由，这里会进行递归操作，如果<Route> 进行嵌套的话，<code>element.props.children</code> 就会进行递归遍历<br>在遍历过程中会<strong>判断当前组件是不是<Route>，如果不是会报错</Route></strong><br>已上面例子为例： 就会生成以下结果：</Route></Routes></p>\n<pre><code class=\"jsx\">[\n  {\n    caseSensitive: &#39;&#39;,\n    element: &lt;Layout /&gt;,\n    index: &#39;&#39;,\n    path: &#39;/&#39;,\n    children: [\n      { \n        caseSensitive: &#39;&#39;,\n        element: &lt;Home /&gt;,\n        index: true,\n        path: undefined,\n      },\n      {\n        caseSensitive: &#39;&#39;,\n        element: &lt;CourseLayout /&gt;,\n        index: undefined,\n        path: &quot;/courses&quot;,\n        children: [\n          // 略\n        ]\n      }\n    ]\n  }\n]</code></pre>\n<pre><code class=\"jsx\">\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element) =&gt; {\n    if (!React.isValidElement(element)) {\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    // 判断当前children 是不是&lt;Route /&gt; 组件, 如果不是会报错，\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === &quot;string&quot; ? element.type : element.type.name\n      }] is not a &lt;Route&gt; component. All component children of &lt;Routes&gt; must be a &lt;Route&gt; or &lt;React.Fragment&gt;`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n</code></pre>\n<ul>\n<li><p>在来看 useRoutes 这个hook, 这个hook 生成了一个ReactNode, 是一个 RouterContext.Provider 生成的节点</p>\n<ul>\n<li>从上面得到的<code>routes</code>列表以及 <code>url 上的location</code> 可以得到符合当前地址的所有路由，数组顺序为路由的辈分关系<br>比如上面的 <code>/courses</code> 连接, 会得到一下匹配的路由</li>\n</ul>\n<pre><code class=\"jsx\">matches = [\n  {\n    params: {},\n    pathname: &quot;/&quot;,\n    pathnameBase: &quot;/&quot;,\n    route: [\n      { \n        caseSensitive: &#39;&#39;,\n        element: &lt;Layout /&gt;,\n        index: &#39;&#39;,\n        path: &#39;/&#39;,\n        children: [\n          // 略\n        ]\n      }\n    ]\n  },\n  { \n    params: {},\n    pathname: &quot;/courses&quot;,\n    pathnameBase: &quot;/courses&quot;,\n    route: [\n      { \n        caseSensitive: &#39;&#39;,\n        element: &lt;CourseLayout /&gt;,\n        index: undefined,\n        path: &quot;/courses&quot;,\n        children: [\n          // 略\n        ]\n      }\n    ]\n  },\n  { \n    params: {},\n    pathname: &quot;/courses/&quot;,\n    pathnameBase: &quot;/courses&quot;,\n    route: [\n      { \n        caseSensitive: &#39;&#39;,\n        element: &lt;CourseIndex /&gt;,\n        index: true,\n        path: undefined,\n      }\n    ]\n  }\n]</code></pre>\n<ul>\n<li><p>生成节点, 这里的outlet 可以当做children，在官网上可以用 <code>&lt;Outlet /&gt;</code> 表示 <code>children</code></p>\n<ul>\n<li>如果有<code>element</code>, 那么用<code>provider</code> 包裹一下，<strong>注意：这里是从孙子节点到爷爷节点反序构建节点的</strong></li>\n</ul>\n<pre><code class=\"jsx\">export function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = []\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  return matches.reduceRight((outlet, match, index) =&gt; {\n    return (\n      &lt;RouteContext.Provider\n        children={\n          match.route.element !== undefined ? match.route.element : outlet\n        }\n        value={{\n              outlet,\n              matches: parentMatches.concat(matches.slice(0, index + 1)),\n            }}\n      /&gt;\n    );\n  }, null as React.ReactElement | null);\n}</code></pre>\n<ul>\n<li>可以这么理解</li>\n</ul>\n<pre><code class=\"jsx\">// 第一次\nlet first = (\n  &lt;RouteContext.Provider&gt;\n    children={\n      &lt;CourseIndex /&gt;\n    }\n    value={{ \n          outlet: null,\n          matches: matches.slice(0, 3)\n        }}\n  &gt;\n  &lt;/RouteContext.Provider&gt;\n)\n\n// 第二次\nlet second = (\n  &lt;RouteContext.Provider&gt;\n    children={\n      &lt;CourseLayout /&gt;\n    }\n    value={{ \n          outlet: first,\n          matches: matches.slice(0, 2)\n        }}\n  &gt;\n  &lt;/RouteContext.Provider&gt;\n)\n\n// 第三次\n let third = (\n  &lt;RouteContext.Provider&gt;\n    children={\n      &lt;Layout /&gt;\n    }\n    value={{ \n          outlet: second,\n          matches: matches.slice(0, 1)\n        }}\n  &gt;\n  &lt;/RouteContext.Provider&gt;\n)</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"在嵌套的路由中渲染-children\"><a href=\"#在嵌套的路由中渲染-children\" class=\"headerlink\" title=\"在嵌套的路由中渲染 children\"></a>在嵌套的路由中渲染 children</h2><ul>\n<li><a href=\"https://reactrouter.com/docs/en/v6/api#outlet\" target=\"_blank\" rel=\"noopener\">文档地址</a></li>\n<li>嵌套路由中使用<code>children</code>, 是使用 <code>API</code> 中的 <code>&lt;Outlet /&gt;</code>,</li>\n<li>我们知道上面在匹配<code>matches</code> 的时候, 会进行<code>&lt;RouteContext.Provider /&gt;</code>封装，同时传递 <code>outlet</code> 给他的子组件，那么<code>&lt;OutLet /&gt;</code>可以消费他的<code>context</code> </li>\n<li><Outlet> 实现</Outlet></li>\n</ul>\n<pre><code class=\"jsx\">const OutletContext = React.createContext&lt;unknown&gt;(null);\n\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      &lt;OutletContext.Provider value={context}&gt;{outlet}&lt;/OutletContext.Provider&gt;\n    );\n  }\n  return outlet;\n}</code></pre>\n<h2 id=\"Link-组件实现\"><a href=\"#Link-组件实现\" class=\"headerlink\" title=\"Link 组件实现\"></a>Link 组件实现</h2><ul>\n<li>Link 其实是用 <code>&lt;a /&gt;</code> 标签 做的,</li>\n<li>当我们传入自定义<code>onClick</code> 事件，会在点击时运行，后续会判断一下<code>event.defaultPrevented</code>， 表明当前事件是否被调用了，如果没有则调用内置<code>internalOnClick</code> 事件</li>\n</ul>\n<pre><code class=\"jsx\">export const Link = React.forwardRef&lt;HTMLAnchorElement, LinkProps&gt;(\n  function LinkWithRef(\n    { onClick, reloadDocument, replace = false, state, target, to, ...rest },\n    ref\n  ) {\n    let href = useHref(to);\n    let internalOnClick = useLinkClickHandler(to, { replace, state, target });\n    function handleClick(\n      event: React.MouseEvent&lt;HTMLAnchorElement, MouseEvent&gt;\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented &amp;&amp; !reloadDocument) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      &lt;a\n        {...rest}\n        href={href}\n        onClick={handleClick}\n        ref={ref}\n        target={target}\n      /&gt;\n    );\n  }\n);</code></pre>\n<p><code>useLinkClickHandler</code> 的实现</p>\n<p>其实就是调用了 <code>history.push</code> 或者是 <code>history.replace</code> 做跳转</p>\n<pre><code class=\"jsx\">export function useLinkClickHandler&lt;E extends Element = HTMLAnchorElement&gt;(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n  } = {}\n): (event: React.MouseEvent&lt;E, MouseEvent&gt;) =&gt; void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to);\n\n  return React.useCallback(\n    (event: React.MouseEvent&lt;E, MouseEvent&gt;) =&gt; {\n      if (\n        // 表示用户点击了鼠标左键\n        event.button === 0 &amp;&amp;\n        (!target || target === &quot;_self&quot;) &amp;&amp;\n        !isModifiedEvent(event) \n      ) {\n        event.preventDefault();\n\n        // 判断一下当前应该用 history.replace 还是 history.push\n        let replace =\n          !!replaceProp || createPath(location) === createPath(path);\n\n        navigate(to, { replace, state });\n      }\n    },\n    [location, navigate, path, replaceProp, state, target, to]\n  );\n}\n</code></pre>\n<p><code>useNavigation</code> 实现</p>\n<p>一开始 <code>&lt;BrowserHistory /&gt;</code> 下的<code>&lt;Router /&gt;</code> 使用 <code>&lt;NavigationContext.Provider /&gt;</code> 下发 <code>navigator</code>,<br>最后返回 <code>navigate</code> 方法，实际上就是 <code>history.replace</code> 或者是 <code>history.push</code></p>\n<pre><code class=\"jsx\">export type Navigator = Pick&lt;History, &quot;go&quot; | &quot;push&quot; | &quot;replace&quot; | &quot;createHref&quot;&gt;;</code></pre>\n<pre><code class=\"jsx\">export function useNavigate(): NavigateFunction {\n  // 这里拿到 navigator， 实际就是 history， 就是一开始 createBrowserHistory\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) =&gt; match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() =&gt; {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) =&gt; {\n\n      if (!activeRef.current) return;\n\n      if (typeof to === &quot;number&quot;) {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== &quot;/&quot;) {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n      // 最后这里 进行 history.replace 或者是 history.push\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}</code></pre>\n"},{"title":"React基础","date":"2020-07-21T10:11:25.000Z","_content":"\n## React 创建组件的方式\n\n* React.creactClass (已弃用)\n* Class 的方式创建组件\n* 纯函数的方式创建组件，即我们常说的Function Component\n\n这里主要介绍Class 跟 Function Component 两种方式\n\n\n### Class\n\nclass 是有生命周期的概念的\n\n* 挂载的时候的生命周期： constructor ->  render -> componentDidMount \n* 更新时的生命周期： getDerivedStateFromProps -> shouldComponentUpdate ->  render -> componentDidUpdate\n\n\n```jsx\nimport React, { Component, PureComponent } from 'react';\nClass Home extends Component {\n     constructor(props) {\n        super(props);\n        this.state = {\n            count: 1\n        }\n    }\n\n    /**\n     * 一般我们这里会做数据请求\n     */\n    componentDidMount() {}\n\n    componentDidUpdate() {}\n\n    /**\n     * \n     * 这里一般我们会做一些优化， 比如减少重复渲染。\n     * 父组件的state修改的话，会引起子组件的重新render, 但是当前子组件并没有依赖这个state，就可以用这个函数判断了\n     * 要是优化的话 可以使用 PureComponent , 她会会我们的props 进行浅比较\n     * @return boolean\n     */\n    shouldComponentUpdate(nextProps, nextState) {}\n\n    /**\n     * 这个生命周期时组件准备卸载了\n     * 这里可以对一些定时器，订阅等等做取消  \n     */\n    componentWillUnmount() {}\n\n    /**\n     * 这个方法无论是props 更新或者state更新都会进入到这个静态函数\n     * 返回一个对象， 当前的对象就是state，\n     * 如果返回null，那不对state做任何操作\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {}\n\n    add = () => {\n        // 要注意的是 这个setState 修改的state 并不是立刻修改的，\n        this.setState({\n            count: this.state.count + 1\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <div>state: {this.state.count}</div>\n                <div onClick={this.add}>+</div>\n\n                <div>props: {this.props.value}</div>\n            </>\n        )\n    }\n}\n```\n\n**注意： 在class 组件下 只能够用setState 去修改state的数据**， 它不像vue 那样可以直接修改数据。\n\n#### setState\n\nsetState 有两个参数， 一般我们会这么写\n```jsx\n// 一般我们会这么写\nthis.setState({\n    str: '123'\n})\n\n// 但实际上callback 还有另一个参数, callback\nthis.setState({\n    str: '123'\n}, () => {\n    console.log(\"callback\")\n}}\n\n// 另外我们setState 也可以用方法\nthis.setState((prevState) => ({\n    count: prevState.count + 1\n}))\n\n```\n\n\n#### props\n\n`react` 的 props 跟 `vue` 的 props 的传递方式大致一样，也是从父组件传props\n\n```js\n<Home value=\"hello world\">\n```\n\n## 高级用法\n\n### HOC\n\nHOC 就是一个高阶组件， 简单说就是传入一个组件， 返回一个组件的函数。它可以做到以下几点\n\n* 劫持渲染\n* 劫持props\n\n\n```jsx\n// 比如一个简单的loading组件， 当你要为你已经写过的组件增加一个loading状态的时候，此时可以用HOC\nconst HOC = (Component) => {\n    return class extends Component {\n         render() {\n            const { loading, ...rest } = this.props;\n\n            if(!loading) return \"loading...\";\n            return <WrappedComponent {...rest} />\n        }\n    }\n}\n\n// 使用\nconst EnhanceHoc = HOC(Home);\n\n```\n\n### render Props\n\n用的比较多的一种方式是Mdoal 框 或者 Drawer ， 虽然有很多UI 框架帮我们封装好Modal框，但有时候还要写visible, 关闭方法等等，就有点烦，这时候就可以用render Props\n\n```jsx\nconst CustomModal = ({visible, cancel}) => {\n    return (\n        <Modal visible={visible} onCancel={cancel} >\n            Hello World\n        </Modal>\n    )\n}\n```\n\n```jsx\n// modalContainer实现\nclass ModalContainer extends Component {\n    state = {\n        visible: false\n    }\n\n    handleCancel = () => {\n        this.setState({\n            visible: false\n        })\n    }\n\n    show = () => {\n        this.setState({\n            visible: true\n        })\n    }\n\n    render() {\n        const { visible } = this.state;\n        const { children } = this.props;\n        return (\n            children({\n                visible: visible,\n                show: this.show,\n                cancel: this.handleCancel\n            })\n        )\n    }\n}\n```\n\n```js\n//使用\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <ModalContainer>\n                    ({visible, show, cancel}) => (\n                        <>\n                            <CustomModal visible={visible} cancel={cancel}></CustomModal>\n                            <Button type=\"primary\" onClick={show}>\n                                Click\n                            </Button>\n                        </>\n                    )\n                </ModalContainer>\n            </div>\n        )\n    }\n}\n```\n\n\n## react Hooks\n\n### useState\n\n简单说 类似class 组件上面的 this.setState\n\n```jsx\nconst Home = () => {\n    // useState 的参数可以是简单类型， 也可以是方法\n    const [count, setCount] = useState(0);\n    const [toggle, setToggle] = useState(false);\n    const increment = () => {\n        setCount(count++);\n    }\n    const handleToggle = () => {\n        // setToggled 参数也可以用function\n        // setToggle((prevState) => nextState);\n        setToggled(toggled => !toggled);\n    }\n\n    return (\n        <>\n            <button onClick={increment}></button>\n            <div>{count}</div>\n            <div onClick={handleToggle}>{toggle}</div>\n        </>\n    )\n}\n```\n\n### useEffect\n\n在Function  Component 中, 是没有 生命周期的概念的，那么请求数据的时候就用到了useEffect, \n但是useEffect 其实包含3个生命周期 `componentDidMount`, `componentDidUpdate`, `componentWillUnmount`\n**注意： 不能在 if/else 或者是for循环中使用useEffect**\n\n```jsx\nconst Home = () => {\n    const [loading, setLoading] = useState(false);\n   \n\n    /**\n     * useEffect 提供两个参数， 一个是回调函数， 一个是依赖数组，\n     * 当第二参数不填的时候， 一旦state变化的时候， 就会执行这个函数\n     * 当第二个参数为 [] 空数组时， 就等同于 class组件的 componentDidMount\n     * 当第二个参数为[loading]， 代表只有loading 发生变化是，回调函数才会执行\n    */\n\n    useEffect(() => {\n        // 函数执行\n       \n       return () => {}\n    }, [])\n\n    return (\n        <>\n            <button onClick={increment}></button>\n            <div>{count}</div>\n            <div onClick={handleToggle}>{toggle}</div>\n        </>\n    )\n}\n```\n\n### useCallBack\n\nuseCallback 简单来说就是对我们的方法，进行缓存，达到一个性能优化的效果\n用的最多场景的是从父组件传方法给子组件，这时就可以用useCallback 了\n\n子组件onChange调用了父组件的handleOnChange\n父组件handleOnChange内部会执行setText(e.target.value)引起父组件更新\n父组件更新会得到新的handleOnChange，传递给子组件，对于子组件来说接收到一个新的props\n子组件进行不必要更新\n\n\n```jsx\nconst Child = React.memo((props) => {\n  console.log(props);\n\n  return (\n    <div>\n      <input type=\"text\" onChange={props.onChange}/>\n    </div>\n  )\n})\n\nconst Parent = () => {\n  const [count, setCount] = useState(0)\n  const [text, setText] = useState('')\n\n  const handleOnChange = useCallback((e) => {\n    setText(e.target.value)\n  },[])\n\n  return (\n    <div>\n      <div>count: {count}</div>\n      <div>text: {text}</div>\n      <button onClick={() => setCount(count + 1)}>+1</button>\n      <Child onChange={handleOnChange} />\n    </div>\n  )\n}\n```\n\n[demo](https://codesandbox.io/s/amazing-darkness-20tc3?file=/src/App.js:79-231)\n\n上面例子可以看到父组件虽然更新了，但子组件没有重新render\n\n但注意的是 有时候useCallback 也会有可能触发无限循环。 用ruseReducer（解决）\n\n\n### useMemo\n\n跟useCallback 差不多，但是useCallback 缓存函数， useMemo 缓存值， 有点像 `vue`的 `computed`\n\n### useRef\n\n是一个一直会变的对象，他有一个`.current` 属性，可以保存dom, 可以是方法，等等\n\n### useReducer\n\n这个其实跟redux 的reducer 有点相似，在定义的state之后，只能通过`dispatch` 触发对应的reducer事件（Actions）更新state\n简单理解 ：\n\n```html\n       state -> UI -> 用户触发事件 执行action \n         ^                 |\n         |                 |\n         ------------------\n```\n\n[看看官方的例子吧!](https://react.docschina.org/docs/hooks-reference.html#usereducer)\n\n\n### useContext\n\n```jsx\nimport React, { createContext, useContext, useState } from \"react\";\n\nconst MenuContext = createContext({\n  index: 0\n});\n\nexport default function App() {\n  return (\n    <div>\n      <Menu defaultIndex={0}>\n        <MenuItem index={0}>menu1</MenuItem>\n        <MenuItem index={1}>menu2</MenuItem>\n        <MenuItem index={2}> menu3</MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nconst Menu = (props) => {\n  const { defaultIndex, onSelect } = props;\n  const [currentActive, setActive] = useState(defaultIndex);\n  const handleClick = (index) => {\n    setActive(index);\n    if (onSelect) {\n      onSelect(index);\n    }\n  };\n  const Icontext = {\n    index: currentActive || 0,\n    onSelect: handleClick\n  };\n\n\n  return (\n    <ul>\n      <MenuContext.Provider value={Icontext}>\n        {props.children}\n      </MenuContext.Provider>\n    </ul>\n  );\n};\n\nconst MenuItem = (props) => {\n  const { children, index } = props;\n  const itemContext = useContext(MenuContext);\n  const handleClick = () => {\n    if (itemContext.onSelect) {\n      itemContext.onSelect(index);\n    }\n  };\n  return (\n    <li onClick={handleClick}>\n      {itemContext.index === index ? <a>active </a> : null}\n\n      {children}\n    </li>\n  );\n};\n\n```\n\n[测试一下](https://codesandbox.io/s/wandering-shape-szhw2?file=/src/App.js:0-1221)\n\n\n#### 进阶 自动配置index\n\n就是 `React.Children.map` ，以及`React.cloneElement`\n\n```jsx\nimport React, { createContext, useContext, useState } from \"react\";\n\nconst MenuContext = createContext({\n  index: 0\n});\n\nexport default function App() {\n  return (\n    <div>\n      <Menu defaultIndex={0}>\n        <MenuItem>menu1</MenuItem>\n        <MenuItem>menu2</MenuItem>\n        <MenuItem> menu3</MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nconst Menu = (props) => {\n  const { defaultIndex, onSelect } = props;\n  const [currentActive, setActive] = useState(defaultIndex);\n  const handleClick = (index) => {\n    setActive(index);\n    if (onSelect) {\n      onSelect(index);\n    }\n  };\n  const Icontext = {\n    index: currentActive || 0,\n    onSelect: handleClick\n  };\n\n  const childrenRender = () => {\n    return React.Children.map(props.children, (child, index) => {\n      if (child.type.displayName === \"MenuItem\") {\n        return React.cloneElement(child, { index: index });\n      }\n    });\n  };\n\n  return (\n    <ul>\n      <MenuContext.Provider value={Icontext}>\n        {childrenRender()}\n      </MenuContext.Provider>\n    </ul>\n  );\n};\n\nconst MenuItem = (props) => {\n  const { children, index } = props;\n  const itemContext = useContext(MenuContext);\n  const handleClick = () => {\n    if (itemContext.onSelect) {\n      itemContext.onSelect(index);\n    }\n  };\n  return (\n    <li onClick={handleClick}>\n      {itemContext.index === index ? <a>active </a> : null}\n\n      {children}\n    </li>\n  );\n};\n\nMenuItem.displayName = \"MenuItem\";\n\n```\n\n[测试一下](https://codesandbox.io/s/gallant-sky-hqgcq?file=/src/App.js);\n\n[hooks学习](https://usehooks.com/)\n\n## redux, mobx\n\n余着\n\n","source":"_posts/react基础.md","raw":"---\ntitle: React基础\ndate: 2020-07-21 10:11:25\ntags: [react]\ncategories: [react]\n---\n\n## React 创建组件的方式\n\n* React.creactClass (已弃用)\n* Class 的方式创建组件\n* 纯函数的方式创建组件，即我们常说的Function Component\n\n这里主要介绍Class 跟 Function Component 两种方式\n\n\n### Class\n\nclass 是有生命周期的概念的\n\n* 挂载的时候的生命周期： constructor ->  render -> componentDidMount \n* 更新时的生命周期： getDerivedStateFromProps -> shouldComponentUpdate ->  render -> componentDidUpdate\n\n\n```jsx\nimport React, { Component, PureComponent } from 'react';\nClass Home extends Component {\n     constructor(props) {\n        super(props);\n        this.state = {\n            count: 1\n        }\n    }\n\n    /**\n     * 一般我们这里会做数据请求\n     */\n    componentDidMount() {}\n\n    componentDidUpdate() {}\n\n    /**\n     * \n     * 这里一般我们会做一些优化， 比如减少重复渲染。\n     * 父组件的state修改的话，会引起子组件的重新render, 但是当前子组件并没有依赖这个state，就可以用这个函数判断了\n     * 要是优化的话 可以使用 PureComponent , 她会会我们的props 进行浅比较\n     * @return boolean\n     */\n    shouldComponentUpdate(nextProps, nextState) {}\n\n    /**\n     * 这个生命周期时组件准备卸载了\n     * 这里可以对一些定时器，订阅等等做取消  \n     */\n    componentWillUnmount() {}\n\n    /**\n     * 这个方法无论是props 更新或者state更新都会进入到这个静态函数\n     * 返回一个对象， 当前的对象就是state，\n     * 如果返回null，那不对state做任何操作\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {}\n\n    add = () => {\n        // 要注意的是 这个setState 修改的state 并不是立刻修改的，\n        this.setState({\n            count: this.state.count + 1\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <div>state: {this.state.count}</div>\n                <div onClick={this.add}>+</div>\n\n                <div>props: {this.props.value}</div>\n            </>\n        )\n    }\n}\n```\n\n**注意： 在class 组件下 只能够用setState 去修改state的数据**， 它不像vue 那样可以直接修改数据。\n\n#### setState\n\nsetState 有两个参数， 一般我们会这么写\n```jsx\n// 一般我们会这么写\nthis.setState({\n    str: '123'\n})\n\n// 但实际上callback 还有另一个参数, callback\nthis.setState({\n    str: '123'\n}, () => {\n    console.log(\"callback\")\n}}\n\n// 另外我们setState 也可以用方法\nthis.setState((prevState) => ({\n    count: prevState.count + 1\n}))\n\n```\n\n\n#### props\n\n`react` 的 props 跟 `vue` 的 props 的传递方式大致一样，也是从父组件传props\n\n```js\n<Home value=\"hello world\">\n```\n\n## 高级用法\n\n### HOC\n\nHOC 就是一个高阶组件， 简单说就是传入一个组件， 返回一个组件的函数。它可以做到以下几点\n\n* 劫持渲染\n* 劫持props\n\n\n```jsx\n// 比如一个简单的loading组件， 当你要为你已经写过的组件增加一个loading状态的时候，此时可以用HOC\nconst HOC = (Component) => {\n    return class extends Component {\n         render() {\n            const { loading, ...rest } = this.props;\n\n            if(!loading) return \"loading...\";\n            return <WrappedComponent {...rest} />\n        }\n    }\n}\n\n// 使用\nconst EnhanceHoc = HOC(Home);\n\n```\n\n### render Props\n\n用的比较多的一种方式是Mdoal 框 或者 Drawer ， 虽然有很多UI 框架帮我们封装好Modal框，但有时候还要写visible, 关闭方法等等，就有点烦，这时候就可以用render Props\n\n```jsx\nconst CustomModal = ({visible, cancel}) => {\n    return (\n        <Modal visible={visible} onCancel={cancel} >\n            Hello World\n        </Modal>\n    )\n}\n```\n\n```jsx\n// modalContainer实现\nclass ModalContainer extends Component {\n    state = {\n        visible: false\n    }\n\n    handleCancel = () => {\n        this.setState({\n            visible: false\n        })\n    }\n\n    show = () => {\n        this.setState({\n            visible: true\n        })\n    }\n\n    render() {\n        const { visible } = this.state;\n        const { children } = this.props;\n        return (\n            children({\n                visible: visible,\n                show: this.show,\n                cancel: this.handleCancel\n            })\n        )\n    }\n}\n```\n\n```js\n//使用\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <ModalContainer>\n                    ({visible, show, cancel}) => (\n                        <>\n                            <CustomModal visible={visible} cancel={cancel}></CustomModal>\n                            <Button type=\"primary\" onClick={show}>\n                                Click\n                            </Button>\n                        </>\n                    )\n                </ModalContainer>\n            </div>\n        )\n    }\n}\n```\n\n\n## react Hooks\n\n### useState\n\n简单说 类似class 组件上面的 this.setState\n\n```jsx\nconst Home = () => {\n    // useState 的参数可以是简单类型， 也可以是方法\n    const [count, setCount] = useState(0);\n    const [toggle, setToggle] = useState(false);\n    const increment = () => {\n        setCount(count++);\n    }\n    const handleToggle = () => {\n        // setToggled 参数也可以用function\n        // setToggle((prevState) => nextState);\n        setToggled(toggled => !toggled);\n    }\n\n    return (\n        <>\n            <button onClick={increment}></button>\n            <div>{count}</div>\n            <div onClick={handleToggle}>{toggle}</div>\n        </>\n    )\n}\n```\n\n### useEffect\n\n在Function  Component 中, 是没有 生命周期的概念的，那么请求数据的时候就用到了useEffect, \n但是useEffect 其实包含3个生命周期 `componentDidMount`, `componentDidUpdate`, `componentWillUnmount`\n**注意： 不能在 if/else 或者是for循环中使用useEffect**\n\n```jsx\nconst Home = () => {\n    const [loading, setLoading] = useState(false);\n   \n\n    /**\n     * useEffect 提供两个参数， 一个是回调函数， 一个是依赖数组，\n     * 当第二参数不填的时候， 一旦state变化的时候， 就会执行这个函数\n     * 当第二个参数为 [] 空数组时， 就等同于 class组件的 componentDidMount\n     * 当第二个参数为[loading]， 代表只有loading 发生变化是，回调函数才会执行\n    */\n\n    useEffect(() => {\n        // 函数执行\n       \n       return () => {}\n    }, [])\n\n    return (\n        <>\n            <button onClick={increment}></button>\n            <div>{count}</div>\n            <div onClick={handleToggle}>{toggle}</div>\n        </>\n    )\n}\n```\n\n### useCallBack\n\nuseCallback 简单来说就是对我们的方法，进行缓存，达到一个性能优化的效果\n用的最多场景的是从父组件传方法给子组件，这时就可以用useCallback 了\n\n子组件onChange调用了父组件的handleOnChange\n父组件handleOnChange内部会执行setText(e.target.value)引起父组件更新\n父组件更新会得到新的handleOnChange，传递给子组件，对于子组件来说接收到一个新的props\n子组件进行不必要更新\n\n\n```jsx\nconst Child = React.memo((props) => {\n  console.log(props);\n\n  return (\n    <div>\n      <input type=\"text\" onChange={props.onChange}/>\n    </div>\n  )\n})\n\nconst Parent = () => {\n  const [count, setCount] = useState(0)\n  const [text, setText] = useState('')\n\n  const handleOnChange = useCallback((e) => {\n    setText(e.target.value)\n  },[])\n\n  return (\n    <div>\n      <div>count: {count}</div>\n      <div>text: {text}</div>\n      <button onClick={() => setCount(count + 1)}>+1</button>\n      <Child onChange={handleOnChange} />\n    </div>\n  )\n}\n```\n\n[demo](https://codesandbox.io/s/amazing-darkness-20tc3?file=/src/App.js:79-231)\n\n上面例子可以看到父组件虽然更新了，但子组件没有重新render\n\n但注意的是 有时候useCallback 也会有可能触发无限循环。 用ruseReducer（解决）\n\n\n### useMemo\n\n跟useCallback 差不多，但是useCallback 缓存函数， useMemo 缓存值， 有点像 `vue`的 `computed`\n\n### useRef\n\n是一个一直会变的对象，他有一个`.current` 属性，可以保存dom, 可以是方法，等等\n\n### useReducer\n\n这个其实跟redux 的reducer 有点相似，在定义的state之后，只能通过`dispatch` 触发对应的reducer事件（Actions）更新state\n简单理解 ：\n\n```html\n       state -> UI -> 用户触发事件 执行action \n         ^                 |\n         |                 |\n         ------------------\n```\n\n[看看官方的例子吧!](https://react.docschina.org/docs/hooks-reference.html#usereducer)\n\n\n### useContext\n\n```jsx\nimport React, { createContext, useContext, useState } from \"react\";\n\nconst MenuContext = createContext({\n  index: 0\n});\n\nexport default function App() {\n  return (\n    <div>\n      <Menu defaultIndex={0}>\n        <MenuItem index={0}>menu1</MenuItem>\n        <MenuItem index={1}>menu2</MenuItem>\n        <MenuItem index={2}> menu3</MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nconst Menu = (props) => {\n  const { defaultIndex, onSelect } = props;\n  const [currentActive, setActive] = useState(defaultIndex);\n  const handleClick = (index) => {\n    setActive(index);\n    if (onSelect) {\n      onSelect(index);\n    }\n  };\n  const Icontext = {\n    index: currentActive || 0,\n    onSelect: handleClick\n  };\n\n\n  return (\n    <ul>\n      <MenuContext.Provider value={Icontext}>\n        {props.children}\n      </MenuContext.Provider>\n    </ul>\n  );\n};\n\nconst MenuItem = (props) => {\n  const { children, index } = props;\n  const itemContext = useContext(MenuContext);\n  const handleClick = () => {\n    if (itemContext.onSelect) {\n      itemContext.onSelect(index);\n    }\n  };\n  return (\n    <li onClick={handleClick}>\n      {itemContext.index === index ? <a>active </a> : null}\n\n      {children}\n    </li>\n  );\n};\n\n```\n\n[测试一下](https://codesandbox.io/s/wandering-shape-szhw2?file=/src/App.js:0-1221)\n\n\n#### 进阶 自动配置index\n\n就是 `React.Children.map` ，以及`React.cloneElement`\n\n```jsx\nimport React, { createContext, useContext, useState } from \"react\";\n\nconst MenuContext = createContext({\n  index: 0\n});\n\nexport default function App() {\n  return (\n    <div>\n      <Menu defaultIndex={0}>\n        <MenuItem>menu1</MenuItem>\n        <MenuItem>menu2</MenuItem>\n        <MenuItem> menu3</MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nconst Menu = (props) => {\n  const { defaultIndex, onSelect } = props;\n  const [currentActive, setActive] = useState(defaultIndex);\n  const handleClick = (index) => {\n    setActive(index);\n    if (onSelect) {\n      onSelect(index);\n    }\n  };\n  const Icontext = {\n    index: currentActive || 0,\n    onSelect: handleClick\n  };\n\n  const childrenRender = () => {\n    return React.Children.map(props.children, (child, index) => {\n      if (child.type.displayName === \"MenuItem\") {\n        return React.cloneElement(child, { index: index });\n      }\n    });\n  };\n\n  return (\n    <ul>\n      <MenuContext.Provider value={Icontext}>\n        {childrenRender()}\n      </MenuContext.Provider>\n    </ul>\n  );\n};\n\nconst MenuItem = (props) => {\n  const { children, index } = props;\n  const itemContext = useContext(MenuContext);\n  const handleClick = () => {\n    if (itemContext.onSelect) {\n      itemContext.onSelect(index);\n    }\n  };\n  return (\n    <li onClick={handleClick}>\n      {itemContext.index === index ? <a>active </a> : null}\n\n      {children}\n    </li>\n  );\n};\n\nMenuItem.displayName = \"MenuItem\";\n\n```\n\n[测试一下](https://codesandbox.io/s/gallant-sky-hqgcq?file=/src/App.js);\n\n[hooks学习](https://usehooks.com/)\n\n## redux, mobx\n\n余着\n\n","slug":"react基础","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfc0018mroj3fz27yw2","content":"<h2 id=\"React-创建组件的方式\"><a href=\"#React-创建组件的方式\" class=\"headerlink\" title=\"React 创建组件的方式\"></a>React 创建组件的方式</h2><ul>\n<li>React.creactClass (已弃用)</li>\n<li>Class 的方式创建组件</li>\n<li>纯函数的方式创建组件，即我们常说的Function Component</li>\n</ul>\n<p>这里主要介绍Class 跟 Function Component 两种方式</p>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h3><p>class 是有生命周期的概念的</p>\n<ul>\n<li>挂载的时候的生命周期： constructor -&gt;  render -&gt; componentDidMount </li>\n<li>更新时的生命周期： getDerivedStateFromProps -&gt; shouldComponentUpdate -&gt;  render -&gt; componentDidUpdate</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> PureComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\nClass <span class=\"token class-name\">Home</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 一般我们这里会做数据请求\n     */</span>\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * \n     * 这里一般我们会做一些优化， 比如减少重复渲染。\n     * 父组件的state修改的话，会引起子组件的重新render, 但是当前子组件并没有依赖这个state，就可以用这个函数判断了\n     * 要是优化的话 可以使用 PureComponent , 她会会我们的props 进行浅比较\n     * @return boolean\n     */</span>\n    <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 这个生命周期时组件准备卸载了\n     * 这里可以对一些定时器，订阅等等做取消  \n     */</span>\n    <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 这个方法无论是props 更新或者state更新都会进入到这个静态函数\n     * 返回一个对象， 当前的对象就是state，\n     * 如果返回null，那不对state做任何操作\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    add <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 要注意的是 这个setState 修改的state 并不是立刻修改的，</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token operator\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>注意： 在class 组件下 只能够用setState 去修改state的数据</strong>， 它不像vue 那样可以直接修改数据。</p>\n<h4 id=\"setState\"><a href=\"#setState\" class=\"headerlink\" title=\"setState\"></a>setState</h4><p>setState 有两个参数， 一般我们会这么写</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// 一般我们会这么写</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    str<span class=\"token punctuation\">:</span> <span class=\"token string\">'123'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 但实际上callback 还有另一个参数, callback</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    str<span class=\"token punctuation\">:</span> <span class=\"token string\">'123'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 另外我们setState 也可以用方法</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">:</span> prevState<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h4><p><code>react</code> 的 props 跟 <code>vue</code> 的 props 的传递方式大致一样，也是从父组件传props</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Home value<span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span><span class=\"token operator\">></span></code></pre>\n<h2 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h2><h3 id=\"HOC\"><a href=\"#HOC\" class=\"headerlink\" title=\"HOC\"></a>HOC</h3><p>HOC 就是一个高阶组件， 简单说就是传入一个组件， 返回一个组件的函数。它可以做到以下几点</p>\n<ul>\n<li>劫持渲染</li>\n<li>劫持props</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// 比如一个简单的loading组件， 当你要为你已经写过的组件增加一个loading状态的时候，此时可以用HOC</span>\n<span class=\"token keyword\">const</span> HOC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Component <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"loading...\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 使用</span>\n<span class=\"token keyword\">const</span> EnhanceHoc <span class=\"token operator\">=</span> <span class=\"token function\">HOC</span><span class=\"token punctuation\">(</span>Home<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"render-Props\"><a href=\"#render-Props\" class=\"headerlink\" title=\"render Props\"></a>render Props</h3><p>用的比较多的一种方式是Mdoal 框 或者 Drawer ， 虽然有很多UI 框架帮我们封装好Modal框，但有时候还要写visible, 关闭方法等等，就有点烦，这时候就可以用render Props</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> CustomModal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>visible<span class=\"token punctuation\">,</span> cancel<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Modal</span> <span class=\"token attr-name\">visible</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>visible<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onCancel</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>cancel<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">></span></span>\n            Hello World\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Modal</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// modalContainer实现</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModalContainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        visible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    handleCancel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            visible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    show <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            visible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> visible <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                visible<span class=\"token punctuation\">:</span> visible<span class=\"token punctuation\">,</span>\n                show<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">,</span>\n                cancel<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCancel\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//使用</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>ModalContainer<span class=\"token operator\">></span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>visible<span class=\"token punctuation\">,</span> show<span class=\"token punctuation\">,</span> cancel<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n                            <span class=\"token operator\">&lt;</span>CustomModal visible<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>visible<span class=\"token punctuation\">}</span> cancel<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>cancel<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>CustomModal<span class=\"token operator\">></span>\n                            <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>show<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                                Click\n                            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n                        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ModalContainer<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"react-Hooks\"><a href=\"#react-Hooks\" class=\"headerlink\" title=\"react Hooks\"></a>react Hooks</h2><h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><p>简单说 类似class 组件上面的 this.setState</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Home <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// useState 的参数可以是简单类型， 也可以是方法</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>toggle<span class=\"token punctuation\">,</span> setToggle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> handleToggle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// setToggled 参数也可以用function</span>\n        <span class=\"token comment\" spellcheck=\"true\">// setToggle((prevState) => nextState);</span>\n        <span class=\"token function\">setToggled</span><span class=\"token punctuation\">(</span>toggled <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">!</span>toggled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>handleToggle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h3><p>在Function  Component 中, 是没有 生命周期的概念的，那么请求数据的时候就用到了useEffect,<br>但是useEffect 其实包含3个生命周期 <code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code><br><strong>注意： 不能在 if/else 或者是for循环中使用useEffect</strong></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Home <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * useEffect 提供两个参数， 一个是回调函数， 一个是依赖数组，\n     * 当第二参数不填的时候， 一旦state变化的时候， 就会执行这个函数\n     * 当第二个参数为 [] 空数组时， 就等同于 class组件的 componentDidMount\n     * 当第二个参数为[loading]， 代表只有loading 发生变化是，回调函数才会执行\n    */</span>\n\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 函数执行</span>\n\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>handleToggle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"useCallBack\"><a href=\"#useCallBack\" class=\"headerlink\" title=\"useCallBack\"></a>useCallBack</h3><p>useCallback 简单来说就是对我们的方法，进行缓存，达到一个性能优化的效果<br>用的最多场景的是从父组件传方法给子组件，这时就可以用useCallback 了</p>\n<p>子组件onChange调用了父组件的handleOnChange<br>父组件handleOnChange内部会执行setText(e.target.value)引起父组件更新<br>父组件更新会得到新的handleOnChange，传递给子组件，对于子组件来说接收到一个新的props<br>子组件进行不必要更新</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onChange<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> setText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> handleOnChange <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>count<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>text<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>handleOnChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://codesandbox.io/s/amazing-darkness-20tc3?file=/src/App.js:79-231\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>上面例子可以看到父组件虽然更新了，但子组件没有重新render</p>\n<p>但注意的是 有时候useCallback 也会有可能触发无限循环。 用ruseReducer（解决）</p>\n<h3 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h3><p>跟useCallback 差不多，但是useCallback 缓存函数， useMemo 缓存值， 有点像 <code>vue</code>的 <code>computed</code></p>\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h3><p>是一个一直会变的对象，他有一个<code>.current</code> 属性，可以保存dom, 可以是方法，等等</p>\n<h3 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h3><p>这个其实跟redux 的reducer 有点相似，在定义的state之后，只能通过<code>dispatch</code> 触发对应的reducer事件（Actions）更新state<br>简单理解 ：</p>\n<pre class=\" language-html\"><code class=\"language-html\">       state -> UI -> 用户触发事件 执行action \n         ^                 |\n         |                 |\n         ------------------</code></pre>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usereducer\" target=\"_blank\" rel=\"noopener\">看看官方的例子吧!</a></p>\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h3><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> createContext<span class=\"token punctuation\">,</span> useContext<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MenuContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  index<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Menu</span> <span class=\"token attr-name\">defaultIndex</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span> <span class=\"token attr-name\">index</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>menu1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MenuItem</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span> <span class=\"token attr-name\">index</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>menu2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MenuItem</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span> <span class=\"token attr-name\">index</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span> menu3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MenuItem</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Menu</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Menu <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> defaultIndex<span class=\"token punctuation\">,</span> onSelect <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentActive<span class=\"token punctuation\">,</span> setActive<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>defaultIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setActive</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> Icontext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    index<span class=\"token punctuation\">:</span> currentActive <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    onSelect<span class=\"token punctuation\">:</span> handleClick\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuContext.Provider</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>Icontext<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MenuContext.Provider</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MenuItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> index <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> itemContext <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MenuContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>itemContext<span class=\"token punctuation\">.</span>onSelect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      itemContext<span class=\"token punctuation\">.</span><span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">{</span>itemContext<span class=\"token punctuation\">.</span>index <span class=\"token operator\">===</span> index <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">></span></span>active <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/wandering-shape-szhw2?file=/src/App.js:0-1221\" target=\"_blank\" rel=\"noopener\">测试一下</a></p>\n<h4 id=\"进阶-自动配置index\"><a href=\"#进阶-自动配置index\" class=\"headerlink\" title=\"进阶 自动配置index\"></a>进阶 自动配置index</h4><p>就是 <code>React.Children.map</code> ，以及<code>React.cloneElement</code></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> createContext<span class=\"token punctuation\">,</span> useContext<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MenuContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  index<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Menu</span> <span class=\"token attr-name\">defaultIndex</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span><span class=\"token punctuation\">></span></span>menu1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MenuItem</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span><span class=\"token punctuation\">></span></span>menu2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MenuItem</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span><span class=\"token punctuation\">></span></span> menu3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MenuItem</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Menu</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Menu <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> defaultIndex<span class=\"token punctuation\">,</span> onSelect <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentActive<span class=\"token punctuation\">,</span> setActive<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>defaultIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setActive</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>onSelect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> Icontext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    index<span class=\"token punctuation\">:</span> currentActive <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    onSelect<span class=\"token punctuation\">:</span> handleClick\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> childrenRender <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">===</span> <span class=\"token string\">\"MenuItem\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">:</span> index <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuContext.Provider</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>Icontext<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span><span class=\"token function\">childrenRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MenuContext.Provider</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MenuItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> index <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> itemContext <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MenuContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>itemContext<span class=\"token punctuation\">.</span>onSelect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      itemContext<span class=\"token punctuation\">.</span><span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">{</span>itemContext<span class=\"token punctuation\">.</span>index <span class=\"token operator\">===</span> index <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">></span></span>active <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nMenuItem<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token string\">\"MenuItem\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/gallant-sky-hqgcq?file=/src/App.js\" target=\"_blank\" rel=\"noopener\">测试一下</a>;</p>\n<p><a href=\"https://usehooks.com/\" target=\"_blank\" rel=\"noopener\">hooks学习</a></p>\n<h2 id=\"redux-mobx\"><a href=\"#redux-mobx\" class=\"headerlink\" title=\"redux, mobx\"></a>redux, mobx</h2><p>余着</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"React-创建组件的方式\"><a href=\"#React-创建组件的方式\" class=\"headerlink\" title=\"React 创建组件的方式\"></a>React 创建组件的方式</h2><ul>\n<li>React.creactClass (已弃用)</li>\n<li>Class 的方式创建组件</li>\n<li>纯函数的方式创建组件，即我们常说的Function Component</li>\n</ul>\n<p>这里主要介绍Class 跟 Function Component 两种方式</p>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h3><p>class 是有生命周期的概念的</p>\n<ul>\n<li>挂载的时候的生命周期： constructor -&gt;  render -&gt; componentDidMount </li>\n<li>更新时的生命周期： getDerivedStateFromProps -&gt; shouldComponentUpdate -&gt;  render -&gt; componentDidUpdate</li>\n</ul>\n<pre><code class=\"jsx\">import React, { Component, PureComponent } from &#39;react&#39;;\nClass Home extends Component {\n     constructor(props) {\n        super(props);\n        this.state = {\n            count: 1\n        }\n    }\n\n    /**\n     * 一般我们这里会做数据请求\n     */\n    componentDidMount() {}\n\n    componentDidUpdate() {}\n\n    /**\n     * \n     * 这里一般我们会做一些优化， 比如减少重复渲染。\n     * 父组件的state修改的话，会引起子组件的重新render, 但是当前子组件并没有依赖这个state，就可以用这个函数判断了\n     * 要是优化的话 可以使用 PureComponent , 她会会我们的props 进行浅比较\n     * @return boolean\n     */\n    shouldComponentUpdate(nextProps, nextState) {}\n\n    /**\n     * 这个生命周期时组件准备卸载了\n     * 这里可以对一些定时器，订阅等等做取消  \n     */\n    componentWillUnmount() {}\n\n    /**\n     * 这个方法无论是props 更新或者state更新都会进入到这个静态函数\n     * 返回一个对象， 当前的对象就是state，\n     * 如果返回null，那不对state做任何操作\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {}\n\n    add = () =&gt; {\n        // 要注意的是 这个setState 修改的state 并不是立刻修改的，\n        this.setState({\n            count: this.state.count + 1\n        })\n    }\n\n    render() {\n        return (\n            &lt;&gt;\n                &lt;div&gt;state: {this.state.count}&lt;/div&gt;\n                &lt;div onClick={this.add}&gt;+&lt;/div&gt;\n\n                &lt;div&gt;props: {this.props.value}&lt;/div&gt;\n            &lt;/&gt;\n        )\n    }\n}</code></pre>\n<p><strong>注意： 在class 组件下 只能够用setState 去修改state的数据</strong>， 它不像vue 那样可以直接修改数据。</p>\n<h4 id=\"setState\"><a href=\"#setState\" class=\"headerlink\" title=\"setState\"></a>setState</h4><p>setState 有两个参数， 一般我们会这么写</p>\n<pre><code class=\"jsx\">// 一般我们会这么写\nthis.setState({\n    str: &#39;123&#39;\n})\n\n// 但实际上callback 还有另一个参数, callback\nthis.setState({\n    str: &#39;123&#39;\n}, () =&gt; {\n    console.log(&quot;callback&quot;)\n}}\n\n// 另外我们setState 也可以用方法\nthis.setState((prevState) =&gt; ({\n    count: prevState.count + 1\n}))\n</code></pre>\n<h4 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h4><p><code>react</code> 的 props 跟 <code>vue</code> 的 props 的传递方式大致一样，也是从父组件传props</p>\n<pre><code class=\"js\">&lt;Home value=&quot;hello world&quot;&gt;</code></pre>\n<h2 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h2><h3 id=\"HOC\"><a href=\"#HOC\" class=\"headerlink\" title=\"HOC\"></a>HOC</h3><p>HOC 就是一个高阶组件， 简单说就是传入一个组件， 返回一个组件的函数。它可以做到以下几点</p>\n<ul>\n<li>劫持渲染</li>\n<li>劫持props</li>\n</ul>\n<pre><code class=\"jsx\">// 比如一个简单的loading组件， 当你要为你已经写过的组件增加一个loading状态的时候，此时可以用HOC\nconst HOC = (Component) =&gt; {\n    return class extends Component {\n         render() {\n            const { loading, ...rest } = this.props;\n\n            if(!loading) return &quot;loading...&quot;;\n            return &lt;WrappedComponent {...rest} /&gt;\n        }\n    }\n}\n\n// 使用\nconst EnhanceHoc = HOC(Home);\n</code></pre>\n<h3 id=\"render-Props\"><a href=\"#render-Props\" class=\"headerlink\" title=\"render Props\"></a>render Props</h3><p>用的比较多的一种方式是Mdoal 框 或者 Drawer ， 虽然有很多UI 框架帮我们封装好Modal框，但有时候还要写visible, 关闭方法等等，就有点烦，这时候就可以用render Props</p>\n<pre><code class=\"jsx\">const CustomModal = ({visible, cancel}) =&gt; {\n    return (\n        &lt;Modal visible={visible} onCancel={cancel} &gt;\n            Hello World\n        &lt;/Modal&gt;\n    )\n}</code></pre>\n<pre><code class=\"jsx\">// modalContainer实现\nclass ModalContainer extends Component {\n    state = {\n        visible: false\n    }\n\n    handleCancel = () =&gt; {\n        this.setState({\n            visible: false\n        })\n    }\n\n    show = () =&gt; {\n        this.setState({\n            visible: true\n        })\n    }\n\n    render() {\n        const { visible } = this.state;\n        const { children } = this.props;\n        return (\n            children({\n                visible: visible,\n                show: this.show,\n                cancel: this.handleCancel\n            })\n        )\n    }\n}</code></pre>\n<pre><code class=\"js\">//使用\nclass App extends Component {\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;ModalContainer&gt;\n                    ({visible, show, cancel}) =&gt; (\n                        &lt;&gt;\n                            &lt;CustomModal visible={visible} cancel={cancel}&gt;&lt;/CustomModal&gt;\n                            &lt;Button type=&quot;primary&quot; onClick={show}&gt;\n                                Click\n                            &lt;/Button&gt;\n                        &lt;/&gt;\n                    )\n                &lt;/ModalContainer&gt;\n            &lt;/div&gt;\n        )\n    }\n}</code></pre>\n<h2 id=\"react-Hooks\"><a href=\"#react-Hooks\" class=\"headerlink\" title=\"react Hooks\"></a>react Hooks</h2><h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><p>简单说 类似class 组件上面的 this.setState</p>\n<pre><code class=\"jsx\">const Home = () =&gt; {\n    // useState 的参数可以是简单类型， 也可以是方法\n    const [count, setCount] = useState(0);\n    const [toggle, setToggle] = useState(false);\n    const increment = () =&gt; {\n        setCount(count++);\n    }\n    const handleToggle = () =&gt; {\n        // setToggled 参数也可以用function\n        // setToggle((prevState) =&gt; nextState);\n        setToggled(toggled =&gt; !toggled);\n    }\n\n    return (\n        &lt;&gt;\n            &lt;button onClick={increment}&gt;&lt;/button&gt;\n            &lt;div&gt;{count}&lt;/div&gt;\n            &lt;div onClick={handleToggle}&gt;{toggle}&lt;/div&gt;\n        &lt;/&gt;\n    )\n}</code></pre>\n<h3 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h3><p>在Function  Component 中, 是没有 生命周期的概念的，那么请求数据的时候就用到了useEffect,<br>但是useEffect 其实包含3个生命周期 <code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code><br><strong>注意： 不能在 if/else 或者是for循环中使用useEffect</strong></p>\n<pre><code class=\"jsx\">const Home = () =&gt; {\n    const [loading, setLoading] = useState(false);\n\n\n    /**\n     * useEffect 提供两个参数， 一个是回调函数， 一个是依赖数组，\n     * 当第二参数不填的时候， 一旦state变化的时候， 就会执行这个函数\n     * 当第二个参数为 [] 空数组时， 就等同于 class组件的 componentDidMount\n     * 当第二个参数为[loading]， 代表只有loading 发生变化是，回调函数才会执行\n    */\n\n    useEffect(() =&gt; {\n        // 函数执行\n\n       return () =&gt; {}\n    }, [])\n\n    return (\n        &lt;&gt;\n            &lt;button onClick={increment}&gt;&lt;/button&gt;\n            &lt;div&gt;{count}&lt;/div&gt;\n            &lt;div onClick={handleToggle}&gt;{toggle}&lt;/div&gt;\n        &lt;/&gt;\n    )\n}</code></pre>\n<h3 id=\"useCallBack\"><a href=\"#useCallBack\" class=\"headerlink\" title=\"useCallBack\"></a>useCallBack</h3><p>useCallback 简单来说就是对我们的方法，进行缓存，达到一个性能优化的效果<br>用的最多场景的是从父组件传方法给子组件，这时就可以用useCallback 了</p>\n<p>子组件onChange调用了父组件的handleOnChange<br>父组件handleOnChange内部会执行setText(e.target.value)引起父组件更新<br>父组件更新会得到新的handleOnChange，传递给子组件，对于子组件来说接收到一个新的props<br>子组件进行不必要更新</p>\n<pre><code class=\"jsx\">const Child = React.memo((props) =&gt; {\n  console.log(props);\n\n  return (\n    &lt;div&gt;\n      &lt;input type=&quot;text&quot; onChange={props.onChange}/&gt;\n    &lt;/div&gt;\n  )\n})\n\nconst Parent = () =&gt; {\n  const [count, setCount] = useState(0)\n  const [text, setText] = useState(&#39;&#39;)\n\n  const handleOnChange = useCallback((e) =&gt; {\n    setText(e.target.value)\n  },[])\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;count: {count}&lt;/div&gt;\n      &lt;div&gt;text: {text}&lt;/div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+1&lt;/button&gt;\n      &lt;Child onChange={handleOnChange} /&gt;\n    &lt;/div&gt;\n  )\n}</code></pre>\n<p><a href=\"https://codesandbox.io/s/amazing-darkness-20tc3?file=/src/App.js:79-231\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>上面例子可以看到父组件虽然更新了，但子组件没有重新render</p>\n<p>但注意的是 有时候useCallback 也会有可能触发无限循环。 用ruseReducer（解决）</p>\n<h3 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h3><p>跟useCallback 差不多，但是useCallback 缓存函数， useMemo 缓存值， 有点像 <code>vue</code>的 <code>computed</code></p>\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h3><p>是一个一直会变的对象，他有一个<code>.current</code> 属性，可以保存dom, 可以是方法，等等</p>\n<h3 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h3><p>这个其实跟redux 的reducer 有点相似，在定义的state之后，只能通过<code>dispatch</code> 触发对应的reducer事件（Actions）更新state<br>简单理解 ：</p>\n<pre><code class=\"html\">       state -&gt; UI -&gt; 用户触发事件 执行action \n         ^                 |\n         |                 |\n         ------------------</code></pre>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usereducer\" target=\"_blank\" rel=\"noopener\">看看官方的例子吧!</a></p>\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h3><pre><code class=\"jsx\">import React, { createContext, useContext, useState } from &quot;react&quot;;\n\nconst MenuContext = createContext({\n  index: 0\n});\n\nexport default function App() {\n  return (\n    &lt;div&gt;\n      &lt;Menu defaultIndex={0}&gt;\n        &lt;MenuItem index={0}&gt;menu1&lt;/MenuItem&gt;\n        &lt;MenuItem index={1}&gt;menu2&lt;/MenuItem&gt;\n        &lt;MenuItem index={2}&gt; menu3&lt;/MenuItem&gt;\n      &lt;/Menu&gt;\n    &lt;/div&gt;\n  );\n}\n\nconst Menu = (props) =&gt; {\n  const { defaultIndex, onSelect } = props;\n  const [currentActive, setActive] = useState(defaultIndex);\n  const handleClick = (index) =&gt; {\n    setActive(index);\n    if (onSelect) {\n      onSelect(index);\n    }\n  };\n  const Icontext = {\n    index: currentActive || 0,\n    onSelect: handleClick\n  };\n\n\n  return (\n    &lt;ul&gt;\n      &lt;MenuContext.Provider value={Icontext}&gt;\n        {props.children}\n      &lt;/MenuContext.Provider&gt;\n    &lt;/ul&gt;\n  );\n};\n\nconst MenuItem = (props) =&gt; {\n  const { children, index } = props;\n  const itemContext = useContext(MenuContext);\n  const handleClick = () =&gt; {\n    if (itemContext.onSelect) {\n      itemContext.onSelect(index);\n    }\n  };\n  return (\n    &lt;li onClick={handleClick}&gt;\n      {itemContext.index === index ? &lt;a&gt;active &lt;/a&gt; : null}\n\n      {children}\n    &lt;/li&gt;\n  );\n};\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/wandering-shape-szhw2?file=/src/App.js:0-1221\" target=\"_blank\" rel=\"noopener\">测试一下</a></p>\n<h4 id=\"进阶-自动配置index\"><a href=\"#进阶-自动配置index\" class=\"headerlink\" title=\"进阶 自动配置index\"></a>进阶 自动配置index</h4><p>就是 <code>React.Children.map</code> ，以及<code>React.cloneElement</code></p>\n<pre><code class=\"jsx\">import React, { createContext, useContext, useState } from &quot;react&quot;;\n\nconst MenuContext = createContext({\n  index: 0\n});\n\nexport default function App() {\n  return (\n    &lt;div&gt;\n      &lt;Menu defaultIndex={0}&gt;\n        &lt;MenuItem&gt;menu1&lt;/MenuItem&gt;\n        &lt;MenuItem&gt;menu2&lt;/MenuItem&gt;\n        &lt;MenuItem&gt; menu3&lt;/MenuItem&gt;\n      &lt;/Menu&gt;\n    &lt;/div&gt;\n  );\n}\n\nconst Menu = (props) =&gt; {\n  const { defaultIndex, onSelect } = props;\n  const [currentActive, setActive] = useState(defaultIndex);\n  const handleClick = (index) =&gt; {\n    setActive(index);\n    if (onSelect) {\n      onSelect(index);\n    }\n  };\n  const Icontext = {\n    index: currentActive || 0,\n    onSelect: handleClick\n  };\n\n  const childrenRender = () =&gt; {\n    return React.Children.map(props.children, (child, index) =&gt; {\n      if (child.type.displayName === &quot;MenuItem&quot;) {\n        return React.cloneElement(child, { index: index });\n      }\n    });\n  };\n\n  return (\n    &lt;ul&gt;\n      &lt;MenuContext.Provider value={Icontext}&gt;\n        {childrenRender()}\n      &lt;/MenuContext.Provider&gt;\n    &lt;/ul&gt;\n  );\n};\n\nconst MenuItem = (props) =&gt; {\n  const { children, index } = props;\n  const itemContext = useContext(MenuContext);\n  const handleClick = () =&gt; {\n    if (itemContext.onSelect) {\n      itemContext.onSelect(index);\n    }\n  };\n  return (\n    &lt;li onClick={handleClick}&gt;\n      {itemContext.index === index ? &lt;a&gt;active &lt;/a&gt; : null}\n\n      {children}\n    &lt;/li&gt;\n  );\n};\n\nMenuItem.displayName = &quot;MenuItem&quot;;\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/gallant-sky-hqgcq?file=/src/App.js\" target=\"_blank\" rel=\"noopener\">测试一下</a>;</p>\n<p><a href=\"https://usehooks.com/\" target=\"_blank\" rel=\"noopener\">hooks学习</a></p>\n<h2 id=\"redux-mobx\"><a href=\"#redux-mobx\" class=\"headerlink\" title=\"redux, mobx\"></a>redux, mobx</h2><p>余着</p>\n"},{"title":"taro 升级遇见的坑","date":"2023-02-14T23:00:00.000Z","_content":"\n# taro 升级遇见的坑\n\n**背景**：公司的小程序`UI库`已经多年不更新了，部分UI 有`bug`，也懒得到原仓库修改，于是便有了这次的升级，将采用**[@antmjs/vantui](https://github.com/AntmJS/vantui)**  这个新的`ui 库`， 目前`taro` 为 `3.6.1`\n\n使用以下命令升级, 等待依赖下载完成。\n\n```jsx\ntaro update project\n```\n\n### 1. 遇到了平台不兼容问题\n\n因为我们包里面使用已`.weapp.ts` 表示微信小程序。 已`.ts` 表示`pc` 或者其他平台，升级后导致\n\n`MultiPlatformPlugin` 这个插件 使用失败\n\n原来的使用方法是\n\n```jsx\nchain.resolve.plugin('MultiPlatformPlugin').tap((args) => {\n  return [\n    ...args,\n    {\n       include: ['@gm-mobile', 'gm_api'],\n    },\n  ]\n})\n```\n\n需要更改成，即修改`webpack` `extentions`, 去除 `MultiPlatformPlugin`\n\n```jsx\nchain.resolve.extensions.prepend('.weapp.ts')\nchain.resolve.extensions.prepend('.weapp.tsx')\n```\n\n修改了`babel.config.js` , 以及 `package.json`  的 `browserslist` \n\nbabel 会根据你设置的浏览器，根据预设值，去使用对应的插件，将代码转换，算是打个补丁\n\n```jsx\n// babel.config.js\npresets: [\n  ['taro', {\n    framework: 'react',\n    ts: true\n  }]\n],\n```\n\n```json\n// package.json\n\"browserslist\": [\n\t\t\"last 3 versions\",\n\t\t\"Android >= 4.1\",\n\t\t\"ios >= 8\"\n\t],\n```\n\n### 2.  升级后发现字体，padding 等分辨率 有很大差别\n\n原因是： taro 后面基础设计图的尺寸修改成 750, 导致了样式偏大或偏小\n\n解决方法： [参考 Taro 配置](https://docs.taro.zone/docs/next/config-detail#designwidth)\n\n```jsx\ndesignWidth(input) {\n  if (input.file && input.file.indexOf('@antmjs/vantui') > -1) {\n   return 750\n  }\n  return 375\n},\ndeviceRatio: {\n  375: 2 / 1,  // 之前已375 为基础尺寸\n  640: 2.34 / 2,\n  750: 1,\n  828: 1.81 / 2\n},\n```\n\n### 3. 升级后发现打包后的产物变大了\n\ntaro 默认使用`webpack4`  作为打包工具, 打包的产物包含了`babel/helper` 等 \n\n解决方法： 使用`webpack5`, 但你需要`安装webpack5`, 依赖里面没有，导致报错了，安装后正常\n\n```jsx\nyarn add webpack\n```\n\n```jsx\n// cpnfig/index.js\n\ncompiler: {\n  type: 'webpack5',\n  prebundle: {\n    enable: false\n  },\n},\n```\n\n### 4. 升级后发现moment 打包会把其他语言也打包进去\n\n项目中之前是用了 `ContextReplacementPlugin` 去忽略其他语言的加载，但后面失效了。找了很久没找到解决方案，最后在`issue` 里面获得启发\n\n解决方法：调用`webpackChain(chain, webpack)`\n\n```jsx\n// config/index.js\nchain\n\t .plugin('IgnorePlugin')\n   .use(new webpack.ContextReplacementPlugin(/moment[/\\\\]locale$/, /zh-cn/))\n\n// moment 需要过滤，表示package.json 引用的是main 字段\nchain.resolve.mainFields.clear();\nchain.merge({\n  resolve: {\n    mainFields: ['module', 'main', 'jsnext:main']\n  }\n})\n```\n\n### 5. **引入本地含svg的iconfont报错**\n\n[相关issue](https://github.com/NervJS/taro/issues/13008)\n\n查找了下`postcss-url` 说可以忽略，但是没找到`taro` 的配置","source":"_posts/taro 升级遇见的坑.md","raw":"---\ntitle: taro 升级遇见的坑\ndate: 2023-02-14 23:00\ntags: [taro]\ncategories: [taro]\n---\n\n# taro 升级遇见的坑\n\n**背景**：公司的小程序`UI库`已经多年不更新了，部分UI 有`bug`，也懒得到原仓库修改，于是便有了这次的升级，将采用**[@antmjs/vantui](https://github.com/AntmJS/vantui)**  这个新的`ui 库`， 目前`taro` 为 `3.6.1`\n\n使用以下命令升级, 等待依赖下载完成。\n\n```jsx\ntaro update project\n```\n\n### 1. 遇到了平台不兼容问题\n\n因为我们包里面使用已`.weapp.ts` 表示微信小程序。 已`.ts` 表示`pc` 或者其他平台，升级后导致\n\n`MultiPlatformPlugin` 这个插件 使用失败\n\n原来的使用方法是\n\n```jsx\nchain.resolve.plugin('MultiPlatformPlugin').tap((args) => {\n  return [\n    ...args,\n    {\n       include: ['@gm-mobile', 'gm_api'],\n    },\n  ]\n})\n```\n\n需要更改成，即修改`webpack` `extentions`, 去除 `MultiPlatformPlugin`\n\n```jsx\nchain.resolve.extensions.prepend('.weapp.ts')\nchain.resolve.extensions.prepend('.weapp.tsx')\n```\n\n修改了`babel.config.js` , 以及 `package.json`  的 `browserslist` \n\nbabel 会根据你设置的浏览器，根据预设值，去使用对应的插件，将代码转换，算是打个补丁\n\n```jsx\n// babel.config.js\npresets: [\n  ['taro', {\n    framework: 'react',\n    ts: true\n  }]\n],\n```\n\n```json\n// package.json\n\"browserslist\": [\n\t\t\"last 3 versions\",\n\t\t\"Android >= 4.1\",\n\t\t\"ios >= 8\"\n\t],\n```\n\n### 2.  升级后发现字体，padding 等分辨率 有很大差别\n\n原因是： taro 后面基础设计图的尺寸修改成 750, 导致了样式偏大或偏小\n\n解决方法： [参考 Taro 配置](https://docs.taro.zone/docs/next/config-detail#designwidth)\n\n```jsx\ndesignWidth(input) {\n  if (input.file && input.file.indexOf('@antmjs/vantui') > -1) {\n   return 750\n  }\n  return 375\n},\ndeviceRatio: {\n  375: 2 / 1,  // 之前已375 为基础尺寸\n  640: 2.34 / 2,\n  750: 1,\n  828: 1.81 / 2\n},\n```\n\n### 3. 升级后发现打包后的产物变大了\n\ntaro 默认使用`webpack4`  作为打包工具, 打包的产物包含了`babel/helper` 等 \n\n解决方法： 使用`webpack5`, 但你需要`安装webpack5`, 依赖里面没有，导致报错了，安装后正常\n\n```jsx\nyarn add webpack\n```\n\n```jsx\n// cpnfig/index.js\n\ncompiler: {\n  type: 'webpack5',\n  prebundle: {\n    enable: false\n  },\n},\n```\n\n### 4. 升级后发现moment 打包会把其他语言也打包进去\n\n项目中之前是用了 `ContextReplacementPlugin` 去忽略其他语言的加载，但后面失效了。找了很久没找到解决方案，最后在`issue` 里面获得启发\n\n解决方法：调用`webpackChain(chain, webpack)`\n\n```jsx\n// config/index.js\nchain\n\t .plugin('IgnorePlugin')\n   .use(new webpack.ContextReplacementPlugin(/moment[/\\\\]locale$/, /zh-cn/))\n\n// moment 需要过滤，表示package.json 引用的是main 字段\nchain.resolve.mainFields.clear();\nchain.merge({\n  resolve: {\n    mainFields: ['module', 'main', 'jsnext:main']\n  }\n})\n```\n\n### 5. **引入本地含svg的iconfont报错**\n\n[相关issue](https://github.com/NervJS/taro/issues/13008)\n\n查找了下`postcss-url` 说可以忽略，但是没找到`taro` 的配置","slug":"taro 升级遇见的坑","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfd0019mroj3mzb5kn2","content":"<h1 id=\"taro-升级遇见的坑\"><a href=\"#taro-升级遇见的坑\" class=\"headerlink\" title=\"taro 升级遇见的坑\"></a>taro 升级遇见的坑</h1><p><strong>背景</strong>：公司的小程序<code>UI库</code>已经多年不更新了，部分UI 有<code>bug</code>，也懒得到原仓库修改，于是便有了这次的升级，将采用<strong><a href=\"https://github.com/AntmJS/vantui\" target=\"_blank\" rel=\"noopener\">@antmjs/vantui</a></strong>  这个新的<code>ui 库</code>， 目前<code>taro</code> 为 <code>3.6.1</code></p>\n<p>使用以下命令升级, 等待依赖下载完成。</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">taro update project</code></pre>\n<h3 id=\"1-遇到了平台不兼容问题\"><a href=\"#1-遇到了平台不兼容问题\" class=\"headerlink\" title=\"1. 遇到了平台不兼容问题\"></a>1. 遇到了平台不兼容问题</h3><p>因为我们包里面使用已<code>.weapp.ts</code> 表示微信小程序。 已<code>.ts</code> 表示<code>pc</code> 或者其他平台，升级后导致</p>\n<p><code>MultiPlatformPlugin</code> 这个插件 使用失败</p>\n<p>原来的使用方法是</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">chain<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MultiPlatformPlugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n       include<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@gm-mobile'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gm_api'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>需要更改成，即修改<code>webpack</code> <code>extentions</code>, 去除 <code>MultiPlatformPlugin</code></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">chain<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.weapp.ts'</span><span class=\"token punctuation\">)</span>\nchain<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.weapp.tsx'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>修改了<code>babel.config.js</code> , 以及 <code>package.json</code>  的 <code>browserslist</code> </p>\n<p>babel 会根据你设置的浏览器，根据预设值，去使用对应的插件，将代码转换，算是打个补丁</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// babel.config.js</span>\npresets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'taro'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    framework<span class=\"token punctuation\">:</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">,</span>\n    ts<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n<pre class=\" language-json\"><code class=\"language-json\">// package.json\n<span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"last 3 versions\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Android >= 4.1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"ios >= 8\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n<h3 id=\"2-升级后发现字体，padding-等分辨率-有很大差别\"><a href=\"#2-升级后发现字体，padding-等分辨率-有很大差别\" class=\"headerlink\" title=\"2.  升级后发现字体，padding 等分辨率 有很大差别\"></a>2.  升级后发现字体，padding 等分辨率 有很大差别</h3><p>原因是： taro 后面基础设计图的尺寸修改成 750, 导致了样式偏大或偏小</p>\n<p>解决方法： <a href=\"https://docs.taro.zone/docs/next/config-detail#designwidth\" target=\"_blank\" rel=\"noopener\">参考 Taro 配置</a></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">designWidth</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>file <span class=\"token operator\">&amp;&amp;</span> input<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@antmjs/vantui'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">750</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">375</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\ndeviceRatio<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">375</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// 之前已375 为基础尺寸</span>\n  <span class=\"token number\">640</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2.34</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">750</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">828</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.81</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n<h3 id=\"3-升级后发现打包后的产物变大了\"><a href=\"#3-升级后发现打包后的产物变大了\" class=\"headerlink\" title=\"3. 升级后发现打包后的产物变大了\"></a>3. 升级后发现打包后的产物变大了</h3><p>taro 默认使用<code>webpack4</code>  作为打包工具, 打包的产物包含了<code>babel/helper</code> 等 </p>\n<p>解决方法： 使用<code>webpack5</code>, 但你需要<code>安装webpack5</code>, 依赖里面没有，导致报错了，安装后正常</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">yarn add webpack</code></pre>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// cpnfig/index.js</span>\n\ncompiler<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'webpack5'</span><span class=\"token punctuation\">,</span>\n  prebundle<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    enable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n<h3 id=\"4-升级后发现moment-打包会把其他语言也打包进去\"><a href=\"#4-升级后发现moment-打包会把其他语言也打包进去\" class=\"headerlink\" title=\"4. 升级后发现moment 打包会把其他语言也打包进去\"></a>4. 升级后发现moment 打包会把其他语言也打包进去</h3><p>项目中之前是用了 <code>ContextReplacementPlugin</code> 去忽略其他语言的加载，但后面失效了。找了很久没找到解决方案，最后在<code>issue</code> 里面获得启发</p>\n<p>解决方法：调用<code>webpackChain(chain, webpack)</code></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// config/index.js</span>\nchain\n     <span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IgnorePlugin'</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>ContextReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/moment[/\\\\]locale$/</span><span class=\"token punctuation\">,</span> <span class=\"token regex\">/zh-cn/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// moment 需要过滤，表示package.json 引用的是main 字段</span>\nchain<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span>mainFields<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchain<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    mainFields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'main'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jsnext:main'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"5-引入本地含svg的iconfont报错\"><a href=\"#5-引入本地含svg的iconfont报错\" class=\"headerlink\" title=\"5. 引入本地含svg的iconfont报错\"></a>5. <strong>引入本地含svg的iconfont报错</strong></h3><p><a href=\"https://github.com/NervJS/taro/issues/13008\" target=\"_blank\" rel=\"noopener\">相关issue</a></p>\n<p>查找了下<code>postcss-url</code> 说可以忽略，但是没找到<code>taro</code> 的配置</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"taro-升级遇见的坑\"><a href=\"#taro-升级遇见的坑\" class=\"headerlink\" title=\"taro 升级遇见的坑\"></a>taro 升级遇见的坑</h1><p><strong>背景</strong>：公司的小程序<code>UI库</code>已经多年不更新了，部分UI 有<code>bug</code>，也懒得到原仓库修改，于是便有了这次的升级，将采用<strong><a href=\"https://github.com/AntmJS/vantui\" target=\"_blank\" rel=\"noopener\">@antmjs/vantui</a></strong>  这个新的<code>ui 库</code>， 目前<code>taro</code> 为 <code>3.6.1</code></p>\n<p>使用以下命令升级, 等待依赖下载完成。</p>\n<pre><code class=\"jsx\">taro update project</code></pre>\n<h3 id=\"1-遇到了平台不兼容问题\"><a href=\"#1-遇到了平台不兼容问题\" class=\"headerlink\" title=\"1. 遇到了平台不兼容问题\"></a>1. 遇到了平台不兼容问题</h3><p>因为我们包里面使用已<code>.weapp.ts</code> 表示微信小程序。 已<code>.ts</code> 表示<code>pc</code> 或者其他平台，升级后导致</p>\n<p><code>MultiPlatformPlugin</code> 这个插件 使用失败</p>\n<p>原来的使用方法是</p>\n<pre><code class=\"jsx\">chain.resolve.plugin(&#39;MultiPlatformPlugin&#39;).tap((args) =&gt; {\n  return [\n    ...args,\n    {\n       include: [&#39;@gm-mobile&#39;, &#39;gm_api&#39;],\n    },\n  ]\n})</code></pre>\n<p>需要更改成，即修改<code>webpack</code> <code>extentions</code>, 去除 <code>MultiPlatformPlugin</code></p>\n<pre><code class=\"jsx\">chain.resolve.extensions.prepend(&#39;.weapp.ts&#39;)\nchain.resolve.extensions.prepend(&#39;.weapp.tsx&#39;)</code></pre>\n<p>修改了<code>babel.config.js</code> , 以及 <code>package.json</code>  的 <code>browserslist</code> </p>\n<p>babel 会根据你设置的浏览器，根据预设值，去使用对应的插件，将代码转换，算是打个补丁</p>\n<pre><code class=\"jsx\">// babel.config.js\npresets: [\n  [&#39;taro&#39;, {\n    framework: &#39;react&#39;,\n    ts: true\n  }]\n],</code></pre>\n<pre><code class=\"json\">// package.json\n&quot;browserslist&quot;: [\n        &quot;last 3 versions&quot;,\n        &quot;Android &gt;= 4.1&quot;,\n        &quot;ios &gt;= 8&quot;\n    ],</code></pre>\n<h3 id=\"2-升级后发现字体，padding-等分辨率-有很大差别\"><a href=\"#2-升级后发现字体，padding-等分辨率-有很大差别\" class=\"headerlink\" title=\"2.  升级后发现字体，padding 等分辨率 有很大差别\"></a>2.  升级后发现字体，padding 等分辨率 有很大差别</h3><p>原因是： taro 后面基础设计图的尺寸修改成 750, 导致了样式偏大或偏小</p>\n<p>解决方法： <a href=\"https://docs.taro.zone/docs/next/config-detail#designwidth\" target=\"_blank\" rel=\"noopener\">参考 Taro 配置</a></p>\n<pre><code class=\"jsx\">designWidth(input) {\n  if (input.file &amp;&amp; input.file.indexOf(&#39;@antmjs/vantui&#39;) &gt; -1) {\n   return 750\n  }\n  return 375\n},\ndeviceRatio: {\n  375: 2 / 1,  // 之前已375 为基础尺寸\n  640: 2.34 / 2,\n  750: 1,\n  828: 1.81 / 2\n},</code></pre>\n<h3 id=\"3-升级后发现打包后的产物变大了\"><a href=\"#3-升级后发现打包后的产物变大了\" class=\"headerlink\" title=\"3. 升级后发现打包后的产物变大了\"></a>3. 升级后发现打包后的产物变大了</h3><p>taro 默认使用<code>webpack4</code>  作为打包工具, 打包的产物包含了<code>babel/helper</code> 等 </p>\n<p>解决方法： 使用<code>webpack5</code>, 但你需要<code>安装webpack5</code>, 依赖里面没有，导致报错了，安装后正常</p>\n<pre><code class=\"jsx\">yarn add webpack</code></pre>\n<pre><code class=\"jsx\">// cpnfig/index.js\n\ncompiler: {\n  type: &#39;webpack5&#39;,\n  prebundle: {\n    enable: false\n  },\n},</code></pre>\n<h3 id=\"4-升级后发现moment-打包会把其他语言也打包进去\"><a href=\"#4-升级后发现moment-打包会把其他语言也打包进去\" class=\"headerlink\" title=\"4. 升级后发现moment 打包会把其他语言也打包进去\"></a>4. 升级后发现moment 打包会把其他语言也打包进去</h3><p>项目中之前是用了 <code>ContextReplacementPlugin</code> 去忽略其他语言的加载，但后面失效了。找了很久没找到解决方案，最后在<code>issue</code> 里面获得启发</p>\n<p>解决方法：调用<code>webpackChain(chain, webpack)</code></p>\n<pre><code class=\"jsx\">// config/index.js\nchain\n     .plugin(&#39;IgnorePlugin&#39;)\n   .use(new webpack.ContextReplacementPlugin(/moment[/\\\\]locale$/, /zh-cn/))\n\n// moment 需要过滤，表示package.json 引用的是main 字段\nchain.resolve.mainFields.clear();\nchain.merge({\n  resolve: {\n    mainFields: [&#39;module&#39;, &#39;main&#39;, &#39;jsnext:main&#39;]\n  }\n})</code></pre>\n<h3 id=\"5-引入本地含svg的iconfont报错\"><a href=\"#5-引入本地含svg的iconfont报错\" class=\"headerlink\" title=\"5. 引入本地含svg的iconfont报错\"></a>5. <strong>引入本地含svg的iconfont报错</strong></h3><p><a href=\"https://github.com/NervJS/taro/issues/13008\" target=\"_blank\" rel=\"noopener\">相关issue</a></p>\n<p>查找了下<code>postcss-url</code> 说可以忽略，但是没找到<code>taro</code> 的配置</p>\n"},{"title":"typecript 类型体操","date":"2022-01-05T22:35:35.000Z","_content":"\n[原网站](https://github.com/type-challenges/type-challenges/blob/master/README.zh-CN.md)\n\n## 简单（easy）\n\n> pick\n\n```ts\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyPick<Todo, 'title' | 'completed'>\n\nconst todo: TodoPreview = {\n    title: 'Clean room',\n    completed: false,\n}\n```\n\n<details>\n<summary><mark>说明 </mark></summary>\n\n```ts\ntype Pick<T extends Object, K extends keyof T> = {\n  [P in K]: T[P]\n}\n```\n</details>\n\n> ReadOnly\n\n```ts\ninterface Todo {\n  title: string\n  description: string\n}\n\nconst todo: MyReadonly<Todo> = {\n  title: \"Hey\",\n  description: \"foobar\"\n}\n\ntodo.title = \"Hello\" // Error: cannot reassign a readonly property\ntodo.description = \"barFoo\" // Error: cannot reassign a readonly property\n```\n<details>\n<summary><mark>说明 </mark></summary>\n\n```ts\ntype ReadOnly<T extends Object> = {\n  readonly [P in keyof T]: T[P]\n}\n```\n</details>\n\n\n> 元组转换成对象\n\n```ts\nconst tuple = ['tesla', 'model 3', 'model X', 'model Y'] as const\n\ntype result = TupleToObject<typeof tuple> // expected { tesla: 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'}\n```\n\n<details>\n<summary><mark>说明 </mark></summary>\n\n```ts\ntype TupleToObject<T extends readonly string[]> = {\n  [P in T[number]]: P\n}\n```\n</details>\n\n> 第一个元素\n\n```ts\ntype arr1 = ['a', 'b', 'c']\ntype arr2 = [3, 2, 1]\n\ntype head1 = First<arr1> // expected to be 'a'\ntype head2 = First<arr2> // expected to be 3\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype First<T extends any[]> = T extends [infer Result,...infer Rest] ? Result : never;\n```\n</details>\n\n> 获取元素长度\n\n```ts\ntype tesla = ['tesla', 'model 3', 'model X', 'model Y']\ntype spaceX = ['FALCON 9', 'FALCON HEAVY', 'DRAGON', 'STARSHIP', 'HUMAN SPACEFLIGHT']\n\ntype teslaLength = Length<tesla> // expected 4\ntype spaceXLength = Length<spaceX> // expected 5\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Length<T extends readonly any[]> = T['length'];\n```\n</details>\n\n> Exclude\n\n```ts\n/** \n * 实现内置的Exclude <T，U>类型，但不能直接使用它本身。\n * 从联合类型T中排除U的类型成员，来构造一个新的类型。\n*/\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Exclude<T, U> = T extends U ? never : T\n```\n</details>\n\n> Awaited\n\n```ts\n假如我们有一个 Promise 对象，这个 Promise 对象会返回一个类型。在 TS 中，我们用 Promise 中的 T 来描述这个 Promise 返回的类型。请你实现一个类型，可以获取这个类型。\n\n比如：Promise<ExampleType>，请你返回 ExampleType 类型。\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype MyAwaited<T> = T extends Promise<infer P> ? MyAwaited<P> : T;\n```\n</details>\n\n> IF\n\n实现一个 `IF` 类型，它接收一个条件类型 `C` ，一个判断为真时的返回类型 `T` ，以及一个判断为假时的返回类型 `F`。 `C` 只能是 `true` 或者 `false`， `T` 和 `F` 可以是任意类型。\n\n```ts\ntype A = If<true, 'a', 'b'>  // expected to be 'a'\ntype B = If<false, 'a', 'b'> // expected to be 'b'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype If<C extends boolean, T, F> = T extends true ? T : F;\n```\n</details>\n\n> Concat\n\n在类型系统里实现 `JavaScript` 内置的 `Array.concat` 方法，这个类型接受两个参数，返回的新数组类型应该按照输入参数从左到右的顺序合并为一个新的数组。\n\n```ts\ntype Result = Concat<[1], [2]> // expected to be [1, 2]\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Concat<T extends any[], P extends any[]> = [...T, ...P]\n```\n</details>\n\n\n> Include\n\n在类型系统里实现 `JavaScript` 的 `Array.includes` 方法，这个类型接受两个参数，返回的类型要么是 `true` 要么是 `false`。\n\n```ts\ntype isPillarMen = Includes<['Kars', 'Esidisi', 'Wamuu', 'Santana'], 'Dio'> // expected to be `false`\n```\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Include<T extends readonly any[], P> = T extends [infer First,...infer Other] ? (Equal<First,U> extends true ? true: Includes<Other,U>) :false \n```\n</details>\n\n> Push\n\n在类型系统里实现通用的 `Array.push` 。\n\n```ts\ntype Result = Push<[1, 2], '3'> // [1, 2, '3']\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Push<T extends any[], U> = [...T, U]\n```\n</details>\n\n\n> Unshift\n\n实现类型版本的 `Array.unshift`。\n\n```ts\ntype Result = Unshift<[1, 2], 0> // [0, 1, 2,]\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Unshift<T extends any[], U> = [U, ...T]\n```\n</details>\n\n> Parameters\n\n实现内置的 Parameters 类型，而不是直接使用它，可参考[TypeScript官方文档](https://www.typescriptlang.org/docs/handbook/utility-types.html#parameterstype)。\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype MyParameters<T extends (...args: any[]) => any> = T extends (...args: infer P) => any ? P : never;\n```\n</details>\n\n## 中等\n\n> 获取函数返回类型 ReturnType\n\n不使用 `ReturnType` 实现 `TypeScript` 的 `ReturnType<T>` 范型。\n\n```ts\nconst fn = (v: boolean) => {\n  if (v)\n    return 1\n  else\n    return 2\n}\n\ntype a = MyReturnType<typeof fn> // 应推导出 \"1 | 2\"\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype MyReturnType<T extends (...args: any[]) => any> = T extends (...args: any[]) => infer R ? R : never\n```\n</details>\n\n\n> 实现 omit\n\n不使用 `Omit` 实现 `TypeScript` 的 `Omit<T, K>` 范型。\n\n`Omit` 会创建一个省略 `K` 中字段的 `T` 对象。\n\n```tsx\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyOmit<Todo, 'description' | 'title'>\n\nconst todo: TodoPreview = {\n  completed: false,\n}\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype MyPick<T, K extends keyof T> = {\n  [key in K]: T[key]\n}\n\ntype MyExclude<T, P> = T extends P ? never : T\n\ntype MyOmit<T, K extends keyof T> = MyPick<T, MyExclude<keyof T, K>>\n```\n</details>\n\n> Readonly 2\n\n实现一个通用`MyReadonly2<T, K>`，它带有两种类型的参数`T`和`K`。\n\n`K`指定应设置为`Readonly`的`T`的属性集。如果未提供`K`，则应使所有属性都变为只读，就像普通的`Readonly<T>`一样。\n\n```ts\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\nconst todo: MyReadonly2<Todo, 'title' | 'description'> = {\n  title: \"Hey\",\n  description: \"foobar\",\n  completed: false,\n}\n\ntodo.title = \"Hello\" // Error: cannot reassign a readonly property\ntodo.description = \"barFoo\" // Error: cannot reassign a readonly property\ntodo.completed = true // OK\n```\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype MyReadonly<T> = {\n  readonly [P in keyof T]: T[P]\n}\n\ntype MyPick<T, K extends keyof T> = { [P in K]: T[P] }\n\ntype MyExclude<T, K> = T extends K ? never : T;\n\ntype MyOmit<T, K extends keyof T> = { [P in MyExclude<keyof T, K>]: T[P]}\n \n type MyReadonly2<T, K extends keyof T = keyof T> =MyReadonly<MyPick<T, K>>  & MyOmit<T, K>\n```\n</details>\n\n> 深度Readonly\n\n实现一个通用的DeepReadonly<T>，它将对象的每个参数及其子对象递归地设为只读。\n\n您可以假设在此挑战中我们仅处理对象。数组，函数，类等都无需考虑。但是，您仍然可以通过覆盖尽可能多的不同案例来挑战自己。\n\n```ts\ntype X = { \n  x: { \n    a: 1\n    b: 'hi'\n  }\n  y: 'hey'\n}\n\ntype Expected = { \n  readonly x: { \n    readonly a: 1\n    readonly b: 'hi'\n  }\n  readonly y: 'hey' \n}\n\ntype Todo = DeepReadonly<X> // should be same as `Expected`\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype DeepReadonly<T extends Object> = {\n  readonly [P in keyof T]: keyof T[P] extends never ? T[P] : DeepReadonly<T[P]>\n}\n\n```\n</details>\n\n> 元组转合集\n\n实现泛型`TupleToUnion<T>`，它覆盖元组的值与其值联合。\n\n\n```ts\ntype Arr = ['1', '2', '3']\n\ntype Test = TupleToUnion<Arr> // expected to be '1' | '2' | '3'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype TupleToUnion<T extends any[]> = T extends [infer First,...infer Other] ? First | TupleToUnion<Other> : never;\n\n// 或者\n\ntype TupleToUnion<T extends any[]> = T[number];\n\n```\n</details>\n\n> 最后一个元素\n\n实现一个通用`Last<T>`，它接受一个`数组T`并返回其最后一个元素的类型。\n\n```ts\ntype arr1 = ['a', 'b', 'c']\ntype arr2 = [3, 2, 1]\n\ntype tail1 = Last<arr1> // expected to be 'c'\ntype tail2 = Last<arr2> // expected to be 1\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype Last<T extends any[]> = T extends [...infer K, infer Other] ? Other : never\n\n//或者\ntype Last<T extends any[]> = T extends [any, ...infer Rest] ? T[Rest['length']] : never\n\n```\n</details>\n\n> 出堆\n\n实现一个通用Pop<T>，它接受一个数组T并返回一个没有最后一个元素的数组。\n\n```ts\ntype arr1 = ['a', 'b', 'c', 'd']\ntype arr2 = [3, 2, 1]\n\ntype re1 = Pop<arr1> // expected to be ['a', 'b', 'c']\ntype re2 = Pop<arr2> // expected to be [3, 2]\n```\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype Pop<T extends any[]> = T extends [...infer K, infer Other] ? K : never\n\n```\n</details>\n\n\n> promise.all\n\n\n```TS\nconst promise1 = Promise.resolve(3);\nconst promise2 = 42;\nconst promise3 = new Promise<string>((resolve, reject) => {\n  setTimeout(resolve, 100, 'foo');\n});\n\n// expected to be `Promise<[number, number, string]>`\nconst p = Promise.all([promise1, promise2, promise3] as const)\n\n// declare function PromiseAll(values: any): any\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n// 跟上面awaited 相似\ntype MyAwaited<T> = T extends Promise<infer P> ? MyAwaited<P> : T;\n/** declare 重定义function, (values: readonly [...T]) 函数参数 Promise<> */\ndeclare function PromiseAll<T extends any[]>(values: readonly [...T]): Promise<{\n  [K in keyof T]:  MyAwaited<T[K]>\n}>\n\n```\n</details>\n\n> Type Lookup\n\n在此挑战中，我们想通过在联合`Cat | Dog`中搜索公共`type`字段来获取相应的类型。换句话说，在以下示例中，我们期望`LookUp<Dog | Cat, 'dog'>`获得`Dog`，`LookUp<Dog | Cat, 'cat'>`获得`Cat`。\n\n```ts\n\ninterface Cat {\n  type: 'cat'\n  breeds: 'Abyssinian' | 'Shorthair' | 'Curl' | 'Bengal'\n}\n\ninterface Dog {\n  type: 'dog'\n  breeds: 'Hound' | 'Brittany' | 'Bulldog' | 'Boxer'\n  color: 'brown' | 'white' | 'black'\n}\n\ntype MyDog = LookUp<Cat | Dog, 'dog'> // expected to be `Dog`\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype LookUP<T, U> = T extends { type: string } ? (T['type'] extends U ? T : never )  : never\n\n```\n</details>\n\n> Trim Left\n\n实现 `TrimLeft<T>` ，它接收确定的字符串类型并返回一个新的字符串，其中新返回的字符串删除了原字符串开头的空白字符串。\n\n```ts\ntype trimed = TrimLeft<'  Hello World  '> // 应推导出 'Hello World  '\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype TrimLet<T extends string> = T extends `${' '| '\\n' | '\\t'}${infer Rest}` ? TrimLeft<Rest> : T;\n\n```\n</details>\n\n> Trim\n\n```ts\ntype trimed = Trim<'  Hello World  '> // expected to be 'Hello World'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype SpaceChar = ' ' | '\\n' | '\\t'\ntype Trim<S extends string> = S extends (`${SpaceChar}${infer R}` | `${infer R}${SpaceChar}`) ? Trim<R> : S\n\n```\n</details>\n\n\n> Capitalize \n\n首字母大写\n\n```ts\ntype capitalized = Capitalize<'hello world'> // expected to be 'Hello world'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Capitalize<T extends string> = T extends (`${infer first}${infer R}`) ? `${Uppercase<first>}${R}` : T;\n\n```\n</details>\n\n> Replace\n\n实现 `Replace<S, From, To`> 将字符串 `S` 中的第一个子字符串 `From` 替换为 `To` 。\n\n```ts\ntype replaced = Replace<'types are fun!', 'fun', 'awesome'> // 期望是 'types are awesome!'\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Replace<S extends string, From extends string, To extends string> = From extends '' ? S : S extends `${infer start}${From}${infer end}` ? `${start}${To}${end}` : S\n\n```\n</details>\n\n> ReplaceAll\n\n实现 `ReplaceAll<S, From, To>` 将一个字符串 `S` 中的所有子字符串 `From` 替换为 `To`。\n\n```ts\ntype replaced = ReplaceAll<'t y p e s', ' ', ''> // 期望是 'types'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n/**\n * 请注意以下两种情况\n *  Expect<Equal<ReplaceAll<'foobarfoobar', 'ob', 'b'>, 'fobarfobar'>>,\n *  Expect<Equal<ReplaceAll<'foboorfoboar', 'bo', 'b'>, 'foborfobar'>>,\n */\n\n// 错误\ntype ReplaceAll<S extends string, From extends string, To extends string> =  From extends '' ? S : S extends `${infer start}${From}${infer end}` ? ReplaceAll<`${start}${To}${end}`, From, To> : S\n\n// 正确\ntype ReplaceAll<S extends string, From extends string, To extends string> =  From extends '' ? S : S extends `${infer start}${From}${infer end}` ? `${start}${To}${ReplaceAll<`${end}`, From, To>}` : S\n\n```\n</details>\n\n\n> 追加参数\n\n实现一个范型 `AppendArgument<Fn, A>`，对于给定的函数类型 `Fn`，以及一个任意类型 `A`，返回一个新的函数 `G`。`G` 拥有 `Fn 的所有参数`并在末尾追加类型为 `A` 的参数。\n\n```ts\ntype Fn = (a: number, b: string) => number\n\ntype Result = AppendArgument<Fn, boolean> \n// 期望是 (a: number, b: string, x: boolean) => number\n\n```\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype AppendArgument<Fn extends (...args: any[]) => any, T> = Fn extends ((...args: infer P) => infer R) ? (...args: [...P, T]) => R : never \n\n```\n</details>\n\n> Permutation\n\nImplement permutation type that transforms union types into the array that includes permutations of unions.\n\n```ts\ntype perm = Permutation<'A' | 'B' | 'C'>; // ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A']\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Permutation<T, U = T> = [T] extends [never] ? [] : T extends U ? [T, ...Permutation<Exclude<U, T>>] : []\n\n```\n</details>\n\n> Length of string\n\nCompute the length of a string literal, which behaves like String#length.\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype StringToArr<T extends String> = T extends `${infer F}${infer R}` ? [F, ...StringToArr<R>] : [];\n\ntype StringLength<T extends String> = StringToArr<T>['length']\n\n```\n</details>\n\n> Flatten\n\nIn this challenge, you would need to write a type that takes an array and emitted the flatten array type.\n\n```ts\ntype flatten = Flatten<[1, 2, [3, 4], [[[5]]]]> // [1, 2, 3, 4, 5]\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype Flatten<T extends any[]> = T extends [infer First, ...infer Other] ? First extends any[] ? [...Flatten<First>, ...Flatten<Other>] : [First, ...Flatten<Other>] : []\n\n```\n</details>\n\n> Append to object\n\nImplement a type that adds a new field to the interface. The type takes the three arguments. The output should be an object with the new field.\n\n```ts\ntype Test = { id: '1' }\ntype Result = AppendToObject<Test, 'value', 4> // expected to be { id: '1', value: 4 }\n```\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype AppendToObject<T extends object, U extends string, V> = { [K in keyof T | U]: K extends keyof T ? T[K] : V }\n\n\n```\n</details>\n\n> Absolute \n\n数字绝对值\n\n```ts\ntype Test = -100;\ntype Result = Absolute<Test>; // expected to be \"100\"\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Absolute<T extends number | string | bigint> = `${T}` extends `-${infer X}` ? X : `${T}`\n\n```\n</details>\n\n> String to Union\n\nImplement the String to Union type. Type take string argument. The output should be a union of input letters\n\n```ts\ntype Test = '123';\ntype Result = StringToUnion<Test>; // expected to be \"1\" | \"2\" | \"3\"\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype StringToUnion<T extends string> =  T extends `${infer F}${infer R}` ? F | StringToUnion<R> : never \n\n```\n</details>\n\n> Merge \n\nMerge two types into a new type. Keys of the second type overrides keys of the first type.\n\n```ts\ntype Foo = {\n  a: number;\n  b: string;\n};\ntype Bar = {\n  b: number;\n  c: boolean;\n};\ntype Result = Merge<Foo, Bar>; \n\n// {\n// \ta: number;\n// \tb: number;\n// \tc: boolean;\n// }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Merge<F, S> = {[key in keyof F | keyof S]: key extends keyof S ? S[key] : key extends keyof F ? F[key] : never};\n\n```\n</details>\n\n> CamelCase\n\n`for-bar-baz` -> `forBarBaz`\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Capitalize<T extends string> = T extends (`${infer first}${infer R}`) ? `${Uppercase<first>}${R}` : T;\ntype CamelCase<T extends string> = T extends `${infer start}-${infer end}` ? `${start}${CamelCase<Capitalize<end>>}` : T\n\ntype Result = CamelCase<'foo--bar----baz'> // \"fooBarBaz\"\n\ntype CamelCase<S extends string> =  S extends `${infer X}-${infer Y}` ? Y extends Capitalize<Y> ? `${X}-${CamelCase<Y>}` : `${X}${CamelCase<Capitalize<Y>>}` : S ;\n\n//foo-Bar---Baz\n\n```\n</details>\n\n> KebabCase \n\n`FooBarBaz` -> `foo-bar-baz`\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype KebabCase<S extends string, P extends string = \"\"> = \n  S extends `${infer L}${infer R}`\n    ? L extends Lowercase<L> \n      ? `${L}${KebabCase<R, \"-\">}`\n      : `${P}${Lowercase<L>}${KebabCase<R, \"-\">}`\n    : S;\n\ntype b = KebabCase<'foo-bar'>\n\n```\n</details>\n\n> Diff\n\nGet an Object that is the difference between O & O1\n\n```ts\ntype Foo = {\n  name: string\n  age: string\n}\ntype Bar = {\n  name: string\n  age: string\n  gender: number\n}\n\nExpect<Equal<Diff<Foo, Bar>, { gender: number }>>\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Diff<O, O1> = {\n  [P in (keyof O | keyof O1) as Exclude<P, keyof O & keyof O1>]: P extends keyof O\n    ? O[P]\n    : P extends keyof O1\n      ? O1[P]\n      : never;\n};\n```\n</details>\n\n\n> AnyOf\n\nImplement Python liked any function in the type system. A type takes the Array and returns true if any element of the Array is true. If the Array is empty, return false.\n\n```ts\ntype Sample1 = AnyOf<[1, \"\", false, [], {}]>; // expected to be true.\ntype Sample2 = AnyOf<[0, \"\", false, [], {}]>; // expected to be false.\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n// solution 1\ntype False = 0 | '' | false | [] | null | undefined | Record<any, never>;\ntype AnyOf<T extends readonly any[]> = T[number] extends False ? false : true;\n\n// solution 2\ntype False = 0 | '' | false | [] | null | undefined | Record<any, never>;\ntype AnyOf<T extends readonly any[]> = T extends [infer F, ...infer R] \n? F extends False ? AnyOf<R> : true \n: false;\n```\n</details>\n\n\n> isNever \n\nImplement a type IsNever, which takes input type `T`. If the type of resolves to `never`, return `true`, otherwise `false`.\n\n```\ntype A = IsNever<never>  // expected to be true\ntype B = IsNever<undefined> // expected to be false\ntype C = IsNever<null> // expected to be false\ntype D = IsNever<[]> // expected to be false\ntype E = IsNever<number> // expected to be false\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype isNever<T> = [T] extends [never] ? true : false\n\n```\n</details>\n\n> isUnion\n\nImplement a type IsUnion, which takes an input type `T` and returns whether `T` resolves to a union type.\n\n```ts\ntype case1 = IsUnion<string>  // false\ntype case2 = IsUnion<string|number>  // true\ntype case3 = IsUnion<[string|number]>  // false\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype IsUnion<T, U = T> = T extends T\n  ? (U | T) extends (U & T) ? false : true\n  : never\n\n```\n</details>\n\n> ReplaceKeys \n\nImplement a type ReplaceKeys, that replace keys in union types, if some type has not this key, just skip replacing, A type takes three arguments.\n如果\n\n```ts\ntype NodeA = {\n  type: 'A'\n  name: string\n  flag: number\n}\n\ntype NodeB = {\n  type: 'B'\n  id: number\n  flag: number\n}\n\ntype NodeC = {\n  type: 'C'\n  name: string\n  flag: number\n}\n\n\ntype Nodes = NodeA | NodeB | NodeC\n\ntype ReplacedNodes = ReplaceKeys<Nodes, 'name' | 'flag', {name: number, flag: string}> // {type: 'A', name: number, flag: string} | {type: 'B', id: number, flag: string} | {type: 'C', name: number, flag: string} // would replace name from string to number, replace flag from number to string.\n\ntype ReplacedNotExistKeys = ReplaceKeys<Nodes, 'name', {aa: number}> // {type: 'A', name: never, flag: number} | NodeB | {type: 'C', name: never, flag: number} // would replace name to never\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype ReplaceKeys<T, K, V> = {\n  [key in keyof T]: key extends K \n    ? key extends keyof V \n      ? V[key]\n      : never\n    : T[key]\n}\n\n```\n</details>\n\n> Remove Index Signature\n\nImplement `RemoveIndexSignature<T>`, exclude the index signature from object types.\n\n```ts\ntype Foo = {\n  [key: string]: any;\n  foo(): void;\n}\n\ntype A = RemoveIndexSignature<Foo>  // expected { foo(): void }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype RemoveIndexSignature<T> = {\n  [key in keyof T as string extends key ? never : key extends number ? never : key]: T[key]\n}\n\n```\n</details>\n\n\n> Percentage Parser\n\nImplement PercentageParser. According to the `/^(\\+|\\-)?(\\d*)?(\\%)?$/` regularity to match `T` and get three matches.\n\nThe structure should be: `[plus or minus, number, unit]` If it is not captured, the default is an empty string.\n\n```ts\ntype PString1 = ''\ntype PString2 = '+85%'\ntype PString3 = '-85%'\ntype PString4 = '85%'\ntype PString5 = '85'\n\ntype R1 = PercentageParser<PString1>  // expected ['', '', '']\ntype R2 = PercentageParser<PString2>  // expected [\"+\", \"85\", \"%\"]\ntype R3 = PercentageParser<PString3>  // expected [\"-\", \"85\", \"%\"]\ntype R4 = PercentageParser<PString4>  // expected [\"\", \"85\", \"%\"]\ntype R5 = PercentageParser<PString5>  // expected [\"\", \"85\", \"\"]\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype PickPrefix<T extends string, S extends string> = T extends `${S}${infer P}`\n    ? T extends `${infer R}${P}` ? R : never\n    : '';\n\ntype PickSuffix<T extends string, S extends string> = T extends `${infer P}${S}`\n    ? T extends `${P}${infer R}` ? R : never\n    : '';\n\ntype PercentageParser<T extends string> = T extends `${PickPrefix<T, '+' | '-'>}${infer B}${PickSuffix<T, '%'>}`\n    ? T extends `${infer A}${B}${infer C}`\n        ? [A, B, C]\n        : ['', '', '']\n    : ['', '', ''];\n\n```\n</details>\n\n> Drop Char\n\nDrop a specified char from a string.\n\n```ts\ntype Butterfly = DropChar<' b u t t e r f l y ! ', ' '> // 'butterfly!'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype DropChar<S, C> = S extends `${infer X}${infer Y}` ? `${X extends C ? \"\" : X}${DropChar<Y, C>}` : \"\"  \n```\n</details>\n\n> MinusOne \n\nGiven a number (always positive) as a type. Your type should return the number decreased by one.\n\n```ts\ntype Zero = MinusOne<1> // 0\ntype FiftyFour = MinusOne<55> // 54\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n[拓展](https://github.com/type-challenges/type-challenges/issues/5768)\n```ts\ntype Pop<T extends any[]> = T extends [...infer head, any] ? head : never; \n\ntype MinusOne<T extends number, A extends any[] = []> = A['length'] extends T\n  ? Pop<A>['length']\n  : MinusOne<T, [...A, 0]>\n```\n</details>\n\n> PickByType\n\nFrom `T`, pick a set of properties whose type are assignable to `U`.\n\n```ts\ntype OnlyBoolean = PickByType<{\n  name: string\n  count: number\n  isReadonly: boolean\n  isEnable: boolean\n}, boolean> // { isReadonly: boolean; isEnable: boolean; }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype PickByType<T, U> = {\n  [key in keyof T as T[key] extends U ? key : never]: T[key] \n}\n```\n</details>\n\n> StartsWith\n\nImplement `StartsWith<T, U>` which takes two exact string types and returns whether `T` starts with `U`\n\n```ts\ntype a = StartsWith<'abc', 'ac'> // expected to be false\ntype b = StartsWith<'abc', 'ab'> // expected to be true\ntype c = StartsWith<'abc', 'abcd'> // expected to be false\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype StartsWith<T extends string, U extends string> = T extends `${U}${infer Other}` ? true : false\n```\n</details>\n\n> EndsWith\n\nImplement `EndsWith<T, U>` which takes two exact string types and returns whether `T` ends with `U`\n\n```ts\ntype a = EndsWith<'abc', 'bc'> // expected to be true\ntype b = EndsWith<'abc', 'ab'> // expected to be false\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype EndsWith<T extends string, U extends string> = T extends `${infer Other}${U}` ? true : false\n```\n</details>\n\n> PartialByKeys\n\nImplement a generic `PartialByKeys<T, K>` which takes two type argument `T` and `K`.\n\n`K` specify the set of properties of `T` that should set to be optional. When `K` is not provided, it should make all properties optional just like the normal `Partial<T>`.\n\n```ts\ninterface User {\n  name: string\n  age: number\n  address: string\n}\n\ntype UserPartialName = PartialByKeys<User, 'name'> // { name?:string; age:number; address:string }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Merge<A, B> = Pick<A & B, keyof A | keyof B>\ntype PartialByKeys<T , K = keyof T> = Merge<{[key in keyof T as key extends K ? key : never]?: T[key]}, {[key in keyof T as key extends K ? never : key]: T[key]}>\n```\n</details>\n\n\n> RequiredByKeys\n\nImplement a generic `RequiredByKeys<T, K>` which takes two type argument `T` and `K`.\n\n`K` specify the set of properties of `T` that should set to be required. When `K` is not provided, it should make all properties required just like the normal `Required<T>`.\n\n```ts\ninterface User {\n  name?: string\n  age?: number\n  address?: string\n}\n\ntype UserPartialName = RequiredByKeys<User, 'name'> // { name: string; age?: number; address?: string }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Merge<A, B> = Pick<A & B, keyof A | keyof B>\ntype IsRequire<T, U> = {\n  [key in keyof T as key extends U  ? key : never]-?: T[key]\n}\n\ntype Origin<T, U> = {\n  [key in keyof T as key extends U  ? never : key]: T[key]\n}\n\ntype RequiredByKeys<T, U = keyof T> = Merge<IsRequire<T, U>, Origin<T, U>>\n\n```\n</details>\n\n\n> Mutable\n\nImplement the generic `Mutable<T>` which makes all properties in `T` mutable (not readonly).\n\n```ts\ninterface Todo {\n  readonly title: string\n  readonly description: string\n  readonly completed: boolean\n}\n\ntype MutableTodo = Mutable<Todo> // { title: string; description: string; completed: boolean; }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Mutable<T> = {\n  -readonly [key in keyof T]: T[key]\n}\n\n```\n</details>\n\n> OmitByType\n\nFrom `T`, pick a set of properties whose type are not assignable to `U`.\n\n```ts\ntype OmitBoolean = OmitByType<{\n  name: string\n  count: number\n  isReadonly: boolean\n  isEnable: boolean\n}, boolean> // { name: string; count: number }\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype OmitByType<T, U> = {\n  [key in keyof T as T[key] extends U ? never : key]: T[key]\n}\n\n```\n</details>\n\n> ObjectEntries \n\nImplement the type version of `Object.entries`\n\n```ts\ninterface Model {\n  name: string; \n  age: number;\n  locations: string[] | null;\n}\ntype modelEntries = ObjectEntries<Model> // ['name', string] | ['age', number] | ['locations', string[] | null];\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype ObjectEntries<T, K = keyof T> = K extends keyof T ? [K, Required<T>[K]] : never;\n\n```\n</details>\n\n> Shift\n\nImplement the type version of `Array.shift`\n\n```ts\ntype Result = Shift<[3, 2, 1]> // [2, 1]\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Shift<T extends any[]> = T extends [infer First, ...infer Other] ? Other : never\n\n```\n</details>\n\n> Tuple to Nested Object\n\nGiven a tuple type `T` that only contains string type, and a type `U`, build an object recursively.\n\n```ts\ntype a = TupleToNestedObject<['a'], string> // {a: string}\ntype b = TupleToNestedObject<['a', 'b'], number> // {a: {b: number}}\ntype c = TupleToNestedObject<[], boolean> // boolean. if the tuple is empty, just return the U type\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype TupleToNestedObject<T extends any[], U> = T['length'] extends 0 ? U : T extends [infer First, ...infer Other] \n  ? { [P in T[0]]: Other['length'] extends 0 ? U : TupleToNestedObject<Other, U> }\n  : never\n\n```\n</details>\n\n> Reverse\n\nImplement the type version of `Array.reverse`\n\n```ts\ntype a = Reverse<['a', 'b']> // ['b', 'a']\ntype b = Reverse<['a', 'b', 'c']> // ['c', 'b', 'a']\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Reverse<T extends any[]> = T extends [...infer Other, infer Last] ? [Last, ...Reverse<Other>] : []\n\n```\n</details>\n\n> Flip Arguments\n\nImplement the type version of lodash's `_.flip`.\n\nType `FlipArguments<T>` requires function type `T` and returns a new function type which has the same return type of T but reversed parameters.\n\n```ts\ntype Flipped = FlipArguments<(arg0: string, arg1: number, arg2: boolean) => void> \n// (arg0: boolean, arg1: number, arg2: string) => void\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Reverse<T extends any[]> = T extends [...infer Other, infer Last] ? [Last, ...Reverse<Other>] : []\n\ntype FlipArguments<T extends (...args: any[]) => any > = T extends (...args: infer P) => infer Q\n  ? (...args: Reverse<P>) => Q\n  : never;\n\n```\n</details>\n\n> FlattenDepth\n\nRecursively flatten array up to depth times.\n\n```ts\ntype a = FlattenDepth<[1, 2, [3, 4], [[[5]]]], 2> // [1, 2, 3, 4, [5]]. flattern 2 times\ntype b = FlattenDepth<[1, 2, [3, 4], [[[5]]]]> // [1, 2, 3, 4, [[5]]]. Depth defaults to be 1\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype FlattenOnce<T extends unknown[]> = T extends [infer First, ...infer Rest]\n? First extends unknown[]\n  ? [...First, ...FlattenOnce<Rest>]\n  : [First, ...FlattenOnce<Rest>]\n: [];\ntype t1 = FlattenOnce<[[2], [[3]], 4]>;\ntype FlattenDepth<T extends unknown[], N extends number = 1, C extends unknown[] = []>\n= C[\"length\"] extends N ? T\n: T extends FlattenOnce<T> ? T\n: FlattenDepth<FlattenOnce<T>, N, [...C, unknown]>;\n\n```\n</details>","source":"_posts/typescript 类型体操.md","raw":"---\ntitle: typecript 类型体操\ndate: 2022-01-05 22:35:35\ntags: [typescript]\ncategories: [typescript]\n---\n\n[原网站](https://github.com/type-challenges/type-challenges/blob/master/README.zh-CN.md)\n\n## 简单（easy）\n\n> pick\n\n```ts\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyPick<Todo, 'title' | 'completed'>\n\nconst todo: TodoPreview = {\n    title: 'Clean room',\n    completed: false,\n}\n```\n\n<details>\n<summary><mark>说明 </mark></summary>\n\n```ts\ntype Pick<T extends Object, K extends keyof T> = {\n  [P in K]: T[P]\n}\n```\n</details>\n\n> ReadOnly\n\n```ts\ninterface Todo {\n  title: string\n  description: string\n}\n\nconst todo: MyReadonly<Todo> = {\n  title: \"Hey\",\n  description: \"foobar\"\n}\n\ntodo.title = \"Hello\" // Error: cannot reassign a readonly property\ntodo.description = \"barFoo\" // Error: cannot reassign a readonly property\n```\n<details>\n<summary><mark>说明 </mark></summary>\n\n```ts\ntype ReadOnly<T extends Object> = {\n  readonly [P in keyof T]: T[P]\n}\n```\n</details>\n\n\n> 元组转换成对象\n\n```ts\nconst tuple = ['tesla', 'model 3', 'model X', 'model Y'] as const\n\ntype result = TupleToObject<typeof tuple> // expected { tesla: 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'}\n```\n\n<details>\n<summary><mark>说明 </mark></summary>\n\n```ts\ntype TupleToObject<T extends readonly string[]> = {\n  [P in T[number]]: P\n}\n```\n</details>\n\n> 第一个元素\n\n```ts\ntype arr1 = ['a', 'b', 'c']\ntype arr2 = [3, 2, 1]\n\ntype head1 = First<arr1> // expected to be 'a'\ntype head2 = First<arr2> // expected to be 3\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype First<T extends any[]> = T extends [infer Result,...infer Rest] ? Result : never;\n```\n</details>\n\n> 获取元素长度\n\n```ts\ntype tesla = ['tesla', 'model 3', 'model X', 'model Y']\ntype spaceX = ['FALCON 9', 'FALCON HEAVY', 'DRAGON', 'STARSHIP', 'HUMAN SPACEFLIGHT']\n\ntype teslaLength = Length<tesla> // expected 4\ntype spaceXLength = Length<spaceX> // expected 5\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Length<T extends readonly any[]> = T['length'];\n```\n</details>\n\n> Exclude\n\n```ts\n/** \n * 实现内置的Exclude <T，U>类型，但不能直接使用它本身。\n * 从联合类型T中排除U的类型成员，来构造一个新的类型。\n*/\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Exclude<T, U> = T extends U ? never : T\n```\n</details>\n\n> Awaited\n\n```ts\n假如我们有一个 Promise 对象，这个 Promise 对象会返回一个类型。在 TS 中，我们用 Promise 中的 T 来描述这个 Promise 返回的类型。请你实现一个类型，可以获取这个类型。\n\n比如：Promise<ExampleType>，请你返回 ExampleType 类型。\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype MyAwaited<T> = T extends Promise<infer P> ? MyAwaited<P> : T;\n```\n</details>\n\n> IF\n\n实现一个 `IF` 类型，它接收一个条件类型 `C` ，一个判断为真时的返回类型 `T` ，以及一个判断为假时的返回类型 `F`。 `C` 只能是 `true` 或者 `false`， `T` 和 `F` 可以是任意类型。\n\n```ts\ntype A = If<true, 'a', 'b'>  // expected to be 'a'\ntype B = If<false, 'a', 'b'> // expected to be 'b'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype If<C extends boolean, T, F> = T extends true ? T : F;\n```\n</details>\n\n> Concat\n\n在类型系统里实现 `JavaScript` 内置的 `Array.concat` 方法，这个类型接受两个参数，返回的新数组类型应该按照输入参数从左到右的顺序合并为一个新的数组。\n\n```ts\ntype Result = Concat<[1], [2]> // expected to be [1, 2]\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Concat<T extends any[], P extends any[]> = [...T, ...P]\n```\n</details>\n\n\n> Include\n\n在类型系统里实现 `JavaScript` 的 `Array.includes` 方法，这个类型接受两个参数，返回的类型要么是 `true` 要么是 `false`。\n\n```ts\ntype isPillarMen = Includes<['Kars', 'Esidisi', 'Wamuu', 'Santana'], 'Dio'> // expected to be `false`\n```\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Include<T extends readonly any[], P> = T extends [infer First,...infer Other] ? (Equal<First,U> extends true ? true: Includes<Other,U>) :false \n```\n</details>\n\n> Push\n\n在类型系统里实现通用的 `Array.push` 。\n\n```ts\ntype Result = Push<[1, 2], '3'> // [1, 2, '3']\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Push<T extends any[], U> = [...T, U]\n```\n</details>\n\n\n> Unshift\n\n实现类型版本的 `Array.unshift`。\n\n```ts\ntype Result = Unshift<[1, 2], 0> // [0, 1, 2,]\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Unshift<T extends any[], U> = [U, ...T]\n```\n</details>\n\n> Parameters\n\n实现内置的 Parameters 类型，而不是直接使用它，可参考[TypeScript官方文档](https://www.typescriptlang.org/docs/handbook/utility-types.html#parameterstype)。\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype MyParameters<T extends (...args: any[]) => any> = T extends (...args: infer P) => any ? P : never;\n```\n</details>\n\n## 中等\n\n> 获取函数返回类型 ReturnType\n\n不使用 `ReturnType` 实现 `TypeScript` 的 `ReturnType<T>` 范型。\n\n```ts\nconst fn = (v: boolean) => {\n  if (v)\n    return 1\n  else\n    return 2\n}\n\ntype a = MyReturnType<typeof fn> // 应推导出 \"1 | 2\"\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype MyReturnType<T extends (...args: any[]) => any> = T extends (...args: any[]) => infer R ? R : never\n```\n</details>\n\n\n> 实现 omit\n\n不使用 `Omit` 实现 `TypeScript` 的 `Omit<T, K>` 范型。\n\n`Omit` 会创建一个省略 `K` 中字段的 `T` 对象。\n\n```tsx\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyOmit<Todo, 'description' | 'title'>\n\nconst todo: TodoPreview = {\n  completed: false,\n}\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype MyPick<T, K extends keyof T> = {\n  [key in K]: T[key]\n}\n\ntype MyExclude<T, P> = T extends P ? never : T\n\ntype MyOmit<T, K extends keyof T> = MyPick<T, MyExclude<keyof T, K>>\n```\n</details>\n\n> Readonly 2\n\n实现一个通用`MyReadonly2<T, K>`，它带有两种类型的参数`T`和`K`。\n\n`K`指定应设置为`Readonly`的`T`的属性集。如果未提供`K`，则应使所有属性都变为只读，就像普通的`Readonly<T>`一样。\n\n```ts\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\nconst todo: MyReadonly2<Todo, 'title' | 'description'> = {\n  title: \"Hey\",\n  description: \"foobar\",\n  completed: false,\n}\n\ntodo.title = \"Hello\" // Error: cannot reassign a readonly property\ntodo.description = \"barFoo\" // Error: cannot reassign a readonly property\ntodo.completed = true // OK\n```\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype MyReadonly<T> = {\n  readonly [P in keyof T]: T[P]\n}\n\ntype MyPick<T, K extends keyof T> = { [P in K]: T[P] }\n\ntype MyExclude<T, K> = T extends K ? never : T;\n\ntype MyOmit<T, K extends keyof T> = { [P in MyExclude<keyof T, K>]: T[P]}\n \n type MyReadonly2<T, K extends keyof T = keyof T> =MyReadonly<MyPick<T, K>>  & MyOmit<T, K>\n```\n</details>\n\n> 深度Readonly\n\n实现一个通用的DeepReadonly<T>，它将对象的每个参数及其子对象递归地设为只读。\n\n您可以假设在此挑战中我们仅处理对象。数组，函数，类等都无需考虑。但是，您仍然可以通过覆盖尽可能多的不同案例来挑战自己。\n\n```ts\ntype X = { \n  x: { \n    a: 1\n    b: 'hi'\n  }\n  y: 'hey'\n}\n\ntype Expected = { \n  readonly x: { \n    readonly a: 1\n    readonly b: 'hi'\n  }\n  readonly y: 'hey' \n}\n\ntype Todo = DeepReadonly<X> // should be same as `Expected`\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype DeepReadonly<T extends Object> = {\n  readonly [P in keyof T]: keyof T[P] extends never ? T[P] : DeepReadonly<T[P]>\n}\n\n```\n</details>\n\n> 元组转合集\n\n实现泛型`TupleToUnion<T>`，它覆盖元组的值与其值联合。\n\n\n```ts\ntype Arr = ['1', '2', '3']\n\ntype Test = TupleToUnion<Arr> // expected to be '1' | '2' | '3'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype TupleToUnion<T extends any[]> = T extends [infer First,...infer Other] ? First | TupleToUnion<Other> : never;\n\n// 或者\n\ntype TupleToUnion<T extends any[]> = T[number];\n\n```\n</details>\n\n> 最后一个元素\n\n实现一个通用`Last<T>`，它接受一个`数组T`并返回其最后一个元素的类型。\n\n```ts\ntype arr1 = ['a', 'b', 'c']\ntype arr2 = [3, 2, 1]\n\ntype tail1 = Last<arr1> // expected to be 'c'\ntype tail2 = Last<arr2> // expected to be 1\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype Last<T extends any[]> = T extends [...infer K, infer Other] ? Other : never\n\n//或者\ntype Last<T extends any[]> = T extends [any, ...infer Rest] ? T[Rest['length']] : never\n\n```\n</details>\n\n> 出堆\n\n实现一个通用Pop<T>，它接受一个数组T并返回一个没有最后一个元素的数组。\n\n```ts\ntype arr1 = ['a', 'b', 'c', 'd']\ntype arr2 = [3, 2, 1]\n\ntype re1 = Pop<arr1> // expected to be ['a', 'b', 'c']\ntype re2 = Pop<arr2> // expected to be [3, 2]\n```\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype Pop<T extends any[]> = T extends [...infer K, infer Other] ? K : never\n\n```\n</details>\n\n\n> promise.all\n\n\n```TS\nconst promise1 = Promise.resolve(3);\nconst promise2 = 42;\nconst promise3 = new Promise<string>((resolve, reject) => {\n  setTimeout(resolve, 100, 'foo');\n});\n\n// expected to be `Promise<[number, number, string]>`\nconst p = Promise.all([promise1, promise2, promise3] as const)\n\n// declare function PromiseAll(values: any): any\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n// 跟上面awaited 相似\ntype MyAwaited<T> = T extends Promise<infer P> ? MyAwaited<P> : T;\n/** declare 重定义function, (values: readonly [...T]) 函数参数 Promise<> */\ndeclare function PromiseAll<T extends any[]>(values: readonly [...T]): Promise<{\n  [K in keyof T]:  MyAwaited<T[K]>\n}>\n\n```\n</details>\n\n> Type Lookup\n\n在此挑战中，我们想通过在联合`Cat | Dog`中搜索公共`type`字段来获取相应的类型。换句话说，在以下示例中，我们期望`LookUp<Dog | Cat, 'dog'>`获得`Dog`，`LookUp<Dog | Cat, 'cat'>`获得`Cat`。\n\n```ts\n\ninterface Cat {\n  type: 'cat'\n  breeds: 'Abyssinian' | 'Shorthair' | 'Curl' | 'Bengal'\n}\n\ninterface Dog {\n  type: 'dog'\n  breeds: 'Hound' | 'Brittany' | 'Bulldog' | 'Boxer'\n  color: 'brown' | 'white' | 'black'\n}\n\ntype MyDog = LookUp<Cat | Dog, 'dog'> // expected to be `Dog`\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype LookUP<T, U> = T extends { type: string } ? (T['type'] extends U ? T : never )  : never\n\n```\n</details>\n\n> Trim Left\n\n实现 `TrimLeft<T>` ，它接收确定的字符串类型并返回一个新的字符串，其中新返回的字符串删除了原字符串开头的空白字符串。\n\n```ts\ntype trimed = TrimLeft<'  Hello World  '> // 应推导出 'Hello World  '\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype TrimLet<T extends string> = T extends `${' '| '\\n' | '\\t'}${infer Rest}` ? TrimLeft<Rest> : T;\n\n```\n</details>\n\n> Trim\n\n```ts\ntype trimed = Trim<'  Hello World  '> // expected to be 'Hello World'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype SpaceChar = ' ' | '\\n' | '\\t'\ntype Trim<S extends string> = S extends (`${SpaceChar}${infer R}` | `${infer R}${SpaceChar}`) ? Trim<R> : S\n\n```\n</details>\n\n\n> Capitalize \n\n首字母大写\n\n```ts\ntype capitalized = Capitalize<'hello world'> // expected to be 'Hello world'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Capitalize<T extends string> = T extends (`${infer first}${infer R}`) ? `${Uppercase<first>}${R}` : T;\n\n```\n</details>\n\n> Replace\n\n实现 `Replace<S, From, To`> 将字符串 `S` 中的第一个子字符串 `From` 替换为 `To` 。\n\n```ts\ntype replaced = Replace<'types are fun!', 'fun', 'awesome'> // 期望是 'types are awesome!'\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Replace<S extends string, From extends string, To extends string> = From extends '' ? S : S extends `${infer start}${From}${infer end}` ? `${start}${To}${end}` : S\n\n```\n</details>\n\n> ReplaceAll\n\n实现 `ReplaceAll<S, From, To>` 将一个字符串 `S` 中的所有子字符串 `From` 替换为 `To`。\n\n```ts\ntype replaced = ReplaceAll<'t y p e s', ' ', ''> // 期望是 'types'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n/**\n * 请注意以下两种情况\n *  Expect<Equal<ReplaceAll<'foobarfoobar', 'ob', 'b'>, 'fobarfobar'>>,\n *  Expect<Equal<ReplaceAll<'foboorfoboar', 'bo', 'b'>, 'foborfobar'>>,\n */\n\n// 错误\ntype ReplaceAll<S extends string, From extends string, To extends string> =  From extends '' ? S : S extends `${infer start}${From}${infer end}` ? ReplaceAll<`${start}${To}${end}`, From, To> : S\n\n// 正确\ntype ReplaceAll<S extends string, From extends string, To extends string> =  From extends '' ? S : S extends `${infer start}${From}${infer end}` ? `${start}${To}${ReplaceAll<`${end}`, From, To>}` : S\n\n```\n</details>\n\n\n> 追加参数\n\n实现一个范型 `AppendArgument<Fn, A>`，对于给定的函数类型 `Fn`，以及一个任意类型 `A`，返回一个新的函数 `G`。`G` 拥有 `Fn 的所有参数`并在末尾追加类型为 `A` 的参数。\n\n```ts\ntype Fn = (a: number, b: string) => number\n\ntype Result = AppendArgument<Fn, boolean> \n// 期望是 (a: number, b: string, x: boolean) => number\n\n```\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype AppendArgument<Fn extends (...args: any[]) => any, T> = Fn extends ((...args: infer P) => infer R) ? (...args: [...P, T]) => R : never \n\n```\n</details>\n\n> Permutation\n\nImplement permutation type that transforms union types into the array that includes permutations of unions.\n\n```ts\ntype perm = Permutation<'A' | 'B' | 'C'>; // ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A']\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Permutation<T, U = T> = [T] extends [never] ? [] : T extends U ? [T, ...Permutation<Exclude<U, T>>] : []\n\n```\n</details>\n\n> Length of string\n\nCompute the length of a string literal, which behaves like String#length.\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype StringToArr<T extends String> = T extends `${infer F}${infer R}` ? [F, ...StringToArr<R>] : [];\n\ntype StringLength<T extends String> = StringToArr<T>['length']\n\n```\n</details>\n\n> Flatten\n\nIn this challenge, you would need to write a type that takes an array and emitted the flatten array type.\n\n```ts\ntype flatten = Flatten<[1, 2, [3, 4], [[[5]]]]> // [1, 2, 3, 4, 5]\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype Flatten<T extends any[]> = T extends [infer First, ...infer Other] ? First extends any[] ? [...Flatten<First>, ...Flatten<Other>] : [First, ...Flatten<Other>] : []\n\n```\n</details>\n\n> Append to object\n\nImplement a type that adds a new field to the interface. The type takes the three arguments. The output should be an object with the new field.\n\n```ts\ntype Test = { id: '1' }\ntype Result = AppendToObject<Test, 'value', 4> // expected to be { id: '1', value: 4 }\n```\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype AppendToObject<T extends object, U extends string, V> = { [K in keyof T | U]: K extends keyof T ? T[K] : V }\n\n\n```\n</details>\n\n> Absolute \n\n数字绝对值\n\n```ts\ntype Test = -100;\ntype Result = Absolute<Test>; // expected to be \"100\"\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Absolute<T extends number | string | bigint> = `${T}` extends `-${infer X}` ? X : `${T}`\n\n```\n</details>\n\n> String to Union\n\nImplement the String to Union type. Type take string argument. The output should be a union of input letters\n\n```ts\ntype Test = '123';\ntype Result = StringToUnion<Test>; // expected to be \"1\" | \"2\" | \"3\"\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype StringToUnion<T extends string> =  T extends `${infer F}${infer R}` ? F | StringToUnion<R> : never \n\n```\n</details>\n\n> Merge \n\nMerge two types into a new type. Keys of the second type overrides keys of the first type.\n\n```ts\ntype Foo = {\n  a: number;\n  b: string;\n};\ntype Bar = {\n  b: number;\n  c: boolean;\n};\ntype Result = Merge<Foo, Bar>; \n\n// {\n// \ta: number;\n// \tb: number;\n// \tc: boolean;\n// }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Merge<F, S> = {[key in keyof F | keyof S]: key extends keyof S ? S[key] : key extends keyof F ? F[key] : never};\n\n```\n</details>\n\n> CamelCase\n\n`for-bar-baz` -> `forBarBaz`\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Capitalize<T extends string> = T extends (`${infer first}${infer R}`) ? `${Uppercase<first>}${R}` : T;\ntype CamelCase<T extends string> = T extends `${infer start}-${infer end}` ? `${start}${CamelCase<Capitalize<end>>}` : T\n\ntype Result = CamelCase<'foo--bar----baz'> // \"fooBarBaz\"\n\ntype CamelCase<S extends string> =  S extends `${infer X}-${infer Y}` ? Y extends Capitalize<Y> ? `${X}-${CamelCase<Y>}` : `${X}${CamelCase<Capitalize<Y>>}` : S ;\n\n//foo-Bar---Baz\n\n```\n</details>\n\n> KebabCase \n\n`FooBarBaz` -> `foo-bar-baz`\n\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype KebabCase<S extends string, P extends string = \"\"> = \n  S extends `${infer L}${infer R}`\n    ? L extends Lowercase<L> \n      ? `${L}${KebabCase<R, \"-\">}`\n      : `${P}${Lowercase<L>}${KebabCase<R, \"-\">}`\n    : S;\n\ntype b = KebabCase<'foo-bar'>\n\n```\n</details>\n\n> Diff\n\nGet an Object that is the difference between O & O1\n\n```ts\ntype Foo = {\n  name: string\n  age: string\n}\ntype Bar = {\n  name: string\n  age: string\n  gender: number\n}\n\nExpect<Equal<Diff<Foo, Bar>, { gender: number }>>\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Diff<O, O1> = {\n  [P in (keyof O | keyof O1) as Exclude<P, keyof O & keyof O1>]: P extends keyof O\n    ? O[P]\n    : P extends keyof O1\n      ? O1[P]\n      : never;\n};\n```\n</details>\n\n\n> AnyOf\n\nImplement Python liked any function in the type system. A type takes the Array and returns true if any element of the Array is true. If the Array is empty, return false.\n\n```ts\ntype Sample1 = AnyOf<[1, \"\", false, [], {}]>; // expected to be true.\ntype Sample2 = AnyOf<[0, \"\", false, [], {}]>; // expected to be false.\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n// solution 1\ntype False = 0 | '' | false | [] | null | undefined | Record<any, never>;\ntype AnyOf<T extends readonly any[]> = T[number] extends False ? false : true;\n\n// solution 2\ntype False = 0 | '' | false | [] | null | undefined | Record<any, never>;\ntype AnyOf<T extends readonly any[]> = T extends [infer F, ...infer R] \n? F extends False ? AnyOf<R> : true \n: false;\n```\n</details>\n\n\n> isNever \n\nImplement a type IsNever, which takes input type `T`. If the type of resolves to `never`, return `true`, otherwise `false`.\n\n```\ntype A = IsNever<never>  // expected to be true\ntype B = IsNever<undefined> // expected to be false\ntype C = IsNever<null> // expected to be false\ntype D = IsNever<[]> // expected to be false\ntype E = IsNever<number> // expected to be false\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype isNever<T> = [T] extends [never] ? true : false\n\n```\n</details>\n\n> isUnion\n\nImplement a type IsUnion, which takes an input type `T` and returns whether `T` resolves to a union type.\n\n```ts\ntype case1 = IsUnion<string>  // false\ntype case2 = IsUnion<string|number>  // true\ntype case3 = IsUnion<[string|number]>  // false\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype IsUnion<T, U = T> = T extends T\n  ? (U | T) extends (U & T) ? false : true\n  : never\n\n```\n</details>\n\n> ReplaceKeys \n\nImplement a type ReplaceKeys, that replace keys in union types, if some type has not this key, just skip replacing, A type takes three arguments.\n如果\n\n```ts\ntype NodeA = {\n  type: 'A'\n  name: string\n  flag: number\n}\n\ntype NodeB = {\n  type: 'B'\n  id: number\n  flag: number\n}\n\ntype NodeC = {\n  type: 'C'\n  name: string\n  flag: number\n}\n\n\ntype Nodes = NodeA | NodeB | NodeC\n\ntype ReplacedNodes = ReplaceKeys<Nodes, 'name' | 'flag', {name: number, flag: string}> // {type: 'A', name: number, flag: string} | {type: 'B', id: number, flag: string} | {type: 'C', name: number, flag: string} // would replace name from string to number, replace flag from number to string.\n\ntype ReplacedNotExistKeys = ReplaceKeys<Nodes, 'name', {aa: number}> // {type: 'A', name: never, flag: number} | NodeB | {type: 'C', name: never, flag: number} // would replace name to never\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype ReplaceKeys<T, K, V> = {\n  [key in keyof T]: key extends K \n    ? key extends keyof V \n      ? V[key]\n      : never\n    : T[key]\n}\n\n```\n</details>\n\n> Remove Index Signature\n\nImplement `RemoveIndexSignature<T>`, exclude the index signature from object types.\n\n```ts\ntype Foo = {\n  [key: string]: any;\n  foo(): void;\n}\n\ntype A = RemoveIndexSignature<Foo>  // expected { foo(): void }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype RemoveIndexSignature<T> = {\n  [key in keyof T as string extends key ? never : key extends number ? never : key]: T[key]\n}\n\n```\n</details>\n\n\n> Percentage Parser\n\nImplement PercentageParser. According to the `/^(\\+|\\-)?(\\d*)?(\\%)?$/` regularity to match `T` and get three matches.\n\nThe structure should be: `[plus or minus, number, unit]` If it is not captured, the default is an empty string.\n\n```ts\ntype PString1 = ''\ntype PString2 = '+85%'\ntype PString3 = '-85%'\ntype PString4 = '85%'\ntype PString5 = '85'\n\ntype R1 = PercentageParser<PString1>  // expected ['', '', '']\ntype R2 = PercentageParser<PString2>  // expected [\"+\", \"85\", \"%\"]\ntype R3 = PercentageParser<PString3>  // expected [\"-\", \"85\", \"%\"]\ntype R4 = PercentageParser<PString4>  // expected [\"\", \"85\", \"%\"]\ntype R5 = PercentageParser<PString5>  // expected [\"\", \"85\", \"\"]\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype PickPrefix<T extends string, S extends string> = T extends `${S}${infer P}`\n    ? T extends `${infer R}${P}` ? R : never\n    : '';\n\ntype PickSuffix<T extends string, S extends string> = T extends `${infer P}${S}`\n    ? T extends `${P}${infer R}` ? R : never\n    : '';\n\ntype PercentageParser<T extends string> = T extends `${PickPrefix<T, '+' | '-'>}${infer B}${PickSuffix<T, '%'>}`\n    ? T extends `${infer A}${B}${infer C}`\n        ? [A, B, C]\n        : ['', '', '']\n    : ['', '', ''];\n\n```\n</details>\n\n> Drop Char\n\nDrop a specified char from a string.\n\n```ts\ntype Butterfly = DropChar<' b u t t e r f l y ! ', ' '> // 'butterfly!'\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype DropChar<S, C> = S extends `${infer X}${infer Y}` ? `${X extends C ? \"\" : X}${DropChar<Y, C>}` : \"\"  \n```\n</details>\n\n> MinusOne \n\nGiven a number (always positive) as a type. Your type should return the number decreased by one.\n\n```ts\ntype Zero = MinusOne<1> // 0\ntype FiftyFour = MinusOne<55> // 54\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n[拓展](https://github.com/type-challenges/type-challenges/issues/5768)\n```ts\ntype Pop<T extends any[]> = T extends [...infer head, any] ? head : never; \n\ntype MinusOne<T extends number, A extends any[] = []> = A['length'] extends T\n  ? Pop<A>['length']\n  : MinusOne<T, [...A, 0]>\n```\n</details>\n\n> PickByType\n\nFrom `T`, pick a set of properties whose type are assignable to `U`.\n\n```ts\ntype OnlyBoolean = PickByType<{\n  name: string\n  count: number\n  isReadonly: boolean\n  isEnable: boolean\n}, boolean> // { isReadonly: boolean; isEnable: boolean; }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype PickByType<T, U> = {\n  [key in keyof T as T[key] extends U ? key : never]: T[key] \n}\n```\n</details>\n\n> StartsWith\n\nImplement `StartsWith<T, U>` which takes two exact string types and returns whether `T` starts with `U`\n\n```ts\ntype a = StartsWith<'abc', 'ac'> // expected to be false\ntype b = StartsWith<'abc', 'ab'> // expected to be true\ntype c = StartsWith<'abc', 'abcd'> // expected to be false\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype StartsWith<T extends string, U extends string> = T extends `${U}${infer Other}` ? true : false\n```\n</details>\n\n> EndsWith\n\nImplement `EndsWith<T, U>` which takes two exact string types and returns whether `T` ends with `U`\n\n```ts\ntype a = EndsWith<'abc', 'bc'> // expected to be true\ntype b = EndsWith<'abc', 'ab'> // expected to be false\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype EndsWith<T extends string, U extends string> = T extends `${infer Other}${U}` ? true : false\n```\n</details>\n\n> PartialByKeys\n\nImplement a generic `PartialByKeys<T, K>` which takes two type argument `T` and `K`.\n\n`K` specify the set of properties of `T` that should set to be optional. When `K` is not provided, it should make all properties optional just like the normal `Partial<T>`.\n\n```ts\ninterface User {\n  name: string\n  age: number\n  address: string\n}\n\ntype UserPartialName = PartialByKeys<User, 'name'> // { name?:string; age:number; address:string }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Merge<A, B> = Pick<A & B, keyof A | keyof B>\ntype PartialByKeys<T , K = keyof T> = Merge<{[key in keyof T as key extends K ? key : never]?: T[key]}, {[key in keyof T as key extends K ? never : key]: T[key]}>\n```\n</details>\n\n\n> RequiredByKeys\n\nImplement a generic `RequiredByKeys<T, K>` which takes two type argument `T` and `K`.\n\n`K` specify the set of properties of `T` that should set to be required. When `K` is not provided, it should make all properties required just like the normal `Required<T>`.\n\n```ts\ninterface User {\n  name?: string\n  age?: number\n  address?: string\n}\n\ntype UserPartialName = RequiredByKeys<User, 'name'> // { name: string; age?: number; address?: string }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Merge<A, B> = Pick<A & B, keyof A | keyof B>\ntype IsRequire<T, U> = {\n  [key in keyof T as key extends U  ? key : never]-?: T[key]\n}\n\ntype Origin<T, U> = {\n  [key in keyof T as key extends U  ? never : key]: T[key]\n}\n\ntype RequiredByKeys<T, U = keyof T> = Merge<IsRequire<T, U>, Origin<T, U>>\n\n```\n</details>\n\n\n> Mutable\n\nImplement the generic `Mutable<T>` which makes all properties in `T` mutable (not readonly).\n\n```ts\ninterface Todo {\n  readonly title: string\n  readonly description: string\n  readonly completed: boolean\n}\n\ntype MutableTodo = Mutable<Todo> // { title: string; description: string; completed: boolean; }\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Mutable<T> = {\n  -readonly [key in keyof T]: T[key]\n}\n\n```\n</details>\n\n> OmitByType\n\nFrom `T`, pick a set of properties whose type are not assignable to `U`.\n\n```ts\ntype OmitBoolean = OmitByType<{\n  name: string\n  count: number\n  isReadonly: boolean\n  isEnable: boolean\n}, boolean> // { name: string; count: number }\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype OmitByType<T, U> = {\n  [key in keyof T as T[key] extends U ? never : key]: T[key]\n}\n\n```\n</details>\n\n> ObjectEntries \n\nImplement the type version of `Object.entries`\n\n```ts\ninterface Model {\n  name: string; \n  age: number;\n  locations: string[] | null;\n}\ntype modelEntries = ObjectEntries<Model> // ['name', string] | ['age', number] | ['locations', string[] | null];\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype ObjectEntries<T, K = keyof T> = K extends keyof T ? [K, Required<T>[K]] : never;\n\n```\n</details>\n\n> Shift\n\nImplement the type version of `Array.shift`\n\n```ts\ntype Result = Shift<[3, 2, 1]> // [2, 1]\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Shift<T extends any[]> = T extends [infer First, ...infer Other] ? Other : never\n\n```\n</details>\n\n> Tuple to Nested Object\n\nGiven a tuple type `T` that only contains string type, and a type `U`, build an object recursively.\n\n```ts\ntype a = TupleToNestedObject<['a'], string> // {a: string}\ntype b = TupleToNestedObject<['a', 'b'], number> // {a: {b: number}}\ntype c = TupleToNestedObject<[], boolean> // boolean. if the tuple is empty, just return the U type\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype TupleToNestedObject<T extends any[], U> = T['length'] extends 0 ? U : T extends [infer First, ...infer Other] \n  ? { [P in T[0]]: Other['length'] extends 0 ? U : TupleToNestedObject<Other, U> }\n  : never\n\n```\n</details>\n\n> Reverse\n\nImplement the type version of `Array.reverse`\n\n```ts\ntype a = Reverse<['a', 'b']> // ['b', 'a']\ntype b = Reverse<['a', 'b', 'c']> // ['c', 'b', 'a']\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Reverse<T extends any[]> = T extends [...infer Other, infer Last] ? [Last, ...Reverse<Other>] : []\n\n```\n</details>\n\n> Flip Arguments\n\nImplement the type version of lodash's `_.flip`.\n\nType `FlipArguments<T>` requires function type `T` and returns a new function type which has the same return type of T but reversed parameters.\n\n```ts\ntype Flipped = FlipArguments<(arg0: string, arg1: number, arg2: boolean) => void> \n// (arg0: boolean, arg1: number, arg2: string) => void\n```\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\ntype Reverse<T extends any[]> = T extends [...infer Other, infer Last] ? [Last, ...Reverse<Other>] : []\n\ntype FlipArguments<T extends (...args: any[]) => any > = T extends (...args: infer P) => infer Q\n  ? (...args: Reverse<P>) => Q\n  : never;\n\n```\n</details>\n\n> FlattenDepth\n\nRecursively flatten array up to depth times.\n\n```ts\ntype a = FlattenDepth<[1, 2, [3, 4], [[[5]]]], 2> // [1, 2, 3, 4, [5]]. flattern 2 times\ntype b = FlattenDepth<[1, 2, [3, 4], [[[5]]]]> // [1, 2, 3, 4, [[5]]]. Depth defaults to be 1\n```\n\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n```ts\n\ntype FlattenOnce<T extends unknown[]> = T extends [infer First, ...infer Rest]\n? First extends unknown[]\n  ? [...First, ...FlattenOnce<Rest>]\n  : [First, ...FlattenOnce<Rest>]\n: [];\ntype t1 = FlattenOnce<[[2], [[3]], 4]>;\ntype FlattenDepth<T extends unknown[], N extends number = 1, C extends unknown[] = []>\n= C[\"length\"] extends N ? T\n: T extends FlattenOnce<T> ? T\n: FlattenDepth<FlattenOnce<T>, N, [...C, unknown]>;\n\n```\n</details>","slug":"typescript 类型体操","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrff001emroj0toc756x","content":"<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">原网站</a></p>\n<h2 id=\"简单（easy）\"><a href=\"#简单（easy）\" class=\"headerlink\" title=\"简单（easy）\"></a>简单（easy）</h2><blockquote>\n<p>pick</p>\n</blockquote>\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  description<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  completed<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span>\n<span class=\"token punctuation\">}</span>\n\ntype TodoPreview <span class=\"token operator\">=</span> MyPick<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'completed'</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token punctuation\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Clean room'</span><span class=\"token punctuation\">,</span>\n    completed<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<details>\n<summary><mark>说明 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Pick<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> K <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>P <span class=\"token keyword\">in</span> K<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</details>\n\n<blockquote>\n<p>ReadOnly</p>\n</blockquote>\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  description<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token punctuation\">:</span> MyReadonly<span class=\"token operator\">&lt;</span>Todo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hey\"</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foobar\"</span>\n<span class=\"token punctuation\">}</span>\n\ntodo<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token comment\" spellcheck=\"true\">// Error: cannot reassign a readonly property</span>\ntodo<span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> <span class=\"token string\">\"barFoo\"</span> <span class=\"token comment\" spellcheck=\"true\">// Error: cannot reassign a readonly property</span></code></pre>\n<details>\n<summary><mark>说明 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type ReadOnly<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Object</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  readonly <span class=\"token punctuation\">[</span>P <span class=\"token keyword\">in</span> keyof T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</details>\n\n\n<blockquote>\n<p>元组转换成对象</p>\n</blockquote>\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tesla'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model 3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model X'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model Y'</span><span class=\"token punctuation\">]</span> as <span class=\"token keyword\">const</span>\n\ntype result <span class=\"token operator\">=</span> TupleToObject<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> tuple<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected { tesla: 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'}</span></code></pre>\n<details>\n<summary><mark>说明 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type TupleToObject<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">readonly</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>P <span class=\"token keyword\">in</span> T<span class=\"token punctuation\">[</span><span class=\"token keyword\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> P\n<span class=\"token punctuation\">}</span></code></pre>\n</details>\n\n<blockquote>\n<p>第一个元素</p>\n</blockquote>\n<pre class=\" language-ts\"><code class=\"language-ts\">type arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\ntype arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\ntype head1 <span class=\"token operator\">=</span> First<span class=\"token operator\">&lt;</span>arr1<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be 'a'</span>\ntype head2 <span class=\"token operator\">=</span> First<span class=\"token operator\">&lt;</span>arr2<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be 3</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type First<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span>infer Result<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>infer Rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> Result <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span></code></pre>\n</details>\n\n<blockquote>\n<p>获取元素长度</p>\n</blockquote>\n<pre class=\" language-ts\"><code class=\"language-ts\">type tesla <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tesla'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model 3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model X'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model Y'</span><span class=\"token punctuation\">]</span>\ntype spaceX <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'FALCON 9'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FALCON HEAVY'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DRAGON'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'STARSHIP'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'HUMAN SPACEFLIGHT'</span><span class=\"token punctuation\">]</span>\n\ntype teslaLength <span class=\"token operator\">=</span> Length<span class=\"token operator\">&lt;</span>tesla<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected 4</span>\ntype spaceXLength <span class=\"token operator\">=</span> Length<span class=\"token operator\">&lt;</span>spaceX<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected 5</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Length<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">readonly</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T<span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n</details>\n\n<blockquote>\n<p>Exclude</p>\n</blockquote>\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token comment\" spellcheck=\"true\">/** \n * 实现内置的Exclude &lt;T，U>类型，但不能直接使用它本身。\n * 从联合类型T中排除U的类型成员，来构造一个新的类型。\n*/</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Exclude<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> never <span class=\"token punctuation\">:</span> T</code></pre>\n</details>\n\n<blockquote>\n<p>Awaited</p>\n</blockquote>\n<pre class=\" language-ts\"><code class=\"language-ts\">假如我们有一个 Promise 对象，这个 Promise 对象会返回一个类型。在 TS 中，我们用 Promise 中的 T 来描述这个 Promise 返回的类型。请你实现一个类型，可以获取这个类型。\n\n比如：Promise<span class=\"token operator\">&lt;</span>ExampleType<span class=\"token operator\">></span>，请你返回 ExampleType 类型。</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type MyAwaited<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Promise</span><span class=\"token operator\">&lt;</span>infer P<span class=\"token operator\">></span> <span class=\"token operator\">?</span> MyAwaited<span class=\"token operator\">&lt;</span>P<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">;</span></code></pre>\n</details>\n\n<blockquote>\n<p>IF</p>\n</blockquote>\n<p>实现一个 <code>IF</code> 类型，它接收一个条件类型 <code>C</code> ，一个判断为真时的返回类型 <code>T</code> ，以及一个判断为假时的返回类型 <code>F</code>。 <code>C</code> 只能是 <code>true</code> 或者 <code>false</code>， <code>T</code> 和 <code>F</code> 可以是任意类型。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type A <span class=\"token operator\">=</span> If<span class=\"token operator\">&lt;</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">// expected to be 'a'</span>\ntype B <span class=\"token operator\">=</span> If<span class=\"token operator\">&lt;</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be 'b'</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type If<span class=\"token operator\">&lt;</span>C <span class=\"token keyword\">extends</span> <span class=\"token class-name\">boolean</span><span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> F<span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">true</span> <span class=\"token operator\">?</span> T <span class=\"token punctuation\">:</span> F<span class=\"token punctuation\">;</span></code></pre>\n</details>\n\n<blockquote>\n<p>Concat</p>\n</blockquote>\n<p>在类型系统里实现 <code>JavaScript</code> 内置的 <code>Array.concat</code> 方法，这个类型接受两个参数，返回的新数组类型应该按照输入参数从左到右的顺序合并为一个新的数组。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Result <span class=\"token operator\">=</span> Concat<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be [1, 2]</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Concat<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> P <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>T<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>P<span class=\"token punctuation\">]</span></code></pre>\n</details>\n\n\n<blockquote>\n<p>Include</p>\n</blockquote>\n<p>在类型系统里实现 <code>JavaScript</code> 的 <code>Array.includes</code> 方法，这个类型接受两个参数，返回的类型要么是 <code>true</code> 要么是 <code>false</code>。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type isPillarMen <span class=\"token operator\">=</span> Includes<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Kars'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Esidisi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wamuu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Santana'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dio'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be `false`</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Include<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">readonly</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> P<span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span>infer First<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>infer Other<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>Equal<span class=\"token operator\">&lt;</span>First<span class=\"token punctuation\">,</span>U<span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">true</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">:</span> Includes<span class=\"token operator\">&lt;</span>Other<span class=\"token punctuation\">,</span>U<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span><span class=\"token keyword\">false</span> </code></pre>\n</details>\n\n<blockquote>\n<p>Push</p>\n</blockquote>\n<p>在类型系统里实现通用的 <code>Array.push</code> 。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Result <span class=\"token operator\">=</span> Push<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// [1, 2, '3']</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Push<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>T<span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">]</span></code></pre>\n</details>\n\n\n<blockquote>\n<p>Unshift</p>\n</blockquote>\n<p>实现类型版本的 <code>Array.unshift</code>。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Result <span class=\"token operator\">=</span> Unshift<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// [0, 1, 2,]</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Unshift<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>U<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>T<span class=\"token punctuation\">]</span></code></pre>\n</details>\n\n<blockquote>\n<p>Parameters</p>\n</blockquote>\n<p>实现内置的 Parameters 类型，而不是直接使用它，可参考<a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#parameterstype\" target=\"_blank\" rel=\"noopener\">TypeScript官方文档</a>。</p>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type MyParameters<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> infer P<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">any</span> <span class=\"token operator\">?</span> P <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span></code></pre>\n</details>\n\n<h2 id=\"中等\"><a href=\"#中等\" class=\"headerlink\" title=\"中等\"></a>中等</h2><blockquote>\n<p>获取函数返回类型 ReturnType</p>\n</blockquote>\n<p>不使用 <code>ReturnType</code> 实现 <code>TypeScript</code> 的 <code>ReturnType&lt;T&gt;</code> 范型。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\ntype a <span class=\"token operator\">=</span> MyReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> fn<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// 应推导出 \"1 | 2\"</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type MyReturnType<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> infer R <span class=\"token operator\">?</span> R <span class=\"token punctuation\">:</span> never</code></pre>\n</details>\n\n\n<blockquote>\n<p>实现 omit</p>\n</blockquote>\n<p>不使用 <code>Omit</code> 实现 <code>TypeScript</code> 的 <code>Omit&lt;T, K&gt;</code> 范型。</p>\n<p><code>Omit</code> 会创建一个省略 <code>K</code> 中字段的 <code>T</code> 对象。</p>\n<pre class=\" language-tsx\"><code class=\"language-tsx\">interface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyOmit<Todo, 'description' | 'title'>\n\nconst todo: TodoPreview = {\n  completed: false,\n}</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type MyPick<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> K<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ntype MyExclude<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> P<span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">P</span> <span class=\"token operator\">?</span> never <span class=\"token punctuation\">:</span> T\n\ntype MyOmit<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> MyPick<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> MyExclude<span class=\"token operator\">&lt;</span>keyof T<span class=\"token punctuation\">,</span> K<span class=\"token operator\">></span><span class=\"token operator\">></span></code></pre>\n</details>\n\n<blockquote>\n<p>Readonly 2</p>\n</blockquote>\n<p>实现一个通用<code>MyReadonly2&lt;T, K&gt;</code>，它带有两种类型的参数<code>T</code>和<code>K</code>。</p>\n<p><code>K</code>指定应设置为<code>Readonly</code>的<code>T</code>的属性集。如果未提供<code>K</code>，则应使所有属性都变为只读，就像普通的<code>Readonly&lt;T&gt;</code>一样。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  description<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  completed<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token punctuation\">:</span> MyReadonly2<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'description'</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hey\"</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">,</span>\n  completed<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\ntodo<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token comment\" spellcheck=\"true\">// Error: cannot reassign a readonly property</span>\ntodo<span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> <span class=\"token string\">\"barFoo\"</span> <span class=\"token comment\" spellcheck=\"true\">// Error: cannot reassign a readonly property</span>\ntodo<span class=\"token punctuation\">.</span>completed <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span> <span class=\"token comment\" spellcheck=\"true\">// OK</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype MyReadonly<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  readonly <span class=\"token punctuation\">[</span>P <span class=\"token keyword\">in</span> keyof T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ntype MyPick<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>P <span class=\"token keyword\">in</span> K<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n\ntype MyExclude<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K<span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">K</span> <span class=\"token operator\">?</span> never <span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">;</span>\n\ntype MyOmit<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>P <span class=\"token keyword\">in</span> MyExclude<span class=\"token operator\">&lt;</span>keyof T<span class=\"token punctuation\">,</span> K<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n\n type MyReadonly2<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> T <span class=\"token operator\">=</span> keyof T<span class=\"token operator\">></span> <span class=\"token operator\">=</span>MyReadonly<span class=\"token operator\">&lt;</span>MyPick<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K<span class=\"token operator\">></span><span class=\"token operator\">></span>  <span class=\"token operator\">&amp;</span> MyOmit<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K<span class=\"token operator\">></span></code></pre>\n</details>\n\n<blockquote>\n<p>深度Readonly</p>\n</blockquote>\n<p>实现一个通用的DeepReadonly<T>，它将对象的每个参数及其子对象递归地设为只读。</T></p>\n<p>您可以假设在此挑战中我们仅处理对象。数组，函数，类等都无需考虑。但是，您仍然可以通过覆盖尽可能多的不同案例来挑战自己。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type X <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n  x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \n    a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token string\">'hi'</span>\n  <span class=\"token punctuation\">}</span>\n  y<span class=\"token punctuation\">:</span> <span class=\"token string\">'hey'</span>\n<span class=\"token punctuation\">}</span>\n\ntype Expected <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n  readonly x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \n    readonly a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n    readonly b<span class=\"token punctuation\">:</span> <span class=\"token string\">'hi'</span>\n  <span class=\"token punctuation\">}</span>\n  readonly y<span class=\"token punctuation\">:</span> <span class=\"token string\">'hey'</span> \n<span class=\"token punctuation\">}</span>\n\ntype Todo <span class=\"token operator\">=</span> DeepReadonly<span class=\"token operator\">&lt;</span>X<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// should be same as `Expected`</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype DeepReadonly<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Object</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  readonly <span class=\"token punctuation\">[</span>P <span class=\"token keyword\">in</span> keyof T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> keyof T<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">never</span> <span class=\"token operator\">?</span> T<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> DeepReadonly<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>元组转合集</p>\n</blockquote>\n<p>实现泛型<code>TupleToUnion&lt;T&gt;</code>，它覆盖元组的值与其值联合。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span>\n\ntype Test <span class=\"token operator\">=</span> TupleToUnion<span class=\"token operator\">&lt;</span>Arr<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be '1' | '2' | '3'</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype TupleToUnion<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span>infer First<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>infer Other<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> First <span class=\"token operator\">|</span> TupleToUnion<span class=\"token operator\">&lt;</span>Other<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 或者</span>\n\ntype TupleToUnion<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T<span class=\"token punctuation\">[</span><span class=\"token keyword\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>最后一个元素</p>\n</blockquote>\n<p>实现一个通用<code>Last&lt;T&gt;</code>，它接受一个<code>数组T</code>并返回其最后一个元素的类型。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\ntype arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\ntype tail1 <span class=\"token operator\">=</span> Last<span class=\"token operator\">&lt;</span>arr1<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be 'c'</span>\ntype tail2 <span class=\"token operator\">=</span> Last<span class=\"token operator\">&lt;</span>arr2<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be 1</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype Last<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>infer K<span class=\"token punctuation\">,</span> infer Other<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> Other <span class=\"token punctuation\">:</span> never\n\n<span class=\"token comment\" spellcheck=\"true\">//或者</span>\ntype Last<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">any</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>infer Rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> T<span class=\"token punctuation\">[</span>Rest<span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> never\n</code></pre>\n</details>\n\n<blockquote>\n<p>出堆</p>\n</blockquote>\n<p>实现一个通用Pop<T>，它接受一个数组T并返回一个没有最后一个元素的数组。</T></p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span>\ntype arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\ntype re1 <span class=\"token operator\">=</span> Pop<span class=\"token operator\">&lt;</span>arr1<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be ['a', 'b', 'c']</span>\ntype re2 <span class=\"token operator\">=</span> Pop<span class=\"token operator\">&lt;</span>arr2<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be [3, 2]</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype Pop<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>infer K<span class=\"token punctuation\">,</span> infer Other<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> K <span class=\"token punctuation\">:</span> never\n</code></pre>\n</details>\n\n\n<blockquote>\n<p>promise.all</p>\n</blockquote>\n<pre class=\" language-TS\"><code class=\"language-TS\">const promise1 = Promise.resolve(3);\nconst promise2 = 42;\nconst promise3 = new Promise<string>((resolve, reject) => {\n  setTimeout(resolve, 100, 'foo');\n});\n\n// expected to be `Promise<[number, number, string]>`\nconst p = Promise.all([promise1, promise2, promise3] as const)\n\n// declare function PromiseAll(values: any): any</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token comment\" spellcheck=\"true\">// 跟上面awaited 相似</span>\ntype MyAwaited<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Promise</span><span class=\"token operator\">&lt;</span>infer P<span class=\"token operator\">></span> <span class=\"token operator\">?</span> MyAwaited<span class=\"token operator\">&lt;</span>P<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/** declare 重定义function, (values: readonly [...T]) 函数参数 Promise&lt;> */</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> PromiseAll<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">:</span> readonly <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>K <span class=\"token keyword\">in</span> keyof T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  MyAwaited<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">[</span>K<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Type Lookup</p>\n</blockquote>\n<p>在此挑战中，我们想通过在联合<code>Cat | Dog</code>中搜索公共<code>type</code>字段来获取相应的类型。换句话说，在以下示例中，我们期望<code>LookUp&lt;Dog | Cat, &#39;dog&#39;&gt;</code>获得<code>Dog</code>，<code>LookUp&lt;Dog | Cat, &#39;cat&#39;&gt;</code>获得<code>Cat</code>。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'cat'</span>\n  breeds<span class=\"token punctuation\">:</span> <span class=\"token string\">'Abyssinian'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Shorthair'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Curl'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Bengal'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'dog'</span>\n  breeds<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hound'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Brittany'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Bulldog'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Boxer'</span>\n  color<span class=\"token punctuation\">:</span> <span class=\"token string\">'brown'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'white'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'black'</span>\n<span class=\"token punctuation\">}</span>\n\ntype MyDog <span class=\"token operator\">=</span> LookUp<span class=\"token operator\">&lt;</span>Cat <span class=\"token operator\">|</span> Dog<span class=\"token punctuation\">,</span> <span class=\"token string\">'dog'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be `Dog`</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type LookUP<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> T <span class=\"token punctuation\">:</span> never <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">:</span> never\n</code></pre>\n</details>\n\n<blockquote>\n<p>Trim Left</p>\n</blockquote>\n<p>实现 <code>TrimLeft&lt;T&gt;</code> ，它接收确定的字符串类型并返回一个新的字符串，其中新返回的字符串删除了原字符串开头的空白字符串。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type trimed <span class=\"token operator\">=</span> TrimLeft<span class=\"token operator\">&lt;</span><span class=\"token string\">'  Hello World  '</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// 应推导出 'Hello World  '</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type TrimLet<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">' '</span><span class=\"token operator\">|</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'\\t'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> TrimLeft<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">;</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Trim</p>\n</blockquote>\n<pre class=\" language-ts\"><code class=\"language-ts\">type trimed <span class=\"token operator\">=</span> Trim<span class=\"token operator\">&lt;</span><span class=\"token string\">'  Hello World  '</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be 'Hello World'</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type SpaceChar <span class=\"token operator\">=</span> <span class=\"token string\">' '</span> <span class=\"token operator\">|</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'\\t'</span>\ntype Trim<span class=\"token operator\">&lt;</span>S <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> S <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>SpaceChar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">|</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>SpaceChar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> Trim<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> S\n</code></pre>\n</details>\n\n\n<blockquote>\n<p>Capitalize </p>\n</blockquote>\n<p>首字母大写</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type capitalized <span class=\"token operator\">=</span> Capitalize<span class=\"token operator\">&lt;</span><span class=\"token string\">'hello world'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be 'Hello world'</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Capitalize<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer first<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Uppercase<span class=\"token operator\">&lt;</span>first<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">;</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Replace</p>\n</blockquote>\n<p>实现 <code>Replace&lt;S, From, To</code>&gt; 将字符串 <code>S</code> 中的第一个子字符串 <code>From</code> 替换为 <code>To</code> 。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type replaced <span class=\"token operator\">=</span> Replace<span class=\"token operator\">&lt;</span><span class=\"token string\">'types are fun!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fun'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'awesome'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// 期望是 'types are awesome!'</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Replace<span class=\"token operator\">&lt;</span>S <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> From <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> To <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> From <span class=\"token keyword\">extends</span> <span class=\"token string\">''</span> <span class=\"token operator\">?</span> S <span class=\"token punctuation\">:</span> S <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>From<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>To<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> S\n</code></pre>\n</details>\n\n<blockquote>\n<p>ReplaceAll</p>\n</blockquote>\n<p>实现 <code>ReplaceAll&lt;S, From, To&gt;</code> 将一个字符串 <code>S</code> 中的所有子字符串 <code>From</code> 替换为 <code>To</code>。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type replaced <span class=\"token operator\">=</span> ReplaceAll<span class=\"token operator\">&lt;</span><span class=\"token string\">'t y p e s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// 期望是 'types'</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 请注意以下两种情况\n *  Expect&lt;Equal&lt;ReplaceAll&lt;'foobarfoobar', 'ob', 'b'>, 'fobarfobar'>>,\n *  Expect&lt;Equal&lt;ReplaceAll&lt;'foboorfoboar', 'bo', 'b'>, 'foborfobar'>>,\n */</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 错误</span>\ntype ReplaceAll<span class=\"token operator\">&lt;</span>S <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> From <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> To <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>  From <span class=\"token keyword\">extends</span> <span class=\"token string\">''</span> <span class=\"token operator\">?</span> S <span class=\"token punctuation\">:</span> S <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>From<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> ReplaceAll<span class=\"token operator\">&lt;</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>To<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span> From<span class=\"token punctuation\">,</span> To<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> S\n\n<span class=\"token comment\" spellcheck=\"true\">// 正确</span>\ntype ReplaceAll<span class=\"token operator\">&lt;</span>S <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> From <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> To <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>  From <span class=\"token keyword\">extends</span> <span class=\"token string\">''</span> <span class=\"token operator\">?</span> S <span class=\"token punctuation\">:</span> S <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>From<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>To<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">${ReplaceAll&lt;`</span></span>$<span class=\"token punctuation\">{</span>end<span class=\"token punctuation\">}</span><span class=\"token template-string\"><span class=\"token string\">`, From, To>}`</span></span> <span class=\"token punctuation\">:</span> S\n</code></pre>\n</details>\n\n\n<blockquote>\n<p>追加参数</p>\n</blockquote>\n<p>实现一个范型 <code>AppendArgument&lt;Fn, A&gt;</code>，对于给定的函数类型 <code>Fn</code>，以及一个任意类型 <code>A</code>，返回一个新的函数 <code>G</code>。<code>G</code> 拥有 <code>Fn 的所有参数</code>并在末尾追加类型为 <code>A</code> 的参数。</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">number</span>\n\ntype Result <span class=\"token operator\">=</span> AppendArgument<span class=\"token operator\">&lt;</span>Fn<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token operator\">></span> \n<span class=\"token comment\" spellcheck=\"true\">// 期望是 (a: number, b: string, x: boolean) => number</span>\n</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type AppendArgument<span class=\"token operator\">&lt;</span>Fn <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Fn <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> infer P<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> infer R<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>P<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> R <span class=\"token punctuation\">:</span> never \n</code></pre>\n</details>\n\n<blockquote>\n<p>Permutation</p>\n</blockquote>\n<p>Implement permutation type that transforms union types into the array that includes permutations of unions.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type perm <span class=\"token operator\">=</span> Permutation<span class=\"token operator\">&lt;</span><span class=\"token string\">'A'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'B'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'C'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A']</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Permutation<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U <span class=\"token operator\">=</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span>never<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Permutation<span class=\"token operator\">&lt;</span>Exclude<span class=\"token operator\">&lt;</span>U<span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Length of string</p>\n</blockquote>\n<p>Compute the length of a string literal, which behaves like String#length.</p>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype StringToArr<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer F<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>StringToArr<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\ntype StringLength<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> StringToArr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Flatten</p>\n</blockquote>\n<p>In this challenge, you would need to write a type that takes an array and emitted the flatten array type.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type flatten <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// [1, 2, 3, 4, 5]</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype Flatten<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span>infer First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>infer Other<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> First <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>Flatten<span class=\"token operator\">&lt;</span>First<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Flatten<span class=\"token operator\">&lt;</span>Other<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Flatten<span class=\"token operator\">&lt;</span>Other<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Append to object</p>\n</blockquote>\n<p>Implement a type that adds a new field to the interface. The type takes the three arguments. The output should be an object with the new field.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span> <span class=\"token punctuation\">}</span>\ntype Result <span class=\"token operator\">=</span> AppendToObject<span class=\"token operator\">&lt;</span>Test<span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be { id: '1', value: 4 }</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype AppendToObject<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span><span class=\"token punctuation\">,</span> U <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>K <span class=\"token keyword\">in</span> keyof T <span class=\"token operator\">|</span> U<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> K <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> T <span class=\"token operator\">?</span> T<span class=\"token punctuation\">[</span>K<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> V <span class=\"token punctuation\">}</span>\n\n</code></pre>\n</details>\n\n<blockquote>\n<p>Absolute </p>\n</blockquote>\n<p>数字绝对值</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Test <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\ntype Result <span class=\"token operator\">=</span> Absolute<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// expected to be \"100\"</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Absolute<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">string</span> <span class=\"token operator\">|</span> bigint<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>T<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer X<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> X <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>T<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>String to Union</p>\n</blockquote>\n<p>Implement the String to Union type. Type take string argument. The output should be a union of input letters</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Test <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span>\ntype Result <span class=\"token operator\">=</span> StringToUnion<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// expected to be \"1\" | \"2\" | \"3\"</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type StringToUnion<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>  T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer F<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> F <span class=\"token operator\">|</span> StringToUnion<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> never \n</code></pre>\n</details>\n\n<blockquote>\n<p>Merge </p>\n</blockquote>\n<p>Merge two types into a new type. Keys of the second type overrides keys of the first type.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntype Bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntype Result <span class=\"token operator\">=</span> Merge<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> Bar<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\" spellcheck=\"true\">// {</span>\n<span class=\"token comment\" spellcheck=\"true\">//     a: number;</span>\n<span class=\"token comment\" spellcheck=\"true\">//     b: number;</span>\n<span class=\"token comment\" spellcheck=\"true\">//     c: boolean;</span>\n<span class=\"token comment\" spellcheck=\"true\">// }</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Merge<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> S<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof F <span class=\"token operator\">|</span> keyof S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> S <span class=\"token operator\">?</span> S<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> F <span class=\"token operator\">?</span> F<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>CamelCase</p>\n</blockquote>\n<p><code>for-bar-baz</code> -&gt; <code>forBarBaz</code></p>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Capitalize<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer first<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Uppercase<span class=\"token operator\">&lt;</span>first<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">;</span>\ntype CamelCase<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>CamelCase<span class=\"token operator\">&lt;</span>Capitalize<span class=\"token operator\">&lt;</span>end<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> T\n\ntype Result <span class=\"token operator\">=</span> CamelCase<span class=\"token operator\">&lt;</span><span class=\"token string\">'foo--bar----baz'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// \"fooBarBaz\"</span>\n\ntype CamelCase<span class=\"token operator\">&lt;</span>S <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>  S <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer X<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer Y<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> Y <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Capitalize</span><span class=\"token operator\">&lt;</span>Y<span class=\"token operator\">></span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>X<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>CamelCase<span class=\"token operator\">&lt;</span>Y<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>X<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>CamelCase<span class=\"token operator\">&lt;</span>Capitalize<span class=\"token operator\">&lt;</span>Y<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> S <span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//foo-Bar---Baz</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>KebabCase </p>\n</blockquote>\n<p><code>FooBarBaz</code> -&gt; <code>foo-bar-baz</code></p>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type KebabCase<span class=\"token operator\">&lt;</span>S <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> P <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> \n  S <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer L<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token operator\">?</span> L <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Lowercase</span><span class=\"token operator\">&lt;</span>L<span class=\"token operator\">></span> \n      <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>L<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>KebabCase<span class=\"token operator\">&lt;</span>R<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n      <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>P<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Lowercase<span class=\"token operator\">&lt;</span>L<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>KebabCase<span class=\"token operator\">&lt;</span>R<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token punctuation\">:</span> S<span class=\"token punctuation\">;</span>\n\ntype b <span class=\"token operator\">=</span> KebabCase<span class=\"token operator\">&lt;</span><span class=\"token string\">'foo-bar'</span><span class=\"token operator\">></span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Diff</p>\n</blockquote>\n<p>Get an Object that is the difference between O &amp; O1</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n<span class=\"token punctuation\">}</span>\ntype Bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  gender<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span>\n<span class=\"token punctuation\">}</span>\n\nExpect<span class=\"token operator\">&lt;</span>Equal<span class=\"token operator\">&lt;</span>Diff<span class=\"token operator\">&lt;</span>Foo<span class=\"token punctuation\">,</span> Bar<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> gender<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">></span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Diff<span class=\"token operator\">&lt;</span>O<span class=\"token punctuation\">,</span> O1<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>P <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>keyof O <span class=\"token operator\">|</span> keyof O1<span class=\"token punctuation\">)</span> as Exclude<span class=\"token operator\">&lt;</span>P<span class=\"token punctuation\">,</span> keyof O <span class=\"token operator\">&amp;</span> keyof O1<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> P <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> O\n    <span class=\"token operator\">?</span> O<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">:</span> P <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> O1\n      <span class=\"token operator\">?</span> O1<span class=\"token punctuation\">[</span>P<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</details>\n\n\n<blockquote>\n<p>AnyOf</p>\n</blockquote>\n<p>Implement Python liked any function in the type system. A type takes the Array and returns true if any element of the Array is true. If the Array is empty, return false.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Sample1 <span class=\"token operator\">=</span> AnyOf<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// expected to be true.</span>\ntype Sample2 <span class=\"token operator\">=</span> AnyOf<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// expected to be false.</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token comment\" spellcheck=\"true\">// solution 1</span>\ntype False <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token string\">''</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">false</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined <span class=\"token operator\">|</span> Record<span class=\"token operator\">&lt;</span><span class=\"token keyword\">any</span><span class=\"token punctuation\">,</span> never<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\ntype AnyOf<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">readonly</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T<span class=\"token punctuation\">[</span><span class=\"token keyword\">number</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">False</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">false</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// solution 2</span>\ntype False <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token string\">''</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">false</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined <span class=\"token operator\">|</span> Record<span class=\"token operator\">&lt;</span><span class=\"token keyword\">any</span><span class=\"token punctuation\">,</span> never<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\ntype AnyOf<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">readonly</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span>infer F<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>infer R<span class=\"token punctuation\">]</span> \n<span class=\"token operator\">?</span> F <span class=\"token keyword\">extends</span> <span class=\"token class-name\">False</span> <span class=\"token operator\">?</span> AnyOf<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span> \n<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span></code></pre>\n</details>\n\n\n<blockquote>\n<p>isNever </p>\n</blockquote>\n<p>Implement a type IsNever, which takes input type <code>T</code>. If the type of resolves to <code>never</code>, return <code>true</code>, otherwise <code>false</code>.</p>\n<pre><code>type A = IsNever&lt;never&gt;  // expected to be true\ntype B = IsNever&lt;undefined&gt; // expected to be false\ntype C = IsNever&lt;null&gt; // expected to be false\ntype D = IsNever&lt;[]&gt; // expected to be false\ntype E = IsNever&lt;number&gt; // expected to be false</code></pre><details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type isNever<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span>never<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>isUnion</p>\n</blockquote>\n<p>Implement a type IsUnion, which takes an input type <code>T</code> and returns whether <code>T</code> resolves to a union type.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type case1 <span class=\"token operator\">=</span> IsUnion<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">// false</span>\ntype case2 <span class=\"token operator\">=</span> IsUnion<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">|</span><span class=\"token keyword\">number</span><span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">// true</span>\ntype case3 <span class=\"token operator\">=</span> IsUnion<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">string</span><span class=\"token operator\">|</span><span class=\"token keyword\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">// false</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype IsUnion<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U <span class=\"token operator\">=</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span>\n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>U <span class=\"token operator\">|</span> T<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span>U <span class=\"token operator\">&amp;</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">false</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span>\n  <span class=\"token punctuation\">:</span> never\n</code></pre>\n</details>\n\n<blockquote>\n<p>ReplaceKeys </p>\n</blockquote>\n<p>Implement a type ReplaceKeys, that replace keys in union types, if some type has not this key, just skip replacing, A type takes three arguments.<br>如果</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type NodeA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  flag<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span>\n<span class=\"token punctuation\">}</span>\n\ntype NodeB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'B'</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span>\n  flag<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span>\n<span class=\"token punctuation\">}</span>\n\ntype NodeC <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'C'</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  flag<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span>\n<span class=\"token punctuation\">}</span>\n\n\ntype Nodes <span class=\"token operator\">=</span> NodeA <span class=\"token operator\">|</span> NodeB <span class=\"token operator\">|</span> NodeC\n\ntype ReplacedNodes <span class=\"token operator\">=</span> ReplaceKeys<span class=\"token operator\">&lt;</span>Nodes<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'flag'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// {type: 'A', name: number, flag: string} | {type: 'B', id: number, flag: string} | {type: 'C', name: number, flag: string} // would replace name from string to number, replace flag from number to string.</span>\n\ntype ReplacedNotExistKeys <span class=\"token operator\">=</span> ReplaceKeys<span class=\"token operator\">&lt;</span>Nodes<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>aa<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// {type: 'A', name: never, flag: number} | NodeB | {type: 'C', name: never, flag: number} // would replace name to never</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype ReplaceKeys<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">K</span> \n    <span class=\"token operator\">?</span> key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> V \n      <span class=\"token operator\">?</span> V<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">:</span> never\n    <span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Remove Index Signature</p>\n</blockquote>\n<p>Implement <code>RemoveIndexSignature&lt;T&gt;</code>, exclude the index signature from object types.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ntype A <span class=\"token operator\">=</span> RemoveIndexSignature<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">// expected { foo(): void }</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype RemoveIndexSignature<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof T as <span class=\"token keyword\">string</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">key</span> <span class=\"token operator\">?</span> never <span class=\"token punctuation\">:</span> key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">number</span> <span class=\"token operator\">?</span> never <span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</details>\n\n\n<blockquote>\n<p>Percentage Parser</p>\n</blockquote>\n<p>Implement PercentageParser. According to the <code>/^(\\+|\\-)?(\\d*)?(\\%)?$/</code> regularity to match <code>T</code> and get three matches.</p>\n<p>The structure should be: <code>[plus or minus, number, unit]</code> If it is not captured, the default is an empty string.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type PString1 <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\ntype PString2 <span class=\"token operator\">=</span> <span class=\"token string\">'+85%'</span>\ntype PString3 <span class=\"token operator\">=</span> <span class=\"token string\">'-85%'</span>\ntype PString4 <span class=\"token operator\">=</span> <span class=\"token string\">'85%'</span>\ntype PString5 <span class=\"token operator\">=</span> <span class=\"token string\">'85'</span>\n\ntype R1 <span class=\"token operator\">=</span> PercentageParser<span class=\"token operator\">&lt;</span>PString1<span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">// expected ['', '', '']</span>\ntype R2 <span class=\"token operator\">=</span> PercentageParser<span class=\"token operator\">&lt;</span>PString2<span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">// expected [\"+\", \"85\", \"%\"]</span>\ntype R3 <span class=\"token operator\">=</span> PercentageParser<span class=\"token operator\">&lt;</span>PString3<span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">// expected [\"-\", \"85\", \"%\"]</span>\ntype R4 <span class=\"token operator\">=</span> PercentageParser<span class=\"token operator\">&lt;</span>PString4<span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">// expected [\"\", \"85\", \"%\"]</span>\ntype R5 <span class=\"token operator\">=</span> PercentageParser<span class=\"token operator\">&lt;</span>PString5<span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">// expected [\"\", \"85\", \"\"]</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype PickPrefix<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> S <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>S<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer P<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token operator\">?</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>P<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> R <span class=\"token punctuation\">:</span> never\n    <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\ntype PickSuffix<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> S <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer P<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>S<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token operator\">?</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>P<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer R<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> R <span class=\"token punctuation\">:</span> never\n    <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\ntype PercentageParser<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>PickPrefix<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'-'</span><span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer B<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>PickSuffix<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token string\">'%'</span><span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token operator\">?</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer A<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>B<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer C<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Drop Char</p>\n</blockquote>\n<p>Drop a specified char from a string.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Butterfly <span class=\"token operator\">=</span> DropChar<span class=\"token operator\">&lt;</span><span class=\"token string\">' b u t t e r f l y ! '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// 'butterfly!'</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type DropChar<span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">,</span> C<span class=\"token operator\">></span> <span class=\"token operator\">=</span> S <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer X<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer Y<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>X <span class=\"token keyword\">extends</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">:</span> X<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>DropChar<span class=\"token operator\">&lt;</span>Y<span class=\"token punctuation\">,</span> C<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>  </code></pre>\n</details>\n\n<blockquote>\n<p>MinusOne </p>\n</blockquote>\n<p>Given a number (always positive) as a type. Your type should return the number decreased by one.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Zero <span class=\"token operator\">=</span> MinusOne<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// 0</span>\ntype FiftyFour <span class=\"token operator\">=</span> MinusOne<span class=\"token operator\">&lt;</span><span class=\"token number\">55</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// 54</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<p><a href=\"https://github.com/type-challenges/type-challenges/issues/5768\" target=\"_blank\" rel=\"noopener\">拓展</a></p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Pop<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>infer head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> head <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span> \n\ntype MinusOne<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">number</span><span class=\"token punctuation\">,</span> A <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span>\n  <span class=\"token operator\">?</span> Pop<span class=\"token operator\">&lt;</span>A<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">:</span> MinusOne<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>A<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre>\n</details>\n\n<blockquote>\n<p>PickByType</p>\n</blockquote>\n<p>From <code>T</code>, pick a set of properties whose type are assignable to <code>U</code>.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type OnlyBoolean <span class=\"token operator\">=</span> PickByType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span>\n  isReadonly<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span>\n  isEnable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// { isReadonly: boolean; isEnable: boolean; }</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type PickByType<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof T as T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> key <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">}</span></code></pre>\n</details>\n\n<blockquote>\n<p>StartsWith</p>\n</blockquote>\n<p>Implement <code>StartsWith&lt;T, U&gt;</code> which takes two exact string types and returns whether <code>T</code> starts with <code>U</code></p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type a <span class=\"token operator\">=</span> StartsWith<span class=\"token operator\">&lt;</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ac'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be false</span>\ntype b <span class=\"token operator\">=</span> StartsWith<span class=\"token operator\">&lt;</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be true</span>\ntype c <span class=\"token operator\">=</span> StartsWith<span class=\"token operator\">&lt;</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abcd'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be false</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type StartsWith<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> U <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>U<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer Other<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> <span class=\"token keyword\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span></code></pre>\n</details>\n\n<blockquote>\n<p>EndsWith</p>\n</blockquote>\n<p>Implement <code>EndsWith&lt;T, U&gt;</code> which takes two exact string types and returns whether <code>T</code> ends with <code>U</code></p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type a <span class=\"token operator\">=</span> EndsWith<span class=\"token operator\">&lt;</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bc'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be true</span>\ntype b <span class=\"token operator\">=</span> EndsWith<span class=\"token operator\">&lt;</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ab'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// expected to be false</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type EndsWith<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">,</span> U <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer Other<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>U<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> <span class=\"token keyword\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span></code></pre>\n</details>\n\n<blockquote>\n<p>PartialByKeys</p>\n</blockquote>\n<p>Implement a generic <code>PartialByKeys&lt;T, K&gt;</code> which takes two type argument <code>T</code> and <code>K</code>.</p>\n<p><code>K</code> specify the set of properties of <code>T</code> that should set to be optional. When <code>K</code> is not provided, it should make all properties optional just like the normal <code>Partial&lt;T&gt;</code>.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span>\n  address<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n<span class=\"token punctuation\">}</span>\n\ntype UserPartialName <span class=\"token operator\">=</span> PartialByKeys<span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// { name?:string; age:number; address:string }</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Merge<span class=\"token operator\">&lt;</span>A<span class=\"token punctuation\">,</span> B<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>A <span class=\"token operator\">&amp;</span> B<span class=\"token punctuation\">,</span> keyof A <span class=\"token operator\">|</span> keyof B<span class=\"token operator\">></span>\ntype PartialByKeys<span class=\"token operator\">&lt;</span>T <span class=\"token punctuation\">,</span> K <span class=\"token operator\">=</span> keyof T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Merge<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof T as key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">K</span> <span class=\"token operator\">?</span> key <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof T as key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">K</span> <span class=\"token operator\">?</span> never <span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre>\n</details>\n\n\n<blockquote>\n<p>RequiredByKeys</p>\n</blockquote>\n<p>Implement a generic <code>RequiredByKeys&lt;T, K&gt;</code> which takes two type argument <code>T</code> and <code>K</code>.</p>\n<p><code>K</code> specify the set of properties of <code>T</code> that should set to be required. When <code>K</code> is not provided, it should make all properties required just like the normal <code>Required&lt;T&gt;</code>.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span>\n  address<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n<span class=\"token punctuation\">}</span>\n\ntype UserPartialName <span class=\"token operator\">=</span> RequiredByKeys<span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// { name: string; age?: number; address?: string }</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Merge<span class=\"token operator\">&lt;</span>A<span class=\"token punctuation\">,</span> B<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>A <span class=\"token operator\">&amp;</span> B<span class=\"token punctuation\">,</span> keyof A <span class=\"token operator\">|</span> keyof B<span class=\"token operator\">></span>\ntype IsRequire<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof T as key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span>  <span class=\"token operator\">?</span> key <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ntype Origin<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof T as key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span>  <span class=\"token operator\">?</span> never <span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ntype RequiredByKeys<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U <span class=\"token operator\">=</span> keyof T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Merge<span class=\"token operator\">&lt;</span>IsRequire<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Origin<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span><span class=\"token operator\">></span>\n</code></pre>\n</details>\n\n\n<blockquote>\n<p>Mutable</p>\n</blockquote>\n<p>Implement the generic <code>Mutable&lt;T&gt;</code> which makes all properties in <code>T</code> mutable (not readonly).</p>\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  readonly title<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  readonly description<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  readonly completed<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span>\n<span class=\"token punctuation\">}</span>\n\ntype MutableTodo <span class=\"token operator\">=</span> Mutable<span class=\"token operator\">&lt;</span>Todo<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// { title: string; description: string; completed: boolean; }</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Mutable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">-</span>readonly <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>OmitByType</p>\n</blockquote>\n<p>From <code>T</code>, pick a set of properties whose type are not assignable to <code>U</code>.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type OmitBoolean <span class=\"token operator\">=</span> OmitByType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span>\n  isReadonly<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span>\n  isEnable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// { name: string; count: number }</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type OmitByType<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof T as T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> never <span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>ObjectEntries </p>\n</blockquote>\n<p>Implement the type version of <code>Object.entries</code></p>\n<pre class=\" language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">;</span> \n  age<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">;</span>\n  locations<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ntype modelEntries <span class=\"token operator\">=</span> ObjectEntries<span class=\"token operator\">&lt;</span>Model<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// ['name', string] | ['age', number] | ['locations', string[] | null];</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type ObjectEntries<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K <span class=\"token operator\">=</span> keyof T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> K <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> T <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>K<span class=\"token punctuation\">,</span> Required<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>K<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Shift</p>\n</blockquote>\n<p>Implement the type version of <code>Array.shift</code></p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Result <span class=\"token operator\">=</span> Shift<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// [2, 1]</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Shift<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span>infer First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>infer Other<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> Other <span class=\"token punctuation\">:</span> never\n</code></pre>\n</details>\n\n<blockquote>\n<p>Tuple to Nested Object</p>\n</blockquote>\n<p>Given a tuple type <code>T</code> that only contains string type, and a type <code>U</code>, build an object recursively.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type a <span class=\"token operator\">=</span> TupleToNestedObject<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// {a: string}</span>\ntype b <span class=\"token operator\">=</span> TupleToNestedObject<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">number</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// {a: {b: number}}</span>\ntype c <span class=\"token operator\">=</span> TupleToNestedObject<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// boolean. if the tuple is empty, just return the U type</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type TupleToNestedObject<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span> <span class=\"token operator\">=</span> T<span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">0</span> <span class=\"token operator\">?</span> U <span class=\"token punctuation\">:</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span>infer First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>infer Other<span class=\"token punctuation\">]</span> \n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>P <span class=\"token keyword\">in</span> T<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Other<span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">0</span> <span class=\"token operator\">?</span> U <span class=\"token punctuation\">:</span> TupleToNestedObject<span class=\"token operator\">&lt;</span>Other<span class=\"token punctuation\">,</span> U<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">:</span> never\n</code></pre>\n</details>\n\n<blockquote>\n<p>Reverse</p>\n</blockquote>\n<p>Implement the type version of <code>Array.reverse</code></p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type a <span class=\"token operator\">=</span> Reverse<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// ['b', 'a']</span>\ntype b <span class=\"token operator\">=</span> Reverse<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// ['c', 'b', 'a']</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Reverse<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>infer Other<span class=\"token punctuation\">,</span> infer Last<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>Last<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Reverse<span class=\"token operator\">&lt;</span>Other<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>Flip Arguments</p>\n</blockquote>\n<p>Implement the type version of lodash’s <code>_.flip</code>.</p>\n<p>Type <code>FlipArguments&lt;T&gt;</code> requires function type <code>T</code> and returns a new function type which has the same return type of T but reversed parameters.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type Flipped <span class=\"token operator\">=</span> FlipArguments<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>arg0<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">:</span> <span class=\"token keyword\">number</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span> \n<span class=\"token comment\" spellcheck=\"true\">// (arg0: boolean, arg1: number, arg2: string) => void</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">type Reverse<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>infer Other<span class=\"token punctuation\">,</span> infer Last<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>Last<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Reverse<span class=\"token operator\">&lt;</span>Other<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\ntype FlipArguments<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">any</span> <span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> infer P<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> infer Q\n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> Reverse<span class=\"token operator\">&lt;</span>P<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> Q\n  <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span>\n</code></pre>\n</details>\n\n<blockquote>\n<p>FlattenDepth</p>\n</blockquote>\n<p>Recursively flatten array up to depth times.</p>\n<pre class=\" language-ts\"><code class=\"language-ts\">type a <span class=\"token operator\">=</span> FlattenDepth<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// [1, 2, 3, 4, [5]]. flattern 2 times</span>\ntype b <span class=\"token operator\">=</span> FlattenDepth<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">// [1, 2, 3, 4, [[5]]]. Depth defaults to be 1</span></code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre class=\" language-ts\"><code class=\"language-ts\">\ntype FlattenOnce<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span>infer First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>infer Rest<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">?</span> First <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>FlattenOnce<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>FlattenOnce<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ntype t1 <span class=\"token operator\">=</span> FlattenOnce<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\ntype FlattenDepth<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> N <span class=\"token keyword\">extends</span> <span class=\"token class-name\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> C <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token operator\">=</span> C<span class=\"token punctuation\">[</span><span class=\"token string\">\"length\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">?</span> T\n<span class=\"token punctuation\">:</span> T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FlattenOnce</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">?</span> T\n<span class=\"token punctuation\">:</span> FlattenDepth<span class=\"token operator\">&lt;</span>FlattenOnce<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>C<span class=\"token punctuation\">,</span> unknown<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n</code></pre>\n</details>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">原网站</a></p>\n<h2 id=\"简单（easy）\"><a href=\"#简单（easy）\" class=\"headerlink\" title=\"简单（easy）\"></a>简单（easy）</h2><blockquote>\n<p>pick</p>\n</blockquote>\n<pre><code class=\"ts\">interface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyPick&lt;Todo, &#39;title&#39; | &#39;completed&#39;&gt;\n\nconst todo: TodoPreview = {\n    title: &#39;Clean room&#39;,\n    completed: false,\n}</code></pre>\n<details>\n<summary><mark>说明 </mark></summary>\n\n<pre><code class=\"ts\">type Pick&lt;T extends Object, K extends keyof T&gt; = {\n  [P in K]: T[P]\n}</code></pre>\n</details>\n\n<blockquote>\n<p>ReadOnly</p>\n</blockquote>\n<pre><code class=\"ts\">interface Todo {\n  title: string\n  description: string\n}\n\nconst todo: MyReadonly&lt;Todo&gt; = {\n  title: &quot;Hey&quot;,\n  description: &quot;foobar&quot;\n}\n\ntodo.title = &quot;Hello&quot; // Error: cannot reassign a readonly property\ntodo.description = &quot;barFoo&quot; // Error: cannot reassign a readonly property</code></pre>\n<details>\n<summary><mark>说明 </mark></summary>\n\n<pre><code class=\"ts\">type ReadOnly&lt;T extends Object&gt; = {\n  readonly [P in keyof T]: T[P]\n}</code></pre>\n</details>\n\n\n<blockquote>\n<p>元组转换成对象</p>\n</blockquote>\n<pre><code class=\"ts\">const tuple = [&#39;tesla&#39;, &#39;model 3&#39;, &#39;model X&#39;, &#39;model Y&#39;] as const\n\ntype result = TupleToObject&lt;typeof tuple&gt; // expected { tesla: &#39;tesla&#39;, &#39;model 3&#39;: &#39;model 3&#39;, &#39;model X&#39;: &#39;model X&#39;, &#39;model Y&#39;: &#39;model Y&#39;}</code></pre>\n<details>\n<summary><mark>说明 </mark></summary>\n\n<pre><code class=\"ts\">type TupleToObject&lt;T extends readonly string[]&gt; = {\n  [P in T[number]]: P\n}</code></pre>\n</details>\n\n<blockquote>\n<p>第一个元素</p>\n</blockquote>\n<pre><code class=\"ts\">type arr1 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\ntype arr2 = [3, 2, 1]\n\ntype head1 = First&lt;arr1&gt; // expected to be &#39;a&#39;\ntype head2 = First&lt;arr2&gt; // expected to be 3</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type First&lt;T extends any[]&gt; = T extends [infer Result,...infer Rest] ? Result : never;</code></pre>\n</details>\n\n<blockquote>\n<p>获取元素长度</p>\n</blockquote>\n<pre><code class=\"ts\">type tesla = [&#39;tesla&#39;, &#39;model 3&#39;, &#39;model X&#39;, &#39;model Y&#39;]\ntype spaceX = [&#39;FALCON 9&#39;, &#39;FALCON HEAVY&#39;, &#39;DRAGON&#39;, &#39;STARSHIP&#39;, &#39;HUMAN SPACEFLIGHT&#39;]\n\ntype teslaLength = Length&lt;tesla&gt; // expected 4\ntype spaceXLength = Length&lt;spaceX&gt; // expected 5</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Length&lt;T extends readonly any[]&gt; = T[&#39;length&#39;];</code></pre>\n</details>\n\n<blockquote>\n<p>Exclude</p>\n</blockquote>\n<pre><code class=\"ts\">/** \n * 实现内置的Exclude &lt;T，U&gt;类型，但不能直接使用它本身。\n * 从联合类型T中排除U的类型成员，来构造一个新的类型。\n*/</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Exclude&lt;T, U&gt; = T extends U ? never : T</code></pre>\n</details>\n\n<blockquote>\n<p>Awaited</p>\n</blockquote>\n<pre><code class=\"ts\">假如我们有一个 Promise 对象，这个 Promise 对象会返回一个类型。在 TS 中，我们用 Promise 中的 T 来描述这个 Promise 返回的类型。请你实现一个类型，可以获取这个类型。\n\n比如：Promise&lt;ExampleType&gt;，请你返回 ExampleType 类型。</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type MyAwaited&lt;T&gt; = T extends Promise&lt;infer P&gt; ? MyAwaited&lt;P&gt; : T;</code></pre>\n</details>\n\n<blockquote>\n<p>IF</p>\n</blockquote>\n<p>实现一个 <code>IF</code> 类型，它接收一个条件类型 <code>C</code> ，一个判断为真时的返回类型 <code>T</code> ，以及一个判断为假时的返回类型 <code>F</code>。 <code>C</code> 只能是 <code>true</code> 或者 <code>false</code>， <code>T</code> 和 <code>F</code> 可以是任意类型。</p>\n<pre><code class=\"ts\">type A = If&lt;true, &#39;a&#39;, &#39;b&#39;&gt;  // expected to be &#39;a&#39;\ntype B = If&lt;false, &#39;a&#39;, &#39;b&#39;&gt; // expected to be &#39;b&#39;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type If&lt;C extends boolean, T, F&gt; = T extends true ? T : F;</code></pre>\n</details>\n\n<blockquote>\n<p>Concat</p>\n</blockquote>\n<p>在类型系统里实现 <code>JavaScript</code> 内置的 <code>Array.concat</code> 方法，这个类型接受两个参数，返回的新数组类型应该按照输入参数从左到右的顺序合并为一个新的数组。</p>\n<pre><code class=\"ts\">type Result = Concat&lt;[1], [2]&gt; // expected to be [1, 2]</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Concat&lt;T extends any[], P extends any[]&gt; = [...T, ...P]</code></pre>\n</details>\n\n\n<blockquote>\n<p>Include</p>\n</blockquote>\n<p>在类型系统里实现 <code>JavaScript</code> 的 <code>Array.includes</code> 方法，这个类型接受两个参数，返回的类型要么是 <code>true</code> 要么是 <code>false</code>。</p>\n<pre><code class=\"ts\">type isPillarMen = Includes&lt;[&#39;Kars&#39;, &#39;Esidisi&#39;, &#39;Wamuu&#39;, &#39;Santana&#39;], &#39;Dio&#39;&gt; // expected to be `false`</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Include&lt;T extends readonly any[], P&gt; = T extends [infer First,...infer Other] ? (Equal&lt;First,U&gt; extends true ? true: Includes&lt;Other,U&gt;) :false </code></pre>\n</details>\n\n<blockquote>\n<p>Push</p>\n</blockquote>\n<p>在类型系统里实现通用的 <code>Array.push</code> 。</p>\n<pre><code class=\"ts\">type Result = Push&lt;[1, 2], &#39;3&#39;&gt; // [1, 2, &#39;3&#39;]</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Push&lt;T extends any[], U&gt; = [...T, U]</code></pre>\n</details>\n\n\n<blockquote>\n<p>Unshift</p>\n</blockquote>\n<p>实现类型版本的 <code>Array.unshift</code>。</p>\n<pre><code class=\"ts\">type Result = Unshift&lt;[1, 2], 0&gt; // [0, 1, 2,]</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Unshift&lt;T extends any[], U&gt; = [U, ...T]</code></pre>\n</details>\n\n<blockquote>\n<p>Parameters</p>\n</blockquote>\n<p>实现内置的 Parameters 类型，而不是直接使用它，可参考<a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#parameterstype\" target=\"_blank\" rel=\"noopener\">TypeScript官方文档</a>。</p>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type MyParameters&lt;T extends (...args: any[]) =&gt; any&gt; = T extends (...args: infer P) =&gt; any ? P : never;</code></pre>\n</details>\n\n<h2 id=\"中等\"><a href=\"#中等\" class=\"headerlink\" title=\"中等\"></a>中等</h2><blockquote>\n<p>获取函数返回类型 ReturnType</p>\n</blockquote>\n<p>不使用 <code>ReturnType</code> 实现 <code>TypeScript</code> 的 <code>ReturnType&lt;T&gt;</code> 范型。</p>\n<pre><code class=\"ts\">const fn = (v: boolean) =&gt; {\n  if (v)\n    return 1\n  else\n    return 2\n}\n\ntype a = MyReturnType&lt;typeof fn&gt; // 应推导出 &quot;1 | 2&quot;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type MyReturnType&lt;T extends (...args: any[]) =&gt; any&gt; = T extends (...args: any[]) =&gt; infer R ? R : never</code></pre>\n</details>\n\n\n<blockquote>\n<p>实现 omit</p>\n</blockquote>\n<p>不使用 <code>Omit</code> 实现 <code>TypeScript</code> 的 <code>Omit&lt;T, K&gt;</code> 范型。</p>\n<p><code>Omit</code> 会创建一个省略 <code>K</code> 中字段的 <code>T</code> 对象。</p>\n<pre><code class=\"tsx\">interface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyOmit&lt;Todo, &#39;description&#39; | &#39;title&#39;&gt;\n\nconst todo: TodoPreview = {\n  completed: false,\n}</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type MyPick&lt;T, K extends keyof T&gt; = {\n  [key in K]: T[key]\n}\n\ntype MyExclude&lt;T, P&gt; = T extends P ? never : T\n\ntype MyOmit&lt;T, K extends keyof T&gt; = MyPick&lt;T, MyExclude&lt;keyof T, K&gt;&gt;</code></pre>\n</details>\n\n<blockquote>\n<p>Readonly 2</p>\n</blockquote>\n<p>实现一个通用<code>MyReadonly2&lt;T, K&gt;</code>，它带有两种类型的参数<code>T</code>和<code>K</code>。</p>\n<p><code>K</code>指定应设置为<code>Readonly</code>的<code>T</code>的属性集。如果未提供<code>K</code>，则应使所有属性都变为只读，就像普通的<code>Readonly&lt;T&gt;</code>一样。</p>\n<pre><code class=\"ts\">interface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\nconst todo: MyReadonly2&lt;Todo, &#39;title&#39; | &#39;description&#39;&gt; = {\n  title: &quot;Hey&quot;,\n  description: &quot;foobar&quot;,\n  completed: false,\n}\n\ntodo.title = &quot;Hello&quot; // Error: cannot reassign a readonly property\ntodo.description = &quot;barFoo&quot; // Error: cannot reassign a readonly property\ntodo.completed = true // OK</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype MyReadonly&lt;T&gt; = {\n  readonly [P in keyof T]: T[P]\n}\n\ntype MyPick&lt;T, K extends keyof T&gt; = { [P in K]: T[P] }\n\ntype MyExclude&lt;T, K&gt; = T extends K ? never : T;\n\ntype MyOmit&lt;T, K extends keyof T&gt; = { [P in MyExclude&lt;keyof T, K&gt;]: T[P]}\n\n type MyReadonly2&lt;T, K extends keyof T = keyof T&gt; =MyReadonly&lt;MyPick&lt;T, K&gt;&gt;  &amp; MyOmit&lt;T, K&gt;</code></pre>\n</details>\n\n<blockquote>\n<p>深度Readonly</p>\n</blockquote>\n<p>实现一个通用的DeepReadonly<T>，它将对象的每个参数及其子对象递归地设为只读。</T></p>\n<p>您可以假设在此挑战中我们仅处理对象。数组，函数，类等都无需考虑。但是，您仍然可以通过覆盖尽可能多的不同案例来挑战自己。</p>\n<pre><code class=\"ts\">type X = { \n  x: { \n    a: 1\n    b: &#39;hi&#39;\n  }\n  y: &#39;hey&#39;\n}\n\ntype Expected = { \n  readonly x: { \n    readonly a: 1\n    readonly b: &#39;hi&#39;\n  }\n  readonly y: &#39;hey&#39; \n}\n\ntype Todo = DeepReadonly&lt;X&gt; // should be same as `Expected`</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype DeepReadonly&lt;T extends Object&gt; = {\n  readonly [P in keyof T]: keyof T[P] extends never ? T[P] : DeepReadonly&lt;T[P]&gt;\n}\n</code></pre>\n</details>\n\n<blockquote>\n<p>元组转合集</p>\n</blockquote>\n<p>实现泛型<code>TupleToUnion&lt;T&gt;</code>，它覆盖元组的值与其值联合。</p>\n<pre><code class=\"ts\">type Arr = [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]\n\ntype Test = TupleToUnion&lt;Arr&gt; // expected to be &#39;1&#39; | &#39;2&#39; | &#39;3&#39;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype TupleToUnion&lt;T extends any[]&gt; = T extends [infer First,...infer Other] ? First | TupleToUnion&lt;Other&gt; : never;\n\n// 或者\n\ntype TupleToUnion&lt;T extends any[]&gt; = T[number];\n</code></pre>\n</details>\n\n<blockquote>\n<p>最后一个元素</p>\n</blockquote>\n<p>实现一个通用<code>Last&lt;T&gt;</code>，它接受一个<code>数组T</code>并返回其最后一个元素的类型。</p>\n<pre><code class=\"ts\">type arr1 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\ntype arr2 = [3, 2, 1]\n\ntype tail1 = Last&lt;arr1&gt; // expected to be &#39;c&#39;\ntype tail2 = Last&lt;arr2&gt; // expected to be 1</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype Last&lt;T extends any[]&gt; = T extends [...infer K, infer Other] ? Other : never\n\n//或者\ntype Last&lt;T extends any[]&gt; = T extends [any, ...infer Rest] ? T[Rest[&#39;length&#39;]] : never\n</code></pre>\n</details>\n\n<blockquote>\n<p>出堆</p>\n</blockquote>\n<p>实现一个通用Pop<T>，它接受一个数组T并返回一个没有最后一个元素的数组。</T></p>\n<pre><code class=\"ts\">type arr1 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]\ntype arr2 = [3, 2, 1]\n\ntype re1 = Pop&lt;arr1&gt; // expected to be [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\ntype re2 = Pop&lt;arr2&gt; // expected to be [3, 2]</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype Pop&lt;T extends any[]&gt; = T extends [...infer K, infer Other] ? K : never\n</code></pre>\n</details>\n\n\n<blockquote>\n<p>promise.all</p>\n</blockquote>\n<pre><code class=\"TS\">const promise1 = Promise.resolve(3);\nconst promise2 = 42;\nconst promise3 = new Promise&lt;string&gt;((resolve, reject) =&gt; {\n  setTimeout(resolve, 100, &#39;foo&#39;);\n});\n\n// expected to be `Promise&lt;[number, number, string]&gt;`\nconst p = Promise.all([promise1, promise2, promise3] as const)\n\n// declare function PromiseAll(values: any): any</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">// 跟上面awaited 相似\ntype MyAwaited&lt;T&gt; = T extends Promise&lt;infer P&gt; ? MyAwaited&lt;P&gt; : T;\n/** declare 重定义function, (values: readonly [...T]) 函数参数 Promise&lt;&gt; */\ndeclare function PromiseAll&lt;T extends any[]&gt;(values: readonly [...T]): Promise&lt;{\n  [K in keyof T]:  MyAwaited&lt;T[K]&gt;\n}&gt;\n</code></pre>\n</details>\n\n<blockquote>\n<p>Type Lookup</p>\n</blockquote>\n<p>在此挑战中，我们想通过在联合<code>Cat | Dog</code>中搜索公共<code>type</code>字段来获取相应的类型。换句话说，在以下示例中，我们期望<code>LookUp&lt;Dog | Cat, &#39;dog&#39;&gt;</code>获得<code>Dog</code>，<code>LookUp&lt;Dog | Cat, &#39;cat&#39;&gt;</code>获得<code>Cat</code>。</p>\n<pre><code class=\"ts\">\ninterface Cat {\n  type: &#39;cat&#39;\n  breeds: &#39;Abyssinian&#39; | &#39;Shorthair&#39; | &#39;Curl&#39; | &#39;Bengal&#39;\n}\n\ninterface Dog {\n  type: &#39;dog&#39;\n  breeds: &#39;Hound&#39; | &#39;Brittany&#39; | &#39;Bulldog&#39; | &#39;Boxer&#39;\n  color: &#39;brown&#39; | &#39;white&#39; | &#39;black&#39;\n}\n\ntype MyDog = LookUp&lt;Cat | Dog, &#39;dog&#39;&gt; // expected to be `Dog`</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type LookUP&lt;T, U&gt; = T extends { type: string } ? (T[&#39;type&#39;] extends U ? T : never )  : never\n</code></pre>\n</details>\n\n<blockquote>\n<p>Trim Left</p>\n</blockquote>\n<p>实现 <code>TrimLeft&lt;T&gt;</code> ，它接收确定的字符串类型并返回一个新的字符串，其中新返回的字符串删除了原字符串开头的空白字符串。</p>\n<pre><code class=\"ts\">type trimed = TrimLeft&lt;&#39;  Hello World  &#39;&gt; // 应推导出 &#39;Hello World  &#39;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type TrimLet&lt;T extends string&gt; = T extends `${&#39; &#39;| &#39;\\n&#39; | &#39;\\t&#39;}${infer Rest}` ? TrimLeft&lt;Rest&gt; : T;\n</code></pre>\n</details>\n\n<blockquote>\n<p>Trim</p>\n</blockquote>\n<pre><code class=\"ts\">type trimed = Trim&lt;&#39;  Hello World  &#39;&gt; // expected to be &#39;Hello World&#39;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type SpaceChar = &#39; &#39; | &#39;\\n&#39; | &#39;\\t&#39;\ntype Trim&lt;S extends string&gt; = S extends (`${SpaceChar}${infer R}` | `${infer R}${SpaceChar}`) ? Trim&lt;R&gt; : S\n</code></pre>\n</details>\n\n\n<blockquote>\n<p>Capitalize </p>\n</blockquote>\n<p>首字母大写</p>\n<pre><code class=\"ts\">type capitalized = Capitalize&lt;&#39;hello world&#39;&gt; // expected to be &#39;Hello world&#39;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Capitalize&lt;T extends string&gt; = T extends (`${infer first}${infer R}`) ? `${Uppercase&lt;first&gt;}${R}` : T;\n</code></pre>\n</details>\n\n<blockquote>\n<p>Replace</p>\n</blockquote>\n<p>实现 <code>Replace&lt;S, From, To</code>&gt; 将字符串 <code>S</code> 中的第一个子字符串 <code>From</code> 替换为 <code>To</code> 。</p>\n<pre><code class=\"ts\">type replaced = Replace&lt;&#39;types are fun!&#39;, &#39;fun&#39;, &#39;awesome&#39;&gt; // 期望是 &#39;types are awesome!&#39;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Replace&lt;S extends string, From extends string, To extends string&gt; = From extends &#39;&#39; ? S : S extends `${infer start}${From}${infer end}` ? `${start}${To}${end}` : S\n</code></pre>\n</details>\n\n<blockquote>\n<p>ReplaceAll</p>\n</blockquote>\n<p>实现 <code>ReplaceAll&lt;S, From, To&gt;</code> 将一个字符串 <code>S</code> 中的所有子字符串 <code>From</code> 替换为 <code>To</code>。</p>\n<pre><code class=\"ts\">type replaced = ReplaceAll&lt;&#39;t y p e s&#39;, &#39; &#39;, &#39;&#39;&gt; // 期望是 &#39;types&#39;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">/**\n * 请注意以下两种情况\n *  Expect&lt;Equal&lt;ReplaceAll&lt;&#39;foobarfoobar&#39;, &#39;ob&#39;, &#39;b&#39;&gt;, &#39;fobarfobar&#39;&gt;&gt;,\n *  Expect&lt;Equal&lt;ReplaceAll&lt;&#39;foboorfoboar&#39;, &#39;bo&#39;, &#39;b&#39;&gt;, &#39;foborfobar&#39;&gt;&gt;,\n */\n\n// 错误\ntype ReplaceAll&lt;S extends string, From extends string, To extends string&gt; =  From extends &#39;&#39; ? S : S extends `${infer start}${From}${infer end}` ? ReplaceAll&lt;`${start}${To}${end}`, From, To&gt; : S\n\n// 正确\ntype ReplaceAll&lt;S extends string, From extends string, To extends string&gt; =  From extends &#39;&#39; ? S : S extends `${infer start}${From}${infer end}` ? `${start}${To}${ReplaceAll&lt;`${end}`, From, To&gt;}` : S\n</code></pre>\n</details>\n\n\n<blockquote>\n<p>追加参数</p>\n</blockquote>\n<p>实现一个范型 <code>AppendArgument&lt;Fn, A&gt;</code>，对于给定的函数类型 <code>Fn</code>，以及一个任意类型 <code>A</code>，返回一个新的函数 <code>G</code>。<code>G</code> 拥有 <code>Fn 的所有参数</code>并在末尾追加类型为 <code>A</code> 的参数。</p>\n<pre><code class=\"ts\">type Fn = (a: number, b: string) =&gt; number\n\ntype Result = AppendArgument&lt;Fn, boolean&gt; \n// 期望是 (a: number, b: string, x: boolean) =&gt; number\n</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type AppendArgument&lt;Fn extends (...args: any[]) =&gt; any, T&gt; = Fn extends ((...args: infer P) =&gt; infer R) ? (...args: [...P, T]) =&gt; R : never \n</code></pre>\n</details>\n\n<blockquote>\n<p>Permutation</p>\n</blockquote>\n<p>Implement permutation type that transforms union types into the array that includes permutations of unions.</p>\n<pre><code class=\"ts\">type perm = Permutation&lt;&#39;A&#39; | &#39;B&#39; | &#39;C&#39;&gt;; // [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;] | [&#39;A&#39;, &#39;C&#39;, &#39;B&#39;] | [&#39;B&#39;, &#39;A&#39;, &#39;C&#39;] | [&#39;B&#39;, &#39;C&#39;, &#39;A&#39;] | [&#39;C&#39;, &#39;A&#39;, &#39;B&#39;] | [&#39;C&#39;, &#39;B&#39;, &#39;A&#39;]</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Permutation&lt;T, U = T&gt; = [T] extends [never] ? [] : T extends U ? [T, ...Permutation&lt;Exclude&lt;U, T&gt;&gt;] : []\n</code></pre>\n</details>\n\n<blockquote>\n<p>Length of string</p>\n</blockquote>\n<p>Compute the length of a string literal, which behaves like String#length.</p>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype StringToArr&lt;T extends String&gt; = T extends `${infer F}${infer R}` ? [F, ...StringToArr&lt;R&gt;] : [];\n\ntype StringLength&lt;T extends String&gt; = StringToArr&lt;T&gt;[&#39;length&#39;]\n</code></pre>\n</details>\n\n<blockquote>\n<p>Flatten</p>\n</blockquote>\n<p>In this challenge, you would need to write a type that takes an array and emitted the flatten array type.</p>\n<pre><code class=\"ts\">type flatten = Flatten&lt;[1, 2, [3, 4], [[[5]]]]&gt; // [1, 2, 3, 4, 5]</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype Flatten&lt;T extends any[]&gt; = T extends [infer First, ...infer Other] ? First extends any[] ? [...Flatten&lt;First&gt;, ...Flatten&lt;Other&gt;] : [First, ...Flatten&lt;Other&gt;] : []\n</code></pre>\n</details>\n\n<blockquote>\n<p>Append to object</p>\n</blockquote>\n<p>Implement a type that adds a new field to the interface. The type takes the three arguments. The output should be an object with the new field.</p>\n<pre><code class=\"ts\">type Test = { id: &#39;1&#39; }\ntype Result = AppendToObject&lt;Test, &#39;value&#39;, 4&gt; // expected to be { id: &#39;1&#39;, value: 4 }</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype AppendToObject&lt;T extends object, U extends string, V&gt; = { [K in keyof T | U]: K extends keyof T ? T[K] : V }\n\n</code></pre>\n</details>\n\n<blockquote>\n<p>Absolute </p>\n</blockquote>\n<p>数字绝对值</p>\n<pre><code class=\"ts\">type Test = -100;\ntype Result = Absolute&lt;Test&gt;; // expected to be &quot;100&quot;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Absolute&lt;T extends number | string | bigint&gt; = `${T}` extends `-${infer X}` ? X : `${T}`\n</code></pre>\n</details>\n\n<blockquote>\n<p>String to Union</p>\n</blockquote>\n<p>Implement the String to Union type. Type take string argument. The output should be a union of input letters</p>\n<pre><code class=\"ts\">type Test = &#39;123&#39;;\ntype Result = StringToUnion&lt;Test&gt;; // expected to be &quot;1&quot; | &quot;2&quot; | &quot;3&quot;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type StringToUnion&lt;T extends string&gt; =  T extends `${infer F}${infer R}` ? F | StringToUnion&lt;R&gt; : never \n</code></pre>\n</details>\n\n<blockquote>\n<p>Merge </p>\n</blockquote>\n<p>Merge two types into a new type. Keys of the second type overrides keys of the first type.</p>\n<pre><code class=\"ts\">type Foo = {\n  a: number;\n  b: string;\n};\ntype Bar = {\n  b: number;\n  c: boolean;\n};\ntype Result = Merge&lt;Foo, Bar&gt;; \n\n// {\n//     a: number;\n//     b: number;\n//     c: boolean;\n// }</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Merge&lt;F, S&gt; = {[key in keyof F | keyof S]: key extends keyof S ? S[key] : key extends keyof F ? F[key] : never};\n</code></pre>\n</details>\n\n<blockquote>\n<p>CamelCase</p>\n</blockquote>\n<p><code>for-bar-baz</code> -&gt; <code>forBarBaz</code></p>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Capitalize&lt;T extends string&gt; = T extends (`${infer first}${infer R}`) ? `${Uppercase&lt;first&gt;}${R}` : T;\ntype CamelCase&lt;T extends string&gt; = T extends `${infer start}-${infer end}` ? `${start}${CamelCase&lt;Capitalize&lt;end&gt;&gt;}` : T\n\ntype Result = CamelCase&lt;&#39;foo--bar----baz&#39;&gt; // &quot;fooBarBaz&quot;\n\ntype CamelCase&lt;S extends string&gt; =  S extends `${infer X}-${infer Y}` ? Y extends Capitalize&lt;Y&gt; ? `${X}-${CamelCase&lt;Y&gt;}` : `${X}${CamelCase&lt;Capitalize&lt;Y&gt;&gt;}` : S ;\n\n//foo-Bar---Baz\n</code></pre>\n</details>\n\n<blockquote>\n<p>KebabCase </p>\n</blockquote>\n<p><code>FooBarBaz</code> -&gt; <code>foo-bar-baz</code></p>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type KebabCase&lt;S extends string, P extends string = &quot;&quot;&gt; = \n  S extends `${infer L}${infer R}`\n    ? L extends Lowercase&lt;L&gt; \n      ? `${L}${KebabCase&lt;R, &quot;-&quot;&gt;}`\n      : `${P}${Lowercase&lt;L&gt;}${KebabCase&lt;R, &quot;-&quot;&gt;}`\n    : S;\n\ntype b = KebabCase&lt;&#39;foo-bar&#39;&gt;\n</code></pre>\n</details>\n\n<blockquote>\n<p>Diff</p>\n</blockquote>\n<p>Get an Object that is the difference between O &amp; O1</p>\n<pre><code class=\"ts\">type Foo = {\n  name: string\n  age: string\n}\ntype Bar = {\n  name: string\n  age: string\n  gender: number\n}\n\nExpect&lt;Equal&lt;Diff&lt;Foo, Bar&gt;, { gender: number }&gt;&gt;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Diff&lt;O, O1&gt; = {\n  [P in (keyof O | keyof O1) as Exclude&lt;P, keyof O &amp; keyof O1&gt;]: P extends keyof O\n    ? O[P]\n    : P extends keyof O1\n      ? O1[P]\n      : never;\n};</code></pre>\n</details>\n\n\n<blockquote>\n<p>AnyOf</p>\n</blockquote>\n<p>Implement Python liked any function in the type system. A type takes the Array and returns true if any element of the Array is true. If the Array is empty, return false.</p>\n<pre><code class=\"ts\">type Sample1 = AnyOf&lt;[1, &quot;&quot;, false, [], {}]&gt;; // expected to be true.\ntype Sample2 = AnyOf&lt;[0, &quot;&quot;, false, [], {}]&gt;; // expected to be false.</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">// solution 1\ntype False = 0 | &#39;&#39; | false | [] | null | undefined | Record&lt;any, never&gt;;\ntype AnyOf&lt;T extends readonly any[]&gt; = T[number] extends False ? false : true;\n\n// solution 2\ntype False = 0 | &#39;&#39; | false | [] | null | undefined | Record&lt;any, never&gt;;\ntype AnyOf&lt;T extends readonly any[]&gt; = T extends [infer F, ...infer R] \n? F extends False ? AnyOf&lt;R&gt; : true \n: false;</code></pre>\n</details>\n\n\n<blockquote>\n<p>isNever </p>\n</blockquote>\n<p>Implement a type IsNever, which takes input type <code>T</code>. If the type of resolves to <code>never</code>, return <code>true</code>, otherwise <code>false</code>.</p>\n<pre><code>type A = IsNever&lt;never&gt;  // expected to be true\ntype B = IsNever&lt;undefined&gt; // expected to be false\ntype C = IsNever&lt;null&gt; // expected to be false\ntype D = IsNever&lt;[]&gt; // expected to be false\ntype E = IsNever&lt;number&gt; // expected to be false</code></pre><details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type isNever&lt;T&gt; = [T] extends [never] ? true : false\n</code></pre>\n</details>\n\n<blockquote>\n<p>isUnion</p>\n</blockquote>\n<p>Implement a type IsUnion, which takes an input type <code>T</code> and returns whether <code>T</code> resolves to a union type.</p>\n<pre><code class=\"ts\">type case1 = IsUnion&lt;string&gt;  // false\ntype case2 = IsUnion&lt;string|number&gt;  // true\ntype case3 = IsUnion&lt;[string|number]&gt;  // false</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype IsUnion&lt;T, U = T&gt; = T extends T\n  ? (U | T) extends (U &amp; T) ? false : true\n  : never\n</code></pre>\n</details>\n\n<blockquote>\n<p>ReplaceKeys </p>\n</blockquote>\n<p>Implement a type ReplaceKeys, that replace keys in union types, if some type has not this key, just skip replacing, A type takes three arguments.<br>如果</p>\n<pre><code class=\"ts\">type NodeA = {\n  type: &#39;A&#39;\n  name: string\n  flag: number\n}\n\ntype NodeB = {\n  type: &#39;B&#39;\n  id: number\n  flag: number\n}\n\ntype NodeC = {\n  type: &#39;C&#39;\n  name: string\n  flag: number\n}\n\n\ntype Nodes = NodeA | NodeB | NodeC\n\ntype ReplacedNodes = ReplaceKeys&lt;Nodes, &#39;name&#39; | &#39;flag&#39;, {name: number, flag: string}&gt; // {type: &#39;A&#39;, name: number, flag: string} | {type: &#39;B&#39;, id: number, flag: string} | {type: &#39;C&#39;, name: number, flag: string} // would replace name from string to number, replace flag from number to string.\n\ntype ReplacedNotExistKeys = ReplaceKeys&lt;Nodes, &#39;name&#39;, {aa: number}&gt; // {type: &#39;A&#39;, name: never, flag: number} | NodeB | {type: &#39;C&#39;, name: never, flag: number} // would replace name to never</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype ReplaceKeys&lt;T, K, V&gt; = {\n  [key in keyof T]: key extends K \n    ? key extends keyof V \n      ? V[key]\n      : never\n    : T[key]\n}\n</code></pre>\n</details>\n\n<blockquote>\n<p>Remove Index Signature</p>\n</blockquote>\n<p>Implement <code>RemoveIndexSignature&lt;T&gt;</code>, exclude the index signature from object types.</p>\n<pre><code class=\"ts\">type Foo = {\n  [key: string]: any;\n  foo(): void;\n}\n\ntype A = RemoveIndexSignature&lt;Foo&gt;  // expected { foo(): void }</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype RemoveIndexSignature&lt;T&gt; = {\n  [key in keyof T as string extends key ? never : key extends number ? never : key]: T[key]\n}\n</code></pre>\n</details>\n\n\n<blockquote>\n<p>Percentage Parser</p>\n</blockquote>\n<p>Implement PercentageParser. According to the <code>/^(\\+|\\-)?(\\d*)?(\\%)?$/</code> regularity to match <code>T</code> and get three matches.</p>\n<p>The structure should be: <code>[plus or minus, number, unit]</code> If it is not captured, the default is an empty string.</p>\n<pre><code class=\"ts\">type PString1 = &#39;&#39;\ntype PString2 = &#39;+85%&#39;\ntype PString3 = &#39;-85%&#39;\ntype PString4 = &#39;85%&#39;\ntype PString5 = &#39;85&#39;\n\ntype R1 = PercentageParser&lt;PString1&gt;  // expected [&#39;&#39;, &#39;&#39;, &#39;&#39;]\ntype R2 = PercentageParser&lt;PString2&gt;  // expected [&quot;+&quot;, &quot;85&quot;, &quot;%&quot;]\ntype R3 = PercentageParser&lt;PString3&gt;  // expected [&quot;-&quot;, &quot;85&quot;, &quot;%&quot;]\ntype R4 = PercentageParser&lt;PString4&gt;  // expected [&quot;&quot;, &quot;85&quot;, &quot;%&quot;]\ntype R5 = PercentageParser&lt;PString5&gt;  // expected [&quot;&quot;, &quot;85&quot;, &quot;&quot;]</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype PickPrefix&lt;T extends string, S extends string&gt; = T extends `${S}${infer P}`\n    ? T extends `${infer R}${P}` ? R : never\n    : &#39;&#39;;\n\ntype PickSuffix&lt;T extends string, S extends string&gt; = T extends `${infer P}${S}`\n    ? T extends `${P}${infer R}` ? R : never\n    : &#39;&#39;;\n\ntype PercentageParser&lt;T extends string&gt; = T extends `${PickPrefix&lt;T, &#39;+&#39; | &#39;-&#39;&gt;}${infer B}${PickSuffix&lt;T, &#39;%&#39;&gt;}`\n    ? T extends `${infer A}${B}${infer C}`\n        ? [A, B, C]\n        : [&#39;&#39;, &#39;&#39;, &#39;&#39;]\n    : [&#39;&#39;, &#39;&#39;, &#39;&#39;];\n</code></pre>\n</details>\n\n<blockquote>\n<p>Drop Char</p>\n</blockquote>\n<p>Drop a specified char from a string.</p>\n<pre><code class=\"ts\">type Butterfly = DropChar&lt;&#39; b u t t e r f l y ! &#39;, &#39; &#39;&gt; // &#39;butterfly!&#39;</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type DropChar&lt;S, C&gt; = S extends `${infer X}${infer Y}` ? `${X extends C ? &quot;&quot; : X}${DropChar&lt;Y, C&gt;}` : &quot;&quot;  </code></pre>\n</details>\n\n<blockquote>\n<p>MinusOne </p>\n</blockquote>\n<p>Given a number (always positive) as a type. Your type should return the number decreased by one.</p>\n<pre><code class=\"ts\">type Zero = MinusOne&lt;1&gt; // 0\ntype FiftyFour = MinusOne&lt;55&gt; // 54</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<p><a href=\"https://github.com/type-challenges/type-challenges/issues/5768\" target=\"_blank\" rel=\"noopener\">拓展</a></p>\n<pre><code class=\"ts\">type Pop&lt;T extends any[]&gt; = T extends [...infer head, any] ? head : never; \n\ntype MinusOne&lt;T extends number, A extends any[] = []&gt; = A[&#39;length&#39;] extends T\n  ? Pop&lt;A&gt;[&#39;length&#39;]\n  : MinusOne&lt;T, [...A, 0]&gt;</code></pre>\n</details>\n\n<blockquote>\n<p>PickByType</p>\n</blockquote>\n<p>From <code>T</code>, pick a set of properties whose type are assignable to <code>U</code>.</p>\n<pre><code class=\"ts\">type OnlyBoolean = PickByType&lt;{\n  name: string\n  count: number\n  isReadonly: boolean\n  isEnable: boolean\n}, boolean&gt; // { isReadonly: boolean; isEnable: boolean; }</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type PickByType&lt;T, U&gt; = {\n  [key in keyof T as T[key] extends U ? key : never]: T[key] \n}</code></pre>\n</details>\n\n<blockquote>\n<p>StartsWith</p>\n</blockquote>\n<p>Implement <code>StartsWith&lt;T, U&gt;</code> which takes two exact string types and returns whether <code>T</code> starts with <code>U</code></p>\n<pre><code class=\"ts\">type a = StartsWith&lt;&#39;abc&#39;, &#39;ac&#39;&gt; // expected to be false\ntype b = StartsWith&lt;&#39;abc&#39;, &#39;ab&#39;&gt; // expected to be true\ntype c = StartsWith&lt;&#39;abc&#39;, &#39;abcd&#39;&gt; // expected to be false</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type StartsWith&lt;T extends string, U extends string&gt; = T extends `${U}${infer Other}` ? true : false</code></pre>\n</details>\n\n<blockquote>\n<p>EndsWith</p>\n</blockquote>\n<p>Implement <code>EndsWith&lt;T, U&gt;</code> which takes two exact string types and returns whether <code>T</code> ends with <code>U</code></p>\n<pre><code class=\"ts\">type a = EndsWith&lt;&#39;abc&#39;, &#39;bc&#39;&gt; // expected to be true\ntype b = EndsWith&lt;&#39;abc&#39;, &#39;ab&#39;&gt; // expected to be false</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type EndsWith&lt;T extends string, U extends string&gt; = T extends `${infer Other}${U}` ? true : false</code></pre>\n</details>\n\n<blockquote>\n<p>PartialByKeys</p>\n</blockquote>\n<p>Implement a generic <code>PartialByKeys&lt;T, K&gt;</code> which takes two type argument <code>T</code> and <code>K</code>.</p>\n<p><code>K</code> specify the set of properties of <code>T</code> that should set to be optional. When <code>K</code> is not provided, it should make all properties optional just like the normal <code>Partial&lt;T&gt;</code>.</p>\n<pre><code class=\"ts\">interface User {\n  name: string\n  age: number\n  address: string\n}\n\ntype UserPartialName = PartialByKeys&lt;User, &#39;name&#39;&gt; // { name?:string; age:number; address:string }</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Merge&lt;A, B&gt; = Pick&lt;A &amp; B, keyof A | keyof B&gt;\ntype PartialByKeys&lt;T , K = keyof T&gt; = Merge&lt;{[key in keyof T as key extends K ? key : never]?: T[key]}, {[key in keyof T as key extends K ? never : key]: T[key]}&gt;</code></pre>\n</details>\n\n\n<blockquote>\n<p>RequiredByKeys</p>\n</blockquote>\n<p>Implement a generic <code>RequiredByKeys&lt;T, K&gt;</code> which takes two type argument <code>T</code> and <code>K</code>.</p>\n<p><code>K</code> specify the set of properties of <code>T</code> that should set to be required. When <code>K</code> is not provided, it should make all properties required just like the normal <code>Required&lt;T&gt;</code>.</p>\n<pre><code class=\"ts\">interface User {\n  name?: string\n  age?: number\n  address?: string\n}\n\ntype UserPartialName = RequiredByKeys&lt;User, &#39;name&#39;&gt; // { name: string; age?: number; address?: string }</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Merge&lt;A, B&gt; = Pick&lt;A &amp; B, keyof A | keyof B&gt;\ntype IsRequire&lt;T, U&gt; = {\n  [key in keyof T as key extends U  ? key : never]-?: T[key]\n}\n\ntype Origin&lt;T, U&gt; = {\n  [key in keyof T as key extends U  ? never : key]: T[key]\n}\n\ntype RequiredByKeys&lt;T, U = keyof T&gt; = Merge&lt;IsRequire&lt;T, U&gt;, Origin&lt;T, U&gt;&gt;\n</code></pre>\n</details>\n\n\n<blockquote>\n<p>Mutable</p>\n</blockquote>\n<p>Implement the generic <code>Mutable&lt;T&gt;</code> which makes all properties in <code>T</code> mutable (not readonly).</p>\n<pre><code class=\"ts\">interface Todo {\n  readonly title: string\n  readonly description: string\n  readonly completed: boolean\n}\n\ntype MutableTodo = Mutable&lt;Todo&gt; // { title: string; description: string; completed: boolean; }</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Mutable&lt;T&gt; = {\n  -readonly [key in keyof T]: T[key]\n}\n</code></pre>\n</details>\n\n<blockquote>\n<p>OmitByType</p>\n</blockquote>\n<p>From <code>T</code>, pick a set of properties whose type are not assignable to <code>U</code>.</p>\n<pre><code class=\"ts\">type OmitBoolean = OmitByType&lt;{\n  name: string\n  count: number\n  isReadonly: boolean\n  isEnable: boolean\n}, boolean&gt; // { name: string; count: number }</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type OmitByType&lt;T, U&gt; = {\n  [key in keyof T as T[key] extends U ? never : key]: T[key]\n}\n</code></pre>\n</details>\n\n<blockquote>\n<p>ObjectEntries </p>\n</blockquote>\n<p>Implement the type version of <code>Object.entries</code></p>\n<pre><code class=\"ts\">interface Model {\n  name: string; \n  age: number;\n  locations: string[] | null;\n}\ntype modelEntries = ObjectEntries&lt;Model&gt; // [&#39;name&#39;, string] | [&#39;age&#39;, number] | [&#39;locations&#39;, string[] | null];</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type ObjectEntries&lt;T, K = keyof T&gt; = K extends keyof T ? [K, Required&lt;T&gt;[K]] : never;\n</code></pre>\n</details>\n\n<blockquote>\n<p>Shift</p>\n</blockquote>\n<p>Implement the type version of <code>Array.shift</code></p>\n<pre><code class=\"ts\">type Result = Shift&lt;[3, 2, 1]&gt; // [2, 1]</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Shift&lt;T extends any[]&gt; = T extends [infer First, ...infer Other] ? Other : never\n</code></pre>\n</details>\n\n<blockquote>\n<p>Tuple to Nested Object</p>\n</blockquote>\n<p>Given a tuple type <code>T</code> that only contains string type, and a type <code>U</code>, build an object recursively.</p>\n<pre><code class=\"ts\">type a = TupleToNestedObject&lt;[&#39;a&#39;], string&gt; // {a: string}\ntype b = TupleToNestedObject&lt;[&#39;a&#39;, &#39;b&#39;], number&gt; // {a: {b: number}}\ntype c = TupleToNestedObject&lt;[], boolean&gt; // boolean. if the tuple is empty, just return the U type</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type TupleToNestedObject&lt;T extends any[], U&gt; = T[&#39;length&#39;] extends 0 ? U : T extends [infer First, ...infer Other] \n  ? { [P in T[0]]: Other[&#39;length&#39;] extends 0 ? U : TupleToNestedObject&lt;Other, U&gt; }\n  : never\n</code></pre>\n</details>\n\n<blockquote>\n<p>Reverse</p>\n</blockquote>\n<p>Implement the type version of <code>Array.reverse</code></p>\n<pre><code class=\"ts\">type a = Reverse&lt;[&#39;a&#39;, &#39;b&#39;]&gt; // [&#39;b&#39;, &#39;a&#39;]\ntype b = Reverse&lt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&gt; // [&#39;c&#39;, &#39;b&#39;, &#39;a&#39;]</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Reverse&lt;T extends any[]&gt; = T extends [...infer Other, infer Last] ? [Last, ...Reverse&lt;Other&gt;] : []\n</code></pre>\n</details>\n\n<blockquote>\n<p>Flip Arguments</p>\n</blockquote>\n<p>Implement the type version of lodash’s <code>_.flip</code>.</p>\n<p>Type <code>FlipArguments&lt;T&gt;</code> requires function type <code>T</code> and returns a new function type which has the same return type of T but reversed parameters.</p>\n<pre><code class=\"ts\">type Flipped = FlipArguments&lt;(arg0: string, arg1: number, arg2: boolean) =&gt; void&gt; \n// (arg0: boolean, arg1: number, arg2: string) =&gt; void</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">type Reverse&lt;T extends any[]&gt; = T extends [...infer Other, infer Last] ? [Last, ...Reverse&lt;Other&gt;] : []\n\ntype FlipArguments&lt;T extends (...args: any[]) =&gt; any &gt; = T extends (...args: infer P) =&gt; infer Q\n  ? (...args: Reverse&lt;P&gt;) =&gt; Q\n  : never;\n</code></pre>\n</details>\n\n<blockquote>\n<p>FlattenDepth</p>\n</blockquote>\n<p>Recursively flatten array up to depth times.</p>\n<pre><code class=\"ts\">type a = FlattenDepth&lt;[1, 2, [3, 4], [[[5]]]], 2&gt; // [1, 2, 3, 4, [5]]. flattern 2 times\ntype b = FlattenDepth&lt;[1, 2, [3, 4], [[[5]]]]&gt; // [1, 2, 3, 4, [[5]]]. Depth defaults to be 1</code></pre>\n<details>\n<summary><mark>查看答案 </mark></summary>\n\n<pre><code class=\"ts\">\ntype FlattenOnce&lt;T extends unknown[]&gt; = T extends [infer First, ...infer Rest]\n? First extends unknown[]\n  ? [...First, ...FlattenOnce&lt;Rest&gt;]\n  : [First, ...FlattenOnce&lt;Rest&gt;]\n: [];\ntype t1 = FlattenOnce&lt;[[2], [[3]], 4]&gt;;\ntype FlattenDepth&lt;T extends unknown[], N extends number = 1, C extends unknown[] = []&gt;\n= C[&quot;length&quot;] extends N ? T\n: T extends FlattenOnce&lt;T&gt; ? T\n: FlattenDepth&lt;FlattenOnce&lt;T&gt;, N, [...C, unknown]&gt;;\n</code></pre>\n</details>"},{"title":"typescript 获取url 参数，类型应该怎么写","date":"2022-05-20T17:10:32.000Z","_content":"\n## 前言\n\n有天面试的时候，面试官问如何写 获取url 参数类型应该怎么写？\n\n* 当时回答用的是 `infer`，跟`泛型`还有`递归`，但是面试官说哪里需要用到 `泛型`, 说参数不就是一个`string`吗，后来就不了了之了。\n* 但回家想了一下，确实应该使用`泛型`，我的解决思路是没有问题的\n\n\n## 解决思路\n\n* 比如当前 `url` 为 `https://www.baidu.com?key12=0123123&key1=1`, 那么我们要获取`key12` 跟 `value: 0123123`\n* 先截取字符串`?`之后的值，得到的结果是 `key12=0123123&key1=1` \n* 然后截取 `${key}=${value}` 这个字符串, 得到的结果是 `key = key12`, `value = 0123123&key1=1`, 你可以发现`value` 仍然包含其他值 `key` `value` 值， 那么这里我们递归解决就行了\n* 判断逻辑是 如果么有包含 `&` 那么我们就构建对象，`{ [k in key]: value }`\n* 最后递归合并对象即可\n\n## 完整代码\n\n```jsx\ntype Merge<F, S> = {[key in keyof F | keyof S]: key extends keyof S ? S[key] : key extends keyof F ? F[key] : never};\n\ntype getKeys<T extends string> = T extends `${infer K}?${infer Rest}` ? Rest : ''\n\ntype keyToValue<T extends string> = T extends `${infer key}=${infer value}` \n  ? value extends `${infer V}&${infer rest}`\n    ? Merge<{[k in key]: V}, keyToValue<rest>> \n    : { [k in key]: value }\n  : {}\n\ntype A = getKeys<'https://www.baidu.com?key12=0123123&key1=1'>\ntype B = keyToValue<A>\n\nconst url = 'https://www.baidu.com?key12=0123123&key1=1'\n\nfunction getParameter<T extends string>(url: T): keyToValue<getKeys<T>> {\n  const [ , format] = url.split(\"?\");\n  const data = format.split(\"&\")\n  const result = {} as keyToValue<getKeys<T>>\n  data.forEach((_item) => {\n    const [key, value] = _item.split(\"=\")\n    result[key] = value\n  })\n  return result\n}\n\nconst q = getParameter(url)\n \n```\n\n### 在线demo\n\n[demo](https://www.typescriptlang.org/play?#code/C4TwDgpgBAshBOBzCAeAYgGigZQHxQF4oBvAbQGsIQoBLAOykpAHsAzKNKAH0arZwC6ALl7UIAD2AQ6AEwDOo-tigB+HBSoCoIplAlTZCpv05q0GkFpF0IANwQBfANwAoF6EhRkwANJU5KAAqepLS8lBywPD0iPhEwfphCgAGACTE9KwIUD4OKumZ2QBKEJEOyapQJZHaUADkdW4e0EyBzABqAIYANgCuqAmhhhFRMXFQgwbhaRl0WfCiDgQFc9m2Pf3lUC5Qlet90InDM4UL7Q4AZCvzUPClwOU7u5VwSKhk5LQMTMJQ51itDobVB3SK4fBPXYiYhQChfUS-fb9KAOJ7Q1HucDQACChC8EF8-hQdQAFsBgGA5EIAPTUgDuDIAdAAjTo0GS9RkAY2YAFsVEwAIwAJgIAAYRQBmKUXIUEQV1XCYzwAITxgK6BxQ2KVzUUrDVRGM7BVbh5dBqvXg3TxpPJlJp9KZrPZnJ5-KFoolwulPtlVEF8saLlYvToXOANGYDG8AAVOvBOryCQggiEpgpItE6LEABRW7oiQIASh0VDamv6KG8fhAAUC4JIT3NNVIUCwrGY8F5nWAWiIBcZcjA3RowFzACIVBPi65di3gFAZL3OnjO93e0OR2PJxcZ83ozVQb1uouiMQHFBOkZy0CtTWiQ2lbtl8BOoz1wBRTpckm53MAPpjhAvLFoQ+DEJCUALrCTBYEiED9lAQFSLyW6juOE4EDOc7PLmx6nleCidHQIDFhYSEIU8DjFk8dzAFaDAEcALgYjBACOeJxgmSYpvA+bWsWQA)","source":"_posts/typescript 获取url 参数，类型应该怎么写.md","raw":"---\ntitle: typescript 获取url 参数，类型应该怎么写\ndate: 2022-05-20 17:10:32\ntags: typescript\ncategory: typescript\n---\n\n## 前言\n\n有天面试的时候，面试官问如何写 获取url 参数类型应该怎么写？\n\n* 当时回答用的是 `infer`，跟`泛型`还有`递归`，但是面试官说哪里需要用到 `泛型`, 说参数不就是一个`string`吗，后来就不了了之了。\n* 但回家想了一下，确实应该使用`泛型`，我的解决思路是没有问题的\n\n\n## 解决思路\n\n* 比如当前 `url` 为 `https://www.baidu.com?key12=0123123&key1=1`, 那么我们要获取`key12` 跟 `value: 0123123`\n* 先截取字符串`?`之后的值，得到的结果是 `key12=0123123&key1=1` \n* 然后截取 `${key}=${value}` 这个字符串, 得到的结果是 `key = key12`, `value = 0123123&key1=1`, 你可以发现`value` 仍然包含其他值 `key` `value` 值， 那么这里我们递归解决就行了\n* 判断逻辑是 如果么有包含 `&` 那么我们就构建对象，`{ [k in key]: value }`\n* 最后递归合并对象即可\n\n## 完整代码\n\n```jsx\ntype Merge<F, S> = {[key in keyof F | keyof S]: key extends keyof S ? S[key] : key extends keyof F ? F[key] : never};\n\ntype getKeys<T extends string> = T extends `${infer K}?${infer Rest}` ? Rest : ''\n\ntype keyToValue<T extends string> = T extends `${infer key}=${infer value}` \n  ? value extends `${infer V}&${infer rest}`\n    ? Merge<{[k in key]: V}, keyToValue<rest>> \n    : { [k in key]: value }\n  : {}\n\ntype A = getKeys<'https://www.baidu.com?key12=0123123&key1=1'>\ntype B = keyToValue<A>\n\nconst url = 'https://www.baidu.com?key12=0123123&key1=1'\n\nfunction getParameter<T extends string>(url: T): keyToValue<getKeys<T>> {\n  const [ , format] = url.split(\"?\");\n  const data = format.split(\"&\")\n  const result = {} as keyToValue<getKeys<T>>\n  data.forEach((_item) => {\n    const [key, value] = _item.split(\"=\")\n    result[key] = value\n  })\n  return result\n}\n\nconst q = getParameter(url)\n \n```\n\n### 在线demo\n\n[demo](https://www.typescriptlang.org/play?#code/C4TwDgpgBAshBOBzCAeAYgGigZQHxQF4oBvAbQGsIQoBLAOykpAHsAzKNKAH0arZwC6ALl7UIAD2AQ6AEwDOo-tigB+HBSoCoIplAlTZCpv05q0GkFpF0IANwQBfANwAoF6EhRkwANJU5KAAqepLS8lBywPD0iPhEwfphCgAGACTE9KwIUD4OKumZ2QBKEJEOyapQJZHaUADkdW4e0EyBzABqAIYANgCuqAmhhhFRMXFQgwbhaRl0WfCiDgQFc9m2Pf3lUC5Qlet90InDM4UL7Q4AZCvzUPClwOU7u5VwSKhk5LQMTMJQ51itDobVB3SK4fBPXYiYhQChfUS-fb9KAOJ7Q1HucDQACChC8EF8-hQdQAFsBgGA5EIAPTUgDuDIAdAAjTo0GS9RkAY2YAFsVEwAIwAJgIAAYRQBmKUXIUEQV1XCYzwAITxgK6BxQ2KVzUUrDVRGM7BVbh5dBqvXg3TxpPJlJp9KZrPZnJ5-KFoolwulPtlVEF8saLlYvToXOANGYDG8AAVOvBOryCQggiEpgpItE6LEABRW7oiQIASh0VDamv6KG8fhAAUC4JIT3NNVIUCwrGY8F5nWAWiIBcZcjA3RowFzACIVBPi65di3gFAZL3OnjO93e0OR2PJxcZ83ozVQb1uouiMQHFBOkZy0CtTWiQ2lbtl8BOoz1wBRTpckm53MAPpjhAvLFoQ+DEJCUALrCTBYEiED9lAQFSLyW6juOE4EDOc7PLmx6nleCidHQIDFhYSEIU8DjFk8dzAFaDAEcALgYjBACOeJxgmSYpvA+bWsWQA)","slug":"typescript 获取url 参数，类型应该怎么写","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfg001hmrojgjb5drvu","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有天面试的时候，面试官问如何写 获取url 参数类型应该怎么写？</p>\n<ul>\n<li>当时回答用的是 <code>infer</code>，跟<code>泛型</code>还有<code>递归</code>，但是面试官说哪里需要用到 <code>泛型</code>, 说参数不就是一个<code>string</code>吗，后来就不了了之了。</li>\n<li>但回家想了一下，确实应该使用<code>泛型</code>，我的解决思路是没有问题的</li>\n</ul>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><ul>\n<li>比如当前 <code>url</code> 为 <code>https://www.baidu.com?key12=0123123&amp;key1=1</code>, 那么我们要获取<code>key12</code> 跟 <code>value: 0123123</code></li>\n<li>先截取字符串<code>?</code>之后的值，得到的结果是 <code>key12=0123123&amp;key1=1</code> </li>\n<li>然后截取 <code>${key}=${value}</code> 这个字符串, 得到的结果是 <code>key = key12</code>, <code>value = 0123123&amp;key1=1</code>, 你可以发现<code>value</code> 仍然包含其他值 <code>key</code> <code>value</code> 值， 那么这里我们递归解决就行了</li>\n<li>判断逻辑是 如果么有包含 <code>&amp;</code> 那么我们就构建对象，<code>{ [k in key]: value }</code></li>\n<li>最后递归合并对象即可</li>\n</ul>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre class=\" language-jsx\"><code class=\"language-jsx\">type Merge<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">,</span> S<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> keyof F <span class=\"token operator\">|</span> keyof S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> S <span class=\"token operator\">?</span> S<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> key <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> F <span class=\"token operator\">?</span> F<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntype getKeys<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer K<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token operator\">?</span> Rest <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n\ntype keyToValue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">=</span> T <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> \n  <span class=\"token operator\">?</span> value <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer V<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>infer rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token operator\">?</span> Merge<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> V<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> keyToValue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rest</span><span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> \n    <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> value <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\ntype A <span class=\"token operator\">=</span> getKeys<span class=\"token operator\">&lt;</span><span class=\"token string\">'https://www.baidu.com?key12=0123123&amp;key1=1'</span><span class=\"token operator\">></span>\ntype B <span class=\"token operator\">=</span> keyToValue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>A</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.baidu.com?key12=0123123&amp;key1=1'</span>\n\n<span class=\"token keyword\">function</span> getParameter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span> <span class=\"token attr-name\">extends</span> <span class=\"token attr-name\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> keyToValue<span class=\"token operator\">&lt;</span>getKeys<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span><span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> keyToValue<span class=\"token operator\">&lt;</span>getKeys<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>T</span><span class=\"token punctuation\">></span></span><span class=\"token operator\">></span>\n  data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span>\n    result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> q <span class=\"token operator\">=</span> <span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"在线demo\"><a href=\"#在线demo\" class=\"headerlink\" title=\"在线demo\"></a>在线demo</h3><p><a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAshBOBzCAeAYgGigZQHxQF4oBvAbQGsIQoBLAOykpAHsAzKNKAH0arZwC6ALl7UIAD2AQ6AEwDOo-tigB+HBSoCoIplAlTZCpv05q0GkFpF0IANwQBfANwAoF6EhRkwANJU5KAAqepLS8lBywPD0iPhEwfphCgAGACTE9KwIUD4OKumZ2QBKEJEOyapQJZHaUADkdW4e0EyBzABqAIYANgCuqAmhhhFRMXFQgwbhaRl0WfCiDgQFc9m2Pf3lUC5Qlet90InDM4UL7Q4AZCvzUPClwOU7u5VwSKhk5LQMTMJQ51itDobVB3SK4fBPXYiYhQChfUS-fb9KAOJ7Q1HucDQACChC8EF8-hQdQAFsBgGA5EIAPTUgDuDIAdAAjTo0GS9RkAY2YAFsVEwAIwAJgIAAYRQBmKUXIUEQV1XCYzwAITxgK6BxQ2KVzUUrDVRGM7BVbh5dBqvXg3TxpPJlJp9KZrPZnJ5-KFoolwulPtlVEF8saLlYvToXOANGYDG8AAVOvBOryCQggiEpgpItE6LEABRW7oiQIASh0VDamv6KG8fhAAUC4JIT3NNVIUCwrGY8F5nWAWiIBcZcjA3RowFzACIVBPi65di3gFAZL3OnjO93e0OR2PJxcZ83ozVQb1uouiMQHFBOkZy0CtTWiQ2lbtl8BOoz1wBRTpckm53MAPpjhAvLFoQ+DEJCUALrCTBYEiED9lAQFSLyW6juOE4EDOc7PLmx6nleCidHQIDFhYSEIU8DjFk8dzAFaDAEcALgYjBACOeJxgmSYpvA+bWsWQA\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有天面试的时候，面试官问如何写 获取url 参数类型应该怎么写？</p>\n<ul>\n<li>当时回答用的是 <code>infer</code>，跟<code>泛型</code>还有<code>递归</code>，但是面试官说哪里需要用到 <code>泛型</code>, 说参数不就是一个<code>string</code>吗，后来就不了了之了。</li>\n<li>但回家想了一下，确实应该使用<code>泛型</code>，我的解决思路是没有问题的</li>\n</ul>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><ul>\n<li>比如当前 <code>url</code> 为 <code>https://www.baidu.com?key12=0123123&amp;key1=1</code>, 那么我们要获取<code>key12</code> 跟 <code>value: 0123123</code></li>\n<li>先截取字符串<code>?</code>之后的值，得到的结果是 <code>key12=0123123&amp;key1=1</code> </li>\n<li>然后截取 <code>${key}=${value}</code> 这个字符串, 得到的结果是 <code>key = key12</code>, <code>value = 0123123&amp;key1=1</code>, 你可以发现<code>value</code> 仍然包含其他值 <code>key</code> <code>value</code> 值， 那么这里我们递归解决就行了</li>\n<li>判断逻辑是 如果么有包含 <code>&amp;</code> 那么我们就构建对象，<code>{ [k in key]: value }</code></li>\n<li>最后递归合并对象即可</li>\n</ul>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre><code class=\"jsx\">type Merge&lt;F, S&gt; = {[key in keyof F | keyof S]: key extends keyof S ? S[key] : key extends keyof F ? F[key] : never};\n\ntype getKeys&lt;T extends string&gt; = T extends `${infer K}?${infer Rest}` ? Rest : &#39;&#39;\n\ntype keyToValue&lt;T extends string&gt; = T extends `${infer key}=${infer value}` \n  ? value extends `${infer V}&amp;${infer rest}`\n    ? Merge&lt;{[k in key]: V}, keyToValue&lt;rest&gt;&gt; \n    : { [k in key]: value }\n  : {}\n\ntype A = getKeys&lt;&#39;https://www.baidu.com?key12=0123123&amp;key1=1&#39;&gt;\ntype B = keyToValue&lt;A&gt;\n\nconst url = &#39;https://www.baidu.com?key12=0123123&amp;key1=1&#39;\n\nfunction getParameter&lt;T extends string&gt;(url: T): keyToValue&lt;getKeys&lt;T&gt;&gt; {\n  const [ , format] = url.split(&quot;?&quot;);\n  const data = format.split(&quot;&amp;&quot;)\n  const result = {} as keyToValue&lt;getKeys&lt;T&gt;&gt;\n  data.forEach((_item) =&gt; {\n    const [key, value] = _item.split(&quot;=&quot;)\n    result[key] = value\n  })\n  return result\n}\n\nconst q = getParameter(url)\n</code></pre>\n<h3 id=\"在线demo\"><a href=\"#在线demo\" class=\"headerlink\" title=\"在线demo\"></a>在线demo</h3><p><a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAshBOBzCAeAYgGigZQHxQF4oBvAbQGsIQoBLAOykpAHsAzKNKAH0arZwC6ALl7UIAD2AQ6AEwDOo-tigB+HBSoCoIplAlTZCpv05q0GkFpF0IANwQBfANwAoF6EhRkwANJU5KAAqepLS8lBywPD0iPhEwfphCgAGACTE9KwIUD4OKumZ2QBKEJEOyapQJZHaUADkdW4e0EyBzABqAIYANgCuqAmhhhFRMXFQgwbhaRl0WfCiDgQFc9m2Pf3lUC5Qlet90InDM4UL7Q4AZCvzUPClwOU7u5VwSKhk5LQMTMJQ51itDobVB3SK4fBPXYiYhQChfUS-fb9KAOJ7Q1HucDQACChC8EF8-hQdQAFsBgGA5EIAPTUgDuDIAdAAjTo0GS9RkAY2YAFsVEwAIwAJgIAAYRQBmKUXIUEQV1XCYzwAITxgK6BxQ2KVzUUrDVRGM7BVbh5dBqvXg3TxpPJlJp9KZrPZnJ5-KFoolwulPtlVEF8saLlYvToXOANGYDG8AAVOvBOryCQggiEpgpItE6LEABRW7oiQIASh0VDamv6KG8fhAAUC4JIT3NNVIUCwrGY8F5nWAWiIBcZcjA3RowFzACIVBPi65di3gFAZL3OnjO93e0OR2PJxcZ83ozVQb1uouiMQHFBOkZy0CtTWiQ2lbtl8BOoz1wBRTpckm53MAPpjhAvLFoQ+DEJCUALrCTBYEiED9lAQFSLyW6juOE4EDOc7PLmx6nleCidHQIDFhYSEIU8DjFk8dzAFaDAEcALgYjBACOeJxgmSYpvA+bWsWQA\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n"},{"title":"webpack+vue+electron开发环境搭建","date":"2020-04-23T10:05:49.000Z","_content":"\n## 设置electron 安装路径\n\n`npm set config ELECTRON_MIRROR=\"https://npm.taobao.org/mirrors/electron/\"`\n\n## 核心思想\n\nelectron 分主进程和渲染进程，在这里，我们直接把主进程看成是**创建主体窗口**，而渲染进程看成是 **页面的渲染**。\n\n* 渲染进程当成一般的webpack配置即可， `vue-loader, less-loader, style-loader`等等照常配置即可,\n* 主进程： 主进程我们只当他是创建主体窗口的，那么我们只需要配置 `babel-loader`,\n* 当主进程发生改变时，那么就**重启窗口**， 简单来说就是直接使用 `electron .`这个命令， 但是我们使用nodejs 的方式启动\n* 当渲染进程文件发生改变时，我们的electron 也跟着刷新，那么就要使用`devServer + webpack-hot-middleware`, 但我觉得直接使用`devServer` 也没问题\n* 在主进程中要监听localhost的变化 `win.loadURL(\"http://localhost:9000\")`,才能达到 实时更新\n\n\n## 配置渲染进程\n\n> 我们根据 `vue-cli` 目录文件去配，`vue-cli` \n\n渲染进程的目录路径：`src/render/` 目录下\n\n```js\n├─assets      // 资源文件\n├─components  // vue 组件\n├─pages       // 路由页面\n├─App.vue     // vue 主体文件\n├─index.js    // 入口文件\n└─router.js   // 路由文件，配置路由的\n```\n\n渲染进程webpack 配置： \n\n```js  \n// configs/webpack.render.config.js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\nconst webpack = require('webpack')\n\n// loader 自行npm install\nmodule.exports = {\n    mode: 'development',\n    entry: './src/render/index.js',\n    devtool: 'eval-source-map', \n    // target: 'electron-renderer', // 加了反而报错\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, '../dist/render')\n    },\n    module: {\n        rules: [\n\t\t\t// babel-loader, less-loader 等等\n            {\n                test: /\\.vue$/,  // 编译vue\n                loader: 'vue-loader'\n            }\n            // ... 图片字体文件等等的文件配置\n        ]\n    },\n    plugins: [\n        new VueLoaderPlugin(), // 编译vue\n        new HtmlWebpackPlugin({template: path.resolve(__dirname, '../public/index.html')}),\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    // 往后devServer 会改成nodejs 的方式启动\n    devServer: {\n        contentBase: path.resolve(__dirname, '../dist/render'),\n        hot: true,\n        compress: true,\n        port: 9000,\n        open: true\n    }\n}\n```\n\n要是执行命令`webpack-dev-server --config ./configs/webpack.dev.config.js` 没报错，那没渲染进程基本没问题了，另外我们往后 会把**devServer 改成 nodejs的方式启动**\n\n## 配置主进程\n\n我们会把主进程的js 放入`src/main/`目录下， 但其实只有index.js\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry:  './src/main/index.js',\n    mode: 'development',\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, \"../dist/main\")\n    },\n    target: 'electron-main'\n}\n```\n\n## 用nodejs 的方式启动这些配置\n\n```js\n// 渲染进程\n//https://webpack.docschina.org/guides/development\n// 因为webpack-hot-middleware 只能检测到文件发生变化时重新加载，但不能刷新浏览器，所以我们加入 webpack-dev-server， 让浏览器自动刷新\nfunction createRendererServer() {\n\treturn new Promise((resolve, reject) => {\n\t\t// 直接添加 wenpack-hot-middleware/client.js, \n\t\trendererConfig.entry = ['webpack-hot-middleware/client?noInfo=true&reload=true'].concat(rendererConfig.entry);\n\n\t\tconst compiler = webpack(rendererConfig);\n\t\thotMiddleware = webpackHotMiddleware(compiler, {\n\t\t\tlog: false,\n\t\t\theartbeat: 2500\n\t\t})\n\n\t\tcompiler.hooks.done.tap('done', stats => { console.log(\"完成\");})\n\n\t\tconst server = new webpackDevServer(compiler, {\n\t\t\tcontentBase: path.resolve(__dirname, '..'),\n\t\t\tquiet: true,\n\t\t\tbefore (app, ctx) {\n\t\t\t\t// express, 可获取 node 服务 app 实例，执行中间件操作\n\t\t\t\tapp.use(hotMiddleware)\n\t\t\t\tctx.middleware.waitUntilValid(() => {\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\t\t\t}\n\t\t});\n\n\t\tserver.listen(9000);\n\t})\n\t\n}\n```\n\n```js\n// 因为主进程的index.js 文件不常改，我们直接使用watch 的方式，监听文件变化，文件一变化，那么我们就重新启动electron\nfunction createMainServer() {\n\treturn new Promise((resolve, reject) => {\n\t\tconst compiler = webpack(mainConfig);\n\t\t\n\t\t// 主进程监听文件变化， webpack watch 模式，那么就从起electron, 即调用electron .\n\t\tcompiler.watch({\n\t\t\taggregateTimeout: 300,\n\t\t\tpoll: 1000\n\t\t}, (err, stats) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (electronProcess && electronProcess.kill) {\n\t\t\t\tmanualRestart = true\n\t\t\t\tprocess.kill(electronProcess.pid)\n\t\t\t\telectronProcess = null\n\t\t\t\tstartElectron() // 用 nodejs spawn的方式启动electron , 启动加载的js 应该是在 /dist/main/main.js ,该方法就不写了\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tmanualRestart = false\n\t\t\t\t}, 5000)\n\t\t\t}\n\t\t\tresolve()\n\t\t})\n\t})\n}\n```\n\n我们用`Promise.all([createRendererServer(), createMainServer()])` 这两个都编译好之后再启动electron `.then(() => startElectron())`;\n\n## 效果\n\n<!-- ![bmoda-3cjoy.gif](https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif) -->\n<a class=\"group\" rel=\"group1\" href=\"https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif\">\n    <img src=\"https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif\" />    \n</a>\n\n## 最后\n\n浏览器打开`localhost:9000` 一样也可以，另外就是 nwjs 的开发环境也大致一样吧\n","source":"_posts/webpack-vue-electron开发环境搭建.md","raw":"---\ntitle: webpack+vue+electron开发环境搭建\ndate: 2020-04-23 10:05:49\ntags: [electron, vue, webpack]\ncategory: [electron, vue, webpack]\n---\n\n## 设置electron 安装路径\n\n`npm set config ELECTRON_MIRROR=\"https://npm.taobao.org/mirrors/electron/\"`\n\n## 核心思想\n\nelectron 分主进程和渲染进程，在这里，我们直接把主进程看成是**创建主体窗口**，而渲染进程看成是 **页面的渲染**。\n\n* 渲染进程当成一般的webpack配置即可， `vue-loader, less-loader, style-loader`等等照常配置即可,\n* 主进程： 主进程我们只当他是创建主体窗口的，那么我们只需要配置 `babel-loader`,\n* 当主进程发生改变时，那么就**重启窗口**， 简单来说就是直接使用 `electron .`这个命令， 但是我们使用nodejs 的方式启动\n* 当渲染进程文件发生改变时，我们的electron 也跟着刷新，那么就要使用`devServer + webpack-hot-middleware`, 但我觉得直接使用`devServer` 也没问题\n* 在主进程中要监听localhost的变化 `win.loadURL(\"http://localhost:9000\")`,才能达到 实时更新\n\n\n## 配置渲染进程\n\n> 我们根据 `vue-cli` 目录文件去配，`vue-cli` \n\n渲染进程的目录路径：`src/render/` 目录下\n\n```js\n├─assets      // 资源文件\n├─components  // vue 组件\n├─pages       // 路由页面\n├─App.vue     // vue 主体文件\n├─index.js    // 入口文件\n└─router.js   // 路由文件，配置路由的\n```\n\n渲染进程webpack 配置： \n\n```js  \n// configs/webpack.render.config.js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\nconst webpack = require('webpack')\n\n// loader 自行npm install\nmodule.exports = {\n    mode: 'development',\n    entry: './src/render/index.js',\n    devtool: 'eval-source-map', \n    // target: 'electron-renderer', // 加了反而报错\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, '../dist/render')\n    },\n    module: {\n        rules: [\n\t\t\t// babel-loader, less-loader 等等\n            {\n                test: /\\.vue$/,  // 编译vue\n                loader: 'vue-loader'\n            }\n            // ... 图片字体文件等等的文件配置\n        ]\n    },\n    plugins: [\n        new VueLoaderPlugin(), // 编译vue\n        new HtmlWebpackPlugin({template: path.resolve(__dirname, '../public/index.html')}),\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    // 往后devServer 会改成nodejs 的方式启动\n    devServer: {\n        contentBase: path.resolve(__dirname, '../dist/render'),\n        hot: true,\n        compress: true,\n        port: 9000,\n        open: true\n    }\n}\n```\n\n要是执行命令`webpack-dev-server --config ./configs/webpack.dev.config.js` 没报错，那没渲染进程基本没问题了，另外我们往后 会把**devServer 改成 nodejs的方式启动**\n\n## 配置主进程\n\n我们会把主进程的js 放入`src/main/`目录下， 但其实只有index.js\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry:  './src/main/index.js',\n    mode: 'development',\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, \"../dist/main\")\n    },\n    target: 'electron-main'\n}\n```\n\n## 用nodejs 的方式启动这些配置\n\n```js\n// 渲染进程\n//https://webpack.docschina.org/guides/development\n// 因为webpack-hot-middleware 只能检测到文件发生变化时重新加载，但不能刷新浏览器，所以我们加入 webpack-dev-server， 让浏览器自动刷新\nfunction createRendererServer() {\n\treturn new Promise((resolve, reject) => {\n\t\t// 直接添加 wenpack-hot-middleware/client.js, \n\t\trendererConfig.entry = ['webpack-hot-middleware/client?noInfo=true&reload=true'].concat(rendererConfig.entry);\n\n\t\tconst compiler = webpack(rendererConfig);\n\t\thotMiddleware = webpackHotMiddleware(compiler, {\n\t\t\tlog: false,\n\t\t\theartbeat: 2500\n\t\t})\n\n\t\tcompiler.hooks.done.tap('done', stats => { console.log(\"完成\");})\n\n\t\tconst server = new webpackDevServer(compiler, {\n\t\t\tcontentBase: path.resolve(__dirname, '..'),\n\t\t\tquiet: true,\n\t\t\tbefore (app, ctx) {\n\t\t\t\t// express, 可获取 node 服务 app 实例，执行中间件操作\n\t\t\t\tapp.use(hotMiddleware)\n\t\t\t\tctx.middleware.waitUntilValid(() => {\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\t\t\t}\n\t\t});\n\n\t\tserver.listen(9000);\n\t})\n\t\n}\n```\n\n```js\n// 因为主进程的index.js 文件不常改，我们直接使用watch 的方式，监听文件变化，文件一变化，那么我们就重新启动electron\nfunction createMainServer() {\n\treturn new Promise((resolve, reject) => {\n\t\tconst compiler = webpack(mainConfig);\n\t\t\n\t\t// 主进程监听文件变化， webpack watch 模式，那么就从起electron, 即调用electron .\n\t\tcompiler.watch({\n\t\t\taggregateTimeout: 300,\n\t\t\tpoll: 1000\n\t\t}, (err, stats) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (electronProcess && electronProcess.kill) {\n\t\t\t\tmanualRestart = true\n\t\t\t\tprocess.kill(electronProcess.pid)\n\t\t\t\telectronProcess = null\n\t\t\t\tstartElectron() // 用 nodejs spawn的方式启动electron , 启动加载的js 应该是在 /dist/main/main.js ,该方法就不写了\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tmanualRestart = false\n\t\t\t\t}, 5000)\n\t\t\t}\n\t\t\tresolve()\n\t\t})\n\t})\n}\n```\n\n我们用`Promise.all([createRendererServer(), createMainServer()])` 这两个都编译好之后再启动electron `.then(() => startElectron())`;\n\n## 效果\n\n<!-- ![bmoda-3cjoy.gif](https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif) -->\n<a class=\"group\" rel=\"group1\" href=\"https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif\">\n    <img src=\"https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif\" />    \n</a>\n\n## 最后\n\n浏览器打开`localhost:9000` 一样也可以，另外就是 nwjs 的开发环境也大致一样吧\n","slug":"webpack-vue-electron开发环境搭建","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfi001mmrojcki1fspz","content":"<h2 id=\"设置electron-安装路径\"><a href=\"#设置electron-安装路径\" class=\"headerlink\" title=\"设置electron 安装路径\"></a>设置electron 安装路径</h2><p><code>npm set config ELECTRON_MIRROR=&quot;https://npm.taobao.org/mirrors/electron/&quot;</code></p>\n<h2 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h2><p>electron 分主进程和渲染进程，在这里，我们直接把主进程看成是<strong>创建主体窗口</strong>，而渲染进程看成是 <strong>页面的渲染</strong>。</p>\n<ul>\n<li>渲染进程当成一般的webpack配置即可， <code>vue-loader, less-loader, style-loader</code>等等照常配置即可,</li>\n<li>主进程： 主进程我们只当他是创建主体窗口的，那么我们只需要配置 <code>babel-loader</code>,</li>\n<li>当主进程发生改变时，那么就<strong>重启窗口</strong>， 简单来说就是直接使用 <code>electron .</code>这个命令， 但是我们使用nodejs 的方式启动</li>\n<li>当渲染进程文件发生改变时，我们的electron 也跟着刷新，那么就要使用<code>devServer + webpack-hot-middleware</code>, 但我觉得直接使用<code>devServer</code> 也没问题</li>\n<li>在主进程中要监听localhost的变化 <code>win.loadURL(&quot;http://localhost:9000&quot;)</code>,才能达到 实时更新</li>\n</ul>\n<h2 id=\"配置渲染进程\"><a href=\"#配置渲染进程\" class=\"headerlink\" title=\"配置渲染进程\"></a>配置渲染进程</h2><blockquote>\n<p>我们根据 <code>vue-cli</code> 目录文件去配，<code>vue-cli</code> </p>\n</blockquote>\n<p>渲染进程的目录路径：<code>src/render/</code> 目录下</p>\n<pre class=\" language-js\"><code class=\"language-js\">├─assets      <span class=\"token comment\" spellcheck=\"true\">// 资源文件</span>\n├─components  <span class=\"token comment\" spellcheck=\"true\">// vue 组件</span>\n├─pages       <span class=\"token comment\" spellcheck=\"true\">// 路由页面</span>\n├─App<span class=\"token punctuation\">.</span>vue     <span class=\"token comment\" spellcheck=\"true\">// vue 主体文件</span>\n├─index<span class=\"token punctuation\">.</span>js    <span class=\"token comment\" spellcheck=\"true\">// 入口文件</span>\n└─router<span class=\"token punctuation\">.</span>js   <span class=\"token comment\" spellcheck=\"true\">// 路由文件，配置路由的</span></code></pre>\n<p>渲染进程webpack 配置： </p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// configs/webpack.render.config.js</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> VueLoaderPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vue-loader/lib/plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// loader 自行npm install</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/render/index.js'</span><span class=\"token punctuation\">,</span>\n    devtool<span class=\"token punctuation\">:</span> <span class=\"token string\">'eval-source-map'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token comment\" spellcheck=\"true\">// target: 'electron-renderer', // 加了反而报错</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist/render'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token comment\" spellcheck=\"true\">// babel-loader, less-loader 等等</span>\n            <span class=\"token punctuation\">{</span>\n                test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.vue$/</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// 编译vue</span>\n                loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'vue-loader'</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">// ... 图片字体文件等等的文件配置</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueLoaderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 编译vue</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>template<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../public/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 往后devServer 会改成nodejs 的方式启动</span>\n    devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        contentBase<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist/render'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        hot<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        compress<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        port<span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span>\n        open<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>要是执行命令<code>webpack-dev-server --config ./configs/webpack.dev.config.js</code> 没报错，那没渲染进程基本没问题了，另外我们往后 会把<strong>devServer 改成 nodejs的方式启动</strong></p>\n<h2 id=\"配置主进程\"><a href=\"#配置主进程\" class=\"headerlink\" title=\"配置主进程\"></a>配置主进程</h2><p>我们会把主进程的js 放入<code>src/main/</code>目录下， 但其实只有index.js</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">:</span>  <span class=\"token string\">'./src/main/index.js'</span><span class=\"token punctuation\">,</span>\n    mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../dist/main\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    target<span class=\"token punctuation\">:</span> <span class=\"token string\">'electron-main'</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"用nodejs-的方式启动这些配置\"><a href=\"#用nodejs-的方式启动这些配置\" class=\"headerlink\" title=\"用nodejs 的方式启动这些配置\"></a>用nodejs 的方式启动这些配置</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 渲染进程</span>\n<span class=\"token comment\" spellcheck=\"true\">//https://webpack.docschina.org/guides/development</span>\n<span class=\"token comment\" spellcheck=\"true\">// 因为webpack-hot-middleware 只能检测到文件发生变化时重新加载，但不能刷新浏览器，所以我们加入 webpack-dev-server， 让浏览器自动刷新</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createRendererServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 直接添加 wenpack-hot-middleware/client.js, </span>\n        rendererConfig<span class=\"token punctuation\">.</span>entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>rendererConfig<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> compiler <span class=\"token operator\">=</span> <span class=\"token function\">webpack</span><span class=\"token punctuation\">(</span>rendererConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hotMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">webpackHotMiddleware</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            heartbeat<span class=\"token punctuation\">:</span> <span class=\"token number\">2500</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">,</span> stats <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpackDevServer</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            contentBase<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            quiet<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            before <span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// express, 可获取 node 服务 app 实例，执行中间件操作</span>\n                app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>hotMiddleware<span class=\"token punctuation\">)</span>\n                ctx<span class=\"token punctuation\">.</span>middleware<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntilValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 因为主进程的index.js 文件不常改，我们直接使用watch 的方式，监听文件变化，文件一变化，那么我们就重新启动electron</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createMainServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> compiler <span class=\"token operator\">=</span> <span class=\"token function\">webpack</span><span class=\"token punctuation\">(</span>mainConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 主进程监听文件变化， webpack watch 模式，那么就从起electron, 即调用electron .</span>\n        compiler<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            aggregateTimeout<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n            poll<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> stats<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>electronProcess <span class=\"token operator\">&amp;&amp;</span> electronProcess<span class=\"token punctuation\">.</span>kill<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                manualRestart <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n                process<span class=\"token punctuation\">.</span><span class=\"token function\">kill</span><span class=\"token punctuation\">(</span>electronProcess<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">)</span>\n                electronProcess <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n                <span class=\"token function\">startElectron</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 用 nodejs spawn的方式启动electron , 启动加载的js 应该是在 /dist/main/main.js ,该方法就不写了</span>\n                <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                    manualRestart <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>我们用<code>Promise.all([createRendererServer(), createMainServer()])</code> 这两个都编译好之后再启动electron <code>.then(() =&gt; startElectron())</code>;</p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><!-- ![bmoda-3cjoy.gif](https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif) -->\n<a class=\"group\" rel=\"group1 noopener\" href=\"https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif\" target=\"_blank\">\n    <img src=\"https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif\">    \n</a>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>浏览器打开<code>localhost:9000</code> 一样也可以，另外就是 nwjs 的开发环境也大致一样吧</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设置electron-安装路径\"><a href=\"#设置electron-安装路径\" class=\"headerlink\" title=\"设置electron 安装路径\"></a>设置electron 安装路径</h2><p><code>npm set config ELECTRON_MIRROR=&quot;https://npm.taobao.org/mirrors/electron/&quot;</code></p>\n<h2 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h2><p>electron 分主进程和渲染进程，在这里，我们直接把主进程看成是<strong>创建主体窗口</strong>，而渲染进程看成是 <strong>页面的渲染</strong>。</p>\n<ul>\n<li>渲染进程当成一般的webpack配置即可， <code>vue-loader, less-loader, style-loader</code>等等照常配置即可,</li>\n<li>主进程： 主进程我们只当他是创建主体窗口的，那么我们只需要配置 <code>babel-loader</code>,</li>\n<li>当主进程发生改变时，那么就<strong>重启窗口</strong>， 简单来说就是直接使用 <code>electron .</code>这个命令， 但是我们使用nodejs 的方式启动</li>\n<li>当渲染进程文件发生改变时，我们的electron 也跟着刷新，那么就要使用<code>devServer + webpack-hot-middleware</code>, 但我觉得直接使用<code>devServer</code> 也没问题</li>\n<li>在主进程中要监听localhost的变化 <code>win.loadURL(&quot;http://localhost:9000&quot;)</code>,才能达到 实时更新</li>\n</ul>\n<h2 id=\"配置渲染进程\"><a href=\"#配置渲染进程\" class=\"headerlink\" title=\"配置渲染进程\"></a>配置渲染进程</h2><blockquote>\n<p>我们根据 <code>vue-cli</code> 目录文件去配，<code>vue-cli</code> </p>\n</blockquote>\n<p>渲染进程的目录路径：<code>src/render/</code> 目录下</p>\n<pre><code class=\"js\">├─assets      // 资源文件\n├─components  // vue 组件\n├─pages       // 路由页面\n├─App.vue     // vue 主体文件\n├─index.js    // 入口文件\n└─router.js   // 路由文件，配置路由的</code></pre>\n<p>渲染进程webpack 配置： </p>\n<pre><code class=\"js\">// configs/webpack.render.config.js\nconst path = require(&#39;path&#39;);\nconst HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\nconst VueLoaderPlugin = require(&#39;vue-loader/lib/plugin&#39;);\nconst webpack = require(&#39;webpack&#39;)\n\n// loader 自行npm install\nmodule.exports = {\n    mode: &#39;development&#39;,\n    entry: &#39;./src/render/index.js&#39;,\n    devtool: &#39;eval-source-map&#39;, \n    // target: &#39;electron-renderer&#39;, // 加了反而报错\n    output: {\n        filename: &#39;[name].js&#39;,\n        path: path.resolve(__dirname, &#39;../dist/render&#39;)\n    },\n    module: {\n        rules: [\n            // babel-loader, less-loader 等等\n            {\n                test: /\\.vue$/,  // 编译vue\n                loader: &#39;vue-loader&#39;\n            }\n            // ... 图片字体文件等等的文件配置\n        ]\n    },\n    plugins: [\n        new VueLoaderPlugin(), // 编译vue\n        new HtmlWebpackPlugin({template: path.resolve(__dirname, &#39;../public/index.html&#39;)}),\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    // 往后devServer 会改成nodejs 的方式启动\n    devServer: {\n        contentBase: path.resolve(__dirname, &#39;../dist/render&#39;),\n        hot: true,\n        compress: true,\n        port: 9000,\n        open: true\n    }\n}</code></pre>\n<p>要是执行命令<code>webpack-dev-server --config ./configs/webpack.dev.config.js</code> 没报错，那没渲染进程基本没问题了，另外我们往后 会把<strong>devServer 改成 nodejs的方式启动</strong></p>\n<h2 id=\"配置主进程\"><a href=\"#配置主进程\" class=\"headerlink\" title=\"配置主进程\"></a>配置主进程</h2><p>我们会把主进程的js 放入<code>src/main/</code>目录下， 但其实只有index.js</p>\n<pre><code class=\"js\">const path = require(&#39;path&#39;);\n\nmodule.exports = {\n    entry:  &#39;./src/main/index.js&#39;,\n    mode: &#39;development&#39;,\n    output: {\n        filename: &#39;[name].js&#39;,\n        path: path.resolve(__dirname, &quot;../dist/main&quot;)\n    },\n    target: &#39;electron-main&#39;\n}</code></pre>\n<h2 id=\"用nodejs-的方式启动这些配置\"><a href=\"#用nodejs-的方式启动这些配置\" class=\"headerlink\" title=\"用nodejs 的方式启动这些配置\"></a>用nodejs 的方式启动这些配置</h2><pre><code class=\"js\">// 渲染进程\n//https://webpack.docschina.org/guides/development\n// 因为webpack-hot-middleware 只能检测到文件发生变化时重新加载，但不能刷新浏览器，所以我们加入 webpack-dev-server， 让浏览器自动刷新\nfunction createRendererServer() {\n    return new Promise((resolve, reject) =&gt; {\n        // 直接添加 wenpack-hot-middleware/client.js, \n        rendererConfig.entry = [&#39;webpack-hot-middleware/client?noInfo=true&amp;reload=true&#39;].concat(rendererConfig.entry);\n\n        const compiler = webpack(rendererConfig);\n        hotMiddleware = webpackHotMiddleware(compiler, {\n            log: false,\n            heartbeat: 2500\n        })\n\n        compiler.hooks.done.tap(&#39;done&#39;, stats =&gt; { console.log(&quot;完成&quot;);})\n\n        const server = new webpackDevServer(compiler, {\n            contentBase: path.resolve(__dirname, &#39;..&#39;),\n            quiet: true,\n            before (app, ctx) {\n                // express, 可获取 node 服务 app 实例，执行中间件操作\n                app.use(hotMiddleware)\n                ctx.middleware.waitUntilValid(() =&gt; {\n                    resolve()\n                })\n            }\n        });\n\n        server.listen(9000);\n    })\n\n}</code></pre>\n<pre><code class=\"js\">// 因为主进程的index.js 文件不常改，我们直接使用watch 的方式，监听文件变化，文件一变化，那么我们就重新启动electron\nfunction createMainServer() {\n    return new Promise((resolve, reject) =&gt; {\n        const compiler = webpack(mainConfig);\n\n        // 主进程监听文件变化， webpack watch 模式，那么就从起electron, 即调用electron .\n        compiler.watch({\n            aggregateTimeout: 300,\n            poll: 1000\n        }, (err, stats) =&gt; {\n            if (err) {\n                console.log(err)\n                return\n            }\n            if (electronProcess &amp;&amp; electronProcess.kill) {\n                manualRestart = true\n                process.kill(electronProcess.pid)\n                electronProcess = null\n                startElectron() // 用 nodejs spawn的方式启动electron , 启动加载的js 应该是在 /dist/main/main.js ,该方法就不写了\n                setTimeout(() =&gt; {\n                    manualRestart = false\n                }, 5000)\n            }\n            resolve()\n        })\n    })\n}</code></pre>\n<p>我们用<code>Promise.all([createRendererServer(), createMainServer()])</code> 这两个都编译好之后再启动electron <code>.then(() =&gt; startElectron())</code>;</p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><!-- ![bmoda-3cjoy.gif](https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif) -->\n<a class=\"group\" rel=\"group1 noopener\" href=\"https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif\" target=\"_blank\">\n    <img src=\"https://i.loli.net/2020/04/23/YGbzdXaZVy2ARvi.gif\">    \n</a>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>浏览器打开<code>localhost:9000</code> 一样也可以，另外就是 nwjs 的开发环境也大致一样吧</p>\n"},{"title":"webpack梳理","date":"2020-09-05T12:18:33.000Z","_content":"\n## 关于webpack\n\nwebpack 其实就是一个打包工具， 他可以把css, js, 图片等等的东西都打包成一个bundle，从entry开始递归分析他的依赖图，把应用到的每一个模块打包成一个或多个bundle\n\nwebpakc 主要依赖下面几个配置\n\n* `entry`: 主入口文件\n* `output`: 输入文件的位置\n* `modules`: 里面配置的是loader， 我们可以想象loadder 为一名翻译官，把各种类型文件都翻译成浏览器可以识别的东西\n* `plugins`: 插件，我觉得webpack 的强大之处在于他的插件，plugin 可以针对在webpack不同的时期做不同的工作，比如`CleanWebpackPlugin`可以在打包之前删除清理指定目录\n\n\n## webpack 基础配置\n\n```jsx\nconst path = require('path');\n\nexport default {\n    entry: './src/index.js', // 入口文件\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    resolve: {\n        modules: ['node_modules'], // 告诉 webpack 解析模块时应该搜索的目录。\n        // 配置别名\n        alias: {\n            '@': path.resolve(__dirname, 'src'), // 指定src的别名为 ‘@’\n        },\n        ententions: ['.js', '.css'], // 添加文件猴嘴\n    },\n    // 定义开发环境下的webpack-dev-server 其实就是动态更新\n    // 此时没有加载 HotModuleReplacementPlugin 的时候是通过loaction.reload（）重新加载网页的，但有个缺点就是不能记录状态\n    devServer：{\n        contentBase: path.resolve(__dirname, 'dist'),\n        open: true,\n        port: 8000,\n        hot: true\n    },\n    treeShaking: true, // 这里表示将没用过的代码自动删除掉\n    optimization：{\n        splitChunks: {\n            cacheGroups: {\n                vendor: {\n                    test: /node_modules/,\n                    priority: 1,  // 数字越大，优先级越高\n                    minChunks: 2, // 表示至少有两个js同事引用的时候，就会打包成vendor。js\n                    minSizes: 0, // 表示最小的大小\n                }\n            }\n        },\n    },\n    modules: {\n        noParse: /jquery/,  // webpack 优化， 不去递归jquery的依赖库\n        rules: [\n           {\n                test: /\\.css$/,\n                use: [\n                    // 请记住loader 的运行顺序是从下到上，从右到左，\n                    // 另一种模式是内敛模式， import Styles from 'style-loader!css-loader?module!./styles.css', 忠中模式通过 ! 分割loadder，\n                    // 'style-loader!css-loader?module!./styles.css'.split(\"!\") => [\"style-loader\", \"css-loader\"]\n                    { loader: 'style-loader' },\n                    {\n                        loader: 'css-loader',\n                        options: {\n                        modules: true\n                        }\n                    }\n                ]\n            },\n            {\n                test: /\\.js$/,\n                exclude: /(node_modules|bower_components)/,\n                // 如果使用happypack的话，多线程打包，此时下面就要修改该成\n                // use: 'Happypack/loader?id=js'\n                use: { \n                    loader: 'babel-loader',\n                    option: {\n                        cacheDirectory: true,  // 开启js 打包优化\n                        presets: ['@babel/preset-env', '@babel/preset-react'],\n                        plugins: [require('@babel/plugin-transform-object-rest-spread')]\n                    },\n                    \n                }\n                \n            }\n        ]\n    },\n    mode: 'development',  // 指定环境，\n    plugins: [\n        // 编译的时候指定全局变量，我们可以根据这个去定义当前环境是开发环境还是线上环境，定义不通的行为，比如url\n        new webpack.DefinePlugin({\n            PRODUCTION: JSON.stringify(true),  // 此时传过去的 PRODUCTION 是 字符串 “true”\n            VERSION: JSON.stringify(\"5fa3b9\"), // \n        }),\n        // 多线程打包, 要是对css也启动多线程的话，再创建一个happypack， id为css\n        new Happypack({\n            id: 'js',\n            use: [{ \n                loader: 'babel-loader',\n                option: {\n                    cacheDirectory: true,  // 开启js 打包优化\n                    presets: ['@babel/preset-env', '@babel/preset-react'],\n                    plugins: [require('@babel/plugin-transform-object-rest-spread')]\n                },\n            }]\n        }),\n        // ignorePlugin， 针对某个包的依赖不进行打包，比如moment， locale 是moment的语言包，要是我们只使用zh-cn 那么我们可以忽略掉其他，所以此时忽略掉locale\n        new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n        \n        // 下面是热更新\n        new webpack.NamedModulesPlugin(), // 告诉webpack  哪个模块更新了\n        new webpack.HotModuleReplacementPlugin(); // 进行热更新\n    ]\n}\n```\n\n### 热更新\n\n```jsx\nimport test from './test';\n\nif(module.hot) {\n    module.hot.accept('./test', () => {\n        console.log('文件已更新');\n        require('./test');\n    })\n}\n```\n\n我们总结一下上面关于打包优化的几种方式吧\n\n* 配置resolve 减少目录的搜索路径\n* 同样的在loader 中设置 include 和 `exclude` 指定loader 编译的目录\n* 设置modules 下的 `noParse`属性， 这个可以在打包的时候不检查`某js` 的依赖，这样就可以减少打包时间了\n* 配置DllPlugin 用动态链接库的形式打包，这样的话会根据目录下的manifest.json 进行二次打包， **二次打包不会再对已生成的动态链接库进行打包**\n* 使用happyPack 用多线程打包\n\n\n## tapable\n\nwebpack 本质上是一种事件流机制，它的工作流程就是把各个插件串联起来， 他的核心就是tapable, tapable 有点像nodejs 的event库， 就是观察者模式\n\n先来看看一个简单的events 库\n\n```js\nclass EventBus {\n    constructor() {\n        this.maps = {}\n    }\n\n    on(name, fn) {\n        this.maps[name] = fn;\n    }\n\n    fire(name, data) {\n        this.maps[name] && this.maps[name](data);\n    }\n}\n\n// 测试\n\nconst eventBus = new EventBus();\neventBus.on(\"click\", (data) => {\n    console.log(\"click\", data)\n})\n\neventBus.fire(\"click\", {a: 1, b: 2})\n```\n\n### 简单的观察者模式\n\n发布订阅其实很简单， 我可以想象成天文台， 当温度改变时， 天文台的数据改变（changes）的时候，我们用户需要做什么，他下雨了，我们需要收衣服，\n\n* 被观察者是 天文台，\n* 观察者 是我们用户， 具体做法是我们要收衣服， 就是对应下面的update， 简单说就是具体的做法就是观察者了\n\n```jsx\nclass Subject {\n    constructor() {\n        this.watchers = []\n    }\n\n    addWatch(watcher) {\n        console.log(this.watcher)\n        this.watchers.push(watcher)\n    }\n\n    removeWatcher(watcher) {\n        let index = this.watchers.indexOf(watcher);\n        if(index > -1) {\n            this.watchers.splice(index, 1)\n        }\n    }\n\n    notify() {\n        this.watchers.forEach((watcher) => watcher.update())\n    }\n}\n\nclass Watcher {\n    subscribeTo(subject) {\n        subject.addWatch(this);\n    }\n\n    update() {}\n}\n\nlet subject = new Subject()\nlet watcher = new Watcher()\nwatcher.update = function() {\n  console.log('observer update')\n}\nwatcher.subscribeTo(subject)  //观察者订阅主题\n\nlet watcher2 = new Watcher()\nwatcher2.update = function() {\n  console.log('我是另一个观察者，我要做其他事情')\n}\nwatcher2.subscribeTo(subject) \n\nsubject.notify()\n\n```\n\n### 实现 SyncHook\n我们以上面的例子，实现一个`SyncHook`\n\n```jsx\nclass SyncHook {\n    constructor(args) {\n        this.tasks = []\n        \n    }\n\n    // 绑定时间\n    tap(name, fn) {\n        this.tasks.push(fn)\n    }\n\n    // 运行函数, 在tapabel\n    call(...args) {\n        this.tasks.forEach((task) => task(...args));\n    }\n}\n\nlet hook = new SyncHook(['name']) // ['name'] 指的是我在创建hook的时候， 我tap需要传递的参数\nhook.tap(\"test\", (name) => {\n    console.log('test', name)\n})\nhook.tap(\"test2\", (name) => {\n    console.log(\"test2\", name)\n})\nhook.call(\"hello\"); // 这里的hello 对应的是上面的name\n\n```\n\n\n## webpack 原理\n\nwebapck其实就是自己实现了一个require方法，这里需要对`AST`进行一部分的了解， **AST**就是抽象语法树， 简单说就是将 js 转换成 语法树，转换成 **方法， 变量等等的属性**\n\n我们看看AST 的步骤\n\n* `AST` 将 `js` 转换成 语法树\n* 修改语法树的值\n* 将 `AST` 转换成浏览器可以识别的 语法\n\n`AST` 依赖包\n\n* babylon 将 源码 解析成 `AST(抽象语法树)`\n* @babel/traverse 遍历 AST 中的节点\n* @babel/types    替换 AST 节点\n* @babel/generator  将替换的结果生成成js\n\n\n我们想想webpack 的运行过程， 我们首先配置 `webpack.config.js`， 然后运行的是 `webpack --config webpack.config.js` 然后webpack 会根据 `entry`入口文件\n进行分析，对它进行`AST`解析， 如果`entry入口文件`还有`require`, 那么继续进行依赖遍历。\n\n\n### loader\n\n其实loader 就是一个方法，我们看两个例子, 一个是less-loader, 另一个是style-loader\n其中 `loader-utils` 获取loader 的参数就是 loader 的 options\n\n#### less-loader\n\n```jsx\n// less-loader\n\n/**\n * 我们less-loader 当然要转换成css，那么我们使用的是less.render\n * 下面使用less那么肯定需要 npm install less -=save-dev\n * @param {string} source  这里的source就是指 less源码\n*/\nconst loaderUtils = require('loader-utils');\nfunction loader(source) {\n    let css = \"\";\n    // loaderUtils.getOption(this) 可以拿到他的参数\n    less.render(source, (err, lessSource) => {\n        css = lessSource.css\n    })\n    return css;\n}\n```\n\n#### style-loader \n\n```jsx\n/**\n * 我们style-loader 的作用是将css 写在html 的head 下面的style标签下\n*/\nfunction loader(source) {\n    let styles = `\n        const el = document.createElement(\"style\");\n        const css = ${source.replace(/\\s*/g, \"\")}\n        el.innerHTML = css;\n        document.head.appendChild(css);\n    `\n    return styles\n}\n\n```\n\n### plugin\n\nwebpack 是基于tapable事件流， 你把 plugin 想象成在webapck 中不同的生命周期做不同的事情，我们看看webpack 的hooks吧\n\n\n* entryOption   入口hooks\n* compile       编译时期\n* afterCompile  完成编译后\n* afterPlugins  插件完成编译后\n* run           运行\n* emit          生成编译文件时\n* done          执行完成\n\n\n### 自定义plugin\n\n```jsx\nclass Plugin() {\n    \n    apply(compiler) { // 此时的compiler 是webpack实例\n        compiler.hooks.done.tap(\"run\", () => {\n            console.log(\"此时是webpack 运行时运行的时间\")\n        })\n        compiler.hooks.done.tap(\"name\", () => {\n            console.log(\"此时是注册事件，指的是在整个wepack执行完成之后的回调函数\")\n        })\n    }\n}\n```","source":"_posts/webpack-配置梳理.md","raw":"---\ntitle: webpack梳理\ndate: 2020-09-05 12:18:33\ntags: webpack\ncategories: webpack\n---\n\n## 关于webpack\n\nwebpack 其实就是一个打包工具， 他可以把css, js, 图片等等的东西都打包成一个bundle，从entry开始递归分析他的依赖图，把应用到的每一个模块打包成一个或多个bundle\n\nwebpakc 主要依赖下面几个配置\n\n* `entry`: 主入口文件\n* `output`: 输入文件的位置\n* `modules`: 里面配置的是loader， 我们可以想象loadder 为一名翻译官，把各种类型文件都翻译成浏览器可以识别的东西\n* `plugins`: 插件，我觉得webpack 的强大之处在于他的插件，plugin 可以针对在webpack不同的时期做不同的工作，比如`CleanWebpackPlugin`可以在打包之前删除清理指定目录\n\n\n## webpack 基础配置\n\n```jsx\nconst path = require('path');\n\nexport default {\n    entry: './src/index.js', // 入口文件\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    resolve: {\n        modules: ['node_modules'], // 告诉 webpack 解析模块时应该搜索的目录。\n        // 配置别名\n        alias: {\n            '@': path.resolve(__dirname, 'src'), // 指定src的别名为 ‘@’\n        },\n        ententions: ['.js', '.css'], // 添加文件猴嘴\n    },\n    // 定义开发环境下的webpack-dev-server 其实就是动态更新\n    // 此时没有加载 HotModuleReplacementPlugin 的时候是通过loaction.reload（）重新加载网页的，但有个缺点就是不能记录状态\n    devServer：{\n        contentBase: path.resolve(__dirname, 'dist'),\n        open: true,\n        port: 8000,\n        hot: true\n    },\n    treeShaking: true, // 这里表示将没用过的代码自动删除掉\n    optimization：{\n        splitChunks: {\n            cacheGroups: {\n                vendor: {\n                    test: /node_modules/,\n                    priority: 1,  // 数字越大，优先级越高\n                    minChunks: 2, // 表示至少有两个js同事引用的时候，就会打包成vendor。js\n                    minSizes: 0, // 表示最小的大小\n                }\n            }\n        },\n    },\n    modules: {\n        noParse: /jquery/,  // webpack 优化， 不去递归jquery的依赖库\n        rules: [\n           {\n                test: /\\.css$/,\n                use: [\n                    // 请记住loader 的运行顺序是从下到上，从右到左，\n                    // 另一种模式是内敛模式， import Styles from 'style-loader!css-loader?module!./styles.css', 忠中模式通过 ! 分割loadder，\n                    // 'style-loader!css-loader?module!./styles.css'.split(\"!\") => [\"style-loader\", \"css-loader\"]\n                    { loader: 'style-loader' },\n                    {\n                        loader: 'css-loader',\n                        options: {\n                        modules: true\n                        }\n                    }\n                ]\n            },\n            {\n                test: /\\.js$/,\n                exclude: /(node_modules|bower_components)/,\n                // 如果使用happypack的话，多线程打包，此时下面就要修改该成\n                // use: 'Happypack/loader?id=js'\n                use: { \n                    loader: 'babel-loader',\n                    option: {\n                        cacheDirectory: true,  // 开启js 打包优化\n                        presets: ['@babel/preset-env', '@babel/preset-react'],\n                        plugins: [require('@babel/plugin-transform-object-rest-spread')]\n                    },\n                    \n                }\n                \n            }\n        ]\n    },\n    mode: 'development',  // 指定环境，\n    plugins: [\n        // 编译的时候指定全局变量，我们可以根据这个去定义当前环境是开发环境还是线上环境，定义不通的行为，比如url\n        new webpack.DefinePlugin({\n            PRODUCTION: JSON.stringify(true),  // 此时传过去的 PRODUCTION 是 字符串 “true”\n            VERSION: JSON.stringify(\"5fa3b9\"), // \n        }),\n        // 多线程打包, 要是对css也启动多线程的话，再创建一个happypack， id为css\n        new Happypack({\n            id: 'js',\n            use: [{ \n                loader: 'babel-loader',\n                option: {\n                    cacheDirectory: true,  // 开启js 打包优化\n                    presets: ['@babel/preset-env', '@babel/preset-react'],\n                    plugins: [require('@babel/plugin-transform-object-rest-spread')]\n                },\n            }]\n        }),\n        // ignorePlugin， 针对某个包的依赖不进行打包，比如moment， locale 是moment的语言包，要是我们只使用zh-cn 那么我们可以忽略掉其他，所以此时忽略掉locale\n        new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n        \n        // 下面是热更新\n        new webpack.NamedModulesPlugin(), // 告诉webpack  哪个模块更新了\n        new webpack.HotModuleReplacementPlugin(); // 进行热更新\n    ]\n}\n```\n\n### 热更新\n\n```jsx\nimport test from './test';\n\nif(module.hot) {\n    module.hot.accept('./test', () => {\n        console.log('文件已更新');\n        require('./test');\n    })\n}\n```\n\n我们总结一下上面关于打包优化的几种方式吧\n\n* 配置resolve 减少目录的搜索路径\n* 同样的在loader 中设置 include 和 `exclude` 指定loader 编译的目录\n* 设置modules 下的 `noParse`属性， 这个可以在打包的时候不检查`某js` 的依赖，这样就可以减少打包时间了\n* 配置DllPlugin 用动态链接库的形式打包，这样的话会根据目录下的manifest.json 进行二次打包， **二次打包不会再对已生成的动态链接库进行打包**\n* 使用happyPack 用多线程打包\n\n\n## tapable\n\nwebpack 本质上是一种事件流机制，它的工作流程就是把各个插件串联起来， 他的核心就是tapable, tapable 有点像nodejs 的event库， 就是观察者模式\n\n先来看看一个简单的events 库\n\n```js\nclass EventBus {\n    constructor() {\n        this.maps = {}\n    }\n\n    on(name, fn) {\n        this.maps[name] = fn;\n    }\n\n    fire(name, data) {\n        this.maps[name] && this.maps[name](data);\n    }\n}\n\n// 测试\n\nconst eventBus = new EventBus();\neventBus.on(\"click\", (data) => {\n    console.log(\"click\", data)\n})\n\neventBus.fire(\"click\", {a: 1, b: 2})\n```\n\n### 简单的观察者模式\n\n发布订阅其实很简单， 我可以想象成天文台， 当温度改变时， 天文台的数据改变（changes）的时候，我们用户需要做什么，他下雨了，我们需要收衣服，\n\n* 被观察者是 天文台，\n* 观察者 是我们用户， 具体做法是我们要收衣服， 就是对应下面的update， 简单说就是具体的做法就是观察者了\n\n```jsx\nclass Subject {\n    constructor() {\n        this.watchers = []\n    }\n\n    addWatch(watcher) {\n        console.log(this.watcher)\n        this.watchers.push(watcher)\n    }\n\n    removeWatcher(watcher) {\n        let index = this.watchers.indexOf(watcher);\n        if(index > -1) {\n            this.watchers.splice(index, 1)\n        }\n    }\n\n    notify() {\n        this.watchers.forEach((watcher) => watcher.update())\n    }\n}\n\nclass Watcher {\n    subscribeTo(subject) {\n        subject.addWatch(this);\n    }\n\n    update() {}\n}\n\nlet subject = new Subject()\nlet watcher = new Watcher()\nwatcher.update = function() {\n  console.log('observer update')\n}\nwatcher.subscribeTo(subject)  //观察者订阅主题\n\nlet watcher2 = new Watcher()\nwatcher2.update = function() {\n  console.log('我是另一个观察者，我要做其他事情')\n}\nwatcher2.subscribeTo(subject) \n\nsubject.notify()\n\n```\n\n### 实现 SyncHook\n我们以上面的例子，实现一个`SyncHook`\n\n```jsx\nclass SyncHook {\n    constructor(args) {\n        this.tasks = []\n        \n    }\n\n    // 绑定时间\n    tap(name, fn) {\n        this.tasks.push(fn)\n    }\n\n    // 运行函数, 在tapabel\n    call(...args) {\n        this.tasks.forEach((task) => task(...args));\n    }\n}\n\nlet hook = new SyncHook(['name']) // ['name'] 指的是我在创建hook的时候， 我tap需要传递的参数\nhook.tap(\"test\", (name) => {\n    console.log('test', name)\n})\nhook.tap(\"test2\", (name) => {\n    console.log(\"test2\", name)\n})\nhook.call(\"hello\"); // 这里的hello 对应的是上面的name\n\n```\n\n\n## webpack 原理\n\nwebapck其实就是自己实现了一个require方法，这里需要对`AST`进行一部分的了解， **AST**就是抽象语法树， 简单说就是将 js 转换成 语法树，转换成 **方法， 变量等等的属性**\n\n我们看看AST 的步骤\n\n* `AST` 将 `js` 转换成 语法树\n* 修改语法树的值\n* 将 `AST` 转换成浏览器可以识别的 语法\n\n`AST` 依赖包\n\n* babylon 将 源码 解析成 `AST(抽象语法树)`\n* @babel/traverse 遍历 AST 中的节点\n* @babel/types    替换 AST 节点\n* @babel/generator  将替换的结果生成成js\n\n\n我们想想webpack 的运行过程， 我们首先配置 `webpack.config.js`， 然后运行的是 `webpack --config webpack.config.js` 然后webpack 会根据 `entry`入口文件\n进行分析，对它进行`AST`解析， 如果`entry入口文件`还有`require`, 那么继续进行依赖遍历。\n\n\n### loader\n\n其实loader 就是一个方法，我们看两个例子, 一个是less-loader, 另一个是style-loader\n其中 `loader-utils` 获取loader 的参数就是 loader 的 options\n\n#### less-loader\n\n```jsx\n// less-loader\n\n/**\n * 我们less-loader 当然要转换成css，那么我们使用的是less.render\n * 下面使用less那么肯定需要 npm install less -=save-dev\n * @param {string} source  这里的source就是指 less源码\n*/\nconst loaderUtils = require('loader-utils');\nfunction loader(source) {\n    let css = \"\";\n    // loaderUtils.getOption(this) 可以拿到他的参数\n    less.render(source, (err, lessSource) => {\n        css = lessSource.css\n    })\n    return css;\n}\n```\n\n#### style-loader \n\n```jsx\n/**\n * 我们style-loader 的作用是将css 写在html 的head 下面的style标签下\n*/\nfunction loader(source) {\n    let styles = `\n        const el = document.createElement(\"style\");\n        const css = ${source.replace(/\\s*/g, \"\")}\n        el.innerHTML = css;\n        document.head.appendChild(css);\n    `\n    return styles\n}\n\n```\n\n### plugin\n\nwebpack 是基于tapable事件流， 你把 plugin 想象成在webapck 中不同的生命周期做不同的事情，我们看看webpack 的hooks吧\n\n\n* entryOption   入口hooks\n* compile       编译时期\n* afterCompile  完成编译后\n* afterPlugins  插件完成编译后\n* run           运行\n* emit          生成编译文件时\n* done          执行完成\n\n\n### 自定义plugin\n\n```jsx\nclass Plugin() {\n    \n    apply(compiler) { // 此时的compiler 是webpack实例\n        compiler.hooks.done.tap(\"run\", () => {\n            console.log(\"此时是webpack 运行时运行的时间\")\n        })\n        compiler.hooks.done.tap(\"name\", () => {\n            console.log(\"此时是注册事件，指的是在整个wepack执行完成之后的回调函数\")\n        })\n    }\n}\n```","slug":"webpack-配置梳理","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfj001omrojenjda10p","content":"<h2 id=\"关于webpack\"><a href=\"#关于webpack\" class=\"headerlink\" title=\"关于webpack\"></a>关于webpack</h2><p>webpack 其实就是一个打包工具， 他可以把css, js, 图片等等的东西都打包成一个bundle，从entry开始递归分析他的依赖图，把应用到的每一个模块打包成一个或多个bundle</p>\n<p>webpakc 主要依赖下面几个配置</p>\n<ul>\n<li><code>entry</code>: 主入口文件</li>\n<li><code>output</code>: 输入文件的位置</li>\n<li><code>modules</code>: 里面配置的是loader， 我们可以想象loadder 为一名翻译官，把各种类型文件都翻译成浏览器可以识别的东西</li>\n<li><code>plugins</code>: 插件，我觉得webpack 的强大之处在于他的插件，plugin 可以针对在webpack不同的时期做不同的工作，比如<code>CleanWebpackPlugin</code>可以在打包之前删除清理指定目录</li>\n</ul>\n<h2 id=\"webpack-基础配置\"><a href=\"#webpack-基础配置\" class=\"headerlink\" title=\"webpack 基础配置\"></a>webpack 基础配置</h2><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 入口文件</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n        path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 告诉 webpack 解析模块时应该搜索的目录。</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 配置别名</span>\n        alias<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'@'</span><span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 指定src的别名为 ‘@’</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        ententions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.css'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 添加文件猴嘴</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 定义开发环境下的webpack-dev-server 其实就是动态更新</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 此时没有加载 HotModuleReplacementPlugin 的时候是通过loaction.reload（）重新加载网页的，但有个缺点就是不能记录状态</span>\n    devServer：<span class=\"token punctuation\">{</span>\n        contentBase<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        open<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        port<span class=\"token punctuation\">:</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">,</span>\n        hot<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    treeShaking<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 这里表示将没用过的代码自动删除掉</span>\n    optimization：<span class=\"token punctuation\">{</span>\n        splitChunks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            cacheGroups<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                vendor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n                    priority<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// 数字越大，优先级越高</span>\n                    minChunks<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 表示至少有两个js同事引用的时候，就会打包成vendor。js</span>\n                    minSizes<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 表示最小的大小</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        noParse<span class=\"token punctuation\">:</span> <span class=\"token regex\">/jquery/</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// webpack 优化， 不去递归jquery的依赖库</span>\n        rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n           <span class=\"token punctuation\">{</span>\n                test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n                use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 请记住loader 的运行顺序是从下到上，从右到左，</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 另一种模式是内敛模式， import Styles from 'style-loader!css-loader?module!./styles.css', 忠中模式通过 ! 分割loadder，</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 'style-loader!css-loader?module!./styles.css'.split(\"!\") => [\"style-loader\", \"css-loader\"]</span>\n                    <span class=\"token punctuation\">{</span> loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'style-loader'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">{</span>\n                        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n                        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                        modules<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n                exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/(node_modules|bower_components)/</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 如果使用happypack的话，多线程打包，此时下面就要修改该成</span>\n                <span class=\"token comment\" spellcheck=\"true\">// use: 'Happypack/loader?id=js'</span>\n                use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \n                    loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n                    option<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                        cacheDirectory<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// 开启js 打包优化</span>\n                        presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@babel/plugin-transform-object-rest-spread'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// 指定环境，</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 编译的时候指定全局变量，我们可以根据这个去定义当前环境是开发环境还是线上环境，定义不通的行为，比如url</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            PRODUCTION<span class=\"token punctuation\">:</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// 此时传过去的 PRODUCTION 是 字符串 “true”</span>\n            VERSION<span class=\"token punctuation\">:</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5fa3b9\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// </span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 多线程打包, 要是对css也启动多线程的话，再创建一个happypack， id为css</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Happypack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            id<span class=\"token punctuation\">:</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span>\n            use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> \n                loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n                option<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    cacheDirectory<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// 开启js 打包优化</span>\n                    presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@babel/plugin-transform-object-rest-spread'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">// ignorePlugin， 针对某个包的依赖不进行打包，比如moment， locale 是moment的语言包，要是我们只使用zh-cn 那么我们可以忽略掉其他，所以此时忽略掉locale</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>IgnorePlugin</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^\\.\\/locale$/</span><span class=\"token punctuation\">,</span> <span class=\"token regex\">/moment$/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 下面是热更新</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>NamedModulesPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 告诉webpack  哪个模块更新了</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 进行热更新</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h3><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> test <span class=\"token keyword\">from</span> <span class=\"token string\">'./test'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件已更新'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>我们总结一下上面关于打包优化的几种方式吧</p>\n<ul>\n<li>配置resolve 减少目录的搜索路径</li>\n<li>同样的在loader 中设置 include 和 <code>exclude</code> 指定loader 编译的目录</li>\n<li>设置modules 下的 <code>noParse</code>属性， 这个可以在打包的时候不检查<code>某js</code> 的依赖，这样就可以减少打包时间了</li>\n<li>配置DllPlugin 用动态链接库的形式打包，这样的话会根据目录下的manifest.json 进行二次打包， <strong>二次打包不会再对已生成的动态链接库进行打包</strong></li>\n<li>使用happyPack 用多线程打包</li>\n</ul>\n<h2 id=\"tapable\"><a href=\"#tapable\" class=\"headerlink\" title=\"tapable\"></a>tapable</h2><p>webpack 本质上是一种事件流机制，它的工作流程就是把各个插件串联起来， 他的核心就是tapable, tapable 有点像nodejs 的event库， 就是观察者模式</p>\n<p>先来看看一个简单的events 库</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventBus</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">on</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fire</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 测试</span>\n\n<span class=\"token keyword\">const</span> eventBus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventBus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\neventBus<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\neventBus<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"简单的观察者模式\"><a href=\"#简单的观察者模式\" class=\"headerlink\" title=\"简单的观察者模式\"></a>简单的观察者模式</h3><p>发布订阅其实很简单， 我可以想象成天文台， 当温度改变时， 天文台的数据改变（changes）的时候，我们用户需要做什么，他下雨了，我们需要收衣服，</p>\n<ul>\n<li>被观察者是 天文台，</li>\n<li>观察者 是我们用户， 具体做法是我们要收衣服， 就是对应下面的update， 简单说就是具体的做法就是观察者了</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">addWatch</span><span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watcher<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">removeWatcher</span><span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> watcher<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Watcher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">subscribeTo</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        subject<span class=\"token punctuation\">.</span><span class=\"token function\">addWatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwatcher<span class=\"token punctuation\">.</span>update <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'observer update'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nwatcher<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeTo</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">//观察者订阅主题</span>\n\n<span class=\"token keyword\">let</span> watcher2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwatcher2<span class=\"token punctuation\">.</span>update <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是另一个观察者，我要做其他事情'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nwatcher2<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeTo</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span> \n\nsubject<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"实现-SyncHook\"><a href=\"#实现-SyncHook\" class=\"headerlink\" title=\"实现 SyncHook\"></a>实现 SyncHook</h3><p>我们以上面的例子，实现一个<code>SyncHook</code></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SyncHook</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 绑定时间</span>\n    <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 运行函数, 在tapabel</span>\n    <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> hook <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SyncHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// ['name'] 指的是我在创建hook的时候， 我tap需要传递的参数</span>\nhook<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nhook<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nhook<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 这里的hello 对应的是上面的name</span>\n</code></pre>\n<h2 id=\"webpack-原理\"><a href=\"#webpack-原理\" class=\"headerlink\" title=\"webpack 原理\"></a>webpack 原理</h2><p>webapck其实就是自己实现了一个require方法，这里需要对<code>AST</code>进行一部分的了解， <strong>AST</strong>就是抽象语法树， 简单说就是将 js 转换成 语法树，转换成 <strong>方法， 变量等等的属性</strong></p>\n<p>我们看看AST 的步骤</p>\n<ul>\n<li><code>AST</code> 将 <code>js</code> 转换成 语法树</li>\n<li>修改语法树的值</li>\n<li>将 <code>AST</code> 转换成浏览器可以识别的 语法</li>\n</ul>\n<p><code>AST</code> 依赖包</p>\n<ul>\n<li>babylon 将 源码 解析成 <code>AST(抽象语法树)</code></li>\n<li>@babel/traverse 遍历 AST 中的节点</li>\n<li>@babel/types    替换 AST 节点</li>\n<li>@babel/generator  将替换的结果生成成js</li>\n</ul>\n<p>我们想想webpack 的运行过程， 我们首先配置 <code>webpack.config.js</code>， 然后运行的是 <code>webpack --config webpack.config.js</code> 然后webpack 会根据 <code>entry</code>入口文件<br>进行分析，对它进行<code>AST</code>解析， 如果<code>entry入口文件</code>还有<code>require</code>, 那么继续进行依赖遍历。</p>\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h3><p>其实loader 就是一个方法，我们看两个例子, 一个是less-loader, 另一个是style-loader<br>其中 <code>loader-utils</code> 获取loader 的参数就是 loader 的 options</p>\n<h4 id=\"less-loader\"><a href=\"#less-loader\" class=\"headerlink\" title=\"less-loader\"></a>less-loader</h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// less-loader</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * 我们less-loader 当然要转换成css，那么我们使用的是less.render\n * 下面使用less那么肯定需要 npm install less -=save-dev\n * @param {string} source  这里的source就是指 less源码\n*/</span>\n<span class=\"token keyword\">const</span> loaderUtils <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loader-utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loader</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> css <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// loaderUtils.getOption(this) 可以拿到他的参数</span>\n    less<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> lessSource<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        css <span class=\"token operator\">=</span> lessSource<span class=\"token punctuation\">.</span>css\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> css<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"style-loader\"><a href=\"#style-loader\" class=\"headerlink\" title=\"style-loader\"></a>style-loader</h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 我们style-loader 的作用是将css 写在html 的head 下面的style标签下\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loader</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> styles <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n        const el = document.createElement(\"style\");\n        const css = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\s*/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n        el.innerHTML = css;\n        document.head.appendChild(css);\n    `</span></span>\n    <span class=\"token keyword\">return</span> styles\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h3><p>webpack 是基于tapable事件流， 你把 plugin 想象成在webapck 中不同的生命周期做不同的事情，我们看看webpack 的hooks吧</p>\n<ul>\n<li>entryOption   入口hooks</li>\n<li>compile       编译时期</li>\n<li>afterCompile  完成编译后</li>\n<li>afterPlugins  插件完成编译后</li>\n<li>run           运行</li>\n<li>emit          生成编译文件时</li>\n<li>done          执行完成</li>\n</ul>\n<h3 id=\"自定义plugin\"><a href=\"#自定义plugin\" class=\"headerlink\" title=\"自定义plugin\"></a>自定义plugin</h3><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Plugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 此时的compiler 是webpack实例</span>\n        compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"run\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"此时是webpack 运行时运行的时间\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"此时是注册事件，指的是在整个wepack执行完成之后的回调函数\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于webpack\"><a href=\"#关于webpack\" class=\"headerlink\" title=\"关于webpack\"></a>关于webpack</h2><p>webpack 其实就是一个打包工具， 他可以把css, js, 图片等等的东西都打包成一个bundle，从entry开始递归分析他的依赖图，把应用到的每一个模块打包成一个或多个bundle</p>\n<p>webpakc 主要依赖下面几个配置</p>\n<ul>\n<li><code>entry</code>: 主入口文件</li>\n<li><code>output</code>: 输入文件的位置</li>\n<li><code>modules</code>: 里面配置的是loader， 我们可以想象loadder 为一名翻译官，把各种类型文件都翻译成浏览器可以识别的东西</li>\n<li><code>plugins</code>: 插件，我觉得webpack 的强大之处在于他的插件，plugin 可以针对在webpack不同的时期做不同的工作，比如<code>CleanWebpackPlugin</code>可以在打包之前删除清理指定目录</li>\n</ul>\n<h2 id=\"webpack-基础配置\"><a href=\"#webpack-基础配置\" class=\"headerlink\" title=\"webpack 基础配置\"></a>webpack 基础配置</h2><pre><code class=\"jsx\">const path = require(&#39;path&#39;);\n\nexport default {\n    entry: &#39;./src/index.js&#39;, // 入口文件\n    output: {\n        filename: &#39;[name].js&#39;,\n        path: path.resolve(__dirname, &#39;dist&#39;),\n    },\n    resolve: {\n        modules: [&#39;node_modules&#39;], // 告诉 webpack 解析模块时应该搜索的目录。\n        // 配置别名\n        alias: {\n            &#39;@&#39;: path.resolve(__dirname, &#39;src&#39;), // 指定src的别名为 ‘@’\n        },\n        ententions: [&#39;.js&#39;, &#39;.css&#39;], // 添加文件猴嘴\n    },\n    // 定义开发环境下的webpack-dev-server 其实就是动态更新\n    // 此时没有加载 HotModuleReplacementPlugin 的时候是通过loaction.reload（）重新加载网页的，但有个缺点就是不能记录状态\n    devServer：{\n        contentBase: path.resolve(__dirname, &#39;dist&#39;),\n        open: true,\n        port: 8000,\n        hot: true\n    },\n    treeShaking: true, // 这里表示将没用过的代码自动删除掉\n    optimization：{\n        splitChunks: {\n            cacheGroups: {\n                vendor: {\n                    test: /node_modules/,\n                    priority: 1,  // 数字越大，优先级越高\n                    minChunks: 2, // 表示至少有两个js同事引用的时候，就会打包成vendor。js\n                    minSizes: 0, // 表示最小的大小\n                }\n            }\n        },\n    },\n    modules: {\n        noParse: /jquery/,  // webpack 优化， 不去递归jquery的依赖库\n        rules: [\n           {\n                test: /\\.css$/,\n                use: [\n                    // 请记住loader 的运行顺序是从下到上，从右到左，\n                    // 另一种模式是内敛模式， import Styles from &#39;style-loader!css-loader?module!./styles.css&#39;, 忠中模式通过 ! 分割loadder，\n                    // &#39;style-loader!css-loader?module!./styles.css&#39;.split(&quot;!&quot;) =&gt; [&quot;style-loader&quot;, &quot;css-loader&quot;]\n                    { loader: &#39;style-loader&#39; },\n                    {\n                        loader: &#39;css-loader&#39;,\n                        options: {\n                        modules: true\n                        }\n                    }\n                ]\n            },\n            {\n                test: /\\.js$/,\n                exclude: /(node_modules|bower_components)/,\n                // 如果使用happypack的话，多线程打包，此时下面就要修改该成\n                // use: &#39;Happypack/loader?id=js&#39;\n                use: { \n                    loader: &#39;babel-loader&#39;,\n                    option: {\n                        cacheDirectory: true,  // 开启js 打包优化\n                        presets: [&#39;@babel/preset-env&#39;, &#39;@babel/preset-react&#39;],\n                        plugins: [require(&#39;@babel/plugin-transform-object-rest-spread&#39;)]\n                    },\n\n                }\n\n            }\n        ]\n    },\n    mode: &#39;development&#39;,  // 指定环境，\n    plugins: [\n        // 编译的时候指定全局变量，我们可以根据这个去定义当前环境是开发环境还是线上环境，定义不通的行为，比如url\n        new webpack.DefinePlugin({\n            PRODUCTION: JSON.stringify(true),  // 此时传过去的 PRODUCTION 是 字符串 “true”\n            VERSION: JSON.stringify(&quot;5fa3b9&quot;), // \n        }),\n        // 多线程打包, 要是对css也启动多线程的话，再创建一个happypack， id为css\n        new Happypack({\n            id: &#39;js&#39;,\n            use: [{ \n                loader: &#39;babel-loader&#39;,\n                option: {\n                    cacheDirectory: true,  // 开启js 打包优化\n                    presets: [&#39;@babel/preset-env&#39;, &#39;@babel/preset-react&#39;],\n                    plugins: [require(&#39;@babel/plugin-transform-object-rest-spread&#39;)]\n                },\n            }]\n        }),\n        // ignorePlugin， 针对某个包的依赖不进行打包，比如moment， locale 是moment的语言包，要是我们只使用zh-cn 那么我们可以忽略掉其他，所以此时忽略掉locale\n        new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n\n        // 下面是热更新\n        new webpack.NamedModulesPlugin(), // 告诉webpack  哪个模块更新了\n        new webpack.HotModuleReplacementPlugin(); // 进行热更新\n    ]\n}</code></pre>\n<h3 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h3><pre><code class=\"jsx\">import test from &#39;./test&#39;;\n\nif(module.hot) {\n    module.hot.accept(&#39;./test&#39;, () =&gt; {\n        console.log(&#39;文件已更新&#39;);\n        require(&#39;./test&#39;);\n    })\n}</code></pre>\n<p>我们总结一下上面关于打包优化的几种方式吧</p>\n<ul>\n<li>配置resolve 减少目录的搜索路径</li>\n<li>同样的在loader 中设置 include 和 <code>exclude</code> 指定loader 编译的目录</li>\n<li>设置modules 下的 <code>noParse</code>属性， 这个可以在打包的时候不检查<code>某js</code> 的依赖，这样就可以减少打包时间了</li>\n<li>配置DllPlugin 用动态链接库的形式打包，这样的话会根据目录下的manifest.json 进行二次打包， <strong>二次打包不会再对已生成的动态链接库进行打包</strong></li>\n<li>使用happyPack 用多线程打包</li>\n</ul>\n<h2 id=\"tapable\"><a href=\"#tapable\" class=\"headerlink\" title=\"tapable\"></a>tapable</h2><p>webpack 本质上是一种事件流机制，它的工作流程就是把各个插件串联起来， 他的核心就是tapable, tapable 有点像nodejs 的event库， 就是观察者模式</p>\n<p>先来看看一个简单的events 库</p>\n<pre><code class=\"js\">class EventBus {\n    constructor() {\n        this.maps = {}\n    }\n\n    on(name, fn) {\n        this.maps[name] = fn;\n    }\n\n    fire(name, data) {\n        this.maps[name] &amp;&amp; this.maps[name](data);\n    }\n}\n\n// 测试\n\nconst eventBus = new EventBus();\neventBus.on(&quot;click&quot;, (data) =&gt; {\n    console.log(&quot;click&quot;, data)\n})\n\neventBus.fire(&quot;click&quot;, {a: 1, b: 2})</code></pre>\n<h3 id=\"简单的观察者模式\"><a href=\"#简单的观察者模式\" class=\"headerlink\" title=\"简单的观察者模式\"></a>简单的观察者模式</h3><p>发布订阅其实很简单， 我可以想象成天文台， 当温度改变时， 天文台的数据改变（changes）的时候，我们用户需要做什么，他下雨了，我们需要收衣服，</p>\n<ul>\n<li>被观察者是 天文台，</li>\n<li>观察者 是我们用户， 具体做法是我们要收衣服， 就是对应下面的update， 简单说就是具体的做法就是观察者了</li>\n</ul>\n<pre><code class=\"jsx\">class Subject {\n    constructor() {\n        this.watchers = []\n    }\n\n    addWatch(watcher) {\n        console.log(this.watcher)\n        this.watchers.push(watcher)\n    }\n\n    removeWatcher(watcher) {\n        let index = this.watchers.indexOf(watcher);\n        if(index &gt; -1) {\n            this.watchers.splice(index, 1)\n        }\n    }\n\n    notify() {\n        this.watchers.forEach((watcher) =&gt; watcher.update())\n    }\n}\n\nclass Watcher {\n    subscribeTo(subject) {\n        subject.addWatch(this);\n    }\n\n    update() {}\n}\n\nlet subject = new Subject()\nlet watcher = new Watcher()\nwatcher.update = function() {\n  console.log(&#39;observer update&#39;)\n}\nwatcher.subscribeTo(subject)  //观察者订阅主题\n\nlet watcher2 = new Watcher()\nwatcher2.update = function() {\n  console.log(&#39;我是另一个观察者，我要做其他事情&#39;)\n}\nwatcher2.subscribeTo(subject) \n\nsubject.notify()\n</code></pre>\n<h3 id=\"实现-SyncHook\"><a href=\"#实现-SyncHook\" class=\"headerlink\" title=\"实现 SyncHook\"></a>实现 SyncHook</h3><p>我们以上面的例子，实现一个<code>SyncHook</code></p>\n<pre><code class=\"jsx\">class SyncHook {\n    constructor(args) {\n        this.tasks = []\n\n    }\n\n    // 绑定时间\n    tap(name, fn) {\n        this.tasks.push(fn)\n    }\n\n    // 运行函数, 在tapabel\n    call(...args) {\n        this.tasks.forEach((task) =&gt; task(...args));\n    }\n}\n\nlet hook = new SyncHook([&#39;name&#39;]) // [&#39;name&#39;] 指的是我在创建hook的时候， 我tap需要传递的参数\nhook.tap(&quot;test&quot;, (name) =&gt; {\n    console.log(&#39;test&#39;, name)\n})\nhook.tap(&quot;test2&quot;, (name) =&gt; {\n    console.log(&quot;test2&quot;, name)\n})\nhook.call(&quot;hello&quot;); // 这里的hello 对应的是上面的name\n</code></pre>\n<h2 id=\"webpack-原理\"><a href=\"#webpack-原理\" class=\"headerlink\" title=\"webpack 原理\"></a>webpack 原理</h2><p>webapck其实就是自己实现了一个require方法，这里需要对<code>AST</code>进行一部分的了解， <strong>AST</strong>就是抽象语法树， 简单说就是将 js 转换成 语法树，转换成 <strong>方法， 变量等等的属性</strong></p>\n<p>我们看看AST 的步骤</p>\n<ul>\n<li><code>AST</code> 将 <code>js</code> 转换成 语法树</li>\n<li>修改语法树的值</li>\n<li>将 <code>AST</code> 转换成浏览器可以识别的 语法</li>\n</ul>\n<p><code>AST</code> 依赖包</p>\n<ul>\n<li>babylon 将 源码 解析成 <code>AST(抽象语法树)</code></li>\n<li>@babel/traverse 遍历 AST 中的节点</li>\n<li>@babel/types    替换 AST 节点</li>\n<li>@babel/generator  将替换的结果生成成js</li>\n</ul>\n<p>我们想想webpack 的运行过程， 我们首先配置 <code>webpack.config.js</code>， 然后运行的是 <code>webpack --config webpack.config.js</code> 然后webpack 会根据 <code>entry</code>入口文件<br>进行分析，对它进行<code>AST</code>解析， 如果<code>entry入口文件</code>还有<code>require</code>, 那么继续进行依赖遍历。</p>\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h3><p>其实loader 就是一个方法，我们看两个例子, 一个是less-loader, 另一个是style-loader<br>其中 <code>loader-utils</code> 获取loader 的参数就是 loader 的 options</p>\n<h4 id=\"less-loader\"><a href=\"#less-loader\" class=\"headerlink\" title=\"less-loader\"></a>less-loader</h4><pre><code class=\"jsx\">// less-loader\n\n/**\n * 我们less-loader 当然要转换成css，那么我们使用的是less.render\n * 下面使用less那么肯定需要 npm install less -=save-dev\n * @param {string} source  这里的source就是指 less源码\n*/\nconst loaderUtils = require(&#39;loader-utils&#39;);\nfunction loader(source) {\n    let css = &quot;&quot;;\n    // loaderUtils.getOption(this) 可以拿到他的参数\n    less.render(source, (err, lessSource) =&gt; {\n        css = lessSource.css\n    })\n    return css;\n}</code></pre>\n<h4 id=\"style-loader\"><a href=\"#style-loader\" class=\"headerlink\" title=\"style-loader\"></a>style-loader</h4><pre><code class=\"jsx\">/**\n * 我们style-loader 的作用是将css 写在html 的head 下面的style标签下\n*/\nfunction loader(source) {\n    let styles = `\n        const el = document.createElement(&quot;style&quot;);\n        const css = ${source.replace(/\\s*/g, &quot;&quot;)}\n        el.innerHTML = css;\n        document.head.appendChild(css);\n    `\n    return styles\n}\n</code></pre>\n<h3 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h3><p>webpack 是基于tapable事件流， 你把 plugin 想象成在webapck 中不同的生命周期做不同的事情，我们看看webpack 的hooks吧</p>\n<ul>\n<li>entryOption   入口hooks</li>\n<li>compile       编译时期</li>\n<li>afterCompile  完成编译后</li>\n<li>afterPlugins  插件完成编译后</li>\n<li>run           运行</li>\n<li>emit          生成编译文件时</li>\n<li>done          执行完成</li>\n</ul>\n<h3 id=\"自定义plugin\"><a href=\"#自定义plugin\" class=\"headerlink\" title=\"自定义plugin\"></a>自定义plugin</h3><pre><code class=\"jsx\">class Plugin() {\n\n    apply(compiler) { // 此时的compiler 是webpack实例\n        compiler.hooks.done.tap(&quot;run&quot;, () =&gt; {\n            console.log(&quot;此时是webpack 运行时运行的时间&quot;)\n        })\n        compiler.hooks.done.tap(&quot;name&quot;, () =&gt; {\n            console.log(&quot;此时是注册事件，指的是在整个wepack执行完成之后的回调函数&quot;)\n        })\n    }\n}</code></pre>\n"},{"title":"xlsx 读取写入excel","date":"2020-07-27T09:38:24.000Z","_content":"\n## js-xlsx\n\n`npm install xlsx --save`\n\n[文档地址](https://github.com/SheetJS/sheetjs)\n\n## 读取\n\n这里记录一下最经常用的方法，到时候复杂处理再记录\n\n### 以nodejs 的方式\n\n```js\n// nodejs 方式读取文件\nconst filePath = './test.xlsx';\nconst ws = xlsx.readFile(filePath, { type: 'binary'}); // 传文件路径读取文件\nconst sheet = ws.Sheets[\"Sheet1\"]; // 指定工作表\nconst data = xlsx.utils.sheet_to_json(sheet, {header:1}); // 对工作表的内容进行json 转化\nconst header = data.slice(0, 1); // 第一行就是我们的header\nconst body = data.slice(1); // 数据body\n```\n\n### browser 方式，上传文件的形式读取excel\n\n```html\n<input type=\"file\"  @change=\"fileChange\" />\n```\n\n```js\nfunction fileChange(e) {\n    var files = e.target.files;\n    console.log(files)\n    var fileReader = new FileReader();\n    fileReader.readAsBinaryString(files[0]);\n\n    fileReader.onload = (ev) => {\n        // 读取上传的文件，后面的跟上面类似\n        const file = ev.target.result; \n        const wb = xlsx.read(file, { type: 'binary' }); \n        const sheet = wb.Sheets[\"Sheet1\"];\n        const data = xlsx.utils.sheet_to_json(sheet, {header:1});\n    };\n\n},\n```\n\n### 写 Excel\n\n\n### nodejs 方式直接导出excel\n```jsx\n/**\n * @params dataSource 简单的数据结构\n * @params excelName  表名\n */ \n\ntype source {\n    name: string,\n    address: string,\n    phone: number\n}\n\nfunction json2Excel(dataSource: source, excelName: string) {\n    let wb = xlsx.utils.book_new()\n    let ws = xlsx.utils.aoa_to_sheet(dataSource); // 将简单的数据对象写到工作表里\n    xlsx.utils.book_append_sheet(wb, ws, \"SheetJS\")\n    xlsx.writeFile(wb, `${excelName}.xlsx`);\n}\n```\n\n### 创建a 链接方式导出excel\n\n[参考](https://blog.csdn.net/tian_i/article/details/84327329)\n\n\n[其他链接参考](https://www.cnblogs.com/liuxianan/p/js-excel.html)","source":"_posts/xlsx-读取写入excel.md","raw":"---\ntitle: xlsx 读取写入excel\ndate: 2020-07-27 09:38:24\ntags: js-xlsx\ncategories: js-xlsx\n---\n\n## js-xlsx\n\n`npm install xlsx --save`\n\n[文档地址](https://github.com/SheetJS/sheetjs)\n\n## 读取\n\n这里记录一下最经常用的方法，到时候复杂处理再记录\n\n### 以nodejs 的方式\n\n```js\n// nodejs 方式读取文件\nconst filePath = './test.xlsx';\nconst ws = xlsx.readFile(filePath, { type: 'binary'}); // 传文件路径读取文件\nconst sheet = ws.Sheets[\"Sheet1\"]; // 指定工作表\nconst data = xlsx.utils.sheet_to_json(sheet, {header:1}); // 对工作表的内容进行json 转化\nconst header = data.slice(0, 1); // 第一行就是我们的header\nconst body = data.slice(1); // 数据body\n```\n\n### browser 方式，上传文件的形式读取excel\n\n```html\n<input type=\"file\"  @change=\"fileChange\" />\n```\n\n```js\nfunction fileChange(e) {\n    var files = e.target.files;\n    console.log(files)\n    var fileReader = new FileReader();\n    fileReader.readAsBinaryString(files[0]);\n\n    fileReader.onload = (ev) => {\n        // 读取上传的文件，后面的跟上面类似\n        const file = ev.target.result; \n        const wb = xlsx.read(file, { type: 'binary' }); \n        const sheet = wb.Sheets[\"Sheet1\"];\n        const data = xlsx.utils.sheet_to_json(sheet, {header:1});\n    };\n\n},\n```\n\n### 写 Excel\n\n\n### nodejs 方式直接导出excel\n```jsx\n/**\n * @params dataSource 简单的数据结构\n * @params excelName  表名\n */ \n\ntype source {\n    name: string,\n    address: string,\n    phone: number\n}\n\nfunction json2Excel(dataSource: source, excelName: string) {\n    let wb = xlsx.utils.book_new()\n    let ws = xlsx.utils.aoa_to_sheet(dataSource); // 将简单的数据对象写到工作表里\n    xlsx.utils.book_append_sheet(wb, ws, \"SheetJS\")\n    xlsx.writeFile(wb, `${excelName}.xlsx`);\n}\n```\n\n### 创建a 链接方式导出excel\n\n[参考](https://blog.csdn.net/tian_i/article/details/84327329)\n\n\n[其他链接参考](https://www.cnblogs.com/liuxianan/p/js-excel.html)","slug":"xlsx-读取写入excel","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfl001smrojdttnf4dl","content":"<h2 id=\"js-xlsx\"><a href=\"#js-xlsx\" class=\"headerlink\" title=\"js-xlsx\"></a>js-xlsx</h2><p><code>npm install xlsx --save</code></p>\n<p><a href=\"https://github.com/SheetJS/sheetjs\" target=\"_blank\" rel=\"noopener\">文档地址</a></p>\n<h2 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h2><p>这里记录一下最经常用的方法，到时候复杂处理再记录</p>\n<h3 id=\"以nodejs-的方式\"><a href=\"#以nodejs-的方式\" class=\"headerlink\" title=\"以nodejs 的方式\"></a>以nodejs 的方式</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// nodejs 方式读取文件</span>\n<span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">'./test.xlsx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ws <span class=\"token operator\">=</span> xlsx<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'binary'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 传文件路径读取文件</span>\n<span class=\"token keyword\">const</span> sheet <span class=\"token operator\">=</span> ws<span class=\"token punctuation\">.</span>Sheets<span class=\"token punctuation\">[</span><span class=\"token string\">\"Sheet1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 指定工作表</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> xlsx<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">sheet_to_json</span><span class=\"token punctuation\">(</span>sheet<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>header<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 对工作表的内容进行json 转化</span>\n<span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 第一行就是我们的header</span>\n<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 数据body</span></code></pre>\n<h3 id=\"browser-方式，上传文件的形式读取excel\"><a href=\"#browser-方式，上传文件的形式读取excel\" class=\"headerlink\" title=\"browser 方式，上传文件的形式读取excel\"></a>browser 方式，上传文件的形式读取excel</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">@change</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fileChange<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fileChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> files <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsBinaryString</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    fileReader<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 读取上传的文件，后面的跟上面类似</span>\n        <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">const</span> wb <span class=\"token operator\">=</span> xlsx<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'binary'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">const</span> sheet <span class=\"token operator\">=</span> wb<span class=\"token punctuation\">.</span>Sheets<span class=\"token punctuation\">[</span><span class=\"token string\">\"Sheet1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> xlsx<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">sheet_to_json</span><span class=\"token punctuation\">(</span>sheet<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>header<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n<h3 id=\"写-Excel\"><a href=\"#写-Excel\" class=\"headerlink\" title=\"写 Excel\"></a>写 Excel</h3><h3 id=\"nodejs-方式直接导出excel\"><a href=\"#nodejs-方式直接导出excel\" class=\"headerlink\" title=\"nodejs 方式直接导出excel\"></a>nodejs 方式直接导出excel</h3><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @params dataSource 简单的数据结构\n * @params excelName  表名\n */</span> \n\ntype source <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n    address<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n    phone<span class=\"token punctuation\">:</span> number\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">json2Excel</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">:</span> source<span class=\"token punctuation\">,</span> excelName<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> wb <span class=\"token operator\">=</span> xlsx<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">book_new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> xlsx<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">aoa_to_sheet</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 将简单的数据对象写到工作表里</span>\n    xlsx<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">book_append_sheet</span><span class=\"token punctuation\">(</span>wb<span class=\"token punctuation\">,</span> ws<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SheetJS\"</span><span class=\"token punctuation\">)</span>\n    xlsx<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>wb<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>excelName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.xlsx`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"创建a-链接方式导出excel\"><a href=\"#创建a-链接方式导出excel\" class=\"headerlink\" title=\"创建a 链接方式导出excel\"></a>创建a 链接方式导出excel</h3><p><a href=\"https://blog.csdn.net/tian_i/article/details/84327329\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<p><a href=\"https://www.cnblogs.com/liuxianan/p/js-excel.html\" target=\"_blank\" rel=\"noopener\">其他链接参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"js-xlsx\"><a href=\"#js-xlsx\" class=\"headerlink\" title=\"js-xlsx\"></a>js-xlsx</h2><p><code>npm install xlsx --save</code></p>\n<p><a href=\"https://github.com/SheetJS/sheetjs\" target=\"_blank\" rel=\"noopener\">文档地址</a></p>\n<h2 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h2><p>这里记录一下最经常用的方法，到时候复杂处理再记录</p>\n<h3 id=\"以nodejs-的方式\"><a href=\"#以nodejs-的方式\" class=\"headerlink\" title=\"以nodejs 的方式\"></a>以nodejs 的方式</h3><pre><code class=\"js\">// nodejs 方式读取文件\nconst filePath = &#39;./test.xlsx&#39;;\nconst ws = xlsx.readFile(filePath, { type: &#39;binary&#39;}); // 传文件路径读取文件\nconst sheet = ws.Sheets[&quot;Sheet1&quot;]; // 指定工作表\nconst data = xlsx.utils.sheet_to_json(sheet, {header:1}); // 对工作表的内容进行json 转化\nconst header = data.slice(0, 1); // 第一行就是我们的header\nconst body = data.slice(1); // 数据body</code></pre>\n<h3 id=\"browser-方式，上传文件的形式读取excel\"><a href=\"#browser-方式，上传文件的形式读取excel\" class=\"headerlink\" title=\"browser 方式，上传文件的形式读取excel\"></a>browser 方式，上传文件的形式读取excel</h3><pre><code class=\"html\">&lt;input type=&quot;file&quot;  @change=&quot;fileChange&quot; /&gt;</code></pre>\n<pre><code class=\"js\">function fileChange(e) {\n    var files = e.target.files;\n    console.log(files)\n    var fileReader = new FileReader();\n    fileReader.readAsBinaryString(files[0]);\n\n    fileReader.onload = (ev) =&gt; {\n        // 读取上传的文件，后面的跟上面类似\n        const file = ev.target.result; \n        const wb = xlsx.read(file, { type: &#39;binary&#39; }); \n        const sheet = wb.Sheets[&quot;Sheet1&quot;];\n        const data = xlsx.utils.sheet_to_json(sheet, {header:1});\n    };\n\n},</code></pre>\n<h3 id=\"写-Excel\"><a href=\"#写-Excel\" class=\"headerlink\" title=\"写 Excel\"></a>写 Excel</h3><h3 id=\"nodejs-方式直接导出excel\"><a href=\"#nodejs-方式直接导出excel\" class=\"headerlink\" title=\"nodejs 方式直接导出excel\"></a>nodejs 方式直接导出excel</h3><pre><code class=\"jsx\">/**\n * @params dataSource 简单的数据结构\n * @params excelName  表名\n */ \n\ntype source {\n    name: string,\n    address: string,\n    phone: number\n}\n\nfunction json2Excel(dataSource: source, excelName: string) {\n    let wb = xlsx.utils.book_new()\n    let ws = xlsx.utils.aoa_to_sheet(dataSource); // 将简单的数据对象写到工作表里\n    xlsx.utils.book_append_sheet(wb, ws, &quot;SheetJS&quot;)\n    xlsx.writeFile(wb, `${excelName}.xlsx`);\n}</code></pre>\n<h3 id=\"创建a-链接方式导出excel\"><a href=\"#创建a-链接方式导出excel\" class=\"headerlink\" title=\"创建a 链接方式导出excel\"></a>创建a 链接方式导出excel</h3><p><a href=\"https://blog.csdn.net/tian_i/article/details/84327329\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<p><a href=\"https://www.cnblogs.com/liuxianan/p/js-excel.html\" target=\"_blank\" rel=\"noopener\">其他链接参考</a></p>\n"},{"title":"一行代码使网站变灰","date":"2020-04-08T16:00:48.000Z","_content":"\n## 先看看效果吧\n\n![百度](https://i.loli.net/2020/04/08/Lm6iCbhrZYEJKPR.jpg)\n\n\n## 分析\n\n> 网站变灰用到的是 css3 的 filter 属性，其实就是滤镜\n\n## 代码\n\n```css\nhtml {\n    filter: grayscale(0.95) \n}\n```\n\nfilter 还能做 高斯模糊，色相旋转， 色相透明，调整对比度等等，\n\n```\nfilter: blur(5px); // 高斯模糊\nfilter: contrast(200%); // 调整对比度\nfilter: opacity(30%); // 调整透明度\n```\n","source":"_posts/一行代码使网站变灰.md","raw":"---\ntitle: 一行代码使网站变灰\ndate: 2020-04-08 16:00:48\ntags: css\ncategory: css\n---\n\n## 先看看效果吧\n\n![百度](https://i.loli.net/2020/04/08/Lm6iCbhrZYEJKPR.jpg)\n\n\n## 分析\n\n> 网站变灰用到的是 css3 的 filter 属性，其实就是滤镜\n\n## 代码\n\n```css\nhtml {\n    filter: grayscale(0.95) \n}\n```\n\nfilter 还能做 高斯模糊，色相旋转， 色相透明，调整对比度等等，\n\n```\nfilter: blur(5px); // 高斯模糊\nfilter: contrast(200%); // 调整对比度\nfilter: opacity(30%); // 调整透明度\n```\n","slug":"一行代码使网站变灰","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfm001vmroj45mc683j","content":"<h2 id=\"先看看效果吧\"><a href=\"#先看看效果吧\" class=\"headerlink\" title=\"先看看效果吧\"></a>先看看效果吧</h2><p><img src=\"https://i.loli.net/2020/04/08/Lm6iCbhrZYEJKPR.jpg\" alt=\"百度\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p>网站变灰用到的是 css3 的 filter 属性，其实就是滤镜</p>\n</blockquote>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-css\"><code class=\"language-css\"><span class=\"token selector\">html </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.95</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span></code></pre>\n<p>filter 还能做 高斯模糊，色相旋转， 色相透明，调整对比度等等，</p>\n<pre><code>filter: blur(5px); // 高斯模糊\nfilter: contrast(200%); // 调整对比度\nfilter: opacity(30%); // 调整透明度</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"先看看效果吧\"><a href=\"#先看看效果吧\" class=\"headerlink\" title=\"先看看效果吧\"></a>先看看效果吧</h2><p><img src=\"https://i.loli.net/2020/04/08/Lm6iCbhrZYEJKPR.jpg\" alt=\"百度\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p>网站变灰用到的是 css3 的 filter 属性，其实就是滤镜</p>\n</blockquote>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"css\">html {\n    filter: grayscale(0.95) \n}</code></pre>\n<p>filter 还能做 高斯模糊，色相旋转， 色相透明，调整对比度等等，</p>\n<pre><code>filter: blur(5px); // 高斯模糊\nfilter: contrast(200%); // 调整对比度\nfilter: opacity(30%); // 调整透明度</code></pre>"},{"title":"三角形最小路径和","date":"2020-07-16T13:39:54.000Z","type":"algorithm","_content":"\n[120. 三角形最小路径和](https://leetcode-cn.com/problems/triangle/)\n\n## 题目描述\n\n给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。\n**相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点**。我们用`triangle` 表示当前数组\n\n|  i\\k  | k = 0 | k = 1 | k = 2 | k = 3  |\n|:----: | :---: | :---: | :---: | :----: |\n| i = 0 | 2     |       |       |        |\n| i = 1 | 3     |  4    |       |        |\n| i = 2 | 6     |  5    |  7    |        |\n| i = 3 | 4     |  1    |  8    |   3    |\n\n自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。\n\n## 思路\n\n这道题用动态规划，我一开始的想法是用一位数组的动态规划，后来提交发现失败了， 一开始想的递推公式是 ` dp[i + 1] = d[i] + Math.min(triangle[i][j], triangle[i][j + 1])`\n后来发现是一个二维数组的动态规划\n\n* 二维数组动态规划, 用dp 表示结果集\n* 我们以 `i` 作为行, `k` 作为列， **注意题目的相邻节点**\n* 我们发现 当 `k = 0` 时, 那么他当前dp 值 应该是 `dp[i][k] = dp[i-1][k] + triangle[i][k]`, `dp[i][k]` 因为 `k = 0`, 它只能从上往下走\n* 我们看第三行即 `i = 2`时, 看 `k = 1`, `dp[i][k] = triangle[i][k] + Math.min(dp[i - 1][k], dp[i - 1][k - 1])`,  当  `0 < k < column`时\n  我们`dp[i][k]` 应该 是用`左上角的dp, 即dp[i - 1][k - 1]`跟`正上方的dp值，即dp[i - 1][k]`取最小值 加上`triangle[i][k] `\n* 同样是第三行即 `i = 2`时，看 `k = 2`, `dp[i][k] = triangle[i][k] + dp[i - 1][k - 1]`, 此时 只能斜着走 即 2 -> 4 -> 这样走\n\ndp 结果 \n\n|  i\\k  | k = 0 | k = 1 | k = 2 | k = 3  |\n|:----: | :---: | :---: | :---: | :----: |\n| i = 0 | 2     |       |       |        |\n| i = 1 | 5     |  6    |       |        |\n| i = 2 | 11    |  10（这里左上跟正上对比，取小的那个跟triangle相加）   |  13（这里只能斜着走，取6）   |        |\n| i = 3 | 15    |  11   |  18   |   16   |\n\n最后取最后一行的最小那个即可\n\n## 代码\n\n```js\nvar minimumTotal = function(triangle) {\n    // dp[i + 1] = d[i] + Math.min(triangle[i][j], triangle[i][j + 1])\n    let i = 0;\n    let dp = []\n    let row = triangle.length;\n    while(i < row) {\n        let column = triangle[i].length;  // 获取当前行的列数\n        let dpColumn = []\n        for(let k = 0; k < column; k++) {\n            if(k == 0) {  // 列 = 0 时只能向下走，\n                dpColumn.push(i == 0 ? triangle[i][k] : dp[i - 1][k] + triangle[i][k])\n            } else if(k < column - 1) { // 列是中间列的话，就从正上方 或者左上方\n                dpColumn.push(Math.min(dp[i - 1][k], dp[i - 1][k - 1]) + triangle[i][k]);\n            } else {\n                // 最后一列的时候只能够斜着走\n                dpColumn.push(dp[i - 1][k - 1] + triangle[i][k])\n            }\n        }\n        dp.push(dpColumn);\n        i++;\n    }\n    return Math.min.call(null, ...dp[i - 1]);\n};\n```","source":"_posts/三角形最小路径和.md","raw":"---\ntitle: 三角形最小路径和\ndate: 2020-07-16 13:39:54\ntags: algorithm-动态规划 \ntype: algorithm\n---\n\n[120. 三角形最小路径和](https://leetcode-cn.com/problems/triangle/)\n\n## 题目描述\n\n给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。\n**相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点**。我们用`triangle` 表示当前数组\n\n|  i\\k  | k = 0 | k = 1 | k = 2 | k = 3  |\n|:----: | :---: | :---: | :---: | :----: |\n| i = 0 | 2     |       |       |        |\n| i = 1 | 3     |  4    |       |        |\n| i = 2 | 6     |  5    |  7    |        |\n| i = 3 | 4     |  1    |  8    |   3    |\n\n自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。\n\n## 思路\n\n这道题用动态规划，我一开始的想法是用一位数组的动态规划，后来提交发现失败了， 一开始想的递推公式是 ` dp[i + 1] = d[i] + Math.min(triangle[i][j], triangle[i][j + 1])`\n后来发现是一个二维数组的动态规划\n\n* 二维数组动态规划, 用dp 表示结果集\n* 我们以 `i` 作为行, `k` 作为列， **注意题目的相邻节点**\n* 我们发现 当 `k = 0` 时, 那么他当前dp 值 应该是 `dp[i][k] = dp[i-1][k] + triangle[i][k]`, `dp[i][k]` 因为 `k = 0`, 它只能从上往下走\n* 我们看第三行即 `i = 2`时, 看 `k = 1`, `dp[i][k] = triangle[i][k] + Math.min(dp[i - 1][k], dp[i - 1][k - 1])`,  当  `0 < k < column`时\n  我们`dp[i][k]` 应该 是用`左上角的dp, 即dp[i - 1][k - 1]`跟`正上方的dp值，即dp[i - 1][k]`取最小值 加上`triangle[i][k] `\n* 同样是第三行即 `i = 2`时，看 `k = 2`, `dp[i][k] = triangle[i][k] + dp[i - 1][k - 1]`, 此时 只能斜着走 即 2 -> 4 -> 这样走\n\ndp 结果 \n\n|  i\\k  | k = 0 | k = 1 | k = 2 | k = 3  |\n|:----: | :---: | :---: | :---: | :----: |\n| i = 0 | 2     |       |       |        |\n| i = 1 | 5     |  6    |       |        |\n| i = 2 | 11    |  10（这里左上跟正上对比，取小的那个跟triangle相加）   |  13（这里只能斜着走，取6）   |        |\n| i = 3 | 15    |  11   |  18   |   16   |\n\n最后取最后一行的最小那个即可\n\n## 代码\n\n```js\nvar minimumTotal = function(triangle) {\n    // dp[i + 1] = d[i] + Math.min(triangle[i][j], triangle[i][j + 1])\n    let i = 0;\n    let dp = []\n    let row = triangle.length;\n    while(i < row) {\n        let column = triangle[i].length;  // 获取当前行的列数\n        let dpColumn = []\n        for(let k = 0; k < column; k++) {\n            if(k == 0) {  // 列 = 0 时只能向下走，\n                dpColumn.push(i == 0 ? triangle[i][k] : dp[i - 1][k] + triangle[i][k])\n            } else if(k < column - 1) { // 列是中间列的话，就从正上方 或者左上方\n                dpColumn.push(Math.min(dp[i - 1][k], dp[i - 1][k - 1]) + triangle[i][k]);\n            } else {\n                // 最后一列的时候只能够斜着走\n                dpColumn.push(dp[i - 1][k - 1] + triangle[i][k])\n            }\n        }\n        dp.push(dpColumn);\n        i++;\n    }\n    return Math.min.call(null, ...dp[i - 1]);\n};\n```","slug":"三角形最小路径和","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfn0020mrojhbiwf5k1","content":"<p><a href=\"https://leetcode-cn.com/problems/triangle/\" target=\"_blank\" rel=\"noopener\">120. 三角形最小路径和</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。<br><strong>相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点</strong>。我们用<code>triangle</code> 表示当前数组</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i\\k</th>\n<th align=\"center\">k = 0</th>\n<th align=\"center\">k = 1</th>\n<th align=\"center\">k = 2</th>\n<th align=\"center\">k = 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i = 0</td>\n<td align=\"center\">2</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">6</td>\n<td align=\"center\">5</td>\n<td align=\"center\">7</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n<td align=\"center\">3</td>\n</tr>\n</tbody></table>\n<p>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>这道题用动态规划，我一开始的想法是用一位数组的动态规划，后来提交发现失败了， 一开始想的递推公式是 <code>dp[i + 1] = d[i] + Math.min(triangle[i][j], triangle[i][j + 1])</code><br>后来发现是一个二维数组的动态规划</p>\n<ul>\n<li>二维数组动态规划, 用dp 表示结果集</li>\n<li>我们以 <code>i</code> 作为行, <code>k</code> 作为列， <strong>注意题目的相邻节点</strong></li>\n<li>我们发现 当 <code>k = 0</code> 时, 那么他当前dp 值 应该是 <code>dp[i][k] = dp[i-1][k] + triangle[i][k]</code>, <code>dp[i][k]</code> 因为 <code>k = 0</code>, 它只能从上往下走</li>\n<li>我们看第三行即 <code>i = 2</code>时, 看 <code>k = 1</code>, <code>dp[i][k] = triangle[i][k] + Math.min(dp[i - 1][k], dp[i - 1][k - 1])</code>,  当  <code>0 &lt; k &lt; column</code>时<br>我们<code>dp[i][k]</code> 应该 是用<code>左上角的dp, 即dp[i - 1][k - 1]</code>跟<code>正上方的dp值，即dp[i - 1][k]</code>取最小值 加上<code>triangle[i][k]</code></li>\n<li>同样是第三行即 <code>i = 2</code>时，看 <code>k = 2</code>, <code>dp[i][k] = triangle[i][k] + dp[i - 1][k - 1]</code>, 此时 只能斜着走 即 2 -&gt; 4 -&gt; 这样走</li>\n</ul>\n<p>dp 结果 </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i\\k</th>\n<th align=\"center\">k = 0</th>\n<th align=\"center\">k = 1</th>\n<th align=\"center\">k = 2</th>\n<th align=\"center\">k = 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i = 0</td>\n<td align=\"center\">2</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 1</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">11</td>\n<td align=\"center\">10（这里左上跟正上对比，取小的那个跟triangle相加）</td>\n<td align=\"center\">13（这里只能斜着走，取6）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 3</td>\n<td align=\"center\">15</td>\n<td align=\"center\">11</td>\n<td align=\"center\">18</td>\n<td align=\"center\">16</td>\n</tr>\n</tbody></table>\n<p>最后取最后一行的最小那个即可</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> minimumTotal <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>triangle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// dp[i + 1] = d[i] + Math.min(triangle[i][j], triangle[i][j + 1])</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> triangle<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> column <span class=\"token operator\">=</span> triangle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 获取当前行的列数</span>\n        <span class=\"token keyword\">let</span> dpColumn <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> column<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 列 = 0 时只能向下走，</span>\n                dpColumn<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> triangle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> triangle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> column <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 列是中间列的话，就从正上方 或者左上方</span>\n                dpColumn<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> triangle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 最后一列的时候只能够斜着走</span>\n                dpColumn<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> triangle<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        dp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dpColumn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/triangle/\" target=\"_blank\" rel=\"noopener\">120. 三角形最小路径和</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。<br><strong>相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点</strong>。我们用<code>triangle</code> 表示当前数组</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i\\k</th>\n<th align=\"center\">k = 0</th>\n<th align=\"center\">k = 1</th>\n<th align=\"center\">k = 2</th>\n<th align=\"center\">k = 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i = 0</td>\n<td align=\"center\">2</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">6</td>\n<td align=\"center\">5</td>\n<td align=\"center\">7</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n<td align=\"center\">3</td>\n</tr>\n</tbody></table>\n<p>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>这道题用动态规划，我一开始的想法是用一位数组的动态规划，后来提交发现失败了， 一开始想的递推公式是 <code>dp[i + 1] = d[i] + Math.min(triangle[i][j], triangle[i][j + 1])</code><br>后来发现是一个二维数组的动态规划</p>\n<ul>\n<li>二维数组动态规划, 用dp 表示结果集</li>\n<li>我们以 <code>i</code> 作为行, <code>k</code> 作为列， <strong>注意题目的相邻节点</strong></li>\n<li>我们发现 当 <code>k = 0</code> 时, 那么他当前dp 值 应该是 <code>dp[i][k] = dp[i-1][k] + triangle[i][k]</code>, <code>dp[i][k]</code> 因为 <code>k = 0</code>, 它只能从上往下走</li>\n<li>我们看第三行即 <code>i = 2</code>时, 看 <code>k = 1</code>, <code>dp[i][k] = triangle[i][k] + Math.min(dp[i - 1][k], dp[i - 1][k - 1])</code>,  当  <code>0 &lt; k &lt; column</code>时<br>我们<code>dp[i][k]</code> 应该 是用<code>左上角的dp, 即dp[i - 1][k - 1]</code>跟<code>正上方的dp值，即dp[i - 1][k]</code>取最小值 加上<code>triangle[i][k]</code></li>\n<li>同样是第三行即 <code>i = 2</code>时，看 <code>k = 2</code>, <code>dp[i][k] = triangle[i][k] + dp[i - 1][k - 1]</code>, 此时 只能斜着走 即 2 -&gt; 4 -&gt; 这样走</li>\n</ul>\n<p>dp 结果 </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i\\k</th>\n<th align=\"center\">k = 0</th>\n<th align=\"center\">k = 1</th>\n<th align=\"center\">k = 2</th>\n<th align=\"center\">k = 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i = 0</td>\n<td align=\"center\">2</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 1</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">11</td>\n<td align=\"center\">10（这里左上跟正上对比，取小的那个跟triangle相加）</td>\n<td align=\"center\">13（这里只能斜着走，取6）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">i = 3</td>\n<td align=\"center\">15</td>\n<td align=\"center\">11</td>\n<td align=\"center\">18</td>\n<td align=\"center\">16</td>\n</tr>\n</tbody></table>\n<p>最后取最后一行的最小那个即可</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">var minimumTotal = function(triangle) {\n    // dp[i + 1] = d[i] + Math.min(triangle[i][j], triangle[i][j + 1])\n    let i = 0;\n    let dp = []\n    let row = triangle.length;\n    while(i &lt; row) {\n        let column = triangle[i].length;  // 获取当前行的列数\n        let dpColumn = []\n        for(let k = 0; k &lt; column; k++) {\n            if(k == 0) {  // 列 = 0 时只能向下走，\n                dpColumn.push(i == 0 ? triangle[i][k] : dp[i - 1][k] + triangle[i][k])\n            } else if(k &lt; column - 1) { // 列是中间列的话，就从正上方 或者左上方\n                dpColumn.push(Math.min(dp[i - 1][k], dp[i - 1][k - 1]) + triangle[i][k]);\n            } else {\n                // 最后一列的时候只能够斜着走\n                dpColumn.push(dp[i - 1][k - 1] + triangle[i][k])\n            }\n        }\n        dp.push(dpColumn);\n        i++;\n    }\n    return Math.min.call(null, ...dp[i - 1]);\n};</code></pre>\n"},{"title":"不同的二叉搜索树","date":"2020-07-17T09:48:21.000Z","type":"algorithm","_content":"\n[96. 不同的二叉搜索树](https://leetcode-cn.com/problems/unique-binary-search-trees/)\n\n## 题目描述\n\n给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？\n\n```\n输入: 3\n输出: 5\n解释:\n给定 n = 3, 一共有 5 种不同结构的二叉搜索树:\n  1         3     3      2      1\n   \\       /     /      / \\      \\\n    3     2     1      1   3      2\n   /     /       \\                 \\\n  2     1         2                 3\n```\n\n## 搜索二叉树\n\n**搜索二叉树：** 左节点比根节点要小， 根节点永远比右节点要小。 `左 < 根 < 右`\n\n## 思路\n\n> 我们以 n = 5 为例子, [1, 2, 3, 4, 5]\n\n* 当以3为根节点时， 根据左节点永远比根节点小， 那么左节点只能为 `[1,2]`, 右节点为 `[4, 5]`\n  * 当 [1,2] 为左节点时, 又分成了两种情况， 当1为根节点时，2 为右节点；当 2 为根节点时， 1为左节点\n  * 当 [4,5] 为右节点时，跟上面类似\n* 当以2 为根节点时，那么 左节点只有为 `[1]`, 右节点为 `[3,4,5]`\n  * `[3,4,5]` 又可以以 3 或 4 或 5 做为根节点分析\n     * 3 为根节点 的时候为两种\n     * 4 为根节点的时候有一种\n     * 5 为根节点的时候又两种\n\n所以你会发现节点有两个的时候 f(2) = 2; f(1) = 1, 左右节点相乘就可以得到总数了\n所以 \n`f(2) = f(0) * f(1) + f(1) * f(0)`\n`f(3) = f(0) * f(2) + f(1) * f(1) + f(2) * f(0)`\n`f[4] = f(0) * f(3) + f(1) * f(2) + f(2) * f(1) + f(3) * f(0)`\n\n## 代码\n\n```js\nvar numTrees = function(n) {\n    const dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    dp[1] = 1;\n\n    for (let i = 2; i <= n; ++i) {\n        for (let j = 1; j <= i; ++j) {\n            dp[i] += dp[j - 1] * dp[i - j];\n        }\n    }\n    return dp[n];\n};\n\n```\n\n","source":"_posts/不同的二叉搜索树.md","raw":"---\ntitle: 不同的二叉搜索树\ndate: 2020-07-17 09:48:21\ntags: algorithm-动态规划\ntype: algorithm\n---\n\n[96. 不同的二叉搜索树](https://leetcode-cn.com/problems/unique-binary-search-trees/)\n\n## 题目描述\n\n给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？\n\n```\n输入: 3\n输出: 5\n解释:\n给定 n = 3, 一共有 5 种不同结构的二叉搜索树:\n  1         3     3      2      1\n   \\       /     /      / \\      \\\n    3     2     1      1   3      2\n   /     /       \\                 \\\n  2     1         2                 3\n```\n\n## 搜索二叉树\n\n**搜索二叉树：** 左节点比根节点要小， 根节点永远比右节点要小。 `左 < 根 < 右`\n\n## 思路\n\n> 我们以 n = 5 为例子, [1, 2, 3, 4, 5]\n\n* 当以3为根节点时， 根据左节点永远比根节点小， 那么左节点只能为 `[1,2]`, 右节点为 `[4, 5]`\n  * 当 [1,2] 为左节点时, 又分成了两种情况， 当1为根节点时，2 为右节点；当 2 为根节点时， 1为左节点\n  * 当 [4,5] 为右节点时，跟上面类似\n* 当以2 为根节点时，那么 左节点只有为 `[1]`, 右节点为 `[3,4,5]`\n  * `[3,4,5]` 又可以以 3 或 4 或 5 做为根节点分析\n     * 3 为根节点 的时候为两种\n     * 4 为根节点的时候有一种\n     * 5 为根节点的时候又两种\n\n所以你会发现节点有两个的时候 f(2) = 2; f(1) = 1, 左右节点相乘就可以得到总数了\n所以 \n`f(2) = f(0) * f(1) + f(1) * f(0)`\n`f(3) = f(0) * f(2) + f(1) * f(1) + f(2) * f(0)`\n`f[4] = f(0) * f(3) + f(1) * f(2) + f(2) * f(1) + f(3) * f(0)`\n\n## 代码\n\n```js\nvar numTrees = function(n) {\n    const dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    dp[1] = 1;\n\n    for (let i = 2; i <= n; ++i) {\n        for (let j = 1; j <= i; ++j) {\n            dp[i] += dp[j - 1] * dp[i - j];\n        }\n    }\n    return dp[n];\n};\n\n```\n\n","slug":"不同的二叉搜索树","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfp0022mrojbhfoet84","content":"<p><a href=\"https://leetcode-cn.com/problems/unique-binary-search-trees/\" target=\"_blank\" rel=\"noopener\">96. 不同的二叉搜索树</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？</p>\n<pre><code>输入: 3\n输出: 5\n解释:\n给定 n = 3, 一共有 5 种不同结构的二叉搜索树:\n  1         3     3      2      1\n   \\       /     /      / \\      \\\n    3     2     1      1   3      2\n   /     /       \\                 \\\n  2     1         2                 3</code></pre><h2 id=\"搜索二叉树\"><a href=\"#搜索二叉树\" class=\"headerlink\" title=\"搜索二叉树\"></a>搜索二叉树</h2><p><strong>搜索二叉树：</strong> 左节点比根节点要小， 根节点永远比右节点要小。 <code>左 &lt; 根 &lt; 右</code></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><blockquote>\n<p>我们以 n = 5 为例子, [1, 2, 3, 4, 5]</p>\n</blockquote>\n<ul>\n<li>当以3为根节点时， 根据左节点永远比根节点小， 那么左节点只能为 <code>[1,2]</code>, 右节点为 <code>[4, 5]</code><ul>\n<li>当 [1,2] 为左节点时, 又分成了两种情况， 当1为根节点时，2 为右节点；当 2 为根节点时， 1为左节点</li>\n<li>当 [4,5] 为右节点时，跟上面类似</li>\n</ul>\n</li>\n<li>当以2 为根节点时，那么 左节点只有为 <code>[1]</code>, 右节点为 <code>[3,4,5]</code><ul>\n<li><code>[3,4,5]</code> 又可以以 3 或 4 或 5 做为根节点分析<ul>\n<li>3 为根节点 的时候为两种</li>\n<li>4 为根节点的时候有一种</li>\n<li>5 为根节点的时候又两种</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>所以你会发现节点有两个的时候 f(2) = 2; f(1) = 1, 左右节点相乘就可以得到总数了<br>所以<br><code>f(2) = f(0) * f(1) + f(1) * f(0)</code><br><code>f(3) = f(0) * f(2) + f(1) * f(1) + f(2) * f(0)</code><br><code>f[4] = f(0) * f(3) + f(1) * f(2) + f(2) * f(1) + f(3) * f(0)</code></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> numTrees <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/unique-binary-search-trees/\" target=\"_blank\" rel=\"noopener\">96. 不同的二叉搜索树</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？</p>\n<pre><code>输入: 3\n输出: 5\n解释:\n给定 n = 3, 一共有 5 种不同结构的二叉搜索树:\n  1         3     3      2      1\n   \\       /     /      / \\      \\\n    3     2     1      1   3      2\n   /     /       \\                 \\\n  2     1         2                 3</code></pre><h2 id=\"搜索二叉树\"><a href=\"#搜索二叉树\" class=\"headerlink\" title=\"搜索二叉树\"></a>搜索二叉树</h2><p><strong>搜索二叉树：</strong> 左节点比根节点要小， 根节点永远比右节点要小。 <code>左 &lt; 根 &lt; 右</code></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><blockquote>\n<p>我们以 n = 5 为例子, [1, 2, 3, 4, 5]</p>\n</blockquote>\n<ul>\n<li>当以3为根节点时， 根据左节点永远比根节点小， 那么左节点只能为 <code>[1,2]</code>, 右节点为 <code>[4, 5]</code><ul>\n<li>当 [1,2] 为左节点时, 又分成了两种情况， 当1为根节点时，2 为右节点；当 2 为根节点时， 1为左节点</li>\n<li>当 [4,5] 为右节点时，跟上面类似</li>\n</ul>\n</li>\n<li>当以2 为根节点时，那么 左节点只有为 <code>[1]</code>, 右节点为 <code>[3,4,5]</code><ul>\n<li><code>[3,4,5]</code> 又可以以 3 或 4 或 5 做为根节点分析<ul>\n<li>3 为根节点 的时候为两种</li>\n<li>4 为根节点的时候有一种</li>\n<li>5 为根节点的时候又两种</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>所以你会发现节点有两个的时候 f(2) = 2; f(1) = 1, 左右节点相乘就可以得到总数了<br>所以<br><code>f(2) = f(0) * f(1) + f(1) * f(0)</code><br><code>f(3) = f(0) * f(2) + f(1) * f(1) + f(2) * f(0)</code><br><code>f[4] = f(0) * f(3) + f(1) * f(2) + f(2) * f(1) + f(3) * f(0)</code></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">var numTrees = function(n) {\n    const dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    dp[1] = 1;\n\n    for (let i = 2; i &lt;= n; ++i) {\n        for (let j = 1; j &lt;= i; ++j) {\n            dp[i] += dp[j - 1] * dp[i - j];\n        }\n    }\n    return dp[n];\n};\n</code></pre>\n"},{"title":"两个数组的交集 II","date":"2020-07-13T11:06:04.000Z","type":"algorithm","_content":"\n[两个数组的交集 II](https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/)\n\n## 题目描述\n\n就是给两个数组，求出他们的交集。\n\n**说明：**\n\n* 输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。\n* 我们可以不考虑输出结果的顺序。\n\n## 思路\n\n* 使用map 记录其中一个数组数值出现的次数。\n* 遍历另一个数组，判断当前数字是否在map中，是的话添加到结果集中，并且当前map[number] 的值减1， 不是的话，那代表不是交集\n\n```js\nvar intersect = function(nums1, nums2) {\n    let result = [];\n    let map = new Map();\n    for(let i = 0; i < nums1.length; i++) {\n        if(map.has(nums1[i])) {\n            map.set(nums1[i], map.get(nums1[i]) + 1)\n        } else {\n            map.set(nums1[i], 1)\n        }\n    }\n    for(let j = 0; j < nums2.length; j++ ) {\n        // 判断当前数字是否在map 中，并且当前map的值是否大于0， 大于0的意思是：map 中还有 没有取交集的数\n        if(map.has(nums2[j]) &&  map.get(nums2[j]) > 0 ) {\n            result.push(nums2[j]);\n            map.set(nums2[j], map.get(nums2[j]) - 1)\n        } \n    }\n    return result;\n};\n```\n\n## 进阶\n\n* 如果给定的数组已经排好序呢？你将如何优化你的算法？\n* 如果 nums1 的大小比 nums2 小很多，哪种方法更优？\n* 如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？\n\n这里只给一个想法吧，既然数组已经排序好了， 那我们就使用双指针的方法去解决这个问题，一个数组一个指针，如果两个指针所指的数相等，那么两个指针向后移，不相等的话判断哪个数值比较大，小的那个向后移，如此类推\n","source":"_posts/两个数组的交集-II.md","raw":"---\ntitle: 两个数组的交集 II\ndate: 2020-07-13 11:06:04\ntags: [algorithm-map]\ntype: algorithm\n---\n\n[两个数组的交集 II](https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/)\n\n## 题目描述\n\n就是给两个数组，求出他们的交集。\n\n**说明：**\n\n* 输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。\n* 我们可以不考虑输出结果的顺序。\n\n## 思路\n\n* 使用map 记录其中一个数组数值出现的次数。\n* 遍历另一个数组，判断当前数字是否在map中，是的话添加到结果集中，并且当前map[number] 的值减1， 不是的话，那代表不是交集\n\n```js\nvar intersect = function(nums1, nums2) {\n    let result = [];\n    let map = new Map();\n    for(let i = 0; i < nums1.length; i++) {\n        if(map.has(nums1[i])) {\n            map.set(nums1[i], map.get(nums1[i]) + 1)\n        } else {\n            map.set(nums1[i], 1)\n        }\n    }\n    for(let j = 0; j < nums2.length; j++ ) {\n        // 判断当前数字是否在map 中，并且当前map的值是否大于0， 大于0的意思是：map 中还有 没有取交集的数\n        if(map.has(nums2[j]) &&  map.get(nums2[j]) > 0 ) {\n            result.push(nums2[j]);\n            map.set(nums2[j], map.get(nums2[j]) - 1)\n        } \n    }\n    return result;\n};\n```\n\n## 进阶\n\n* 如果给定的数组已经排好序呢？你将如何优化你的算法？\n* 如果 nums1 的大小比 nums2 小很多，哪种方法更优？\n* 如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？\n\n这里只给一个想法吧，既然数组已经排序好了， 那我们就使用双指针的方法去解决这个问题，一个数组一个指针，如果两个指针所指的数相等，那么两个指针向后移，不相等的话判断哪个数值比较大，小的那个向后移，如此类推\n","slug":"两个数组的交集-II","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfq0027mroj58hs3xwz","content":"<p><a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/\" target=\"_blank\" rel=\"noopener\">两个数组的交集 II</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>就是给两个数组，求出他们的交集。</p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li>\n<li>我们可以不考虑输出结果的顺序。</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>使用map 记录其中一个数组数值出现的次数。</li>\n<li>遍历另一个数组，判断当前数字是否在map中，是的话添加到结果集中，并且当前map[number] 的值减1， 不是的话，那代表不是交集</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> intersect <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 判断当前数字是否在map 中，并且当前map的值是否大于0， 大于0的意思是：map 中还有 没有取交集的数</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>  map<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><ul>\n<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>\n<li>如果 nums1 的大小比 nums2 小很多，哪种方法更优？</li>\n<li>如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>\n</ul>\n<p>这里只给一个想法吧，既然数组已经排序好了， 那我们就使用双指针的方法去解决这个问题，一个数组一个指针，如果两个指针所指的数相等，那么两个指针向后移，不相等的话判断哪个数值比较大，小的那个向后移，如此类推</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/\" target=\"_blank\" rel=\"noopener\">两个数组的交集 II</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>就是给两个数组，求出他们的交集。</p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li>\n<li>我们可以不考虑输出结果的顺序。</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>使用map 记录其中一个数组数值出现的次数。</li>\n<li>遍历另一个数组，判断当前数字是否在map中，是的话添加到结果集中，并且当前map[number] 的值减1， 不是的话，那代表不是交集</li>\n</ul>\n<pre><code class=\"js\">var intersect = function(nums1, nums2) {\n    let result = [];\n    let map = new Map();\n    for(let i = 0; i &lt; nums1.length; i++) {\n        if(map.has(nums1[i])) {\n            map.set(nums1[i], map.get(nums1[i]) + 1)\n        } else {\n            map.set(nums1[i], 1)\n        }\n    }\n    for(let j = 0; j &lt; nums2.length; j++ ) {\n        // 判断当前数字是否在map 中，并且当前map的值是否大于0， 大于0的意思是：map 中还有 没有取交集的数\n        if(map.has(nums2[j]) &amp;&amp;  map.get(nums2[j]) &gt; 0 ) {\n            result.push(nums2[j]);\n            map.set(nums2[j], map.get(nums2[j]) - 1)\n        } \n    }\n    return result;\n};</code></pre>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><ul>\n<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>\n<li>如果 nums1 的大小比 nums2 小很多，哪种方法更优？</li>\n<li>如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>\n</ul>\n<p>这里只给一个想法吧，既然数组已经排序好了， 那我们就使用双指针的方法去解决这个问题，一个数组一个指针，如果两个指针所指的数相等，那么两个指针向后移，不相等的话判断哪个数值比较大，小的那个向后移，如此类推</p>\n"},{"title":"两数之和 II - 输入有序数组","date":"2020-07-20T16:06:00.000Z","type":"algorithm","_content":"\n[两数之和 II - 输入有序数组](https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/)\n\n## 题目描述\n\n给定一个已按照**升序排列** 的有序数组，找到两个数使得它们相加之和等于目标数。\n函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n\n说明：\n* 返回的下标值（index1 和 index2）不是从零开始的。\n* 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n> 输入: numbers = [2, 7, 11, 15], target = 9\n> 输出: [1,2]\n> 解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n\n\n## 代码\n\n```js\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    let start = 0;\n    let end = numbers.length - 1;\n\n    while(start < end) {\n        const temp = numbers[start] + numbers[end]\n        if(temp === target) {\n            return [start + 1, end + 1];\n        }\n        // 2 + 15 > 9  因为是有序的所以, 应该从 end 减小\n        if(temp > target) {\n            end--;\n        } else {\n            // 如果target  = 22,\n            // 2 + 15 < 22 那么应该从start 往后移动\n            start++\n        }\n    }\n    return [start + 1, end + 1]\n};\n```","source":"_posts/两数之和-II-输入有序数组.md","raw":"---\ntitle: '两数之和 II - 输入有序数组'\ndate: 2020-07-20 16:06:00\ntags: algorithm-双指针\ntype: algorithm\n---\n\n[两数之和 II - 输入有序数组](https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/)\n\n## 题目描述\n\n给定一个已按照**升序排列** 的有序数组，找到两个数使得它们相加之和等于目标数。\n函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n\n说明：\n* 返回的下标值（index1 和 index2）不是从零开始的。\n* 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n> 输入: numbers = [2, 7, 11, 15], target = 9\n> 输出: [1,2]\n> 解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n\n\n## 代码\n\n```js\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    let start = 0;\n    let end = numbers.length - 1;\n\n    while(start < end) {\n        const temp = numbers[start] + numbers[end]\n        if(temp === target) {\n            return [start + 1, end + 1];\n        }\n        // 2 + 15 > 9  因为是有序的所以, 应该从 end 减小\n        if(temp > target) {\n            end--;\n        } else {\n            // 如果target  = 22,\n            // 2 + 15 < 22 那么应该从start 往后移动\n            start++\n        }\n    }\n    return [start + 1, end + 1]\n};\n```","slug":"两数之和-II-输入有序数组","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfr002amroj70ht292f","content":"<p><a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\" target=\"_blank\" rel=\"noopener\">两数之和 II - 输入有序数组</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个已按照<strong>升序排列</strong> 的有序数组，找到两个数使得它们相加之和等于目标数。<br>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>\n<p>说明：</p>\n<ul>\n<li>返回的下标值（index1 和 index2）不是从零开始的。</li>\n<li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li>\n</ul>\n<blockquote>\n<p>输入: numbers = [2, 7, 11, 15], target = 9<br>输出: [1,2]<br>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p>\n</blockquote>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */</span>\n<span class=\"token keyword\">var</span> twoSum <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 2 + 15 > 9  因为是有序的所以, 应该从 end 减小</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 如果target  = 22,</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 2 + 15 &lt; 22 那么应该从start 往后移动</span>\n            start<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/\" target=\"_blank\" rel=\"noopener\">两数之和 II - 输入有序数组</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个已按照<strong>升序排列</strong> 的有序数组，找到两个数使得它们相加之和等于目标数。<br>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>\n<p>说明：</p>\n<ul>\n<li>返回的下标值（index1 和 index2）不是从零开始的。</li>\n<li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li>\n</ul>\n<blockquote>\n<p>输入: numbers = [2, 7, 11, 15], target = 9<br>输出: [1,2]<br>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p>\n</blockquote>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    let start = 0;\n    let end = numbers.length - 1;\n\n    while(start &lt; end) {\n        const temp = numbers[start] + numbers[end]\n        if(temp === target) {\n            return [start + 1, end + 1];\n        }\n        // 2 + 15 &gt; 9  因为是有序的所以, 应该从 end 减小\n        if(temp &gt; target) {\n            end--;\n        } else {\n            // 如果target  = 22,\n            // 2 + 15 &lt; 22 那么应该从start 往后移动\n            start++\n        }\n    }\n    return [start + 1, end + 1]\n};</code></pre>\n"},{"title":"二叉树的最大深度","date":"2020-07-30T13:36:08.000Z","type":"algorithm","_content":"\n[二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/)\n\n## 题目描述\n\n给定一个二叉树，找出其最大深度。\n\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n说明: 叶子节点是指没有子节点的节点。\n\n示例：\n给定二叉树 [3,9,20,null,null,15,7]，\n\n```html\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n## 分析\n\n* 题目用递归\n* 递归终止条件： 当当前树节点为空时，返回0\n* 要是根不为空，我们比较 左右节点，看左节点比较深还是右节点深\n\n\n## 代码\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    if(!root) {\n        return 0\n    } \n\n    return (1 + Math.max( maxDepth(root.left), maxDepth(root.right) )) \n};\n```\n","source":"_posts/二叉树的最大深度.md","raw":"---\ntitle: 二叉树的最大深度\ndate: 2020-07-30 13:36:08\ntags: [algorithm-二叉树, algorithm-递归]\ntype: algorithm\n---\n\n[二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/)\n\n## 题目描述\n\n给定一个二叉树，找出其最大深度。\n\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n说明: 叶子节点是指没有子节点的节点。\n\n示例：\n给定二叉树 [3,9,20,null,null,15,7]，\n\n```html\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n## 分析\n\n* 题目用递归\n* 递归终止条件： 当当前树节点为空时，返回0\n* 要是根不为空，我们比较 左右节点，看左节点比较深还是右节点深\n\n\n## 代码\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    if(!root) {\n        return 0\n    } \n\n    return (1 + Math.max( maxDepth(root.left), maxDepth(root.right) )) \n};\n```\n","slug":"二叉树的最大深度","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfv002emrojdu46blj4","content":"<p><a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener\">二叉树的最大深度</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个二叉树，找出其最大深度。</p>\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\n<p>说明: 叶子节点是指没有子节点的节点。</p>\n<p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p>\n<pre class=\" language-html\"><code class=\"language-html\">    3\n   / \\\n  9  20\n    /  \\\n   15   7</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>题目用递归</li>\n<li>递归终止条件： 当当前树节点为空时，返回0</li>\n<li>要是根不为空，我们比较 左右节点，看左节点比较深还是右节点深</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> maxDepth <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span> \n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener\">二叉树的最大深度</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个二叉树，找出其最大深度。</p>\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\n<p>说明: 叶子节点是指没有子节点的节点。</p>\n<p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p>\n<pre><code class=\"html\">    3\n   / \\\n  9  20\n    /  \\\n   15   7</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>题目用递归</li>\n<li>递归终止条件： 当当前树节点为空时，返回0</li>\n<li>要是根不为空，我们比较 左右节点，看左节点比较深还是右节点深</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    if(!root) {\n        return 0\n    } \n\n    return (1 + Math.max( maxDepth(root.left), maxDepth(root.right) )) \n};</code></pre>\n"},{"title":"二进制求和","date":"2020-06-23T17:57:20.000Z","type":"algorithm","_content":"\n[67. 二进制求和](https://leetcode-cn.com/problems/add-binary/)\n\n## 题目描述\n\n给定两个二进制字符串，两个相加返回结果\n\n> 输入: a = \"1010\", b = \"1011\"\n> 输出: \"10101\"\n\n\n## 解决方案\n\n将指针指向字符串最后一位，两两相加再加上仅为，注意处理进位，两字符串的当前值为1时\n    * 当前进位为0时，那么1 + 1 + 0 = 2 ，二进制要进位，当前值应该为2 % 2 = 0。进位变为1\n    * 当前仅为为1时，那么1 + 1 + 1 = 3 ，二进制要进位，当前值应为 3 % 2 = 1。 进位为1\n    * **将当前值放到数组头部**\n\n|       | i = 0 | i = 1 | i = 2 | i = 3 |\n|:-----:| :---: | :---: | :---: | :---: |\n| a数组 |       | 1      | 1     |   1   |\n| b数组 |       | 1     | 0     |    1   |\n| result| 1     | 0     | 0     | 0     |\n\n## 代码\n\n```js\nvar addBinary = function(a, b) {\n    let aLength = a.length;\n    let bLength = b.length;\n\n    let i = aLength - 1;\n    let j = bLength - 1;\n    \n    let result = [];\n    let add = 0; // 进位\n\n    while(i >= 0 || j >= 0) {\n        let atemp = i >= 0 ? a[i] * 1 : 0;  // 对i判定大于0为了防止数组溢出\n        let btemp = j >= 0 ? b[j] * 1 : 0;\n\n        let current =  atemp + btemp + add;\n        if(current >= 2) {\n            add = Math.floor(current / 2);\n        } else {\n            add = 0;\n        }\n        result.unshift(current % 2); // 将当前值放入到数组头\n\n        i--;\n        j--;\n    }\n    // 退出循环后如果数组为1表示有进位，那也要加到数组头\n    if(add != 0) {\n        result.unshift(add)\n    }\n\n    return result.join(\"\")\n};\n```","source":"_posts/二进制求和.md","raw":"---\ntitle: 二进制求和\ndate: 2020-06-23 17:57:20\ntype: algorithm\ntags: algorithm-双指针\n---\n\n[67. 二进制求和](https://leetcode-cn.com/problems/add-binary/)\n\n## 题目描述\n\n给定两个二进制字符串，两个相加返回结果\n\n> 输入: a = \"1010\", b = \"1011\"\n> 输出: \"10101\"\n\n\n## 解决方案\n\n将指针指向字符串最后一位，两两相加再加上仅为，注意处理进位，两字符串的当前值为1时\n    * 当前进位为0时，那么1 + 1 + 0 = 2 ，二进制要进位，当前值应该为2 % 2 = 0。进位变为1\n    * 当前仅为为1时，那么1 + 1 + 1 = 3 ，二进制要进位，当前值应为 3 % 2 = 1。 进位为1\n    * **将当前值放到数组头部**\n\n|       | i = 0 | i = 1 | i = 2 | i = 3 |\n|:-----:| :---: | :---: | :---: | :---: |\n| a数组 |       | 1      | 1     |   1   |\n| b数组 |       | 1     | 0     |    1   |\n| result| 1     | 0     | 0     | 0     |\n\n## 代码\n\n```js\nvar addBinary = function(a, b) {\n    let aLength = a.length;\n    let bLength = b.length;\n\n    let i = aLength - 1;\n    let j = bLength - 1;\n    \n    let result = [];\n    let add = 0; // 进位\n\n    while(i >= 0 || j >= 0) {\n        let atemp = i >= 0 ? a[i] * 1 : 0;  // 对i判定大于0为了防止数组溢出\n        let btemp = j >= 0 ? b[j] * 1 : 0;\n\n        let current =  atemp + btemp + add;\n        if(current >= 2) {\n            add = Math.floor(current / 2);\n        } else {\n            add = 0;\n        }\n        result.unshift(current % 2); // 将当前值放入到数组头\n\n        i--;\n        j--;\n    }\n    // 退出循环后如果数组为1表示有进位，那也要加到数组头\n    if(add != 0) {\n        result.unshift(add)\n    }\n\n    return result.join(\"\")\n};\n```","slug":"二进制求和","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfw002imroj6to12opy","content":"<p><a href=\"https://leetcode-cn.com/problems/add-binary/\" target=\"_blank\" rel=\"noopener\">67. 二进制求和</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定两个二进制字符串，两个相加返回结果</p>\n<blockquote>\n<p>输入: a = “1010”, b = “1011”<br>输出: “10101”</p>\n</blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>将指针指向字符串最后一位，两两相加再加上仅为，注意处理进位，两字符串的当前值为1时<br>    * 当前进位为0时，那么1 + 1 + 0 = 2 ，二进制要进位，当前值应该为2 % 2 = 0。进位变为1<br>    * 当前仅为为1时，那么1 + 1 + 1 = 3 ，二进制要进位，当前值应为 3 % 2 = 1。 进位为1<br>    * <strong>将当前值放到数组头部</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">i = 0</th>\n<th align=\"center\">i = 1</th>\n<th align=\"center\">i = 2</th>\n<th align=\"center\">i = 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a数组</td>\n<td align=\"center\"></td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">b数组</td>\n<td align=\"center\"></td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">result</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> addBinary <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> aLength <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> bLength <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> aLength <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> bLength <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> add <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 进位</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> atemp <span class=\"token operator\">=</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 对i判定大于0为了防止数组溢出</span>\n        <span class=\"token keyword\">let</span> btemp <span class=\"token operator\">=</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span>  atemp <span class=\"token operator\">+</span> btemp <span class=\"token operator\">+</span> add<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            add <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            add <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 将当前值放入到数组头</span>\n\n        i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 退出循环后如果数组为1表示有进位，那也要加到数组头</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>add <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/add-binary/\" target=\"_blank\" rel=\"noopener\">67. 二进制求和</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定两个二进制字符串，两个相加返回结果</p>\n<blockquote>\n<p>输入: a = “1010”, b = “1011”<br>输出: “10101”</p>\n</blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>将指针指向字符串最后一位，两两相加再加上仅为，注意处理进位，两字符串的当前值为1时<br>    * 当前进位为0时，那么1 + 1 + 0 = 2 ，二进制要进位，当前值应该为2 % 2 = 0。进位变为1<br>    * 当前仅为为1时，那么1 + 1 + 1 = 3 ，二进制要进位，当前值应为 3 % 2 = 1。 进位为1<br>    * <strong>将当前值放到数组头部</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">i = 0</th>\n<th align=\"center\">i = 1</th>\n<th align=\"center\">i = 2</th>\n<th align=\"center\">i = 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a数组</td>\n<td align=\"center\"></td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">b数组</td>\n<td align=\"center\"></td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">result</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">var addBinary = function(a, b) {\n    let aLength = a.length;\n    let bLength = b.length;\n\n    let i = aLength - 1;\n    let j = bLength - 1;\n\n    let result = [];\n    let add = 0; // 进位\n\n    while(i &gt;= 0 || j &gt;= 0) {\n        let atemp = i &gt;= 0 ? a[i] * 1 : 0;  // 对i判定大于0为了防止数组溢出\n        let btemp = j &gt;= 0 ? b[j] * 1 : 0;\n\n        let current =  atemp + btemp + add;\n        if(current &gt;= 2) {\n            add = Math.floor(current / 2);\n        } else {\n            add = 0;\n        }\n        result.unshift(current % 2); // 将当前值放入到数组头\n\n        i--;\n        j--;\n    }\n    // 退出循环后如果数组为1表示有进位，那也要加到数组头\n    if(add != 0) {\n        result.unshift(add)\n    }\n\n    return result.join(&quot;&quot;)\n};</code></pre>\n"},{"title":"关于this","date":"2020-08-11T15:19:51.000Z","_content":"\n参考 《你不知道的JavaScript上卷》\n\n我们经常会对this的指向存在疑惑，搞不清楚是指向window，还是本身。\n\n## this 的解析\n\n* **this是在运行时进行绑定的，并不是在编写时绑定，**\n* **它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式**\n\n## this 规则\n\n我们要清楚知道**在函数的执行过程中调用位置是如何确定this的绑定对象的**。\n\n我们分析 函数是属于以下四种规则的哪一种既可。\n\n* 默认绑定\n* 隐式绑定\n* 显示绑定\n* 硬绑定\n\n### 默认绑定\n\n默认绑定是最常用的一种方式，**可以把这条规则看作是无法应用其他规则时的默认规则。**\n\n```js\n// 例子\n\nfunction foo() {\n    console.log(this); // this 指向的是window\n}\n\n// 此时我们调用的位置在全局，那么foo 的this指向的是window\nfoo();\n```\n\n**注意：**默认绑定在严格模式下，会报错。 严格模式下，默认绑定会将this绑定到undefined\n\n\n### 隐式绑定\n\n一般来说隐式绑定就是`obj.func()`这样子。但我们看看下面的注意事项\n\n```js\n// 这里要注意foo的声明方式\nfunction foo() {\n    console.log(this.a) // 123\n}\n\nconst obj = {\n    a: \"123\",\n    foo: foo\n}\n//obj对象引用了foo, 调用位置会使用obj上下文来引用函数，因此你可以说函数被调用时obj对象“拥有”或者“包含”它。\nobj.foo();\n```\n\n**隐式调用：** 当函数引用有上下文的时候，函数的this会绑定到上下文对象中。\n\n但是对象属性引用链中**只有上一层或者说最后一层在调用位置中起作用**\n\n```js\n// 例子\nfunction foo() {\n    console.log(this.a) \n}\n\nconst obj = {\n    a: \"123\",\n    foo: foo\n}\n\nconst obj2 = {\n    a: \"2\",   // \n    obj: obj\n}\n\n// 这里是最后一层起作用了\nobj2.obj.foo();  // 123\n```\n\n**隐式丢失**\n\n简单说就是函数丢失了原来的绑定对象，然后**函数使用默认绑定的方式**，导致了this指向`window`或者是`undefined`\n\n```js\n\nfunction foo() {\n    console.log(this.a) \n}\n\nconst obj = {\n    a: \"123\",\n    foo: foo\n}\nvar a = \"windows\";\n\n// 虽然 obj.foo 引用的是foo 函数，但是它等同于使用foo(), 这样看的话他的调用方式是全局的，所以使用默认绑定\nconst test = obj.foo;\ntest()  // windows,  \n```\n\n另外还有**回调函数**会造成this的丢失，所以我们一般用`call`或者`apply`去改变this的指向\n\n```js\n// 例子\nfunction foo() {\n    console.log(this.a) \n}\n\nconst obj = {\n    a: \"123\",\n    foo: foo\n}\nvar a = \"windows\";\n\nfunction doFoo(fn) {\n    // fn => foo\n    fn()\n}\n\ndoFoo(obj.foo)\n```\n\n### 显示绑定\n\n显示绑定主要是使用了 `call` 和 `apply`, 我们可以理解 当函数调用是，this 的指向更改为`call`函数或者`apply`函数的**第一个参数**\n\n\n```js\nvar obj = {\n    a: \"123\"\n}\n\nfunction foo() {\n    console.log(this.a)\n}\n\nfoo.call(obj); // 123， 我们理解成 当foo函数调用的时候 this 指向 obj\n```\n**我们可以理解为 foo.call(obj) => foo(), 但是this指向了obj**\n\n我们看下一个最常用的操作\n\n```js\n// 辅助函数\nfunction bind(fn, obj) {\n    return function() {\n        return fn.apply(obj, arguments);\n    }\n} \n\nfunction foo(params) {\n    console.log(this.a, params)\n}\n\nvar obj = {\n    a: \"123\"\n}\n\nvar test = bind(foo, obj); // bind函数返回的是function\ntest(\"hahah\") // 输出： 123，hahah\n```\n\n\n### new 绑定\n\n使用new来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。\n\n1. 创建（或者说构造）一个全新的对象。\n1. 这个新对象会被执行[[Prototype]]连接。\n1. 这个新对象会绑定到函数调用的this。\n1. 如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。\n\n我们先看看new的实现源码\n\n```js\nfunction new(fn, ...args) {\n    let obj = {};\n    obj._proto_ = fn.prototype; \n    let res = fn.call(obj, ...args);\n    \n    let isObject = typeof res === 'object' && typeof res !== null;\n    let isFunction = typeof res === 'function';\n    return isObject || isFunction ? res : obj;\n}\n```\n\n看到上面第三步，`call` 改变了`fn` this的指向\n\n```js\nfunction foo(a) {\n    this.a = a\n}\n\nvar obj = new foo(2)\nconsole.log(obj.a); // 2\n\n```\n\n## 优先级\n\nnew > 显式绑定 > 隐式绑定 > 默认绑定\n\n\n## 我们看看 如何实现 apply 和 call方法\n\n\n### call\n```js\n// call 方法类似, call 方法实现方式跟下面一样\nvar foo = {\n    value: 1,\n    bar: function() {\n        console.log(this.value)\n    }\n}\nfoo.bar() // 1\n\n// fn.call(obj, 1, 2)\nFunction.prototype.imitateCall = function (context) {\n    // 这里的context 同等于上面的 foo， 如果context没有那么我们指定到window\n    context = context || window    \n   \n    // 当前this 指的是 function\n    context.invokFn = this    \n    // 截取作用域对象参数后面的参数\n    let args = [...arguments].slice(1)\n    // 执行调用函数，记录拿取返回值\n    let result = context.invokFn(...args)\n    // 销毁调用函数，以免作用域污染\n    Reflect.deleteProperty(context, 'invokFn')\n    return result\n}\n\n```\n\n### apply\n\n```js\n// fn.apply(obj, [1, 2])\nFunction.prototype.imitateApply = function (context) {\n    // 这里的context 同等于上面的 foo， 如果context没有那么我们指定到window\n    context = context || window    \n    // 当前this 指的是 function\n    context.invokFn = this    \n    // 截取作用域对象参数后面的参数\n    let result\n    if (arguments[1]) {\n        result = context.invokFn(...arguments[1])\n    } else {\n        result = context.invokFn()\n    }\n    // 销毁调用函数，以免作用域污染\n    Reflect.deleteProperty(context, 'invokFn')\n    return result\n}\n```\n","source":"_posts/关于this.md","raw":"---\ntitle: 关于this\ndate: 2020-08-11 15:19:51\ntags: javascript\ncategories: javascript\n---\n\n参考 《你不知道的JavaScript上卷》\n\n我们经常会对this的指向存在疑惑，搞不清楚是指向window，还是本身。\n\n## this 的解析\n\n* **this是在运行时进行绑定的，并不是在编写时绑定，**\n* **它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式**\n\n## this 规则\n\n我们要清楚知道**在函数的执行过程中调用位置是如何确定this的绑定对象的**。\n\n我们分析 函数是属于以下四种规则的哪一种既可。\n\n* 默认绑定\n* 隐式绑定\n* 显示绑定\n* 硬绑定\n\n### 默认绑定\n\n默认绑定是最常用的一种方式，**可以把这条规则看作是无法应用其他规则时的默认规则。**\n\n```js\n// 例子\n\nfunction foo() {\n    console.log(this); // this 指向的是window\n}\n\n// 此时我们调用的位置在全局，那么foo 的this指向的是window\nfoo();\n```\n\n**注意：**默认绑定在严格模式下，会报错。 严格模式下，默认绑定会将this绑定到undefined\n\n\n### 隐式绑定\n\n一般来说隐式绑定就是`obj.func()`这样子。但我们看看下面的注意事项\n\n```js\n// 这里要注意foo的声明方式\nfunction foo() {\n    console.log(this.a) // 123\n}\n\nconst obj = {\n    a: \"123\",\n    foo: foo\n}\n//obj对象引用了foo, 调用位置会使用obj上下文来引用函数，因此你可以说函数被调用时obj对象“拥有”或者“包含”它。\nobj.foo();\n```\n\n**隐式调用：** 当函数引用有上下文的时候，函数的this会绑定到上下文对象中。\n\n但是对象属性引用链中**只有上一层或者说最后一层在调用位置中起作用**\n\n```js\n// 例子\nfunction foo() {\n    console.log(this.a) \n}\n\nconst obj = {\n    a: \"123\",\n    foo: foo\n}\n\nconst obj2 = {\n    a: \"2\",   // \n    obj: obj\n}\n\n// 这里是最后一层起作用了\nobj2.obj.foo();  // 123\n```\n\n**隐式丢失**\n\n简单说就是函数丢失了原来的绑定对象，然后**函数使用默认绑定的方式**，导致了this指向`window`或者是`undefined`\n\n```js\n\nfunction foo() {\n    console.log(this.a) \n}\n\nconst obj = {\n    a: \"123\",\n    foo: foo\n}\nvar a = \"windows\";\n\n// 虽然 obj.foo 引用的是foo 函数，但是它等同于使用foo(), 这样看的话他的调用方式是全局的，所以使用默认绑定\nconst test = obj.foo;\ntest()  // windows,  \n```\n\n另外还有**回调函数**会造成this的丢失，所以我们一般用`call`或者`apply`去改变this的指向\n\n```js\n// 例子\nfunction foo() {\n    console.log(this.a) \n}\n\nconst obj = {\n    a: \"123\",\n    foo: foo\n}\nvar a = \"windows\";\n\nfunction doFoo(fn) {\n    // fn => foo\n    fn()\n}\n\ndoFoo(obj.foo)\n```\n\n### 显示绑定\n\n显示绑定主要是使用了 `call` 和 `apply`, 我们可以理解 当函数调用是，this 的指向更改为`call`函数或者`apply`函数的**第一个参数**\n\n\n```js\nvar obj = {\n    a: \"123\"\n}\n\nfunction foo() {\n    console.log(this.a)\n}\n\nfoo.call(obj); // 123， 我们理解成 当foo函数调用的时候 this 指向 obj\n```\n**我们可以理解为 foo.call(obj) => foo(), 但是this指向了obj**\n\n我们看下一个最常用的操作\n\n```js\n// 辅助函数\nfunction bind(fn, obj) {\n    return function() {\n        return fn.apply(obj, arguments);\n    }\n} \n\nfunction foo(params) {\n    console.log(this.a, params)\n}\n\nvar obj = {\n    a: \"123\"\n}\n\nvar test = bind(foo, obj); // bind函数返回的是function\ntest(\"hahah\") // 输出： 123，hahah\n```\n\n\n### new 绑定\n\n使用new来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。\n\n1. 创建（或者说构造）一个全新的对象。\n1. 这个新对象会被执行[[Prototype]]连接。\n1. 这个新对象会绑定到函数调用的this。\n1. 如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。\n\n我们先看看new的实现源码\n\n```js\nfunction new(fn, ...args) {\n    let obj = {};\n    obj._proto_ = fn.prototype; \n    let res = fn.call(obj, ...args);\n    \n    let isObject = typeof res === 'object' && typeof res !== null;\n    let isFunction = typeof res === 'function';\n    return isObject || isFunction ? res : obj;\n}\n```\n\n看到上面第三步，`call` 改变了`fn` this的指向\n\n```js\nfunction foo(a) {\n    this.a = a\n}\n\nvar obj = new foo(2)\nconsole.log(obj.a); // 2\n\n```\n\n## 优先级\n\nnew > 显式绑定 > 隐式绑定 > 默认绑定\n\n\n## 我们看看 如何实现 apply 和 call方法\n\n\n### call\n```js\n// call 方法类似, call 方法实现方式跟下面一样\nvar foo = {\n    value: 1,\n    bar: function() {\n        console.log(this.value)\n    }\n}\nfoo.bar() // 1\n\n// fn.call(obj, 1, 2)\nFunction.prototype.imitateCall = function (context) {\n    // 这里的context 同等于上面的 foo， 如果context没有那么我们指定到window\n    context = context || window    \n   \n    // 当前this 指的是 function\n    context.invokFn = this    \n    // 截取作用域对象参数后面的参数\n    let args = [...arguments].slice(1)\n    // 执行调用函数，记录拿取返回值\n    let result = context.invokFn(...args)\n    // 销毁调用函数，以免作用域污染\n    Reflect.deleteProperty(context, 'invokFn')\n    return result\n}\n\n```\n\n### apply\n\n```js\n// fn.apply(obj, [1, 2])\nFunction.prototype.imitateApply = function (context) {\n    // 这里的context 同等于上面的 foo， 如果context没有那么我们指定到window\n    context = context || window    \n    // 当前this 指的是 function\n    context.invokFn = this    \n    // 截取作用域对象参数后面的参数\n    let result\n    if (arguments[1]) {\n        result = context.invokFn(...arguments[1])\n    } else {\n        result = context.invokFn()\n    }\n    // 销毁调用函数，以免作用域污染\n    Reflect.deleteProperty(context, 'invokFn')\n    return result\n}\n```\n","slug":"关于this","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfx002lmroj8epo5k72","content":"<p>参考 《你不知道的JavaScript上卷》</p>\n<p>我们经常会对this的指向存在疑惑，搞不清楚是指向window，还是本身。</p>\n<h2 id=\"this-的解析\"><a href=\"#this-的解析\" class=\"headerlink\" title=\"this 的解析\"></a>this 的解析</h2><ul>\n<li><strong>this是在运行时进行绑定的，并不是在编写时绑定，</strong></li>\n<li><strong>它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式</strong></li>\n</ul>\n<h2 id=\"this-规则\"><a href=\"#this-规则\" class=\"headerlink\" title=\"this 规则\"></a>this 规则</h2><p>我们要清楚知道<strong>在函数的执行过程中调用位置是如何确定this的绑定对象的</strong>。</p>\n<p>我们分析 函数是属于以下四种规则的哪一种既可。</p>\n<ul>\n<li>默认绑定</li>\n<li>隐式绑定</li>\n<li>显示绑定</li>\n<li>硬绑定</li>\n</ul>\n<h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><p>默认绑定是最常用的一种方式，<strong>可以把这条规则看作是无法应用其他规则时的默认规则。</strong></p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 例子</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// this 指向的是window</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 此时我们调用的位置在全局，那么foo 的this指向的是window</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>注意：</strong>默认绑定在严格模式下，会报错。 严格模式下，默认绑定会将this绑定到undefined</p>\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><p>一般来说隐式绑定就是<code>obj.func()</code>这样子。但我们看看下面的注意事项</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 这里要注意foo的声明方式</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n    foo<span class=\"token punctuation\">:</span> foo\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//obj对象引用了foo, 调用位置会使用obj上下文来引用函数，因此你可以说函数被调用时obj对象“拥有”或者“包含”它。</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>隐式调用：</strong> 当函数引用有上下文的时候，函数的this会绑定到上下文对象中。</p>\n<p>但是对象属性引用链中<strong>只有上一层或者说最后一层在调用位置中起作用</strong></p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 例子</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n    foo<span class=\"token punctuation\">:</span> foo\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\" spellcheck=\"true\">// </span>\n    obj<span class=\"token punctuation\">:</span> obj\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 这里是最后一层起作用了</span>\nobj2<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 123</span></code></pre>\n<p><strong>隐式丢失</strong></p>\n<p>简单说就是函数丢失了原来的绑定对象，然后<strong>函数使用默认绑定的方式</strong>，导致了this指向<code>window</code>或者是<code>undefined</code></p>\n<pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n    foo<span class=\"token punctuation\">:</span> foo\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"windows\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 虽然 obj.foo 引用的是foo 函数，但是它等同于使用foo(), 这样看的话他的调用方式是全局的，所以使用默认绑定</span>\n<span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// windows,  </span></code></pre>\n<p>另外还有<strong>回调函数</strong>会造成this的丢失，所以我们一般用<code>call</code>或者<code>apply</code>去改变this的指向</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 例子</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n    foo<span class=\"token punctuation\">:</span> foo\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"windows\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// fn => foo</span>\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"显示绑定\"><a href=\"#显示绑定\" class=\"headerlink\" title=\"显示绑定\"></a>显示绑定</h3><p>显示绑定主要是使用了 <code>call</code> 和 <code>apply</code>, 我们可以理解 当函数调用是，this 的指向更改为<code>call</code>函数或者<code>apply</code>函数的<strong>第一个参数</strong></p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 123， 我们理解成 当foo函数调用的时候 this 指向 obj</span></code></pre>\n<p><strong>我们可以理解为 foo.call(obj) =&gt; foo(), 但是this指向了obj</strong></p>\n<p>我们看下一个最常用的操作</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 辅助函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// bind函数返回的是function</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hahah\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 输出： 123，hahah</span></code></pre>\n<h3 id=\"new-绑定\"><a href=\"#new-绑定\" class=\"headerlink\" title=\"new 绑定\"></a>new 绑定</h3><p>使用new来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p>\n<ol>\n<li>创建（或者说构造）一个全新的对象。</li>\n<li>这个新对象会被执行[[Prototype]]连接。</li>\n<li>这个新对象会绑定到函数调用的this。</li>\n<li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li>\n</ol>\n<p>我们先看看new的实现源码</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    obj<span class=\"token punctuation\">.</span>_proto_ <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> isObject <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> res <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> res <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> isFunction <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> res <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> isObject <span class=\"token operator\">||</span> isFunction <span class=\"token operator\">?</span> res <span class=\"token punctuation\">:</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>看到上面第三步，<code>call</code> 改变了<code>fn</code> this的指向</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 2</span>\n</code></pre>\n<h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h2><p>new &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定</p>\n<h2 id=\"我们看看-如何实现-apply-和-call方法\"><a href=\"#我们看看-如何实现-apply-和-call方法\" class=\"headerlink\" title=\"我们看看 如何实现 apply 和 call方法\"></a>我们看看 如何实现 apply 和 call方法</h2><h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// call 方法类似, call 方法实现方式跟下面一样</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 1</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// fn.call(obj, 1, 2)</span>\nFunction<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>imitateCall <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这里的context 同等于上面的 foo， 如果context没有那么我们指定到window</span>\n    context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window    \n\n    <span class=\"token comment\" spellcheck=\"true\">// 当前this 指的是 function</span>\n    context<span class=\"token punctuation\">.</span>invokFn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>    \n    <span class=\"token comment\" spellcheck=\"true\">// 截取作用域对象参数后面的参数</span>\n    <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 执行调用函数，记录拿取返回值</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">invokFn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 销毁调用函数，以免作用域污染</span>\n    Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">'invokFn'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// fn.apply(obj, [1, 2])</span>\nFunction<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>imitateApply <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这里的context 同等于上面的 foo， 如果context没有那么我们指定到window</span>\n    context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window    \n    <span class=\"token comment\" spellcheck=\"true\">// 当前this 指的是 function</span>\n    context<span class=\"token punctuation\">.</span>invokFn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>    \n    <span class=\"token comment\" spellcheck=\"true\">// 截取作用域对象参数后面的参数</span>\n    <span class=\"token keyword\">let</span> result\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">invokFn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">invokFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 销毁调用函数，以免作用域污染</span>\n    Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">'invokFn'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>参考 《你不知道的JavaScript上卷》</p>\n<p>我们经常会对this的指向存在疑惑，搞不清楚是指向window，还是本身。</p>\n<h2 id=\"this-的解析\"><a href=\"#this-的解析\" class=\"headerlink\" title=\"this 的解析\"></a>this 的解析</h2><ul>\n<li><strong>this是在运行时进行绑定的，并不是在编写时绑定，</strong></li>\n<li><strong>它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式</strong></li>\n</ul>\n<h2 id=\"this-规则\"><a href=\"#this-规则\" class=\"headerlink\" title=\"this 规则\"></a>this 规则</h2><p>我们要清楚知道<strong>在函数的执行过程中调用位置是如何确定this的绑定对象的</strong>。</p>\n<p>我们分析 函数是属于以下四种规则的哪一种既可。</p>\n<ul>\n<li>默认绑定</li>\n<li>隐式绑定</li>\n<li>显示绑定</li>\n<li>硬绑定</li>\n</ul>\n<h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><p>默认绑定是最常用的一种方式，<strong>可以把这条规则看作是无法应用其他规则时的默认规则。</strong></p>\n<pre><code class=\"js\">// 例子\n\nfunction foo() {\n    console.log(this); // this 指向的是window\n}\n\n// 此时我们调用的位置在全局，那么foo 的this指向的是window\nfoo();</code></pre>\n<p><strong>注意：</strong>默认绑定在严格模式下，会报错。 严格模式下，默认绑定会将this绑定到undefined</p>\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><p>一般来说隐式绑定就是<code>obj.func()</code>这样子。但我们看看下面的注意事项</p>\n<pre><code class=\"js\">// 这里要注意foo的声明方式\nfunction foo() {\n    console.log(this.a) // 123\n}\n\nconst obj = {\n    a: &quot;123&quot;,\n    foo: foo\n}\n//obj对象引用了foo, 调用位置会使用obj上下文来引用函数，因此你可以说函数被调用时obj对象“拥有”或者“包含”它。\nobj.foo();</code></pre>\n<p><strong>隐式调用：</strong> 当函数引用有上下文的时候，函数的this会绑定到上下文对象中。</p>\n<p>但是对象属性引用链中<strong>只有上一层或者说最后一层在调用位置中起作用</strong></p>\n<pre><code class=\"js\">// 例子\nfunction foo() {\n    console.log(this.a) \n}\n\nconst obj = {\n    a: &quot;123&quot;,\n    foo: foo\n}\n\nconst obj2 = {\n    a: &quot;2&quot;,   // \n    obj: obj\n}\n\n// 这里是最后一层起作用了\nobj2.obj.foo();  // 123</code></pre>\n<p><strong>隐式丢失</strong></p>\n<p>简单说就是函数丢失了原来的绑定对象，然后<strong>函数使用默认绑定的方式</strong>，导致了this指向<code>window</code>或者是<code>undefined</code></p>\n<pre><code class=\"js\">\nfunction foo() {\n    console.log(this.a) \n}\n\nconst obj = {\n    a: &quot;123&quot;,\n    foo: foo\n}\nvar a = &quot;windows&quot;;\n\n// 虽然 obj.foo 引用的是foo 函数，但是它等同于使用foo(), 这样看的话他的调用方式是全局的，所以使用默认绑定\nconst test = obj.foo;\ntest()  // windows,  </code></pre>\n<p>另外还有<strong>回调函数</strong>会造成this的丢失，所以我们一般用<code>call</code>或者<code>apply</code>去改变this的指向</p>\n<pre><code class=\"js\">// 例子\nfunction foo() {\n    console.log(this.a) \n}\n\nconst obj = {\n    a: &quot;123&quot;,\n    foo: foo\n}\nvar a = &quot;windows&quot;;\n\nfunction doFoo(fn) {\n    // fn =&gt; foo\n    fn()\n}\n\ndoFoo(obj.foo)</code></pre>\n<h3 id=\"显示绑定\"><a href=\"#显示绑定\" class=\"headerlink\" title=\"显示绑定\"></a>显示绑定</h3><p>显示绑定主要是使用了 <code>call</code> 和 <code>apply</code>, 我们可以理解 当函数调用是，this 的指向更改为<code>call</code>函数或者<code>apply</code>函数的<strong>第一个参数</strong></p>\n<pre><code class=\"js\">var obj = {\n    a: &quot;123&quot;\n}\n\nfunction foo() {\n    console.log(this.a)\n}\n\nfoo.call(obj); // 123， 我们理解成 当foo函数调用的时候 this 指向 obj</code></pre>\n<p><strong>我们可以理解为 foo.call(obj) =&gt; foo(), 但是this指向了obj</strong></p>\n<p>我们看下一个最常用的操作</p>\n<pre><code class=\"js\">// 辅助函数\nfunction bind(fn, obj) {\n    return function() {\n        return fn.apply(obj, arguments);\n    }\n} \n\nfunction foo(params) {\n    console.log(this.a, params)\n}\n\nvar obj = {\n    a: &quot;123&quot;\n}\n\nvar test = bind(foo, obj); // bind函数返回的是function\ntest(&quot;hahah&quot;) // 输出： 123，hahah</code></pre>\n<h3 id=\"new-绑定\"><a href=\"#new-绑定\" class=\"headerlink\" title=\"new 绑定\"></a>new 绑定</h3><p>使用new来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p>\n<ol>\n<li>创建（或者说构造）一个全新的对象。</li>\n<li>这个新对象会被执行[[Prototype]]连接。</li>\n<li>这个新对象会绑定到函数调用的this。</li>\n<li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li>\n</ol>\n<p>我们先看看new的实现源码</p>\n<pre><code class=\"js\">function new(fn, ...args) {\n    let obj = {};\n    obj._proto_ = fn.prototype; \n    let res = fn.call(obj, ...args);\n\n    let isObject = typeof res === &#39;object&#39; &amp;&amp; typeof res !== null;\n    let isFunction = typeof res === &#39;function&#39;;\n    return isObject || isFunction ? res : obj;\n}</code></pre>\n<p>看到上面第三步，<code>call</code> 改变了<code>fn</code> this的指向</p>\n<pre><code class=\"js\">function foo(a) {\n    this.a = a\n}\n\nvar obj = new foo(2)\nconsole.log(obj.a); // 2\n</code></pre>\n<h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h2><p>new &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定</p>\n<h2 id=\"我们看看-如何实现-apply-和-call方法\"><a href=\"#我们看看-如何实现-apply-和-call方法\" class=\"headerlink\" title=\"我们看看 如何实现 apply 和 call方法\"></a>我们看看 如何实现 apply 和 call方法</h2><h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><pre><code class=\"js\">// call 方法类似, call 方法实现方式跟下面一样\nvar foo = {\n    value: 1,\n    bar: function() {\n        console.log(this.value)\n    }\n}\nfoo.bar() // 1\n\n// fn.call(obj, 1, 2)\nFunction.prototype.imitateCall = function (context) {\n    // 这里的context 同等于上面的 foo， 如果context没有那么我们指定到window\n    context = context || window    \n\n    // 当前this 指的是 function\n    context.invokFn = this    \n    // 截取作用域对象参数后面的参数\n    let args = [...arguments].slice(1)\n    // 执行调用函数，记录拿取返回值\n    let result = context.invokFn(...args)\n    // 销毁调用函数，以免作用域污染\n    Reflect.deleteProperty(context, &#39;invokFn&#39;)\n    return result\n}\n</code></pre>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><pre><code class=\"js\">// fn.apply(obj, [1, 2])\nFunction.prototype.imitateApply = function (context) {\n    // 这里的context 同等于上面的 foo， 如果context没有那么我们指定到window\n    context = context || window    \n    // 当前this 指的是 function\n    context.invokFn = this    \n    // 截取作用域对象参数后面的参数\n    let result\n    if (arguments[1]) {\n        result = context.invokFn(...arguments[1])\n    } else {\n        result = context.invokFn()\n    }\n    // 销毁调用函数，以免作用域污染\n    Reflect.deleteProperty(context, &#39;invokFn&#39;)\n    return result\n}</code></pre>\n"},{"title":"dumi markdown 增强插件","date":"2023-09-18T10:17:43.000Z","_content":"\n## 背景\n\n在编写`markdown` 的时候， 一般我们写`tsx` 代码的时候在`markdown`中并不是很友好，是没有提示的， 此时，我们需要单独开一个`ts` 文件，通过某种方式引入并渲染成对应的内容\n\n## 如何做\n\n* 确定指令, 例如 `<<< ./snippets/install.bash`\n* 用`ast` 分析`markdown` , [链接](https://astexplorer.net/)\n* 对 `paragraph` 节点进行处理，\n  * 如果是以 `<<<` 开头的，那么记录并处理该节点\n  * 如果不是，那么跳过该节点\n\n* 遍历需要处理的节点后，处理文件路径，补充绝对路径\n  * 判断文件是否存在，如果是，那么读取文件内容\n  * 不存在则跳过\n\n* 最后 `ast` 通过调用父节点修改当前子节点内容\n\n![avatar](https://pic.imgdb.cn/item/650d026ec458853aef1ef7f4.png)\n\n## 进阶\n\n我们引用文件时，可能只需要文件的部分内容，比如, 我们只需要用到`#region snippet` 包裹的内容\n\n```js\n// #region snippet\nfunction foo() {\n  // ..\n}\n// #endregion snippet\n\nexport default foo;\n\n```\n\n>  `<<< ./snippets/install.bash#snippet`\n\n那么我们只需要在 处理文件内容时, 进行节点查找/ 正则匹配即可\n\n\n## 源码\n\n[仓库](https://github.com/Wxh16144/dumi-plugin-code-snippets#readme)","source":"_posts/写一个dumi markdown 插件.md","raw":"---\ntitle: dumi markdown 增强插件\ndate: 2023-9-18 10:17:43\ntags: dumi\ncategory: [dumi]\n---\n\n## 背景\n\n在编写`markdown` 的时候， 一般我们写`tsx` 代码的时候在`markdown`中并不是很友好，是没有提示的， 此时，我们需要单独开一个`ts` 文件，通过某种方式引入并渲染成对应的内容\n\n## 如何做\n\n* 确定指令, 例如 `<<< ./snippets/install.bash`\n* 用`ast` 分析`markdown` , [链接](https://astexplorer.net/)\n* 对 `paragraph` 节点进行处理，\n  * 如果是以 `<<<` 开头的，那么记录并处理该节点\n  * 如果不是，那么跳过该节点\n\n* 遍历需要处理的节点后，处理文件路径，补充绝对路径\n  * 判断文件是否存在，如果是，那么读取文件内容\n  * 不存在则跳过\n\n* 最后 `ast` 通过调用父节点修改当前子节点内容\n\n![avatar](https://pic.imgdb.cn/item/650d026ec458853aef1ef7f4.png)\n\n## 进阶\n\n我们引用文件时，可能只需要文件的部分内容，比如, 我们只需要用到`#region snippet` 包裹的内容\n\n```js\n// #region snippet\nfunction foo() {\n  // ..\n}\n// #endregion snippet\n\nexport default foo;\n\n```\n\n>  `<<< ./snippets/install.bash#snippet`\n\n那么我们只需要在 处理文件内容时, 进行节点查找/ 正则匹配即可\n\n\n## 源码\n\n[仓库](https://github.com/Wxh16144/dumi-plugin-code-snippets#readme)","slug":"写一个dumi markdown 插件","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrfy002pmrojfg8pej7m","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在编写<code>markdown</code> 的时候， 一般我们写<code>tsx</code> 代码的时候在<code>markdown</code>中并不是很友好，是没有提示的， 此时，我们需要单独开一个<code>ts</code> 文件，通过某种方式引入并渲染成对应的内容</p>\n<h2 id=\"如何做\"><a href=\"#如何做\" class=\"headerlink\" title=\"如何做\"></a>如何做</h2><ul>\n<li><p>确定指令, 例如 <code>&lt;&lt;&lt; ./snippets/install.bash</code></p>\n</li>\n<li><p>用<code>ast</code> 分析<code>markdown</code> , <a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n</li>\n<li><p>对 <code>paragraph</code> 节点进行处理，</p>\n<ul>\n<li>如果是以 <code>&lt;&lt;&lt;</code> 开头的，那么记录并处理该节点</li>\n<li>如果不是，那么跳过该节点</li>\n</ul>\n</li>\n<li><p>遍历需要处理的节点后，处理文件路径，补充绝对路径</p>\n<ul>\n<li>判断文件是否存在，如果是，那么读取文件内容</li>\n<li>不存在则跳过</li>\n</ul>\n</li>\n<li><p>最后 <code>ast</code> 通过调用父节点修改当前子节点内容</p>\n</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/650d026ec458853aef1ef7f4.png\" alt=\"avatar\"></p>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p>我们引用文件时，可能只需要文件的部分内容，比如, 我们只需要用到<code>#region snippet</code> 包裹的内容</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// #region snippet</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ..</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// #endregion snippet</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> foo<span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p> <code>&lt;&lt;&lt; ./snippets/install.bash#snippet</code></p>\n</blockquote>\n<p>那么我们只需要在 处理文件内容时, 进行节点查找/ 正则匹配即可</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p><a href=\"https://github.com/Wxh16144/dumi-plugin-code-snippets#readme\" target=\"_blank\" rel=\"noopener\">仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在编写<code>markdown</code> 的时候， 一般我们写<code>tsx</code> 代码的时候在<code>markdown</code>中并不是很友好，是没有提示的， 此时，我们需要单独开一个<code>ts</code> 文件，通过某种方式引入并渲染成对应的内容</p>\n<h2 id=\"如何做\"><a href=\"#如何做\" class=\"headerlink\" title=\"如何做\"></a>如何做</h2><ul>\n<li><p>确定指令, 例如 <code>&lt;&lt;&lt; ./snippets/install.bash</code></p>\n</li>\n<li><p>用<code>ast</code> 分析<code>markdown</code> , <a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n</li>\n<li><p>对 <code>paragraph</code> 节点进行处理，</p>\n<ul>\n<li>如果是以 <code>&lt;&lt;&lt;</code> 开头的，那么记录并处理该节点</li>\n<li>如果不是，那么跳过该节点</li>\n</ul>\n</li>\n<li><p>遍历需要处理的节点后，处理文件路径，补充绝对路径</p>\n<ul>\n<li>判断文件是否存在，如果是，那么读取文件内容</li>\n<li>不存在则跳过</li>\n</ul>\n</li>\n<li><p>最后 <code>ast</code> 通过调用父节点修改当前子节点内容</p>\n</li>\n</ul>\n<p><img src=\"https://pic.imgdb.cn/item/650d026ec458853aef1ef7f4.png\" alt=\"avatar\"></p>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p>我们引用文件时，可能只需要文件的部分内容，比如, 我们只需要用到<code>#region snippet</code> 包裹的内容</p>\n<pre><code class=\"js\">// #region snippet\nfunction foo() {\n  // ..\n}\n// #endregion snippet\n\nexport default foo;\n</code></pre>\n<blockquote>\n<p> <code>&lt;&lt;&lt; ./snippets/install.bash#snippet</code></p>\n</blockquote>\n<p>那么我们只需要在 处理文件内容时, 进行节点查找/ 正则匹配即可</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p><a href=\"https://github.com/Wxh16144/dumi-plugin-code-snippets#readme\" target=\"_blank\" rel=\"noopener\">仓库</a></p>\n"},{"title":"删除链表的倒数第N个节点","date":"2020-07-20T15:10:32.000Z","type":"algorithm","_content":"\n[删除链表的倒数第N个节点](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/)\n\n## 题目描述\n\n删除链表中倒数的第n个节点\n\n示例：\n\n> 给定一个链表: 1->2->3->4->5, 和 n = 2.\n\n> 当删除了倒数第二个节点后，链表变为 1->2->3->5.\n\n\n## 分析\n\n* 先遍历一次获得链表长度length\n* 然后length - n 获取target, 当前target < 0 时， p->next = p->next->next\n\n## 源码\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    let root = new ListNode(\"head\");\n    root.next = head;\n\n    let getLengthsPointer = head;\n\n    let nums = 0;\n    while(getLengthsPointer) {\n        nums++;\n        getLengthsPointer = getLengthsPointer.next;\n    }\n\n    let pointer = root;\n    let target = nums - n;\n\n    while(pointer) {\n        target--;\n        if(target < 0) {\n            pointer.next =  pointer.next.next ? pointer.next.next : null;\n            break;\n        }\n        pointer = pointer.next\n    }\n    return root.next;\n};\n```\n\n## 进阶\n\n一次遍历, **思想：** 用双指针，第一个指针与第二个指针 相隔n, 当第一个指针到达结尾时，那么第二个指针也到了倒数第n个数的前一个了。\n我们用上面 1 -> 2 -> 3 -> 4 -> 5 走一遍， n 为2\n\n* first 指向 3 , second 指向 head， 同时向后移动\n* 当first 指向到 null的时候，second 走到了 3，此时可以将second.next 指向 second.next.next \n\n\n```js\nvar removeNthFromEnd = function(head, n) {\n    let root = new ListNode(\"head\");\n    root.next = head;\n\n    let first = root;\n    let second = root;\n  \n    for (let i = 1; i <= n + 1; i++) {\n        first = first.next;\n    }\n    \n    while (first != null) {\n        first = first.next;\n        second = second.next;\n    }\n    second.next = second.next.next;\n    return dummy.next;\n\n\n}\n```","source":"_posts/删除链表的倒数第N个节点.md","raw":"---\ntitle: 删除链表的倒数第N个节点\ndate: 2020-07-20 15:10:32\ntags: [algorithm-链表, algorithm-双指针]\ntype: algorithm\n---\n\n[删除链表的倒数第N个节点](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/)\n\n## 题目描述\n\n删除链表中倒数的第n个节点\n\n示例：\n\n> 给定一个链表: 1->2->3->4->5, 和 n = 2.\n\n> 当删除了倒数第二个节点后，链表变为 1->2->3->5.\n\n\n## 分析\n\n* 先遍历一次获得链表长度length\n* 然后length - n 获取target, 当前target < 0 时， p->next = p->next->next\n\n## 源码\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    let root = new ListNode(\"head\");\n    root.next = head;\n\n    let getLengthsPointer = head;\n\n    let nums = 0;\n    while(getLengthsPointer) {\n        nums++;\n        getLengthsPointer = getLengthsPointer.next;\n    }\n\n    let pointer = root;\n    let target = nums - n;\n\n    while(pointer) {\n        target--;\n        if(target < 0) {\n            pointer.next =  pointer.next.next ? pointer.next.next : null;\n            break;\n        }\n        pointer = pointer.next\n    }\n    return root.next;\n};\n```\n\n## 进阶\n\n一次遍历, **思想：** 用双指针，第一个指针与第二个指针 相隔n, 当第一个指针到达结尾时，那么第二个指针也到了倒数第n个数的前一个了。\n我们用上面 1 -> 2 -> 3 -> 4 -> 5 走一遍， n 为2\n\n* first 指向 3 , second 指向 head， 同时向后移动\n* 当first 指向到 null的时候，second 走到了 3，此时可以将second.next 指向 second.next.next \n\n\n```js\nvar removeNthFromEnd = function(head, n) {\n    let root = new ListNode(\"head\");\n    root.next = head;\n\n    let first = root;\n    let second = root;\n  \n    for (let i = 1; i <= n + 1; i++) {\n        first = first.next;\n    }\n    \n    while (first != null) {\n        first = first.next;\n        second = second.next;\n    }\n    second.next = second.next.next;\n    return dummy.next;\n\n\n}\n```","slug":"删除链表的倒数第N个节点","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrg0002smroj1bhwhwy0","content":"<p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\" rel=\"noopener\">删除链表的倒数第N个节点</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>删除链表中倒数的第n个节点</p>\n<p>示例：</p>\n<blockquote>\n<p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</p>\n</blockquote>\n<blockquote>\n<p>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>先遍历一次获得链表长度length</li>\n<li>然后length - n 获取target, 当前target &lt; 0 时， p-&gt;next = p-&gt;next-&gt;next</li>\n</ul>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */</span>\n<span class=\"token keyword\">var</span> removeNthFromEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"head\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> getLengthsPointer <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> nums <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>getLengthsPointer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nums<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        getLengthsPointer <span class=\"token operator\">=</span> getLengthsPointer<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> pointer <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> nums <span class=\"token operator\">-</span> n<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pointer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pointer<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span>  pointer<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">?</span> pointer<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        pointer <span class=\"token operator\">=</span> pointer<span class=\"token punctuation\">.</span>next\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p>一次遍历, <strong>思想：</strong> 用双指针，第一个指针与第二个指针 相隔n, 当第一个指针到达结尾时，那么第二个指针也到了倒数第n个数的前一个了。<br>我们用上面 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 走一遍， n 为2</p>\n<ul>\n<li>first 指向 3 , second 指向 head， 同时向后移动</li>\n<li>当first 指向到 null的时候，second 走到了 3，此时可以将second.next 指向 second.next.next </li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> removeNthFromEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"head\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        first <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        first <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        second <span class=\"token operator\">=</span> second<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    second<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> second<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\" rel=\"noopener\">删除链表的倒数第N个节点</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>删除链表中倒数的第n个节点</p>\n<p>示例：</p>\n<blockquote>\n<p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</p>\n</blockquote>\n<blockquote>\n<p>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>先遍历一次获得链表长度length</li>\n<li>然后length - n 获取target, 当前target &lt; 0 时， p-&gt;next = p-&gt;next-&gt;next</li>\n</ul>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><pre><code class=\"js\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    let root = new ListNode(&quot;head&quot;);\n    root.next = head;\n\n    let getLengthsPointer = head;\n\n    let nums = 0;\n    while(getLengthsPointer) {\n        nums++;\n        getLengthsPointer = getLengthsPointer.next;\n    }\n\n    let pointer = root;\n    let target = nums - n;\n\n    while(pointer) {\n        target--;\n        if(target &lt; 0) {\n            pointer.next =  pointer.next.next ? pointer.next.next : null;\n            break;\n        }\n        pointer = pointer.next\n    }\n    return root.next;\n};</code></pre>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p>一次遍历, <strong>思想：</strong> 用双指针，第一个指针与第二个指针 相隔n, 当第一个指针到达结尾时，那么第二个指针也到了倒数第n个数的前一个了。<br>我们用上面 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 走一遍， n 为2</p>\n<ul>\n<li>first 指向 3 , second 指向 head， 同时向后移动</li>\n<li>当first 指向到 null的时候，second 走到了 3，此时可以将second.next 指向 second.next.next </li>\n</ul>\n<pre><code class=\"js\">var removeNthFromEnd = function(head, n) {\n    let root = new ListNode(&quot;head&quot;);\n    root.next = head;\n\n    let first = root;\n    let second = root;\n\n    for (let i = 1; i &lt;= n + 1; i++) {\n        first = first.next;\n    }\n\n    while (first != null) {\n        first = first.next;\n        second = second.next;\n    }\n    second.next = second.next.next;\n    return dummy.next;\n\n\n}</code></pre>\n"},{"title":"剑指 Offer 55 - II. 平衡二叉树","date":"2020-08-12T16:27:13.000Z","type":"algorithm","_content":"\n[剑指 Offer 55 - II. 平衡二叉树](https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/)\n\n## 题目描述\n\n输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。\n\n示例 1:\n\n给定二叉树 [3,9,20,null,null,15,7]\n\n```html\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n返回 true 。\n\n\n## 分析\n\n* 我们每次获取左右节点的最大深度，然后相减要是 <= 1\n* 在递归左右节点\n\n## 代码\n\n```js\nvar isBalanced = function(root) {\n    if(!root) {\n        return true\n    }\n\n    let left = dept(root.left);\n    let right = dept(root.right);\n    return Math.abs(left - right) <= 1 && isBalanced(root.left) && isBalanced(root.right)\n}\n\nvar dept = function(root) {\n    if(!root) {\n        return 0;\n    }\n\n    return Math.max( dept(root.left), dept(root.right) ) + 1\n}\n```\n","source":"_posts/剑指-Offer-55-II-平衡二叉树.md","raw":"---\ntitle: 剑指 Offer 55 - II. 平衡二叉树\ndate: 2020-08-12 16:27:13\ntags: [algorithm-二叉树, algorithm-深度遍历搜索]\ntype: algorithm\n---\n\n[剑指 Offer 55 - II. 平衡二叉树](https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/)\n\n## 题目描述\n\n输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。\n\n示例 1:\n\n给定二叉树 [3,9,20,null,null,15,7]\n\n```html\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n返回 true 。\n\n\n## 分析\n\n* 我们每次获取左右节点的最大深度，然后相减要是 <= 1\n* 在递归左右节点\n\n## 代码\n\n```js\nvar isBalanced = function(root) {\n    if(!root) {\n        return true\n    }\n\n    let left = dept(root.left);\n    let right = dept(root.right);\n    return Math.abs(left - right) <= 1 && isBalanced(root.left) && isBalanced(root.right)\n}\n\nvar dept = function(root) {\n    if(!root) {\n        return 0;\n    }\n\n    return Math.max( dept(root.left), dept(root.right) ) + 1\n}\n```\n","slug":"剑指-Offer-55-II-平衡二叉树","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrg1002wmroj4jakdoqw","content":"<p><a href=\"https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 55 - II. 平衡二叉树</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>\n<p>示例 1:</p>\n<p>给定二叉树 [3,9,20,null,null,15,7]</p>\n<pre class=\" language-html\"><code class=\"language-html\">    3\n   / \\\n  9  20\n    /  \\\n   15   7</code></pre>\n<p>返回 true 。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>我们每次获取左右节点的最大深度，然后相减要是 &lt;= 1</li>\n<li>在递归左右节点</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> isBalanced <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token function\">dept</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token function\">dept</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">-</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> dept <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span> <span class=\"token function\">dept</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dept</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/\" target=\"_blank\" rel=\"noopener\">剑指 Offer 55 - II. 平衡二叉树</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>\n<p>示例 1:</p>\n<p>给定二叉树 [3,9,20,null,null,15,7]</p>\n<pre><code class=\"html\">    3\n   / \\\n  9  20\n    /  \\\n   15   7</code></pre>\n<p>返回 true 。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>我们每次获取左右节点的最大深度，然后相减要是 &lt;= 1</li>\n<li>在递归左右节点</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">var isBalanced = function(root) {\n    if(!root) {\n        return true\n    }\n\n    let left = dept(root.left);\n    let right = dept(root.right);\n    return Math.abs(left - right) &lt;= 1 &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right)\n}\n\nvar dept = function(root) {\n    if(!root) {\n        return 0;\n    }\n\n    return Math.max( dept(root.left), dept(root.right) ) + 1\n}</code></pre>\n"},{"title":"原型与继承","date":"2020-06-01T17:10:32.000Z","_content":"\n## prototype\n\n我们知道每个函数都有一个**prototype**指向他的原型对象。\n我们可以这么理解： 每个对象在创建时就与另一个对象产生关联，其实就是对另一个对象的引用。而js 再找**对象属性**时会顺着原型链一直往上找，直到无法找到为止\n\n来看一下\n\n```js\nfunction Person(name) {\n    this.name = name\n}\n\n// 控制台打印一下， => 是结果\nPerson.prototype  => { constructor: f }\n\n// 而 Person.prototype.constructor 又指向与构造函数自己\nPerson.prototype.constructor == Person  // true\n```\n\n用下图表示：\n![1591078556.jpg](https://i.loli.net/2020/06/02/5nJ2Tr4xRo6Wsk3.png)\n\n\n## __proto__\n\n每个对象都有一个`__proto__`属性，除了null外，而这个属性又指向他的原型对象\n\n验证一下\n\n```js\nfunction Person(name) {\n    this.name = name\n}\n\nvar person = new Person(\"Bill\");\n\n// 控制台打印一下， person.__proto__\nperson.__proto__ => { constructor: f }\n\n// 我们从上面[prototype]看 Person.prototype 也是指向 { constructor: f }, 那么他们是否是同一个东西呢?\nperson.__proto__ == Person.prototype   // 结果是 true 的\n\n// 上面一样的话，那么\nperson.__proto__.contructor == Person // true\n```\n\n用图表示一下就是\n\n![1591082949_1_.jpg](https://i.loli.net/2020/06/02/ZjH7Ty2tclun65e.png)\n\n## new 操作符\n\n> 这里解释一下new 操作符，其实跟原型有关\n\n首先搞清楚`new` 做了什么\n\n* 创建对象\n* 将对象的原型指向函数的原型\n* 改变 `this` 上下文\n* 返回这个对象\n\n```js\nfunction newObj(fn, ...args) {\n    var obj = {};\n    obj.__proto__ = fn.prototype;\n    let res = fn.call(obj, ...args);\n    \n    let isObject = typeof res === 'object' && typeof res !== null;\n    let isFunction = typeof res === 'function';\n    return isObject || isFunction ? res : obj;\n\n    // 这里其实可以直接返回obj\n    // 但防止 fn 这个方法直接返回this, 以下这种情况\n\n    // function fn(name) {\n    //     this.name = name;\n    //     return this;\n    // }\n} \n\nfunction Person(name) {\n    this.name = name;\n}\n// 测试一下\nperson = newObj(Person, \"Bill\")\n\n// 打印一下 person\n// Person {name: Bill}\n```\n\n## Fn.prototype.__proto__\n\n* 我们说**Fn.prototype** 是一个原型对象，我们上面说只要是对象都有`__proto__`, 那么`Fn.prototype.__proto`指向的是什么呢？\n\n答案是： `Object.prototype`\n\n```js\nObject.prototype == Person.prototype.__proto__  // true\n```\n\n所以有了下图\n\n![1591086668_1_.jpg](https://i.loli.net/2020/06/02/1g8zioGeFZwuf6n.png)\n\n到此原型基本已经讲完了\n\n\n## 继承\n\n下面写继承\n\n### 原型链继承\n\n```js\nfunction Parent(){\n    this.role = \"parent\"\n    this.list = [1,2,3]\n}\n\nParent.prototype.getRole = function() {\n    return this.role\n}\n\nfunction Child(name) {\n    this.name = name\n}\n\nChild.prototype = new Parent();\n\nChild.prototype.getName = function() {\n    return this.name;\n}\n\nvar children = new Child(\"admin\");\nchildren.getName()\nchildren.getRole()\n\nvar parent = new Parent();\nconsole.log(parent.role)  // parent\n\nChild.prototype.value = \"123\"\nconsole.log(parent.value);  // \"undefined\"\nconsole.log(children.value) // “123”\n\n// 以下是原型链的缺点\nvar children2 = new Child(\"child2\");\nconsole.log(children.list, children2.list) // [1,2,3], [1,2,3,4]\nchildren.list.push(4);\nconsole.log(children.list, children2.list) // [1,2,3,4], [1,2,3,4]\n```\n\n看下图\n\n![1591092645_1_.jpg](https://i.loli.net/2020/06/02/XJg9vL2CWi5FKRU.png)\n\n* 当执行了 `Child.prototype = new Parent()`, **我们说找属性的话,会顺着原型链去找**, 比如`children`要找`getRole`,那么他会一直找，`Child.prototype.__proto__`下有`getRole`, 这就是继承\n* 当执行了 `Child.prototype.value = \"123\"`, `children`实例也拥有了**value** 。\n* **缺点**: \n    * 只要在某个子类下改变了**父类**的**引用类型**的值，那么**子类**都会改变，这样做就**不能做到相互独立**了\n    * 无法实现父类构造函数属性的赋值\n\n\n### 使用call，改变this 作用域\n\n```js\nfunction Parent() {\n    this.role = \"parent\"\n}\n\nfunction Child(role, name) {\n    Parent.call(this, role)\n    this.name = name;\n}\n\nvar children = new Child(\"children\", \"哈哈哈\");\n\n// 注意\nParent.prototype.getRole = function() {\n    return this.role;\n}\n\n// 上面原型方法，子类是无法继承的，即children没有getRole 方法\n```\n\n**优点：**\n* 解决了原型继承无法向父类赋值的问题\n* 可以继承多个构造函数属性（call多个）；\n\n**缺点：**\n* 只能继承父类构造函数的属性。**原型链新创建的无法被继承**\n* 无法实现构造函数的复用。（每次用每次都要重新调用）\n* 每个新实例都有父类构造函数的副本，臃肿。\n\n### 组合模式\n\n将call方式和原型链方式组合起来\n\n```js\nfunction Parent(role) {\n    this.role = role\n}\n\nParent.prototype.value = \"test\";\n\nfunction Child(role, name) {\n    Parent.call(this, role);\n    this.name = name;\n}\n\nChild.prototype = new Parent();\n\nvar children = new Child(\"child\", \"admin\")\n```\n\n**优点：**\n\n* 可以继承父类原型上的属性，可以传参，可复用；\n* 每个新实例引入的构造函数属性是私有的；\n\n**缺点：**\n* 调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数；\n\n\n### 寄生式继承\n\n```js\nfunction Parent(role) {\n    this.role = role;\n    this.list = [1,2,3];\n}\n\nParent.prototype.value = \"123\"\n\n// 原型式继承\nfunction _extend(obj) {\n    function F(){};\n    F.prototype = obj;  // F.prototype = new Parent()  -> 还是回到原型链继承\n    return new F();     // 这里像不像 原型链继承上面的 new Child();\n}\n\nvar parent = new Parent();  // 获取父类实例\n\n// 以上是原型式继承，以下给原型继承在套个壳子传递参数\nfunction wrap(obj, name, role){\n    var child = _extend(obj);   \n    child.role = role;\n    child.name = name;\n    return child;\n}\nvar child = wrap(parent, 'test', \"child\");\nconsole.log(child.role)  // \"test\"\nconsole.log(child.value) // \"123\"\n\nvar child1 = wrap(parent, \"Bill\", \"child1\");\nconsole.log(child1.list) // [1,2,3]\n\nchild1.list.push(456);   \nconsole.log(child1.list) // [1,2,3,456]\nconsole.log(child.list)  // [1,2,3,456] \n```\n\n看上面\n* 又回到了**原型链继承**的缺点之一了，对于**父类引用类型**的，一旦做了修改，子类的都会发生改变\n\n###  寄生组合式继承\n\n```js\nfunction Parent(role) {\n    this.role = role;\n    this.list = [1,2,3];\n}\n\nParent.prototype.value = \"123\"\n\nfunction Child(name, role) {\n    Parent.call(this, role)  // 等于有了父类构造函数的副本\n    this.name = name;\n}\n\nfunction _extend(obj) {\n    function F(){};\n    F.prototype = obj;  // F.prototype = new Parent()  -> 还是回到原型链继承\n    return new F();     // 这里像不像 原型链继承上面的 new Child();\n}\n\nvar extendFn = _extend(Parent.prototype);\nChild.prototype = extendFn;\n\nextendFn.constructor = Child;\nvar children = new Child(\"test\", \"child\");\n\n```\n我们看下图\n![1591157016_1_.jpg](https://i.loli.net/2020/06/03/gN4HcF98ymQ7UpA.png)\n\n上面与下面其实大致一样,\n\n```js\nfunction F(){};\nF.prototype = Parent.prototype;\nfunction Child() {\n    Parent.call(this);\n}\nChild.prototype = new F();  // 是不是有点像组合模式\n```\n\n```js\n// 寄生组合模式理想版\nfunction inheritPrototype(subType, superType){\n    var prototype = Object.create(superType.prototype); //创建对象\n    prototype.constructor = subType; //增强对象\n    subType.prototype = prototype; //指定对象\n}\nfunction SuperType(name){\n    this.name = name;\n    this.colors = [\"red\", \"blue\", \"green\"];\n}\nSuperType.prototype.sayName = function(){\n    alert(this.name);\n};\nfunction SubType(name, age){\n    SuperType.call(this, name);\n    this.age = age;\n}\ninheritPrototype(SubType, SuperType);//实现继承\nSubType.prototype.sayAge = function(){\n    alert(this.age);\n}\n```","source":"_posts/原型与继承.md","raw":"---\ntitle: 原型与继承\ndate: 2020-06-01 17:10:32\ntags: js\ncategory: js\n---\n\n## prototype\n\n我们知道每个函数都有一个**prototype**指向他的原型对象。\n我们可以这么理解： 每个对象在创建时就与另一个对象产生关联，其实就是对另一个对象的引用。而js 再找**对象属性**时会顺着原型链一直往上找，直到无法找到为止\n\n来看一下\n\n```js\nfunction Person(name) {\n    this.name = name\n}\n\n// 控制台打印一下， => 是结果\nPerson.prototype  => { constructor: f }\n\n// 而 Person.prototype.constructor 又指向与构造函数自己\nPerson.prototype.constructor == Person  // true\n```\n\n用下图表示：\n![1591078556.jpg](https://i.loli.net/2020/06/02/5nJ2Tr4xRo6Wsk3.png)\n\n\n## __proto__\n\n每个对象都有一个`__proto__`属性，除了null外，而这个属性又指向他的原型对象\n\n验证一下\n\n```js\nfunction Person(name) {\n    this.name = name\n}\n\nvar person = new Person(\"Bill\");\n\n// 控制台打印一下， person.__proto__\nperson.__proto__ => { constructor: f }\n\n// 我们从上面[prototype]看 Person.prototype 也是指向 { constructor: f }, 那么他们是否是同一个东西呢?\nperson.__proto__ == Person.prototype   // 结果是 true 的\n\n// 上面一样的话，那么\nperson.__proto__.contructor == Person // true\n```\n\n用图表示一下就是\n\n![1591082949_1_.jpg](https://i.loli.net/2020/06/02/ZjH7Ty2tclun65e.png)\n\n## new 操作符\n\n> 这里解释一下new 操作符，其实跟原型有关\n\n首先搞清楚`new` 做了什么\n\n* 创建对象\n* 将对象的原型指向函数的原型\n* 改变 `this` 上下文\n* 返回这个对象\n\n```js\nfunction newObj(fn, ...args) {\n    var obj = {};\n    obj.__proto__ = fn.prototype;\n    let res = fn.call(obj, ...args);\n    \n    let isObject = typeof res === 'object' && typeof res !== null;\n    let isFunction = typeof res === 'function';\n    return isObject || isFunction ? res : obj;\n\n    // 这里其实可以直接返回obj\n    // 但防止 fn 这个方法直接返回this, 以下这种情况\n\n    // function fn(name) {\n    //     this.name = name;\n    //     return this;\n    // }\n} \n\nfunction Person(name) {\n    this.name = name;\n}\n// 测试一下\nperson = newObj(Person, \"Bill\")\n\n// 打印一下 person\n// Person {name: Bill}\n```\n\n## Fn.prototype.__proto__\n\n* 我们说**Fn.prototype** 是一个原型对象，我们上面说只要是对象都有`__proto__`, 那么`Fn.prototype.__proto`指向的是什么呢？\n\n答案是： `Object.prototype`\n\n```js\nObject.prototype == Person.prototype.__proto__  // true\n```\n\n所以有了下图\n\n![1591086668_1_.jpg](https://i.loli.net/2020/06/02/1g8zioGeFZwuf6n.png)\n\n到此原型基本已经讲完了\n\n\n## 继承\n\n下面写继承\n\n### 原型链继承\n\n```js\nfunction Parent(){\n    this.role = \"parent\"\n    this.list = [1,2,3]\n}\n\nParent.prototype.getRole = function() {\n    return this.role\n}\n\nfunction Child(name) {\n    this.name = name\n}\n\nChild.prototype = new Parent();\n\nChild.prototype.getName = function() {\n    return this.name;\n}\n\nvar children = new Child(\"admin\");\nchildren.getName()\nchildren.getRole()\n\nvar parent = new Parent();\nconsole.log(parent.role)  // parent\n\nChild.prototype.value = \"123\"\nconsole.log(parent.value);  // \"undefined\"\nconsole.log(children.value) // “123”\n\n// 以下是原型链的缺点\nvar children2 = new Child(\"child2\");\nconsole.log(children.list, children2.list) // [1,2,3], [1,2,3,4]\nchildren.list.push(4);\nconsole.log(children.list, children2.list) // [1,2,3,4], [1,2,3,4]\n```\n\n看下图\n\n![1591092645_1_.jpg](https://i.loli.net/2020/06/02/XJg9vL2CWi5FKRU.png)\n\n* 当执行了 `Child.prototype = new Parent()`, **我们说找属性的话,会顺着原型链去找**, 比如`children`要找`getRole`,那么他会一直找，`Child.prototype.__proto__`下有`getRole`, 这就是继承\n* 当执行了 `Child.prototype.value = \"123\"`, `children`实例也拥有了**value** 。\n* **缺点**: \n    * 只要在某个子类下改变了**父类**的**引用类型**的值，那么**子类**都会改变，这样做就**不能做到相互独立**了\n    * 无法实现父类构造函数属性的赋值\n\n\n### 使用call，改变this 作用域\n\n```js\nfunction Parent() {\n    this.role = \"parent\"\n}\n\nfunction Child(role, name) {\n    Parent.call(this, role)\n    this.name = name;\n}\n\nvar children = new Child(\"children\", \"哈哈哈\");\n\n// 注意\nParent.prototype.getRole = function() {\n    return this.role;\n}\n\n// 上面原型方法，子类是无法继承的，即children没有getRole 方法\n```\n\n**优点：**\n* 解决了原型继承无法向父类赋值的问题\n* 可以继承多个构造函数属性（call多个）；\n\n**缺点：**\n* 只能继承父类构造函数的属性。**原型链新创建的无法被继承**\n* 无法实现构造函数的复用。（每次用每次都要重新调用）\n* 每个新实例都有父类构造函数的副本，臃肿。\n\n### 组合模式\n\n将call方式和原型链方式组合起来\n\n```js\nfunction Parent(role) {\n    this.role = role\n}\n\nParent.prototype.value = \"test\";\n\nfunction Child(role, name) {\n    Parent.call(this, role);\n    this.name = name;\n}\n\nChild.prototype = new Parent();\n\nvar children = new Child(\"child\", \"admin\")\n```\n\n**优点：**\n\n* 可以继承父类原型上的属性，可以传参，可复用；\n* 每个新实例引入的构造函数属性是私有的；\n\n**缺点：**\n* 调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数；\n\n\n### 寄生式继承\n\n```js\nfunction Parent(role) {\n    this.role = role;\n    this.list = [1,2,3];\n}\n\nParent.prototype.value = \"123\"\n\n// 原型式继承\nfunction _extend(obj) {\n    function F(){};\n    F.prototype = obj;  // F.prototype = new Parent()  -> 还是回到原型链继承\n    return new F();     // 这里像不像 原型链继承上面的 new Child();\n}\n\nvar parent = new Parent();  // 获取父类实例\n\n// 以上是原型式继承，以下给原型继承在套个壳子传递参数\nfunction wrap(obj, name, role){\n    var child = _extend(obj);   \n    child.role = role;\n    child.name = name;\n    return child;\n}\nvar child = wrap(parent, 'test', \"child\");\nconsole.log(child.role)  // \"test\"\nconsole.log(child.value) // \"123\"\n\nvar child1 = wrap(parent, \"Bill\", \"child1\");\nconsole.log(child1.list) // [1,2,3]\n\nchild1.list.push(456);   \nconsole.log(child1.list) // [1,2,3,456]\nconsole.log(child.list)  // [1,2,3,456] \n```\n\n看上面\n* 又回到了**原型链继承**的缺点之一了，对于**父类引用类型**的，一旦做了修改，子类的都会发生改变\n\n###  寄生组合式继承\n\n```js\nfunction Parent(role) {\n    this.role = role;\n    this.list = [1,2,3];\n}\n\nParent.prototype.value = \"123\"\n\nfunction Child(name, role) {\n    Parent.call(this, role)  // 等于有了父类构造函数的副本\n    this.name = name;\n}\n\nfunction _extend(obj) {\n    function F(){};\n    F.prototype = obj;  // F.prototype = new Parent()  -> 还是回到原型链继承\n    return new F();     // 这里像不像 原型链继承上面的 new Child();\n}\n\nvar extendFn = _extend(Parent.prototype);\nChild.prototype = extendFn;\n\nextendFn.constructor = Child;\nvar children = new Child(\"test\", \"child\");\n\n```\n我们看下图\n![1591157016_1_.jpg](https://i.loli.net/2020/06/03/gN4HcF98ymQ7UpA.png)\n\n上面与下面其实大致一样,\n\n```js\nfunction F(){};\nF.prototype = Parent.prototype;\nfunction Child() {\n    Parent.call(this);\n}\nChild.prototype = new F();  // 是不是有点像组合模式\n```\n\n```js\n// 寄生组合模式理想版\nfunction inheritPrototype(subType, superType){\n    var prototype = Object.create(superType.prototype); //创建对象\n    prototype.constructor = subType; //增强对象\n    subType.prototype = prototype; //指定对象\n}\nfunction SuperType(name){\n    this.name = name;\n    this.colors = [\"red\", \"blue\", \"green\"];\n}\nSuperType.prototype.sayName = function(){\n    alert(this.name);\n};\nfunction SubType(name, age){\n    SuperType.call(this, name);\n    this.age = age;\n}\ninheritPrototype(SubType, SuperType);//实现继承\nSubType.prototype.sayAge = function(){\n    alert(this.age);\n}\n```","slug":"原型与继承","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrg2002ymrojcq5gesxg","content":"<h2 id=\"prototype\"><a href=\"#prototype\" class=\"headerlink\" title=\"prototype\"></a>prototype</h2><p>我们知道每个函数都有一个<strong>prototype</strong>指向他的原型对象。<br>我们可以这么理解： 每个对象在创建时就与另一个对象产生关联，其实就是对另一个对象的引用。而js 再找<strong>对象属性</strong>时会顺着原型链一直往上找，直到无法找到为止</p>\n<p>来看一下</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 控制台打印一下， => 是结果</span>\nPerson<span class=\"token punctuation\">.</span>prototype  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> constructor<span class=\"token punctuation\">:</span> f <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 而 Person.prototype.constructor 又指向与构造函数自己</span>\nPerson<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">==</span> Person  <span class=\"token comment\" spellcheck=\"true\">// true</span></code></pre>\n<p>用下图表示：<br><img src=\"https://i.loli.net/2020/06/02/5nJ2Tr4xRo6Wsk3.png\" alt=\"1591078556.jpg\"></p>\n<h2 id=\"proto\"><a href=\"#proto\" class=\"headerlink\" title=\"proto\"></a><strong>proto</strong></h2><p>每个对象都有一个<code>__proto__</code>属性，除了null外，而这个属性又指向他的原型对象</p>\n<p>验证一下</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bill\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 控制台打印一下， person.__proto__</span>\nperson<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> constructor<span class=\"token punctuation\">:</span> f <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 我们从上面[prototype]看 Person.prototype 也是指向 { constructor: f }, 那么他们是否是同一个东西呢?</span>\nperson<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">==</span> Person<span class=\"token punctuation\">.</span>prototype   <span class=\"token comment\" spellcheck=\"true\">// 结果是 true 的</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 上面一样的话，那么</span>\nperson<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>contructor <span class=\"token operator\">==</span> Person <span class=\"token comment\" spellcheck=\"true\">// true</span></code></pre>\n<p>用图表示一下就是</p>\n<p><img src=\"https://i.loli.net/2020/06/02/ZjH7Ty2tclun65e.png\" alt=\"1591082949_1_.jpg\"></p>\n<h2 id=\"new-操作符\"><a href=\"#new-操作符\" class=\"headerlink\" title=\"new 操作符\"></a>new 操作符</h2><blockquote>\n<p>这里解释一下new 操作符，其实跟原型有关</p>\n</blockquote>\n<p>首先搞清楚<code>new</code> 做了什么</p>\n<ul>\n<li>创建对象</li>\n<li>将对象的原型指向函数的原型</li>\n<li>改变 <code>this</code> 上下文</li>\n<li>返回这个对象</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">newObj</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> isObject <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> res <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> res <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> isFunction <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> res <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> isObject <span class=\"token operator\">||</span> isFunction <span class=\"token operator\">?</span> res <span class=\"token punctuation\">:</span> obj<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 这里其实可以直接返回obj</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 但防止 fn 这个方法直接返回this, 以下这种情况</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// function fn(name) {</span>\n    <span class=\"token comment\" spellcheck=\"true\">//     this.name = name;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//     return this;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// }</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// 测试一下</span>\nperson <span class=\"token operator\">=</span> <span class=\"token function\">newObj</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bill\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 打印一下 person</span>\n<span class=\"token comment\" spellcheck=\"true\">// Person {name: Bill}</span></code></pre>\n<h2 id=\"Fn-prototype-proto\"><a href=\"#Fn-prototype-proto\" class=\"headerlink\" title=\"Fn.prototype.proto\"></a>Fn.prototype.<strong>proto</strong></h2><ul>\n<li>我们说<strong>Fn.prototype</strong> 是一个原型对象，我们上面说只要是对象都有<code>__proto__</code>, 那么<code>Fn.prototype.__proto</code>指向的是什么呢？</li>\n</ul>\n<p>答案是： <code>Object.prototype</code></p>\n<pre class=\" language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">==</span> Person<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__  <span class=\"token comment\" spellcheck=\"true\">// true</span></code></pre>\n<p>所以有了下图</p>\n<p><img src=\"https://i.loli.net/2020/06/02/1g8zioGeFZwuf6n.png\" alt=\"1591086668_1_.jpg\"></p>\n<p>到此原型基本已经讲完了</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>下面写继承</p>\n<h3 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\nParent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>getRole <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\nChild<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nChild<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>getName <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchildren<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nchildren<span class=\"token punctuation\">.</span><span class=\"token function\">getRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// parent</span>\n\nChild<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// \"undefined\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// “123”</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 以下是原型链的缺点</span>\n<span class=\"token keyword\">var</span> children2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">,</span> children2<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// [1,2,3], [1,2,3,4]</span>\nchildren<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">,</span> children2<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// [1,2,3,4], [1,2,3,4]</span></code></pre>\n<p>看下图</p>\n<p><img src=\"https://i.loli.net/2020/06/02/XJg9vL2CWi5FKRU.png\" alt=\"1591092645_1_.jpg\"></p>\n<ul>\n<li>当执行了 <code>Child.prototype = new Parent()</code>, <strong>我们说找属性的话,会顺着原型链去找</strong>, 比如<code>children</code>要找<code>getRole</code>,那么他会一直找，<code>Child.prototype.__proto__</code>下有<code>getRole</code>, 这就是继承</li>\n<li>当执行了 <code>Child.prototype.value = &quot;123&quot;</code>, <code>children</code>实例也拥有了<strong>value</strong> 。</li>\n<li><strong>缺点</strong>: <ul>\n<li>只要在某个子类下改变了<strong>父类</strong>的<strong>引用类型</strong>的值，那么<strong>子类</strong>都会改变，这样做就<strong>不能做到相互独立</strong>了</li>\n<li>无法实现父类构造函数属性的赋值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用call，改变this-作用域\"><a href=\"#使用call，改变this-作用域\" class=\"headerlink\" title=\"使用call，改变this 作用域\"></a>使用call，改变this 作用域</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Parent<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"children\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"哈哈哈\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 注意</span>\nParent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>getRole <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 上面原型方法，子类是无法继承的，即children没有getRole 方法</span></code></pre>\n<p><strong>优点：</strong></p>\n<ul>\n<li>解决了原型继承无法向父类赋值的问题</li>\n<li>可以继承多个构造函数属性（call多个）；</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>只能继承父类构造函数的属性。<strong>原型链新创建的无法被继承</strong></li>\n<li>无法实现构造函数的复用。（每次用每次都要重新调用）</li>\n<li>每个新实例都有父类构造函数的副本，臃肿。</li>\n</ul>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>将call方式和原型链方式组合起来</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role\n<span class=\"token punctuation\">}</span>\n\nParent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Parent<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nChild<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>优点：</strong></p>\n<ul>\n<li>可以继承父类原型上的属性，可以传参，可复用；</li>\n<li>每个新实例引入的构造函数属性是私有的；</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数；</li>\n</ul>\n<h3 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nParent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 原型式继承</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">_extend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    F<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// F.prototype = new Parent()  -> 还是回到原型链继承</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// 这里像不像 原型链继承上面的 new Child();</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 获取父类实例</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 以上是原型式继承，以下给原型继承在套个壳子传递参数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> <span class=\"token function\">_extend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    child<span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span>\n    child<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// \"test\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// \"123\"</span>\n\n<span class=\"token keyword\">var</span> child1 <span class=\"token operator\">=</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"child1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// [1,2,3]</span>\n\nchild1<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// [1,2,3,456]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// [1,2,3,456] </span></code></pre>\n<p>看上面</p>\n<ul>\n<li>又回到了<strong>原型链继承</strong>的缺点之一了，对于<strong>父类引用类型</strong>的，一旦做了修改，子类的都会发生改变</li>\n</ul>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nParent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Parent<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// 等于有了父类构造函数的副本</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_extend</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    F<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// F.prototype = new Parent()  -> 还是回到原型链继承</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// 这里像不像 原型链继承上面的 new Child();</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> extendFn <span class=\"token operator\">=</span> <span class=\"token function\">_extend</span><span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nChild<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> extendFn<span class=\"token punctuation\">;</span>\n\nextendFn<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Child<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>我们看下图<br><img src=\"https://i.loli.net/2020/06/03/gN4HcF98ymQ7UpA.png\" alt=\"1591157016_1_.jpg\"></p>\n<p>上面与下面其实大致一样,</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nF<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Parent<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nChild<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 是不是有点像组合模式</span></code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 寄生组合模式理想版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>subType<span class=\"token punctuation\">,</span> superType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>superType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//创建对象</span>\n    prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> subType<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//增强对象</span>\n    subType<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//指定对象</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SuperType</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nSuperType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>sayName <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SubType</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    SuperType<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>SubType<span class=\"token punctuation\">,</span> SuperType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//实现继承</span>\nSubType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>sayAge <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"prototype\"><a href=\"#prototype\" class=\"headerlink\" title=\"prototype\"></a>prototype</h2><p>我们知道每个函数都有一个<strong>prototype</strong>指向他的原型对象。<br>我们可以这么理解： 每个对象在创建时就与另一个对象产生关联，其实就是对另一个对象的引用。而js 再找<strong>对象属性</strong>时会顺着原型链一直往上找，直到无法找到为止</p>\n<p>来看一下</p>\n<pre><code class=\"js\">function Person(name) {\n    this.name = name\n}\n\n// 控制台打印一下， =&gt; 是结果\nPerson.prototype  =&gt; { constructor: f }\n\n// 而 Person.prototype.constructor 又指向与构造函数自己\nPerson.prototype.constructor == Person  // true</code></pre>\n<p>用下图表示：<br><img src=\"https://i.loli.net/2020/06/02/5nJ2Tr4xRo6Wsk3.png\" alt=\"1591078556.jpg\"></p>\n<h2 id=\"proto\"><a href=\"#proto\" class=\"headerlink\" title=\"proto\"></a><strong>proto</strong></h2><p>每个对象都有一个<code>__proto__</code>属性，除了null外，而这个属性又指向他的原型对象</p>\n<p>验证一下</p>\n<pre><code class=\"js\">function Person(name) {\n    this.name = name\n}\n\nvar person = new Person(&quot;Bill&quot;);\n\n// 控制台打印一下， person.__proto__\nperson.__proto__ =&gt; { constructor: f }\n\n// 我们从上面[prototype]看 Person.prototype 也是指向 { constructor: f }, 那么他们是否是同一个东西呢?\nperson.__proto__ == Person.prototype   // 结果是 true 的\n\n// 上面一样的话，那么\nperson.__proto__.contructor == Person // true</code></pre>\n<p>用图表示一下就是</p>\n<p><img src=\"https://i.loli.net/2020/06/02/ZjH7Ty2tclun65e.png\" alt=\"1591082949_1_.jpg\"></p>\n<h2 id=\"new-操作符\"><a href=\"#new-操作符\" class=\"headerlink\" title=\"new 操作符\"></a>new 操作符</h2><blockquote>\n<p>这里解释一下new 操作符，其实跟原型有关</p>\n</blockquote>\n<p>首先搞清楚<code>new</code> 做了什么</p>\n<ul>\n<li>创建对象</li>\n<li>将对象的原型指向函数的原型</li>\n<li>改变 <code>this</code> 上下文</li>\n<li>返回这个对象</li>\n</ul>\n<pre><code class=\"js\">function newObj(fn, ...args) {\n    var obj = {};\n    obj.__proto__ = fn.prototype;\n    let res = fn.call(obj, ...args);\n\n    let isObject = typeof res === &#39;object&#39; &amp;&amp; typeof res !== null;\n    let isFunction = typeof res === &#39;function&#39;;\n    return isObject || isFunction ? res : obj;\n\n    // 这里其实可以直接返回obj\n    // 但防止 fn 这个方法直接返回this, 以下这种情况\n\n    // function fn(name) {\n    //     this.name = name;\n    //     return this;\n    // }\n} \n\nfunction Person(name) {\n    this.name = name;\n}\n// 测试一下\nperson = newObj(Person, &quot;Bill&quot;)\n\n// 打印一下 person\n// Person {name: Bill}</code></pre>\n<h2 id=\"Fn-prototype-proto\"><a href=\"#Fn-prototype-proto\" class=\"headerlink\" title=\"Fn.prototype.proto\"></a>Fn.prototype.<strong>proto</strong></h2><ul>\n<li>我们说<strong>Fn.prototype</strong> 是一个原型对象，我们上面说只要是对象都有<code>__proto__</code>, 那么<code>Fn.prototype.__proto</code>指向的是什么呢？</li>\n</ul>\n<p>答案是： <code>Object.prototype</code></p>\n<pre><code class=\"js\">Object.prototype == Person.prototype.__proto__  // true</code></pre>\n<p>所以有了下图</p>\n<p><img src=\"https://i.loli.net/2020/06/02/1g8zioGeFZwuf6n.png\" alt=\"1591086668_1_.jpg\"></p>\n<p>到此原型基本已经讲完了</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>下面写继承</p>\n<h3 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h3><pre><code class=\"js\">function Parent(){\n    this.role = &quot;parent&quot;\n    this.list = [1,2,3]\n}\n\nParent.prototype.getRole = function() {\n    return this.role\n}\n\nfunction Child(name) {\n    this.name = name\n}\n\nChild.prototype = new Parent();\n\nChild.prototype.getName = function() {\n    return this.name;\n}\n\nvar children = new Child(&quot;admin&quot;);\nchildren.getName()\nchildren.getRole()\n\nvar parent = new Parent();\nconsole.log(parent.role)  // parent\n\nChild.prototype.value = &quot;123&quot;\nconsole.log(parent.value);  // &quot;undefined&quot;\nconsole.log(children.value) // “123”\n\n// 以下是原型链的缺点\nvar children2 = new Child(&quot;child2&quot;);\nconsole.log(children.list, children2.list) // [1,2,3], [1,2,3,4]\nchildren.list.push(4);\nconsole.log(children.list, children2.list) // [1,2,3,4], [1,2,3,4]</code></pre>\n<p>看下图</p>\n<p><img src=\"https://i.loli.net/2020/06/02/XJg9vL2CWi5FKRU.png\" alt=\"1591092645_1_.jpg\"></p>\n<ul>\n<li>当执行了 <code>Child.prototype = new Parent()</code>, <strong>我们说找属性的话,会顺着原型链去找</strong>, 比如<code>children</code>要找<code>getRole</code>,那么他会一直找，<code>Child.prototype.__proto__</code>下有<code>getRole</code>, 这就是继承</li>\n<li>当执行了 <code>Child.prototype.value = &quot;123&quot;</code>, <code>children</code>实例也拥有了<strong>value</strong> 。</li>\n<li><strong>缺点</strong>: <ul>\n<li>只要在某个子类下改变了<strong>父类</strong>的<strong>引用类型</strong>的值，那么<strong>子类</strong>都会改变，这样做就<strong>不能做到相互独立</strong>了</li>\n<li>无法实现父类构造函数属性的赋值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用call，改变this-作用域\"><a href=\"#使用call，改变this-作用域\" class=\"headerlink\" title=\"使用call，改变this 作用域\"></a>使用call，改变this 作用域</h3><pre><code class=\"js\">function Parent() {\n    this.role = &quot;parent&quot;\n}\n\nfunction Child(role, name) {\n    Parent.call(this, role)\n    this.name = name;\n}\n\nvar children = new Child(&quot;children&quot;, &quot;哈哈哈&quot;);\n\n// 注意\nParent.prototype.getRole = function() {\n    return this.role;\n}\n\n// 上面原型方法，子类是无法继承的，即children没有getRole 方法</code></pre>\n<p><strong>优点：</strong></p>\n<ul>\n<li>解决了原型继承无法向父类赋值的问题</li>\n<li>可以继承多个构造函数属性（call多个）；</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>只能继承父类构造函数的属性。<strong>原型链新创建的无法被继承</strong></li>\n<li>无法实现构造函数的复用。（每次用每次都要重新调用）</li>\n<li>每个新实例都有父类构造函数的副本，臃肿。</li>\n</ul>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>将call方式和原型链方式组合起来</p>\n<pre><code class=\"js\">function Parent(role) {\n    this.role = role\n}\n\nParent.prototype.value = &quot;test&quot;;\n\nfunction Child(role, name) {\n    Parent.call(this, role);\n    this.name = name;\n}\n\nChild.prototype = new Parent();\n\nvar children = new Child(&quot;child&quot;, &quot;admin&quot;)</code></pre>\n<p><strong>优点：</strong></p>\n<ul>\n<li>可以继承父类原型上的属性，可以传参，可复用；</li>\n<li>每个新实例引入的构造函数属性是私有的；</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数；</li>\n</ul>\n<h3 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h3><pre><code class=\"js\">function Parent(role) {\n    this.role = role;\n    this.list = [1,2,3];\n}\n\nParent.prototype.value = &quot;123&quot;\n\n// 原型式继承\nfunction _extend(obj) {\n    function F(){};\n    F.prototype = obj;  // F.prototype = new Parent()  -&gt; 还是回到原型链继承\n    return new F();     // 这里像不像 原型链继承上面的 new Child();\n}\n\nvar parent = new Parent();  // 获取父类实例\n\n// 以上是原型式继承，以下给原型继承在套个壳子传递参数\nfunction wrap(obj, name, role){\n    var child = _extend(obj);   \n    child.role = role;\n    child.name = name;\n    return child;\n}\nvar child = wrap(parent, &#39;test&#39;, &quot;child&quot;);\nconsole.log(child.role)  // &quot;test&quot;\nconsole.log(child.value) // &quot;123&quot;\n\nvar child1 = wrap(parent, &quot;Bill&quot;, &quot;child1&quot;);\nconsole.log(child1.list) // [1,2,3]\n\nchild1.list.push(456);   \nconsole.log(child1.list) // [1,2,3,456]\nconsole.log(child.list)  // [1,2,3,456] </code></pre>\n<p>看上面</p>\n<ul>\n<li>又回到了<strong>原型链继承</strong>的缺点之一了，对于<strong>父类引用类型</strong>的，一旦做了修改，子类的都会发生改变</li>\n</ul>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><pre><code class=\"js\">function Parent(role) {\n    this.role = role;\n    this.list = [1,2,3];\n}\n\nParent.prototype.value = &quot;123&quot;\n\nfunction Child(name, role) {\n    Parent.call(this, role)  // 等于有了父类构造函数的副本\n    this.name = name;\n}\n\nfunction _extend(obj) {\n    function F(){};\n    F.prototype = obj;  // F.prototype = new Parent()  -&gt; 还是回到原型链继承\n    return new F();     // 这里像不像 原型链继承上面的 new Child();\n}\n\nvar extendFn = _extend(Parent.prototype);\nChild.prototype = extendFn;\n\nextendFn.constructor = Child;\nvar children = new Child(&quot;test&quot;, &quot;child&quot;);\n</code></pre>\n<p>我们看下图<br><img src=\"https://i.loli.net/2020/06/03/gN4HcF98ymQ7UpA.png\" alt=\"1591157016_1_.jpg\"></p>\n<p>上面与下面其实大致一样,</p>\n<pre><code class=\"js\">function F(){};\nF.prototype = Parent.prototype;\nfunction Child() {\n    Parent.call(this);\n}\nChild.prototype = new F();  // 是不是有点像组合模式</code></pre>\n<pre><code class=\"js\">// 寄生组合模式理想版\nfunction inheritPrototype(subType, superType){\n    var prototype = Object.create(superType.prototype); //创建对象\n    prototype.constructor = subType; //增强对象\n    subType.prototype = prototype; //指定对象\n}\nfunction SuperType(name){\n    this.name = name;\n    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];\n}\nSuperType.prototype.sayName = function(){\n    alert(this.name);\n};\nfunction SubType(name, age){\n    SuperType.call(this, name);\n    this.age = age;\n}\ninheritPrototype(SubType, SuperType);//实现继承\nSubType.prototype.sayAge = function(){\n    alert(this.age);\n}</code></pre>\n"},{"title":"和为k的子数组","date":"2020-05-27T23:16:32.000Z","type":"algorithm","_content":"\n[力扣上第560题](https://leetcode-cn.com/problems/subarray-sum-equals-k/)\n\n## 题目描述\n\n给定一个数组 `nums` 跟一个 和为`k` 的值，找到该数组中和为 k 的连续的子数组的个数。\n\n```html\n输入:nums = [1,1,1], k = 2\n输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。\n```\n\n## 尝试\n\n* 暴力破解, 即每个数跟与他以后的数相加 等于k，那么 res + 1\n\n```js\nfunction subarraySum(nums, k) {\n    let res = 0;\n    for(let i = 0; i < nums.length; i++) {\n        let current = nums[i];\n        if(current == k) {\n            res += 1;\n        }\n\n        for(let j = i + 1; j < nums.length; j++) {\n           current += nums[j];\n           if(current == k) {\n               res += 1;\n           } \n        }\n    }\n    return res;\n}\n```\n\n* 滑动窗口，滑动窗口不太好处理，窗口向右扩展的时候，那其实是跟上面算法好像差不多，然后放弃了\n\n* 看了题解，发现了一个**前缀和**算法\n\n## 前缀和算法\n\n* 将数组中的每一项在遍历时都加起来，然后加入到新的数组中，我们用`s[i]`表示\n    * 定义`s[0] = 0`\n    * `s[1] = a[0]`\n    * `s[2] = s[1] + a[1]`\n    * 所以得到 `s[i + 1] = s[i] + nums[i]`\n    * 所以移动等式 `nums[i] = s[i + 1] - s[i]`\n\n所以有以下代码\n```js\nfunction subarraySum(nums, k) {\n    let res = 0;\n    let s = [0];\n\n    // 多了这一层，结果更慢了\n    for(let i = 0; i < nums.length; i++) {\n        s[i + 1] = s[i] + nums[i];\n    }\n\n    for(let i = 0; i < nums.length; i++) {\n        for(let j = i; j <= nums.length; j++) {\n            if(s[j + 1] - s[i] == k) {\n                res++;\n            }\n        }\n    }\n\n    return res\n}\n```\n\n可以看到以上代码其实跟第一种方法是大同小异的，只是使用了前缀和的思想，但这个方法比上面那个还要慢，因为多 前缀和添加这一组循环\n\n## 优化\n\n> 看到题解是用**前缀和**还有**哈希表**做优化的\n\n思想：\n\n* 将当前**前缀和**的值当做**哈希表**的`key`。\n* 将当前**前缀和**出现的次数 当做**哈希表**的`value`\n\n具体操作如下:\n\n* 当遍历 `nums`时，计算当前**前缀和**, 存入map\n* 如果 map 中已存在 key 为 当前`前缀和 - k`,  因为一直遵守 `【当前前缀和】-【之前求出的前缀和】 === k`, \n    * 那么取出哈希表的值，`res += value`, \n* 如果 map 中， 没有当前前缀和的值\n    * 那么把**前缀和**添加到哈希表中，值为1， \n    * 如果有，那么改变`哈希表`的值: `map[prefix]++`\n\n```js\nfunction subarraySum(nums, k) {\n    let res = 0;\n    let map = { 0:1 };\n    let prefixSum = 0;\n\n    for(let i = 0; i < nums.length; i++) {\n        prefixSum += nums[i];\n        \n        if(map[prefixSum - k]) {\n            res += map[prefixSum - k]\n        }\n\n        if(map[prefixSum]) {\n            map[prefixSum]++\n        } else {\n            map[prefixSum] = 1\n        }\n    }\n    return res\n}\n```","source":"_posts/和为k的子数组.md","raw":"---\ntitle: 和为k的子数组\ndate: 2020-05-27 23:16:32\ntype: algorithm\ntags: algorithm-前缀和\n---\n\n[力扣上第560题](https://leetcode-cn.com/problems/subarray-sum-equals-k/)\n\n## 题目描述\n\n给定一个数组 `nums` 跟一个 和为`k` 的值，找到该数组中和为 k 的连续的子数组的个数。\n\n```html\n输入:nums = [1,1,1], k = 2\n输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。\n```\n\n## 尝试\n\n* 暴力破解, 即每个数跟与他以后的数相加 等于k，那么 res + 1\n\n```js\nfunction subarraySum(nums, k) {\n    let res = 0;\n    for(let i = 0; i < nums.length; i++) {\n        let current = nums[i];\n        if(current == k) {\n            res += 1;\n        }\n\n        for(let j = i + 1; j < nums.length; j++) {\n           current += nums[j];\n           if(current == k) {\n               res += 1;\n           } \n        }\n    }\n    return res;\n}\n```\n\n* 滑动窗口，滑动窗口不太好处理，窗口向右扩展的时候，那其实是跟上面算法好像差不多，然后放弃了\n\n* 看了题解，发现了一个**前缀和**算法\n\n## 前缀和算法\n\n* 将数组中的每一项在遍历时都加起来，然后加入到新的数组中，我们用`s[i]`表示\n    * 定义`s[0] = 0`\n    * `s[1] = a[0]`\n    * `s[2] = s[1] + a[1]`\n    * 所以得到 `s[i + 1] = s[i] + nums[i]`\n    * 所以移动等式 `nums[i] = s[i + 1] - s[i]`\n\n所以有以下代码\n```js\nfunction subarraySum(nums, k) {\n    let res = 0;\n    let s = [0];\n\n    // 多了这一层，结果更慢了\n    for(let i = 0; i < nums.length; i++) {\n        s[i + 1] = s[i] + nums[i];\n    }\n\n    for(let i = 0; i < nums.length; i++) {\n        for(let j = i; j <= nums.length; j++) {\n            if(s[j + 1] - s[i] == k) {\n                res++;\n            }\n        }\n    }\n\n    return res\n}\n```\n\n可以看到以上代码其实跟第一种方法是大同小异的，只是使用了前缀和的思想，但这个方法比上面那个还要慢，因为多 前缀和添加这一组循环\n\n## 优化\n\n> 看到题解是用**前缀和**还有**哈希表**做优化的\n\n思想：\n\n* 将当前**前缀和**的值当做**哈希表**的`key`。\n* 将当前**前缀和**出现的次数 当做**哈希表**的`value`\n\n具体操作如下:\n\n* 当遍历 `nums`时，计算当前**前缀和**, 存入map\n* 如果 map 中已存在 key 为 当前`前缀和 - k`,  因为一直遵守 `【当前前缀和】-【之前求出的前缀和】 === k`, \n    * 那么取出哈希表的值，`res += value`, \n* 如果 map 中， 没有当前前缀和的值\n    * 那么把**前缀和**添加到哈希表中，值为1， \n    * 如果有，那么改变`哈希表`的值: `map[prefix]++`\n\n```js\nfunction subarraySum(nums, k) {\n    let res = 0;\n    let map = { 0:1 };\n    let prefixSum = 0;\n\n    for(let i = 0; i < nums.length; i++) {\n        prefixSum += nums[i];\n        \n        if(map[prefixSum - k]) {\n            res += map[prefixSum - k]\n        }\n\n        if(map[prefixSum]) {\n            map[prefixSum]++\n        } else {\n            map[prefixSum] = 1\n        }\n    }\n    return res\n}\n```","slug":"和为k的子数组","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrg40032mroj7xvkbxeg","content":"<p><a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/\" target=\"_blank\" rel=\"noopener\">力扣上第560题</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数组 <code>nums</code> 跟一个 和为<code>k</code> 的值，找到该数组中和为 k 的连续的子数组的个数。</p>\n<pre class=\" language-html\"><code class=\"language-html\">输入:nums = [1,1,1], k = 2\n输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</code></pre>\n<h2 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h2><ul>\n<li>暴力破解, 即每个数跟与他以后的数相加 等于k，那么 res + 1</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">subarraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           current <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><p>滑动窗口，滑动窗口不太好处理，窗口向右扩展的时候，那其实是跟上面算法好像差不多，然后放弃了</p>\n</li>\n<li><p>看了题解，发现了一个<strong>前缀和</strong>算法</p>\n</li>\n</ul>\n<h2 id=\"前缀和算法\"><a href=\"#前缀和算法\" class=\"headerlink\" title=\"前缀和算法\"></a>前缀和算法</h2><ul>\n<li>将数组中的每一项在遍历时都加起来，然后加入到新的数组中，我们用<code>s[i]</code>表示<ul>\n<li>定义<code>s[0] = 0</code></li>\n<li><code>s[1] = a[0]</code></li>\n<li><code>s[2] = s[1] + a[1]</code></li>\n<li>所以得到 <code>s[i + 1] = s[i] + nums[i]</code></li>\n<li>所以移动等式 <code>nums[i] = s[i + 1] - s[i]</code></li>\n</ul>\n</li>\n</ul>\n<p>所以有以下代码</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">subarraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 多了这一层，结果更慢了</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span></code></pre>\n<p>可以看到以上代码其实跟第一种方法是大同小异的，只是使用了前缀和的思想，但这个方法比上面那个还要慢，因为多 前缀和添加这一组循环</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><blockquote>\n<p>看到题解是用<strong>前缀和</strong>还有<strong>哈希表</strong>做优化的</p>\n</blockquote>\n<p>思想：</p>\n<ul>\n<li>将当前<strong>前缀和</strong>的值当做<strong>哈希表</strong>的<code>key</code>。</li>\n<li>将当前<strong>前缀和</strong>出现的次数 当做<strong>哈希表</strong>的<code>value</code></li>\n</ul>\n<p>具体操作如下:</p>\n<ul>\n<li>当遍历 <code>nums</code>时，计算当前<strong>前缀和</strong>, 存入map</li>\n<li>如果 map 中已存在 key 为 当前<code>前缀和 - k</code>,  因为一直遵守 <code>【当前前缀和】-【之前求出的前缀和】 === k</code>, <ul>\n<li>那么取出哈希表的值，<code>res += value</code>, </li>\n</ul>\n</li>\n<li>如果 map 中， 没有当前前缀和的值<ul>\n<li>那么把<strong>前缀和</strong>添加到哈希表中，值为1， </li>\n<li>如果有，那么改变<code>哈希表</code>的值: <code>map[prefix]++</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">subarraySum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> prefixSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        prefixSum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>prefixSum <span class=\"token operator\">-</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>prefixSum <span class=\"token operator\">-</span> k<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>prefixSum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            map<span class=\"token punctuation\">[</span>prefixSum<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            map<span class=\"token punctuation\">[</span>prefixSum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/\" target=\"_blank\" rel=\"noopener\">力扣上第560题</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数组 <code>nums</code> 跟一个 和为<code>k</code> 的值，找到该数组中和为 k 的连续的子数组的个数。</p>\n<pre><code class=\"html\">输入:nums = [1,1,1], k = 2\n输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</code></pre>\n<h2 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h2><ul>\n<li>暴力破解, 即每个数跟与他以后的数相加 等于k，那么 res + 1</li>\n</ul>\n<pre><code class=\"js\">function subarraySum(nums, k) {\n    let res = 0;\n    for(let i = 0; i &lt; nums.length; i++) {\n        let current = nums[i];\n        if(current == k) {\n            res += 1;\n        }\n\n        for(let j = i + 1; j &lt; nums.length; j++) {\n           current += nums[j];\n           if(current == k) {\n               res += 1;\n           } \n        }\n    }\n    return res;\n}</code></pre>\n<ul>\n<li><p>滑动窗口，滑动窗口不太好处理，窗口向右扩展的时候，那其实是跟上面算法好像差不多，然后放弃了</p>\n</li>\n<li><p>看了题解，发现了一个<strong>前缀和</strong>算法</p>\n</li>\n</ul>\n<h2 id=\"前缀和算法\"><a href=\"#前缀和算法\" class=\"headerlink\" title=\"前缀和算法\"></a>前缀和算法</h2><ul>\n<li>将数组中的每一项在遍历时都加起来，然后加入到新的数组中，我们用<code>s[i]</code>表示<ul>\n<li>定义<code>s[0] = 0</code></li>\n<li><code>s[1] = a[0]</code></li>\n<li><code>s[2] = s[1] + a[1]</code></li>\n<li>所以得到 <code>s[i + 1] = s[i] + nums[i]</code></li>\n<li>所以移动等式 <code>nums[i] = s[i + 1] - s[i]</code></li>\n</ul>\n</li>\n</ul>\n<p>所以有以下代码</p>\n<pre><code class=\"js\">function subarraySum(nums, k) {\n    let res = 0;\n    let s = [0];\n\n    // 多了这一层，结果更慢了\n    for(let i = 0; i &lt; nums.length; i++) {\n        s[i + 1] = s[i] + nums[i];\n    }\n\n    for(let i = 0; i &lt; nums.length; i++) {\n        for(let j = i; j &lt;= nums.length; j++) {\n            if(s[j + 1] - s[i] == k) {\n                res++;\n            }\n        }\n    }\n\n    return res\n}</code></pre>\n<p>可以看到以上代码其实跟第一种方法是大同小异的，只是使用了前缀和的思想，但这个方法比上面那个还要慢，因为多 前缀和添加这一组循环</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><blockquote>\n<p>看到题解是用<strong>前缀和</strong>还有<strong>哈希表</strong>做优化的</p>\n</blockquote>\n<p>思想：</p>\n<ul>\n<li>将当前<strong>前缀和</strong>的值当做<strong>哈希表</strong>的<code>key</code>。</li>\n<li>将当前<strong>前缀和</strong>出现的次数 当做<strong>哈希表</strong>的<code>value</code></li>\n</ul>\n<p>具体操作如下:</p>\n<ul>\n<li>当遍历 <code>nums</code>时，计算当前<strong>前缀和</strong>, 存入map</li>\n<li>如果 map 中已存在 key 为 当前<code>前缀和 - k</code>,  因为一直遵守 <code>【当前前缀和】-【之前求出的前缀和】 === k</code>, <ul>\n<li>那么取出哈希表的值，<code>res += value</code>, </li>\n</ul>\n</li>\n<li>如果 map 中， 没有当前前缀和的值<ul>\n<li>那么把<strong>前缀和</strong>添加到哈希表中，值为1， </li>\n<li>如果有，那么改变<code>哈希表</code>的值: <code>map[prefix]++</code></li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"js\">function subarraySum(nums, k) {\n    let res = 0;\n    let map = { 0:1 };\n    let prefixSum = 0;\n\n    for(let i = 0; i &lt; nums.length; i++) {\n        prefixSum += nums[i];\n\n        if(map[prefixSum - k]) {\n            res += map[prefixSum - k]\n        }\n\n        if(map[prefixSum]) {\n            map[prefixSum]++\n        } else {\n            map[prefixSum] = 1\n        }\n    }\n    return res\n}</code></pre>\n"},{"title":"回文子串","date":"2020-08-19T14:10:49.000Z","type":"algorithm","_content":"\n[回文子串](https://leetcode-cn.com/problems/palindromic-substrings/)\n\n## 题目描述\n\n给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。\n\n具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。\n\n### 示例\n\n**示例1**\n\n```html\n输入：\"abc\"\n输出：3\n解释：三个回文子串: \"a\", \"b\", \"c\"\n```\n\n**示例2**\n\n```html\n输入：\"aaa\"\n输出：6\n解释：6个回文子串: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"\n```\n\n## 解决思路\n\n### 方法1 暴力破解\n\n我们用**ababa**做例子, 对字符串做遍历，i 表示字符串的第n个数\n\n* `i = 0`, 字符 `a`, 判断一下是否是回文，是的话`count + 1`。 此时我们保留上一次的字符`['a']`\n* `i = 1`, 字符 `b`, 此时我们对上一次字符数组的所有子串都添加`b`, 注意这里也要加上自身`b`, 也就是 `['b', 'ab']` 去判断一下是否是回文，此时再将上面数组保留下来。\n* `i = 2`, 字符 `c`, 我们继续做上面的操作, 先记录自身`c`, 再对上面保留下来的字符做`c`字符添加，也就是 `['c', 'bc', 'abc']`, 对数组做回文判断，如此类推\n\n我们总结一下，看下每次操作的数组\n1. `['a']`\n2. `['b', 'ab']`\n3. `['c', 'bc', 'abc']`\n4. `['b', 'cb', 'bcb', 'abcb']`,\n5. `['a', 'ba', 'cba', 'bcba', 'abcb']`\n\n```js\n// 完整代码\n/**\n * @param {string} s\n * @return {number}\n */\nvar countSubstrings = function(s) {\n    let count = 0;\n    let length = s.length;\n\n    if(length === 0) {\n        return count\n    }\n\n    let prev = [s[0]];\n    count = 1;\n    \n    for(let i = 1; i < length; i++) {\n        let current = [s[i]];\n        count++;\n\n        for(let j = 0; j < prev.length; j++) {\n            let temp = prev[j] + s[i];\n            if(ishuiwen(temp)) {\n                count++;\n            }\n            current.push(temp);\n        }\n        prev = current;\n    }\n    return count;\n};\n\nvar ishuiwen = function(s) {\n    let start = 0;\n    let end = s.length - 1;\n\n    while(start < end) {\n        let ss = s[start];\n        let es = s[end];\n\n        if(ss !== es) {\n            return false\n        }\n\n        start++;\n        end--\n    } \n    return true\n}\n```\n\n### 方法二 动态规划\n\n[题解](https://leetcode-cn.com/problems/palindromic-substrings/solution/shou-hua-tu-jie-dong-tai-gui-hua-si-lu-by-hyj8/)\n\n上面 `s[i][j]` 指的是 `s[i:j]` 的子串, 比如 i = 1, j = 3, 以`ababa` 例子, `s[i:j] => s[1:3]` 就是字符串中的`bab`\n","source":"_posts/回文子串.md","raw":"---\ntitle: 回文子串\ndate: 2020-08-19 14:10:49\ntags: [algorithm-动态规划]\ntype: algorithm\n---\n\n[回文子串](https://leetcode-cn.com/problems/palindromic-substrings/)\n\n## 题目描述\n\n给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。\n\n具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。\n\n### 示例\n\n**示例1**\n\n```html\n输入：\"abc\"\n输出：3\n解释：三个回文子串: \"a\", \"b\", \"c\"\n```\n\n**示例2**\n\n```html\n输入：\"aaa\"\n输出：6\n解释：6个回文子串: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"\n```\n\n## 解决思路\n\n### 方法1 暴力破解\n\n我们用**ababa**做例子, 对字符串做遍历，i 表示字符串的第n个数\n\n* `i = 0`, 字符 `a`, 判断一下是否是回文，是的话`count + 1`。 此时我们保留上一次的字符`['a']`\n* `i = 1`, 字符 `b`, 此时我们对上一次字符数组的所有子串都添加`b`, 注意这里也要加上自身`b`, 也就是 `['b', 'ab']` 去判断一下是否是回文，此时再将上面数组保留下来。\n* `i = 2`, 字符 `c`, 我们继续做上面的操作, 先记录自身`c`, 再对上面保留下来的字符做`c`字符添加，也就是 `['c', 'bc', 'abc']`, 对数组做回文判断，如此类推\n\n我们总结一下，看下每次操作的数组\n1. `['a']`\n2. `['b', 'ab']`\n3. `['c', 'bc', 'abc']`\n4. `['b', 'cb', 'bcb', 'abcb']`,\n5. `['a', 'ba', 'cba', 'bcba', 'abcb']`\n\n```js\n// 完整代码\n/**\n * @param {string} s\n * @return {number}\n */\nvar countSubstrings = function(s) {\n    let count = 0;\n    let length = s.length;\n\n    if(length === 0) {\n        return count\n    }\n\n    let prev = [s[0]];\n    count = 1;\n    \n    for(let i = 1; i < length; i++) {\n        let current = [s[i]];\n        count++;\n\n        for(let j = 0; j < prev.length; j++) {\n            let temp = prev[j] + s[i];\n            if(ishuiwen(temp)) {\n                count++;\n            }\n            current.push(temp);\n        }\n        prev = current;\n    }\n    return count;\n};\n\nvar ishuiwen = function(s) {\n    let start = 0;\n    let end = s.length - 1;\n\n    while(start < end) {\n        let ss = s[start];\n        let es = s[end];\n\n        if(ss !== es) {\n            return false\n        }\n\n        start++;\n        end--\n    } \n    return true\n}\n```\n\n### 方法二 动态规划\n\n[题解](https://leetcode-cn.com/problems/palindromic-substrings/solution/shou-hua-tu-jie-dong-tai-gui-hua-si-lu-by-hyj8/)\n\n上面 `s[i][j]` 指的是 `s[i:j]` 的子串, 比如 i = 1, j = 3, 以`ababa` 例子, `s[i:j] => s[1:3]` 就是字符串中的`bab`\n","slug":"回文子串","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrg50035mrojdj6c36mq","content":"<p><a href=\"https://leetcode-cn.com/problems/palindromic-substrings/\" target=\"_blank\" rel=\"noopener\">回文子串</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。</p>\n<p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><strong>示例1</strong></p>\n<pre class=\" language-html\"><code class=\"language-html\">输入：\"abc\"\n输出：3\n解释：三个回文子串: \"a\", \"b\", \"c\"</code></pre>\n<p><strong>示例2</strong></p>\n<pre class=\" language-html\"><code class=\"language-html\">输入：\"aaa\"\n输出：6\n解释：6个回文子串: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"</code></pre>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><h3 id=\"方法1-暴力破解\"><a href=\"#方法1-暴力破解\" class=\"headerlink\" title=\"方法1 暴力破解\"></a>方法1 暴力破解</h3><p>我们用<strong>ababa</strong>做例子, 对字符串做遍历，i 表示字符串的第n个数</p>\n<ul>\n<li><code>i = 0</code>, 字符 <code>a</code>, 判断一下是否是回文，是的话<code>count + 1</code>。 此时我们保留上一次的字符<code>[&#39;a&#39;]</code></li>\n<li><code>i = 1</code>, 字符 <code>b</code>, 此时我们对上一次字符数组的所有子串都添加<code>b</code>, 注意这里也要加上自身<code>b</code>, 也就是 <code>[&#39;b&#39;, &#39;ab&#39;]</code> 去判断一下是否是回文，此时再将上面数组保留下来。</li>\n<li><code>i = 2</code>, 字符 <code>c</code>, 我们继续做上面的操作, 先记录自身<code>c</code>, 再对上面保留下来的字符做<code>c</code>字符添加，也就是 <code>[&#39;c&#39;, &#39;bc&#39;, &#39;abc&#39;]</code>, 对数组做回文判断，如此类推</li>\n</ul>\n<p>我们总结一下，看下每次操作的数组</p>\n<ol>\n<li><code>[&#39;a&#39;]</code></li>\n<li><code>[&#39;b&#39;, &#39;ab&#39;]</code></li>\n<li><code>[&#39;c&#39;, &#39;bc&#39;, &#39;abc&#39;]</code></li>\n<li><code>[&#39;b&#39;, &#39;cb&#39;, &#39;bcb&#39;, &#39;abcb&#39;]</code>,</li>\n<li><code>[&#39;a&#39;, &#39;ba&#39;, &#39;cba&#39;, &#39;bcba&#39;, &#39;abcb&#39;]</code></li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 完整代码</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> countSubstrings <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> count\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> prev<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ishuiwen</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            current<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        prev <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> ishuiwen <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> ss <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> es <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ss <span class=\"token operator\">!==</span> es<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n\n        start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        end<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"方法二-动态规划\"><a href=\"#方法二-动态规划\" class=\"headerlink\" title=\"方法二 动态规划\"></a>方法二 动态规划</h3><p><a href=\"https://leetcode-cn.com/problems/palindromic-substrings/solution/shou-hua-tu-jie-dong-tai-gui-hua-si-lu-by-hyj8/\" target=\"_blank\" rel=\"noopener\">题解</a></p>\n<p>上面 <code>s[i][j]</code> 指的是 <code>s[i:j]</code> 的子串, 比如 i = 1, j = 3, 以<code>ababa</code> 例子, <code>s[i:j] =&gt; s[1:3]</code> 就是字符串中的<code>bab</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/palindromic-substrings/\" target=\"_blank\" rel=\"noopener\">回文子串</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。</p>\n<p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><strong>示例1</strong></p>\n<pre><code class=\"html\">输入：&quot;abc&quot;\n输出：3\n解释：三个回文子串: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</code></pre>\n<p><strong>示例2</strong></p>\n<pre><code class=\"html\">输入：&quot;aaa&quot;\n输出：6\n解释：6个回文子串: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;</code></pre>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><h3 id=\"方法1-暴力破解\"><a href=\"#方法1-暴力破解\" class=\"headerlink\" title=\"方法1 暴力破解\"></a>方法1 暴力破解</h3><p>我们用<strong>ababa</strong>做例子, 对字符串做遍历，i 表示字符串的第n个数</p>\n<ul>\n<li><code>i = 0</code>, 字符 <code>a</code>, 判断一下是否是回文，是的话<code>count + 1</code>。 此时我们保留上一次的字符<code>[&#39;a&#39;]</code></li>\n<li><code>i = 1</code>, 字符 <code>b</code>, 此时我们对上一次字符数组的所有子串都添加<code>b</code>, 注意这里也要加上自身<code>b</code>, 也就是 <code>[&#39;b&#39;, &#39;ab&#39;]</code> 去判断一下是否是回文，此时再将上面数组保留下来。</li>\n<li><code>i = 2</code>, 字符 <code>c</code>, 我们继续做上面的操作, 先记录自身<code>c</code>, 再对上面保留下来的字符做<code>c</code>字符添加，也就是 <code>[&#39;c&#39;, &#39;bc&#39;, &#39;abc&#39;]</code>, 对数组做回文判断，如此类推</li>\n</ul>\n<p>我们总结一下，看下每次操作的数组</p>\n<ol>\n<li><code>[&#39;a&#39;]</code></li>\n<li><code>[&#39;b&#39;, &#39;ab&#39;]</code></li>\n<li><code>[&#39;c&#39;, &#39;bc&#39;, &#39;abc&#39;]</code></li>\n<li><code>[&#39;b&#39;, &#39;cb&#39;, &#39;bcb&#39;, &#39;abcb&#39;]</code>,</li>\n<li><code>[&#39;a&#39;, &#39;ba&#39;, &#39;cba&#39;, &#39;bcba&#39;, &#39;abcb&#39;]</code></li>\n</ol>\n<pre><code class=\"js\">// 完整代码\n/**\n * @param {string} s\n * @return {number}\n */\nvar countSubstrings = function(s) {\n    let count = 0;\n    let length = s.length;\n\n    if(length === 0) {\n        return count\n    }\n\n    let prev = [s[0]];\n    count = 1;\n\n    for(let i = 1; i &lt; length; i++) {\n        let current = [s[i]];\n        count++;\n\n        for(let j = 0; j &lt; prev.length; j++) {\n            let temp = prev[j] + s[i];\n            if(ishuiwen(temp)) {\n                count++;\n            }\n            current.push(temp);\n        }\n        prev = current;\n    }\n    return count;\n};\n\nvar ishuiwen = function(s) {\n    let start = 0;\n    let end = s.length - 1;\n\n    while(start &lt; end) {\n        let ss = s[start];\n        let es = s[end];\n\n        if(ss !== es) {\n            return false\n        }\n\n        start++;\n        end--\n    } \n    return true\n}</code></pre>\n<h3 id=\"方法二-动态规划\"><a href=\"#方法二-动态规划\" class=\"headerlink\" title=\"方法二 动态规划\"></a>方法二 动态规划</h3><p><a href=\"https://leetcode-cn.com/problems/palindromic-substrings/solution/shou-hua-tu-jie-dong-tai-gui-hua-si-lu-by-hyj8/\" target=\"_blank\" rel=\"noopener\">题解</a></p>\n<p>上面 <code>s[i][j]</code> 指的是 <code>s[i:j]</code> 的子串, 比如 i = 1, j = 3, 以<code>ababa</code> 例子, <code>s[i:j] =&gt; s[1:3]</code> 就是字符串中的<code>bab</code></p>\n"},{"title":"在自己的vps上安装Jenkins","date":"2022-05-20T17:10:32.000Z","_content":"\n## 安装jdk\n\n首先查看是否含有`jdk`\n\n```bash\n// 执行\njavac\n\n// 或者\njava -version\n```\n\n如果没有安装\n\n```bash\nyum install -y java-1.8.0-openjdk-devel.x86_64\n```\n\n找到jdk 位置\n\n```bash\nwhich java\n```\n\n## 安装jenkins\n\n官方下载，但是`下载失败了`, 因为被墙了\n\n```bash\nsudo wget -O /etc/yum.repos.d/jenkins.repo \\\n    https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nsudo yum upgrade\n# Add required dependencies for the jenkins package\nsudo yum install java-11-openjdk\nsudo yum install jenkins\n```\n\n其他方式下载\n\n\n```bash\nwget https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat-stable/jenkins-2.332.3-1.1.noarch.rpm\n```\n\n```bash\nrpm -ivh jenkins-2.332.3-1.1.noarch.rpm\n```\n\n\n## 启动jenkins\n\n```bash\n# 启动jenkins\nsystemctl start jenkins\n# 查看jenkins\nsystemctl status jenkins\n# 重启jenkins\nsystemctl restart jenkins\n# 停止jenkins\nsystemctl stop jenkins\n```\n\n初始端口是`8080`, 可以通过修改`vim /etc/sysconfig/jenkins` 配置文件更改端口号\n\n\n## FAQ\n\n打开网站`ip:[端口]` 配置`jenkins`, 如果是线上ECS 服务器 有可能访问不成功, 请检查下面几个原因\n\n* 是否已安装jdk，命令：`Java -version`\n* 查看防火墙状态： `systemctl status firewalld.service`\n* 查看端口号是否开放`netstat -natp`\n* 如果是`阿里云等服务器` 需要将`端口号加入到安全组`\n\n\n## 安装 nginx\n\n\n* 安装额外的软件仓库 `sudo yum install epel-release -y`\n* 安装nginx `sudo yum install nginx -y`\n\n\n## 在服务器上设置 git\n\n```bash\ngit config --global user.name \"Bill\"\ngit config --global user.email \"735051883@qq.com\"\n```\n\n## 设置ssh\n\n```bash\nssh-keygen -t rsa -C \"735051883@qq.com\"\n```\n\n## 验证是否通过\n\n```bash\nssh -T git@github.com\n```\n\n\n### 坑：在jenkins 上建立项目，无法连接github\n\n是因为在`jenkins` 上连接`github` 是用了`jenkins` 用户的`ssh`, 重新生成秘钥，添加到`github`上即可\n或者从`~/.ssh` 复制过去也行\n\n```bash\nsu root\ncd /var/lib/jenkins/.ssh\nssh-keygen -t rsa -C your-email@sample.com\n# 注意下一步提示保存位置的时候，要再输入\n/var/lib/jenkins/.ssh/id_rsa\n# Enter file in which to save the key (/root/.ssh/id_rsa): /var/lib/jenkins/.ssh/id_rsa\n# 改变用户\nchown jenkins:jenkins id_rsa id_rsa.pub\ncat id_rsa.pub\n```\n\n或者\n```bash\nsudo mv ~/.ssh/id_rsa.pub /var/lib/jenkins/.ssh/\nsudo mv ~/.ssh/id_rsa /var/lib/jenkins/.ssh/\nsudo mv ~/.ssh/knows_host /var/lib/jenkins/.ssh/\nchown jenkins:jenkins id_rsa id_rsa.pub knows_host\n```\n\n\n## 配置nginx\n\n```bash\ncd /etc/nginx/conf.d\n\nvi cra-app.conf\n```\n\n使用以下配置\n```nginx\nserver {\n  listen        80;\n  server_name   localhost;\n  root          /home/www/cra-app;\n  index         index.php index.html;\n\n  location / {\n    try_files $uri $uri/ /index.php?$query_string;\n  }\n}\n```\n\n**注意： 虚拟机需要关闭 selinux**, 否则上面配置会没法显示;\n\n\n```bash\n# 查看seLinux 状态\ngetenforce\n```\n\n关闭它\n\n```bash\nsudo vim /etc/selinux/config \n# SELINUX=enforcing改为   SELINUX=disabled\n```\n\n这里记录一下`nginx` **root** 与**alias** 的区别 \n\n#### 当我们这样设置 root 的时候：\n\n```nginx\nlocation /i/ {\n    root /data/w3;\n}\n```\n\n当请求 `/i/top.gif` ，`/data/w3/i/top.gif` 会被返回。\n\n\n#### 当我们这样设置 alias 的时候：\n\n```bash\nlocation /i/ {\n    alias /data/w3/images/;\n}\n\n```\n\n当请求 `/i/top.gif` ，`/data/w3/images/top.gif` 会被返回。\n\n乍一看两者很像，但细一看，就能看出两者的区别，`root` 是直接拼接 `root + location` 而 `alias` 是用 `alias` 替换 `location`，所以 `root` 中最后的路径里有 `/i/`，而 `alias` 中最后的路径里没有  `/i/` 。\n\n所以如果你这样使用 allias 定义一个路径：\n\n```nginx\nlocation /images/ {\n    alias /data/w3/images/;\n}\n```\n\n其实使用 root 会更好：\n\n```nginx\nlocation /images/ {\n    root /data/w3;\n}\n```\n\n#### server 和 location 中的 root\n\nserver 和 location 中都可以使用 root，举个例子：\n\n```nginx\nhttp { \n  server {\n    listen 80;\n    server_name www.yayujs.com;\n    root /home/www/website/;\n    location / {\n        root /home/www/ts/;\n        index index.html;\n    }\n  }\n}\n\n```\n\n如果两者都出现，是怎样的优先级呢？\n简单的来说，就是就近原则，如果 location 中能匹配到，就是用 location 中的 root 配置，忽略 server 中的 root，当 location 中匹配不到的时候，则使用 server 中的 root 配置。","source":"_posts/在自己的vps 上安装Jenkins.md","raw":"---\ntitle: 在自己的vps上安装Jenkins\ndate: 2022-05-20 17:10:32\ntags: jenkins\ncategory: jenkins\n---\n\n## 安装jdk\n\n首先查看是否含有`jdk`\n\n```bash\n// 执行\njavac\n\n// 或者\njava -version\n```\n\n如果没有安装\n\n```bash\nyum install -y java-1.8.0-openjdk-devel.x86_64\n```\n\n找到jdk 位置\n\n```bash\nwhich java\n```\n\n## 安装jenkins\n\n官方下载，但是`下载失败了`, 因为被墙了\n\n```bash\nsudo wget -O /etc/yum.repos.d/jenkins.repo \\\n    https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nsudo yum upgrade\n# Add required dependencies for the jenkins package\nsudo yum install java-11-openjdk\nsudo yum install jenkins\n```\n\n其他方式下载\n\n\n```bash\nwget https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat-stable/jenkins-2.332.3-1.1.noarch.rpm\n```\n\n```bash\nrpm -ivh jenkins-2.332.3-1.1.noarch.rpm\n```\n\n\n## 启动jenkins\n\n```bash\n# 启动jenkins\nsystemctl start jenkins\n# 查看jenkins\nsystemctl status jenkins\n# 重启jenkins\nsystemctl restart jenkins\n# 停止jenkins\nsystemctl stop jenkins\n```\n\n初始端口是`8080`, 可以通过修改`vim /etc/sysconfig/jenkins` 配置文件更改端口号\n\n\n## FAQ\n\n打开网站`ip:[端口]` 配置`jenkins`, 如果是线上ECS 服务器 有可能访问不成功, 请检查下面几个原因\n\n* 是否已安装jdk，命令：`Java -version`\n* 查看防火墙状态： `systemctl status firewalld.service`\n* 查看端口号是否开放`netstat -natp`\n* 如果是`阿里云等服务器` 需要将`端口号加入到安全组`\n\n\n## 安装 nginx\n\n\n* 安装额外的软件仓库 `sudo yum install epel-release -y`\n* 安装nginx `sudo yum install nginx -y`\n\n\n## 在服务器上设置 git\n\n```bash\ngit config --global user.name \"Bill\"\ngit config --global user.email \"735051883@qq.com\"\n```\n\n## 设置ssh\n\n```bash\nssh-keygen -t rsa -C \"735051883@qq.com\"\n```\n\n## 验证是否通过\n\n```bash\nssh -T git@github.com\n```\n\n\n### 坑：在jenkins 上建立项目，无法连接github\n\n是因为在`jenkins` 上连接`github` 是用了`jenkins` 用户的`ssh`, 重新生成秘钥，添加到`github`上即可\n或者从`~/.ssh` 复制过去也行\n\n```bash\nsu root\ncd /var/lib/jenkins/.ssh\nssh-keygen -t rsa -C your-email@sample.com\n# 注意下一步提示保存位置的时候，要再输入\n/var/lib/jenkins/.ssh/id_rsa\n# Enter file in which to save the key (/root/.ssh/id_rsa): /var/lib/jenkins/.ssh/id_rsa\n# 改变用户\nchown jenkins:jenkins id_rsa id_rsa.pub\ncat id_rsa.pub\n```\n\n或者\n```bash\nsudo mv ~/.ssh/id_rsa.pub /var/lib/jenkins/.ssh/\nsudo mv ~/.ssh/id_rsa /var/lib/jenkins/.ssh/\nsudo mv ~/.ssh/knows_host /var/lib/jenkins/.ssh/\nchown jenkins:jenkins id_rsa id_rsa.pub knows_host\n```\n\n\n## 配置nginx\n\n```bash\ncd /etc/nginx/conf.d\n\nvi cra-app.conf\n```\n\n使用以下配置\n```nginx\nserver {\n  listen        80;\n  server_name   localhost;\n  root          /home/www/cra-app;\n  index         index.php index.html;\n\n  location / {\n    try_files $uri $uri/ /index.php?$query_string;\n  }\n}\n```\n\n**注意： 虚拟机需要关闭 selinux**, 否则上面配置会没法显示;\n\n\n```bash\n# 查看seLinux 状态\ngetenforce\n```\n\n关闭它\n\n```bash\nsudo vim /etc/selinux/config \n# SELINUX=enforcing改为   SELINUX=disabled\n```\n\n这里记录一下`nginx` **root** 与**alias** 的区别 \n\n#### 当我们这样设置 root 的时候：\n\n```nginx\nlocation /i/ {\n    root /data/w3;\n}\n```\n\n当请求 `/i/top.gif` ，`/data/w3/i/top.gif` 会被返回。\n\n\n#### 当我们这样设置 alias 的时候：\n\n```bash\nlocation /i/ {\n    alias /data/w3/images/;\n}\n\n```\n\n当请求 `/i/top.gif` ，`/data/w3/images/top.gif` 会被返回。\n\n乍一看两者很像，但细一看，就能看出两者的区别，`root` 是直接拼接 `root + location` 而 `alias` 是用 `alias` 替换 `location`，所以 `root` 中最后的路径里有 `/i/`，而 `alias` 中最后的路径里没有  `/i/` 。\n\n所以如果你这样使用 allias 定义一个路径：\n\n```nginx\nlocation /images/ {\n    alias /data/w3/images/;\n}\n```\n\n其实使用 root 会更好：\n\n```nginx\nlocation /images/ {\n    root /data/w3;\n}\n```\n\n#### server 和 location 中的 root\n\nserver 和 location 中都可以使用 root，举个例子：\n\n```nginx\nhttp { \n  server {\n    listen 80;\n    server_name www.yayujs.com;\n    root /home/www/website/;\n    location / {\n        root /home/www/ts/;\n        index index.html;\n    }\n  }\n}\n\n```\n\n如果两者都出现，是怎样的优先级呢？\n简单的来说，就是就近原则，如果 location 中能匹配到，就是用 location 中的 root 配置，忽略 server 中的 root，当 location 中匹配不到的时候，则使用 server 中的 root 配置。","slug":"在自己的vps 上安装Jenkins","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrg60039mroj4k1nhknb","content":"<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p>首先查看是否含有<code>jdk</code></p>\n<pre class=\" language-bash\"><code class=\"language-bash\">// 执行\njavac\n\n// 或者\njava -version</code></pre>\n<p>如果没有安装</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y java-1.8.0-openjdk-devel.x86_64</code></pre>\n<p>找到jdk 位置</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">which</span> java</code></pre>\n<h2 id=\"安装jenkins\"><a href=\"#安装jenkins\" class=\"headerlink\" title=\"安装jenkins\"></a>安装jenkins</h2><p>官方下载，但是<code>下载失败了</code>, 因为被墙了</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">wget</span> -O /etc/yum.repos.d/jenkins.repo \\\n    https://pkg.jenkins.io/redhat-stable/jenkins.repo\n<span class=\"token function\">sudo</span> rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n<span class=\"token function\">sudo</span> yum upgrade\n<span class=\"token comment\" spellcheck=\"true\"># Add required dependencies for the jenkins package</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> java-11-openjdk\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> jenkins</code></pre>\n<p>其他方式下载</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat-stable/jenkins-2.332.3-1.1.noarch.rpm</code></pre>\n<pre class=\" language-bash\"><code class=\"language-bash\">rpm -ivh jenkins-2.332.3-1.1.noarch.rpm</code></pre>\n<h2 id=\"启动jenkins\"><a href=\"#启动jenkins\" class=\"headerlink\" title=\"启动jenkins\"></a>启动jenkins</h2><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 启动jenkins</span>\nsystemctl start jenkins\n<span class=\"token comment\" spellcheck=\"true\"># 查看jenkins</span>\nsystemctl status jenkins\n<span class=\"token comment\" spellcheck=\"true\"># 重启jenkins</span>\nsystemctl restart jenkins\n<span class=\"token comment\" spellcheck=\"true\"># 停止jenkins</span>\nsystemctl stop jenkins</code></pre>\n<p>初始端口是<code>8080</code>, 可以通过修改<code>vim /etc/sysconfig/jenkins</code> 配置文件更改端口号</p>\n<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><p>打开网站<code>ip:[端口]</code> 配置<code>jenkins</code>, 如果是线上ECS 服务器 有可能访问不成功, 请检查下面几个原因</p>\n<ul>\n<li>是否已安装jdk，命令：<code>Java -version</code></li>\n<li>查看防火墙状态： <code>systemctl status firewalld.service</code></li>\n<li>查看端口号是否开放<code>netstat -natp</code></li>\n<li>如果是<code>阿里云等服务器</code> 需要将<code>端口号加入到安全组</code></li>\n</ul>\n<h2 id=\"安装-nginx\"><a href=\"#安装-nginx\" class=\"headerlink\" title=\"安装 nginx\"></a>安装 nginx</h2><ul>\n<li>安装额外的软件仓库 <code>sudo yum install epel-release -y</code></li>\n<li>安装nginx <code>sudo yum install nginx -y</code></li>\n</ul>\n<h2 id=\"在服务器上设置-git\"><a href=\"#在服务器上设置-git\" class=\"headerlink\" title=\"在服务器上设置 git\"></a>在服务器上设置 git</h2><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"Bill\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"735051883@qq.com\"</span></code></pre>\n<h2 id=\"设置ssh\"><a href=\"#设置ssh\" class=\"headerlink\" title=\"设置ssh\"></a>设置ssh</h2><pre class=\" language-bash\"><code class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"token string\">\"735051883@qq.com\"</span></code></pre>\n<h2 id=\"验证是否通过\"><a href=\"#验证是否通过\" class=\"headerlink\" title=\"验证是否通过\"></a>验证是否通过</h2><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -T git@github.com</code></pre>\n<h3 id=\"坑：在jenkins-上建立项目，无法连接github\"><a href=\"#坑：在jenkins-上建立项目，无法连接github\" class=\"headerlink\" title=\"坑：在jenkins 上建立项目，无法连接github\"></a>坑：在jenkins 上建立项目，无法连接github</h3><p>是因为在<code>jenkins</code> 上连接<code>github</code> 是用了<code>jenkins</code> 用户的<code>ssh</code>, 重新生成秘钥，添加到<code>github</code>上即可<br>或者从<code>~/.ssh</code> 复制过去也行</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">su</span> root\n<span class=\"token function\">cd</span> /var/lib/jenkins/.ssh\nssh-keygen -t rsa -C your-email@sample.com\n<span class=\"token comment\" spellcheck=\"true\"># 注意下一步提示保存位置的时候，要再输入</span>\n/var/lib/jenkins/.ssh/id_rsa\n<span class=\"token comment\" spellcheck=\"true\"># Enter file in which to save the key (/root/.ssh/id_rsa): /var/lib/jenkins/.ssh/id_rsa</span>\n<span class=\"token comment\" spellcheck=\"true\"># 改变用户</span>\n<span class=\"token function\">chown</span> jenkins:jenkins id_rsa id_rsa.pub\n<span class=\"token function\">cat</span> id_rsa.pub</code></pre>\n<p>或者</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> ~/.ssh/id_rsa.pub /var/lib/jenkins/.ssh/\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> ~/.ssh/id_rsa /var/lib/jenkins/.ssh/\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> ~/.ssh/knows_host /var/lib/jenkins/.ssh/\n<span class=\"token function\">chown</span> jenkins:jenkins id_rsa id_rsa.pub knows_host</code></pre>\n<h2 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h2><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> /etc/nginx/conf.d\n\n<span class=\"token function\">vi</span> cra-app.conf</code></pre>\n<p>使用以下配置</p>\n<pre class=\" language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">listen</span>        <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">server_name</span>   localhost<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">root</span>          <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>cra<span class=\"token operator\">-</span>app<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">index</span>         <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>php <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try_files</span> <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span><span class=\"token operator\">/</span> <span class=\"token operator\">/</span><span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>php<span class=\"token operator\">?</span><span class=\"token variable\">$query_string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>注意： 虚拟机需要关闭 selinux</strong>, 否则上面配置会没法显示;</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 查看seLinux 状态</span>\ngetenforce</code></pre>\n<p>关闭它</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> vim /etc/selinux/config \n<span class=\"token comment\" spellcheck=\"true\"># SELINUX=enforcing改为   SELINUX=disabled</span></code></pre>\n<p>这里记录一下<code>nginx</code> <strong>root</strong> 与<strong>alias</strong> 的区别 </p>\n<h4 id=\"当我们这样设置-root-的时候：\"><a href=\"#当我们这样设置-root-的时候：\" class=\"headerlink\" title=\"当我们这样设置 root 的时候：\"></a>当我们这样设置 root 的时候：</h4><pre class=\" language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">location</span> <span class=\"token operator\">/</span>i<span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">root</span> <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>w3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>当请求 <code>/i/top.gif</code> ，<code>/data/w3/i/top.gif</code> 会被返回。</p>\n<h4 id=\"当我们这样设置-alias-的时候：\"><a href=\"#当我们这样设置-alias-的时候：\" class=\"headerlink\" title=\"当我们这样设置 alias 的时候：\"></a>当我们这样设置 alias 的时候：</h4><pre class=\" language-bash\"><code class=\"language-bash\">location /i/ <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alias</span> /data/w3/images/<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>当请求 <code>/i/top.gif</code> ，<code>/data/w3/images/top.gif</code> 会被返回。</p>\n<p>乍一看两者很像，但细一看，就能看出两者的区别，<code>root</code> 是直接拼接 <code>root + location</code> 而 <code>alias</code> 是用 <code>alias</code> 替换 <code>location</code>，所以 <code>root</code> 中最后的路径里有 <code>/i/</code>，而 <code>alias</code> 中最后的路径里没有  <code>/i/</code> 。</p>\n<p>所以如果你这样使用 allias 定义一个路径：</p>\n<pre class=\" language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">location</span> <span class=\"token operator\">/</span>images<span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">alias</span> <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>w3<span class=\"token operator\">/</span>images<span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>其实使用 root 会更好：</p>\n<pre class=\" language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">location</span> <span class=\"token operator\">/</span>images<span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">root</span> <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>w3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"server-和-location-中的-root\"><a href=\"#server-和-location-中的-root\" class=\"headerlink\" title=\"server 和 location 中的 root\"></a>server 和 location 中的 root</h4><p>server 和 location 中都可以使用 root，举个例子：</p>\n<pre class=\" language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">http</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">listen</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">server_name</span> www<span class=\"token punctuation\">.</span>yayujs<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">root</span> <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>website<span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">root</span> <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>ts<span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">index</span> <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如果两者都出现，是怎样的优先级呢？<br>简单的来说，就是就近原则，如果 location 中能匹配到，就是用 location 中的 root 配置，忽略 server 中的 root，当 location 中匹配不到的时候，则使用 server 中的 root 配置。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p>首先查看是否含有<code>jdk</code></p>\n<pre><code class=\"bash\">// 执行\njavac\n\n// 或者\njava -version</code></pre>\n<p>如果没有安装</p>\n<pre><code class=\"bash\">yum install -y java-1.8.0-openjdk-devel.x86_64</code></pre>\n<p>找到jdk 位置</p>\n<pre><code class=\"bash\">which java</code></pre>\n<h2 id=\"安装jenkins\"><a href=\"#安装jenkins\" class=\"headerlink\" title=\"安装jenkins\"></a>安装jenkins</h2><p>官方下载，但是<code>下载失败了</code>, 因为被墙了</p>\n<pre><code class=\"bash\">sudo wget -O /etc/yum.repos.d/jenkins.repo \\\n    https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nsudo yum upgrade\n# Add required dependencies for the jenkins package\nsudo yum install java-11-openjdk\nsudo yum install jenkins</code></pre>\n<p>其他方式下载</p>\n<pre><code class=\"bash\">wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat-stable/jenkins-2.332.3-1.1.noarch.rpm</code></pre>\n<pre><code class=\"bash\">rpm -ivh jenkins-2.332.3-1.1.noarch.rpm</code></pre>\n<h2 id=\"启动jenkins\"><a href=\"#启动jenkins\" class=\"headerlink\" title=\"启动jenkins\"></a>启动jenkins</h2><pre><code class=\"bash\"># 启动jenkins\nsystemctl start jenkins\n# 查看jenkins\nsystemctl status jenkins\n# 重启jenkins\nsystemctl restart jenkins\n# 停止jenkins\nsystemctl stop jenkins</code></pre>\n<p>初始端口是<code>8080</code>, 可以通过修改<code>vim /etc/sysconfig/jenkins</code> 配置文件更改端口号</p>\n<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><p>打开网站<code>ip:[端口]</code> 配置<code>jenkins</code>, 如果是线上ECS 服务器 有可能访问不成功, 请检查下面几个原因</p>\n<ul>\n<li>是否已安装jdk，命令：<code>Java -version</code></li>\n<li>查看防火墙状态： <code>systemctl status firewalld.service</code></li>\n<li>查看端口号是否开放<code>netstat -natp</code></li>\n<li>如果是<code>阿里云等服务器</code> 需要将<code>端口号加入到安全组</code></li>\n</ul>\n<h2 id=\"安装-nginx\"><a href=\"#安装-nginx\" class=\"headerlink\" title=\"安装 nginx\"></a>安装 nginx</h2><ul>\n<li>安装额外的软件仓库 <code>sudo yum install epel-release -y</code></li>\n<li>安装nginx <code>sudo yum install nginx -y</code></li>\n</ul>\n<h2 id=\"在服务器上设置-git\"><a href=\"#在服务器上设置-git\" class=\"headerlink\" title=\"在服务器上设置 git\"></a>在服务器上设置 git</h2><pre><code class=\"bash\">git config --global user.name &quot;Bill&quot;\ngit config --global user.email &quot;735051883@qq.com&quot;</code></pre>\n<h2 id=\"设置ssh\"><a href=\"#设置ssh\" class=\"headerlink\" title=\"设置ssh\"></a>设置ssh</h2><pre><code class=\"bash\">ssh-keygen -t rsa -C &quot;735051883@qq.com&quot;</code></pre>\n<h2 id=\"验证是否通过\"><a href=\"#验证是否通过\" class=\"headerlink\" title=\"验证是否通过\"></a>验证是否通过</h2><pre><code class=\"bash\">ssh -T git@github.com</code></pre>\n<h3 id=\"坑：在jenkins-上建立项目，无法连接github\"><a href=\"#坑：在jenkins-上建立项目，无法连接github\" class=\"headerlink\" title=\"坑：在jenkins 上建立项目，无法连接github\"></a>坑：在jenkins 上建立项目，无法连接github</h3><p>是因为在<code>jenkins</code> 上连接<code>github</code> 是用了<code>jenkins</code> 用户的<code>ssh</code>, 重新生成秘钥，添加到<code>github</code>上即可<br>或者从<code>~/.ssh</code> 复制过去也行</p>\n<pre><code class=\"bash\">su root\ncd /var/lib/jenkins/.ssh\nssh-keygen -t rsa -C your-email@sample.com\n# 注意下一步提示保存位置的时候，要再输入\n/var/lib/jenkins/.ssh/id_rsa\n# Enter file in which to save the key (/root/.ssh/id_rsa): /var/lib/jenkins/.ssh/id_rsa\n# 改变用户\nchown jenkins:jenkins id_rsa id_rsa.pub\ncat id_rsa.pub</code></pre>\n<p>或者</p>\n<pre><code class=\"bash\">sudo mv ~/.ssh/id_rsa.pub /var/lib/jenkins/.ssh/\nsudo mv ~/.ssh/id_rsa /var/lib/jenkins/.ssh/\nsudo mv ~/.ssh/knows_host /var/lib/jenkins/.ssh/\nchown jenkins:jenkins id_rsa id_rsa.pub knows_host</code></pre>\n<h2 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h2><pre><code class=\"bash\">cd /etc/nginx/conf.d\n\nvi cra-app.conf</code></pre>\n<p>使用以下配置</p>\n<pre><code class=\"nginx\">server {\n  listen        80;\n  server_name   localhost;\n  root          /home/www/cra-app;\n  index         index.php index.html;\n\n  location / {\n    try_files $uri $uri/ /index.php?$query_string;\n  }\n}</code></pre>\n<p><strong>注意： 虚拟机需要关闭 selinux</strong>, 否则上面配置会没法显示;</p>\n<pre><code class=\"bash\"># 查看seLinux 状态\ngetenforce</code></pre>\n<p>关闭它</p>\n<pre><code class=\"bash\">sudo vim /etc/selinux/config \n# SELINUX=enforcing改为   SELINUX=disabled</code></pre>\n<p>这里记录一下<code>nginx</code> <strong>root</strong> 与<strong>alias</strong> 的区别 </p>\n<h4 id=\"当我们这样设置-root-的时候：\"><a href=\"#当我们这样设置-root-的时候：\" class=\"headerlink\" title=\"当我们这样设置 root 的时候：\"></a>当我们这样设置 root 的时候：</h4><pre><code class=\"nginx\">location /i/ {\n    root /data/w3;\n}</code></pre>\n<p>当请求 <code>/i/top.gif</code> ，<code>/data/w3/i/top.gif</code> 会被返回。</p>\n<h4 id=\"当我们这样设置-alias-的时候：\"><a href=\"#当我们这样设置-alias-的时候：\" class=\"headerlink\" title=\"当我们这样设置 alias 的时候：\"></a>当我们这样设置 alias 的时候：</h4><pre><code class=\"bash\">location /i/ {\n    alias /data/w3/images/;\n}\n</code></pre>\n<p>当请求 <code>/i/top.gif</code> ，<code>/data/w3/images/top.gif</code> 会被返回。</p>\n<p>乍一看两者很像，但细一看，就能看出两者的区别，<code>root</code> 是直接拼接 <code>root + location</code> 而 <code>alias</code> 是用 <code>alias</code> 替换 <code>location</code>，所以 <code>root</code> 中最后的路径里有 <code>/i/</code>，而 <code>alias</code> 中最后的路径里没有  <code>/i/</code> 。</p>\n<p>所以如果你这样使用 allias 定义一个路径：</p>\n<pre><code class=\"nginx\">location /images/ {\n    alias /data/w3/images/;\n}</code></pre>\n<p>其实使用 root 会更好：</p>\n<pre><code class=\"nginx\">location /images/ {\n    root /data/w3;\n}</code></pre>\n<h4 id=\"server-和-location-中的-root\"><a href=\"#server-和-location-中的-root\" class=\"headerlink\" title=\"server 和 location 中的 root\"></a>server 和 location 中的 root</h4><p>server 和 location 中都可以使用 root，举个例子：</p>\n<pre><code class=\"nginx\">http { \n  server {\n    listen 80;\n    server_name www.yayujs.com;\n    root /home/www/website/;\n    location / {\n        root /home/www/ts/;\n        index index.html;\n    }\n  }\n}\n</code></pre>\n<p>如果两者都出现，是怎样的优先级呢？<br>简单的来说，就是就近原则，如果 location 中能匹配到，就是用 location 中的 root 配置，忽略 server 中的 root，当 location 中匹配不到的时候，则使用 server 中的 root 配置。</p>\n"},{"title":"大众点评文字数字解密","date":"2020-05-08T10:54:10.000Z","categorys":"js","_content":"\n## 原理\n\n百度发现大众点评网上面的文字数字加密是通过字体文件加密的，也就是说用css 的class 用不同的类对应的字体文件，再加下面的特殊字符跟字体文件上面的编码一一对应起来\n\n## 先看一下大众点评吧\n\n![1588908462_1_.jpg](https://i.loli.net/2020/05/08/emBOdhVyIK4TA8v.png)\n\n我们从上图可以看到，大众点评的地址是加密的，所以我们不能直接从html中获取\n\n## 发现\n\n发现上图 `.num` 类和 `.address` 类用的 `ba****.css`, 打开此css发现这些类使用的字体文件都是不同的，看下图：\n\n![1588919508_1_.jpg](https://i.loli.net/2020/05/08/7VHbsvjQtkfDgal.png)\n\n> 我们可以下载FontCreator 打开上图链接的.woff, 或者用百度的FontEditor(之前可以用，后来不行了)\n\n![1588921914_1_.jpg](https://i.loli.net/2020/05/08/AbBZvV9gKpExaFW.png)\n\n我们用`北`做例子，在大众点评上加密的字符是 ``, 我们发现.woff 文件用forntCreator 上面的16进制码是 `efa8`, \n\n## js 解析字体文件工具 fonteditor-core\n\n它会把.woff 文件中某个 字体转成十进制然后一一对应起来\n\n```js\nvar Font = require('fonteditor-core').Font;\nvar fs = require('fs');\nvar buffer = fs.readFileSync('4.woff');\n// 不加这个文件会报错  \n// https://cdn.bootcdn.net/ajax/libs/pako/1.0.10/pako_inflate.min.js\nlet inflate_daddy = require(\"./pako_inflate.min\"); \n\nvar font = Font.create(buffer, {\n    type: 'woff', // support ttf,woff,eot,otf,svg\n    inflate: inflate_daddy.inflate\n});\nconsole.log(font.data.cmap);\n\n// font.data.cmap \n// key值代表十进制, value代表的是第几个字体\n{\n    '120': 1,\n    '57346': 81,\n    '57348': 275,\n    ...\n    '61352': 125\n}\n```\n\n上面`北`字为例，加密字符 ``,转成十进制就是 `61352` 也就是在.woff 文件第`125`个字,但机器是不知道上面第125个字是什么字，所以我们做一个.woff文件的所有字体人工抽取出来然后一一对应就好了\n\n```js\nwoffString = `\n    1234567890店中美家馆\n    小车大市公酒行国品发电金心业商司\n    超生装园场食有新限天面工服海华水\n    房饰城乐汽香部利子老艺花专东肉菜\n    学福饭人百餐茶务通味所山区门药银\n    农龙停尚安广鑫一容动南具源兴鲜记\n    时机烤文康信果阳理锅宝达地儿衣特\n    产西批坊州牛佳化五米修爱北养卖建\n    材三会鸡室红站德王光名丽油院堂烧\n    江社合星货型村自科快便日民营和活\n    童明器烟育宾精屋经居庄石顺林尔县\n    手厅销用好客火雅盛体旅之鞋辣作粉\n    包楼校鱼平彩上吧保永万物教吃设医\n    正造丰健点汤网庆技斯洗料配汇木缘\n    加麻联卫川泰色世方寓风幼羊烫来高\n    厂兰阿贝皮全女拉成云维贸道术运都\n    口博河瑞宏京际路祥青镇厨培力惠连\n    马鸿钢训影甲助窗布富牌头四多妆吉\n    苑沙恒隆春干饼氏里二管诚制售嘉长\n    轩杂副清计黄讯太鸭号街交与叉附近\n    层旁对巷栋环省桥湖段乡厦府铺内侧\n    元购前幢滨处向座下臬凤港开关景泉\n    塘放昌线湾政步宁解白田町溪十八古\n    双胜本单同九迎第台玉锦底后七斜期\n    武岭松角纪朝峰六振珠局岗洲横边济\n    井办汉代临弄团外塔杨铁浦字年岛陵\n    原梅进荣友虹央桂沿事津凯莲丁秀柳\n    集紫旗张谷的是不了很还个也这我就\n    在以可到错没去过感次要比觉看得说\n    常真们但最喜哈么别位能较境非为欢\n    然他挺着价那意种想出员两推做排实\n    分间甜度起满给热完格荐喝等其再几\n    只现朋候样直而买于般豆量选奶打每\n    评少算又因情找些份置适什蛋师气你\n    姐棒试总定啊足级整带虾如态且尝主\n    话强当更板知己无酸让入啦式笑赞片\n    酱差像提队走嫩才刚午接重串回晚微\n    周值费性桌拍跟块调糕\n    `\n```\n\n以上获取`北`字 就是 `woffString[font.data.cmap['61352']] => woffString[125]`\n\n## 字符串转进制\n```js\nfunction stringToEntity(str, radix = 10) {\n    let arr = str.split('')\n    let tmp = arr.map(item => item.charCodeAt(0).toString(radix) ).join('');\n    // console.log(`'${str}' 转实体为 '${tmp}'`)\n    return tmp\n}\n```\n\n以上就是解密全过程\n\n\n\n\n\n\n\n","source":"_posts/大众点评文字数字解密.md","raw":"---\ntitle: 大众点评文字数字解密\ndate: 2020-05-08 10:54:10\ntags: [js]\ncategorys: js \n---\n\n## 原理\n\n百度发现大众点评网上面的文字数字加密是通过字体文件加密的，也就是说用css 的class 用不同的类对应的字体文件，再加下面的特殊字符跟字体文件上面的编码一一对应起来\n\n## 先看一下大众点评吧\n\n![1588908462_1_.jpg](https://i.loli.net/2020/05/08/emBOdhVyIK4TA8v.png)\n\n我们从上图可以看到，大众点评的地址是加密的，所以我们不能直接从html中获取\n\n## 发现\n\n发现上图 `.num` 类和 `.address` 类用的 `ba****.css`, 打开此css发现这些类使用的字体文件都是不同的，看下图：\n\n![1588919508_1_.jpg](https://i.loli.net/2020/05/08/7VHbsvjQtkfDgal.png)\n\n> 我们可以下载FontCreator 打开上图链接的.woff, 或者用百度的FontEditor(之前可以用，后来不行了)\n\n![1588921914_1_.jpg](https://i.loli.net/2020/05/08/AbBZvV9gKpExaFW.png)\n\n我们用`北`做例子，在大众点评上加密的字符是 ``, 我们发现.woff 文件用forntCreator 上面的16进制码是 `efa8`, \n\n## js 解析字体文件工具 fonteditor-core\n\n它会把.woff 文件中某个 字体转成十进制然后一一对应起来\n\n```js\nvar Font = require('fonteditor-core').Font;\nvar fs = require('fs');\nvar buffer = fs.readFileSync('4.woff');\n// 不加这个文件会报错  \n// https://cdn.bootcdn.net/ajax/libs/pako/1.0.10/pako_inflate.min.js\nlet inflate_daddy = require(\"./pako_inflate.min\"); \n\nvar font = Font.create(buffer, {\n    type: 'woff', // support ttf,woff,eot,otf,svg\n    inflate: inflate_daddy.inflate\n});\nconsole.log(font.data.cmap);\n\n// font.data.cmap \n// key值代表十进制, value代表的是第几个字体\n{\n    '120': 1,\n    '57346': 81,\n    '57348': 275,\n    ...\n    '61352': 125\n}\n```\n\n上面`北`字为例，加密字符 ``,转成十进制就是 `61352` 也就是在.woff 文件第`125`个字,但机器是不知道上面第125个字是什么字，所以我们做一个.woff文件的所有字体人工抽取出来然后一一对应就好了\n\n```js\nwoffString = `\n    1234567890店中美家馆\n    小车大市公酒行国品发电金心业商司\n    超生装园场食有新限天面工服海华水\n    房饰城乐汽香部利子老艺花专东肉菜\n    学福饭人百餐茶务通味所山区门药银\n    农龙停尚安广鑫一容动南具源兴鲜记\n    时机烤文康信果阳理锅宝达地儿衣特\n    产西批坊州牛佳化五米修爱北养卖建\n    材三会鸡室红站德王光名丽油院堂烧\n    江社合星货型村自科快便日民营和活\n    童明器烟育宾精屋经居庄石顺林尔县\n    手厅销用好客火雅盛体旅之鞋辣作粉\n    包楼校鱼平彩上吧保永万物教吃设医\n    正造丰健点汤网庆技斯洗料配汇木缘\n    加麻联卫川泰色世方寓风幼羊烫来高\n    厂兰阿贝皮全女拉成云维贸道术运都\n    口博河瑞宏京际路祥青镇厨培力惠连\n    马鸿钢训影甲助窗布富牌头四多妆吉\n    苑沙恒隆春干饼氏里二管诚制售嘉长\n    轩杂副清计黄讯太鸭号街交与叉附近\n    层旁对巷栋环省桥湖段乡厦府铺内侧\n    元购前幢滨处向座下臬凤港开关景泉\n    塘放昌线湾政步宁解白田町溪十八古\n    双胜本单同九迎第台玉锦底后七斜期\n    武岭松角纪朝峰六振珠局岗洲横边济\n    井办汉代临弄团外塔杨铁浦字年岛陵\n    原梅进荣友虹央桂沿事津凯莲丁秀柳\n    集紫旗张谷的是不了很还个也这我就\n    在以可到错没去过感次要比觉看得说\n    常真们但最喜哈么别位能较境非为欢\n    然他挺着价那意种想出员两推做排实\n    分间甜度起满给热完格荐喝等其再几\n    只现朋候样直而买于般豆量选奶打每\n    评少算又因情找些份置适什蛋师气你\n    姐棒试总定啊足级整带虾如态且尝主\n    话强当更板知己无酸让入啦式笑赞片\n    酱差像提队走嫩才刚午接重串回晚微\n    周值费性桌拍跟块调糕\n    `\n```\n\n以上获取`北`字 就是 `woffString[font.data.cmap['61352']] => woffString[125]`\n\n## 字符串转进制\n```js\nfunction stringToEntity(str, radix = 10) {\n    let arr = str.split('')\n    let tmp = arr.map(item => item.charCodeAt(0).toString(radix) ).join('');\n    // console.log(`'${str}' 转实体为 '${tmp}'`)\n    return tmp\n}\n```\n\n以上就是解密全过程\n\n\n\n\n\n\n\n","slug":"大众点评文字数字解密","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrg7003cmroj8cxzhlky","content":"<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>百度发现大众点评网上面的文字数字加密是通过字体文件加密的，也就是说用css 的class 用不同的类对应的字体文件，再加下面的特殊字符跟字体文件上面的编码一一对应起来</p>\n<h2 id=\"先看一下大众点评吧\"><a href=\"#先看一下大众点评吧\" class=\"headerlink\" title=\"先看一下大众点评吧\"></a>先看一下大众点评吧</h2><p><img src=\"https://i.loli.net/2020/05/08/emBOdhVyIK4TA8v.png\" alt=\"1588908462_1_.jpg\"></p>\n<p>我们从上图可以看到，大众点评的地址是加密的，所以我们不能直接从html中获取</p>\n<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a>发现</h2><p>发现上图 <code>.num</code> 类和 <code>.address</code> 类用的 <code>ba****.css</code>, 打开此css发现这些类使用的字体文件都是不同的，看下图：</p>\n<p><img src=\"https://i.loli.net/2020/05/08/7VHbsvjQtkfDgal.png\" alt=\"1588919508_1_.jpg\"></p>\n<blockquote>\n<p>我们可以下载FontCreator 打开上图链接的.woff, 或者用百度的FontEditor(之前可以用，后来不行了)</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/05/08/AbBZvV9gKpExaFW.png\" alt=\"1588921914_1_.jpg\"></p>\n<p>我们用<code>北</code>做例子，在大众点评上加密的字符是 <code></code>, 我们发现.woff 文件用forntCreator 上面的16进制码是 <code>efa8</code>, </p>\n<h2 id=\"js-解析字体文件工具-fonteditor-core\"><a href=\"#js-解析字体文件工具-fonteditor-core\" class=\"headerlink\" title=\"js 解析字体文件工具 fonteditor-core\"></a>js 解析字体文件工具 fonteditor-core</h2><p>它会把.woff 文件中某个 字体转成十进制然后一一对应起来</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> Font <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fonteditor-core'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Font<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4.woff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 不加这个文件会报错  </span>\n<span class=\"token comment\" spellcheck=\"true\">// https://cdn.bootcdn.net/ajax/libs/pako/1.0.10/pako_inflate.min.js</span>\n<span class=\"token keyword\">let</span> inflate_daddy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./pako_inflate.min\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">var</span> font <span class=\"token operator\">=</span> Font<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'woff'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// support ttf,woff,eot,otf,svg</span>\n    inflate<span class=\"token punctuation\">:</span> inflate_daddy<span class=\"token punctuation\">.</span>inflate\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>font<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>cmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// font.data.cmap </span>\n<span class=\"token comment\" spellcheck=\"true\">// key值代表十进制, value代表的是第几个字体</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'120'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'57346'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">81</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'57348'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">275</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token string\">'61352'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">125</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>上面<code>北</code>字为例，加密字符 <code></code>,转成十进制就是 <code>61352</code> 也就是在.woff 文件第<code>125</code>个字,但机器是不知道上面第125个字是什么字，所以我们做一个.woff文件的所有字体人工抽取出来然后一一对应就好了</p>\n<pre class=\" language-js\"><code class=\"language-js\">woffString <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n    1234567890店中美家馆\n    小车大市公酒行国品发电金心业商司\n    超生装园场食有新限天面工服海华水\n    房饰城乐汽香部利子老艺花专东肉菜\n    学福饭人百餐茶务通味所山区门药银\n    农龙停尚安广鑫一容动南具源兴鲜记\n    时机烤文康信果阳理锅宝达地儿衣特\n    产西批坊州牛佳化五米修爱北养卖建\n    材三会鸡室红站德王光名丽油院堂烧\n    江社合星货型村自科快便日民营和活\n    童明器烟育宾精屋经居庄石顺林尔县\n    手厅销用好客火雅盛体旅之鞋辣作粉\n    包楼校鱼平彩上吧保永万物教吃设医\n    正造丰健点汤网庆技斯洗料配汇木缘\n    加麻联卫川泰色世方寓风幼羊烫来高\n    厂兰阿贝皮全女拉成云维贸道术运都\n    口博河瑞宏京际路祥青镇厨培力惠连\n    马鸿钢训影甲助窗布富牌头四多妆吉\n    苑沙恒隆春干饼氏里二管诚制售嘉长\n    轩杂副清计黄讯太鸭号街交与叉附近\n    层旁对巷栋环省桥湖段乡厦府铺内侧\n    元购前幢滨处向座下臬凤港开关景泉\n    塘放昌线湾政步宁解白田町溪十八古\n    双胜本单同九迎第台玉锦底后七斜期\n    武岭松角纪朝峰六振珠局岗洲横边济\n    井办汉代临弄团外塔杨铁浦字年岛陵\n    原梅进荣友虹央桂沿事津凯莲丁秀柳\n    集紫旗张谷的是不了很还个也这我就\n    在以可到错没去过感次要比觉看得说\n    常真们但最喜哈么别位能较境非为欢\n    然他挺着价那意种想出员两推做排实\n    分间甜度起满给热完格荐喝等其再几\n    只现朋候样直而买于般豆量选奶打每\n    评少算又因情找些份置适什蛋师气你\n    姐棒试总定啊足级整带虾如态且尝主\n    话强当更板知己无酸让入啦式笑赞片\n    酱差像提队走嫩才刚午接重串回晚微\n    周值费性桌拍跟块调糕\n    `</span></span></code></pre>\n<p>以上获取<code>北</code>字 就是 <code>woffString[font.data.cmap[&#39;61352&#39;]] =&gt; woffString[125]</code></p>\n<h2 id=\"字符串转进制\"><a href=\"#字符串转进制\" class=\"headerlink\" title=\"字符串转进制\"></a>字符串转进制</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">stringToEntity</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> radix <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=</span><span class=\"token operator\">></span> item<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>radix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// console.log(`'${str}' 转实体为 '${tmp}'`)</span>\n    <span class=\"token keyword\">return</span> tmp\n<span class=\"token punctuation\">}</span></code></pre>\n<p>以上就是解密全过程</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>百度发现大众点评网上面的文字数字加密是通过字体文件加密的，也就是说用css 的class 用不同的类对应的字体文件，再加下面的特殊字符跟字体文件上面的编码一一对应起来</p>\n<h2 id=\"先看一下大众点评吧\"><a href=\"#先看一下大众点评吧\" class=\"headerlink\" title=\"先看一下大众点评吧\"></a>先看一下大众点评吧</h2><p><img src=\"https://i.loli.net/2020/05/08/emBOdhVyIK4TA8v.png\" alt=\"1588908462_1_.jpg\"></p>\n<p>我们从上图可以看到，大众点评的地址是加密的，所以我们不能直接从html中获取</p>\n<h2 id=\"发现\"><a href=\"#发现\" class=\"headerlink\" title=\"发现\"></a>发现</h2><p>发现上图 <code>.num</code> 类和 <code>.address</code> 类用的 <code>ba****.css</code>, 打开此css发现这些类使用的字体文件都是不同的，看下图：</p>\n<p><img src=\"https://i.loli.net/2020/05/08/7VHbsvjQtkfDgal.png\" alt=\"1588919508_1_.jpg\"></p>\n<blockquote>\n<p>我们可以下载FontCreator 打开上图链接的.woff, 或者用百度的FontEditor(之前可以用，后来不行了)</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/05/08/AbBZvV9gKpExaFW.png\" alt=\"1588921914_1_.jpg\"></p>\n<p>我们用<code>北</code>做例子，在大众点评上加密的字符是 <code></code>, 我们发现.woff 文件用forntCreator 上面的16进制码是 <code>efa8</code>, </p>\n<h2 id=\"js-解析字体文件工具-fonteditor-core\"><a href=\"#js-解析字体文件工具-fonteditor-core\" class=\"headerlink\" title=\"js 解析字体文件工具 fonteditor-core\"></a>js 解析字体文件工具 fonteditor-core</h2><p>它会把.woff 文件中某个 字体转成十进制然后一一对应起来</p>\n<pre><code class=\"js\">var Font = require(&#39;fonteditor-core&#39;).Font;\nvar fs = require(&#39;fs&#39;);\nvar buffer = fs.readFileSync(&#39;4.woff&#39;);\n// 不加这个文件会报错  \n// https://cdn.bootcdn.net/ajax/libs/pako/1.0.10/pako_inflate.min.js\nlet inflate_daddy = require(&quot;./pako_inflate.min&quot;); \n\nvar font = Font.create(buffer, {\n    type: &#39;woff&#39;, // support ttf,woff,eot,otf,svg\n    inflate: inflate_daddy.inflate\n});\nconsole.log(font.data.cmap);\n\n// font.data.cmap \n// key值代表十进制, value代表的是第几个字体\n{\n    &#39;120&#39;: 1,\n    &#39;57346&#39;: 81,\n    &#39;57348&#39;: 275,\n    ...\n    &#39;61352&#39;: 125\n}</code></pre>\n<p>上面<code>北</code>字为例，加密字符 <code></code>,转成十进制就是 <code>61352</code> 也就是在.woff 文件第<code>125</code>个字,但机器是不知道上面第125个字是什么字，所以我们做一个.woff文件的所有字体人工抽取出来然后一一对应就好了</p>\n<pre><code class=\"js\">woffString = `\n    1234567890店中美家馆\n    小车大市公酒行国品发电金心业商司\n    超生装园场食有新限天面工服海华水\n    房饰城乐汽香部利子老艺花专东肉菜\n    学福饭人百餐茶务通味所山区门药银\n    农龙停尚安广鑫一容动南具源兴鲜记\n    时机烤文康信果阳理锅宝达地儿衣特\n    产西批坊州牛佳化五米修爱北养卖建\n    材三会鸡室红站德王光名丽油院堂烧\n    江社合星货型村自科快便日民营和活\n    童明器烟育宾精屋经居庄石顺林尔县\n    手厅销用好客火雅盛体旅之鞋辣作粉\n    包楼校鱼平彩上吧保永万物教吃设医\n    正造丰健点汤网庆技斯洗料配汇木缘\n    加麻联卫川泰色世方寓风幼羊烫来高\n    厂兰阿贝皮全女拉成云维贸道术运都\n    口博河瑞宏京际路祥青镇厨培力惠连\n    马鸿钢训影甲助窗布富牌头四多妆吉\n    苑沙恒隆春干饼氏里二管诚制售嘉长\n    轩杂副清计黄讯太鸭号街交与叉附近\n    层旁对巷栋环省桥湖段乡厦府铺内侧\n    元购前幢滨处向座下臬凤港开关景泉\n    塘放昌线湾政步宁解白田町溪十八古\n    双胜本单同九迎第台玉锦底后七斜期\n    武岭松角纪朝峰六振珠局岗洲横边济\n    井办汉代临弄团外塔杨铁浦字年岛陵\n    原梅进荣友虹央桂沿事津凯莲丁秀柳\n    集紫旗张谷的是不了很还个也这我就\n    在以可到错没去过感次要比觉看得说\n    常真们但最喜哈么别位能较境非为欢\n    然他挺着价那意种想出员两推做排实\n    分间甜度起满给热完格荐喝等其再几\n    只现朋候样直而买于般豆量选奶打每\n    评少算又因情找些份置适什蛋师气你\n    姐棒试总定啊足级整带虾如态且尝主\n    话强当更板知己无酸让入啦式笑赞片\n    酱差像提队走嫩才刚午接重串回晚微\n    周值费性桌拍跟块调糕\n    `</code></pre>\n<p>以上获取<code>北</code>字 就是 <code>woffString[font.data.cmap[&#39;61352&#39;]] =&gt; woffString[125]</code></p>\n<h2 id=\"字符串转进制\"><a href=\"#字符串转进制\" class=\"headerlink\" title=\"字符串转进制\"></a>字符串转进制</h2><pre><code class=\"js\">function stringToEntity(str, radix = 10) {\n    let arr = str.split(&#39;&#39;)\n    let tmp = arr.map(item =&gt; item.charCodeAt(0).toString(radix) ).join(&#39;&#39;);\n    // console.log(`&#39;${str}&#39; 转实体为 &#39;${tmp}&#39;`)\n    return tmp\n}</code></pre>\n<p>以上就是解密全过程</p>\n"},{"title":"奇偶链表","date":"2020-08-25T18:21:04.000Z","type":"algorithm","_content":"\n[奇偶链表](https://leetcode-cn.com/problems/odd-even-linked-list/)\n\n## 题目描述\n\n给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。\n\n请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。\n\n### 示例\n\n```html\n输入: 1->2->3->4->5->NULL\n输出: 1->3->5->2->4->NULL\n```\n\n### 分析\n\n* 先建立 `odd` 和 `even` 指针，分别指向的是**奇链表**, **偶链表**\n* 建立 `p` 和 `q`, 指向 `odd` 和 `even`\n* 遍历 `head` 链表，`odd.next 指向 head`, `even.next = head.next`, 就是说一次遍历直接跳两个元素\n* 修改 head 指向 `head = head.next.next`, 但此时需要判断 `head.next`是否为`null`\n* 修改 `odd` 和 `even`, `odd = odd.next; even = even.next`;\n* 最后修改 `odd.next` 指向 `even` 的开头即可\n\n\n## 题解\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar oddEvenList = function(head) {\n    let odd = new ListNode(\"head\", null);\n    let even = new ListNode(\"head\", null);\n\n    let p = odd;\n    let q = even;\n\n    while(head) {\n        odd.next = head;\n        even.next = head.next ? head.next : null\n        head = head.next && head.next.next ? head.next.next : null;\n        odd = odd.next;\n        even = even.next;\n    }  \n    odd.next = q.next;\n    return p.next;\n\n};\n```","source":"_posts/奇偶链表.md","raw":"---\ntitle: 奇偶链表\ndate: 2020-08-25 18:21:04\ntags: [algorithm-链表]\ntype: algorithm \n---\n\n[奇偶链表](https://leetcode-cn.com/problems/odd-even-linked-list/)\n\n## 题目描述\n\n给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。\n\n请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。\n\n### 示例\n\n```html\n输入: 1->2->3->4->5->NULL\n输出: 1->3->5->2->4->NULL\n```\n\n### 分析\n\n* 先建立 `odd` 和 `even` 指针，分别指向的是**奇链表**, **偶链表**\n* 建立 `p` 和 `q`, 指向 `odd` 和 `even`\n* 遍历 `head` 链表，`odd.next 指向 head`, `even.next = head.next`, 就是说一次遍历直接跳两个元素\n* 修改 head 指向 `head = head.next.next`, 但此时需要判断 `head.next`是否为`null`\n* 修改 `odd` 和 `even`, `odd = odd.next; even = even.next`;\n* 最后修改 `odd.next` 指向 `even` 的开头即可\n\n\n## 题解\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar oddEvenList = function(head) {\n    let odd = new ListNode(\"head\", null);\n    let even = new ListNode(\"head\", null);\n\n    let p = odd;\n    let q = even;\n\n    while(head) {\n        odd.next = head;\n        even.next = head.next ? head.next : null\n        head = head.next && head.next.next ? head.next.next : null;\n        odd = odd.next;\n        even = even.next;\n    }  \n    odd.next = q.next;\n    return p.next;\n\n};\n```","slug":"奇偶链表","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrg9003gmrojgz5k2994","content":"<p><a href=\"https://leetcode-cn.com/problems/odd-even-linked-list/\" target=\"_blank\" rel=\"noopener\">奇偶链表</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p>\n<p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\" language-html\"><code class=\"language-html\">输入: 1->2->3->4->5->NULL\n输出: 1->3->5->2->4->NULL</code></pre>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>先建立 <code>odd</code> 和 <code>even</code> 指针，分别指向的是<strong>奇链表</strong>, <strong>偶链表</strong></li>\n<li>建立 <code>p</code> 和 <code>q</code>, 指向 <code>odd</code> 和 <code>even</code></li>\n<li>遍历 <code>head</code> 链表，<code>odd.next 指向 head</code>, <code>even.next = head.next</code>, 就是说一次遍历直接跳两个元素</li>\n<li>修改 head 指向 <code>head = head.next.next</code>, 但此时需要判断 <code>head.next</code>是否为<code>null</code></li>\n<li>修改 <code>odd</code> 和 <code>even</code>, <code>odd = odd.next; even = even.next</code>;</li>\n<li>最后修改 <code>odd.next</code> 指向 <code>even</code> 的开头即可</li>\n</ul>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @param {ListNode} head\n * @return {ListNode}\n */</span>\n<span class=\"token keyword\">var</span> oddEvenList <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> odd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"head\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> even <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"head\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> odd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> q <span class=\"token operator\">=</span> even<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        odd<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        even<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">?</span> head<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">&amp;&amp;</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">?</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        odd <span class=\"token operator\">=</span> odd<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        even <span class=\"token operator\">=</span> even<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n    odd<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/odd-even-linked-list/\" target=\"_blank\" rel=\"noopener\">奇偶链表</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p>\n<p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code class=\"html\">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</code></pre>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>先建立 <code>odd</code> 和 <code>even</code> 指针，分别指向的是<strong>奇链表</strong>, <strong>偶链表</strong></li>\n<li>建立 <code>p</code> 和 <code>q</code>, 指向 <code>odd</code> 和 <code>even</code></li>\n<li>遍历 <code>head</code> 链表，<code>odd.next 指向 head</code>, <code>even.next = head.next</code>, 就是说一次遍历直接跳两个元素</li>\n<li>修改 head 指向 <code>head = head.next.next</code>, 但此时需要判断 <code>head.next</code>是否为<code>null</code></li>\n<li>修改 <code>odd</code> 和 <code>even</code>, <code>odd = odd.next; even = even.next</code>;</li>\n<li>最后修改 <code>odd.next</code> 指向 <code>even</code> 的开头即可</li>\n</ul>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><pre><code class=\"js\">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar oddEvenList = function(head) {\n    let odd = new ListNode(&quot;head&quot;, null);\n    let even = new ListNode(&quot;head&quot;, null);\n\n    let p = odd;\n    let q = even;\n\n    while(head) {\n        odd.next = head;\n        even.next = head.next ? head.next : null\n        head = head.next &amp;&amp; head.next.next ? head.next.next : null;\n        odd = odd.next;\n        even = even.next;\n    }  \n    odd.next = q.next;\n    return p.next;\n\n};</code></pre>\n"},{"title":"字符串相乘","date":"2020-08-13T16:02:26.000Z","type":"algorithm","_content":"\n[字符串相乘](https://leetcode-cn.com/problems/multiply-strings/)\n\n## 题目描述\n\n给定两个字符串 `num1` 和 `num2` ,返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。\n\n示例：\n\n```html\n输入: num1 = \"2\", num2 = \"3\"\n输出: \"6\"\n```\n\n\n## 分析\n\n我们以 `num1 = \"123\"`, `num2 = \"456\"`做例子\n\n```html\n       1  2  3\n       4  5  6\n    --------------\n    1  3  6  8\n    9  1  2  0       \n 4  5  6\n ------------------\n 5  6  0  8  8\n```\n\n* 我们循环 123，分别乘以下面的 456,\n* 3 * 456 得到的是 1368\n* 2 * 456 得到的是 912， 但此时的2应该是20， 所以得到的结果是 9120\n* 1 * 456 得到的是 456， 但此时的1应该是100，所以得到的结果是 45600\n* 将这三个结果加起来即可\n\n**注意：**我们每次相乘的结果都用数组存起来， `1368 => [1,3,6,8]` 如此类推\n\n* 后面就是大数相加了，将所有的数组都加起来，另外这里使用了分治 \n\n## 代码\n\n```js\n/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n    if(num1 == 0 || num2 == 0) {\n        return \"0\";\n    }\n    \n    let length1 = num1.length;\n    let length2 = num2.length;\n    \n    let multiplyAdd = 0;\n    let times = 0; \n    let resArr = []\n    for(let i = length1 - 1; i >= 0; i--) {\n        let currentNum1 = num1[i] * 1\n        let resultArray = []\n        for(let j = length2 - 1; j >= 0; j--) {\n            const tempRes = currentNum1 * (num2[j] * 1) + multiplyAdd;\n            const div = tempRes % 10;\n            multiplyAdd = Math.floor(tempRes / 10);\n            resultArray.unshift(div)\n        }\n        if(multiplyAdd > 0) {\n            resultArray.unshift(multiplyAdd);\n            multiplyAdd = 0;\n        }\n        for(let k = 0; k < times; k++) {\n            resultArray.push(0)\n        }\n        times++;\n        resArr.push(resultArray.join(\"\"))\n    }\n    if(resArr.length <= 1) {\n        return resArr.join(\"\")\n    }\n    const test = fenzhi(resArr);\n\n    return test.join(\"\");\n   \n};\n\n/** \n * [\"1386\", \"9120\", \"45600\"]\n * 递归分支\n * 递归结束条件时，数组只剩下一个的时候, 直接返回\n * 剩下的就是左右两个相加了 combine(left, right),  // 简单说就是 left + right\n */ \nvar fenzhi = function(arr) {\n    let length = arr.length;\n    if(length == 1) {\n        return arr.join(\"\");\n    }\n    \n    const currentIndex = Math.floor(arr.length / 2);\n    let left = arr.slice(0, currentIndex);\n    let right = arr.slice(currentIndex, length);\n\n    return  combine( fenzhi(left) , fenzhi(right) );\n}\n\n// 我这里使用大数相加\nvar combine = function(arr1, arr2) {\n    let result = [];\n    let length1 = arr1.length - 1;\n    let length2 = arr2.length - 1;\n\n    let add = 0;\n\n    let i = 0;\n    let j = 0;\n\n    while(length1 >= 0 || length2 >= 0) {\n        let num1 = length1 >= 0 ? arr1[length1] : 0;\n        let num2 = length2 >= 0 ? arr2[length2] : 0\n        let res = num1 * 1 + num2 * 1 + add * 1;\n        let div = res % 10;\n        add = Math.floor(res / 10);\n        result.unshift(div);\n        length2--;\n        length1--;\n    }\n    if(add > 0) {\n        result.unshift(add);\n    }\n    // console.log(\"result\", result)\n    return result;\n}\n```\n\n","source":"_posts/字符串相乘.md","raw":"---\ntitle: 字符串相乘\ndate: 2020-08-13 16:02:26\ntags: [algorithm-分治, algorithm-数组]\ntype: algorithm\n---\n\n[字符串相乘](https://leetcode-cn.com/problems/multiply-strings/)\n\n## 题目描述\n\n给定两个字符串 `num1` 和 `num2` ,返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。\n\n示例：\n\n```html\n输入: num1 = \"2\", num2 = \"3\"\n输出: \"6\"\n```\n\n\n## 分析\n\n我们以 `num1 = \"123\"`, `num2 = \"456\"`做例子\n\n```html\n       1  2  3\n       4  5  6\n    --------------\n    1  3  6  8\n    9  1  2  0       \n 4  5  6\n ------------------\n 5  6  0  8  8\n```\n\n* 我们循环 123，分别乘以下面的 456,\n* 3 * 456 得到的是 1368\n* 2 * 456 得到的是 912， 但此时的2应该是20， 所以得到的结果是 9120\n* 1 * 456 得到的是 456， 但此时的1应该是100，所以得到的结果是 45600\n* 将这三个结果加起来即可\n\n**注意：**我们每次相乘的结果都用数组存起来， `1368 => [1,3,6,8]` 如此类推\n\n* 后面就是大数相加了，将所有的数组都加起来，另外这里使用了分治 \n\n## 代码\n\n```js\n/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n    if(num1 == 0 || num2 == 0) {\n        return \"0\";\n    }\n    \n    let length1 = num1.length;\n    let length2 = num2.length;\n    \n    let multiplyAdd = 0;\n    let times = 0; \n    let resArr = []\n    for(let i = length1 - 1; i >= 0; i--) {\n        let currentNum1 = num1[i] * 1\n        let resultArray = []\n        for(let j = length2 - 1; j >= 0; j--) {\n            const tempRes = currentNum1 * (num2[j] * 1) + multiplyAdd;\n            const div = tempRes % 10;\n            multiplyAdd = Math.floor(tempRes / 10);\n            resultArray.unshift(div)\n        }\n        if(multiplyAdd > 0) {\n            resultArray.unshift(multiplyAdd);\n            multiplyAdd = 0;\n        }\n        for(let k = 0; k < times; k++) {\n            resultArray.push(0)\n        }\n        times++;\n        resArr.push(resultArray.join(\"\"))\n    }\n    if(resArr.length <= 1) {\n        return resArr.join(\"\")\n    }\n    const test = fenzhi(resArr);\n\n    return test.join(\"\");\n   \n};\n\n/** \n * [\"1386\", \"9120\", \"45600\"]\n * 递归分支\n * 递归结束条件时，数组只剩下一个的时候, 直接返回\n * 剩下的就是左右两个相加了 combine(left, right),  // 简单说就是 left + right\n */ \nvar fenzhi = function(arr) {\n    let length = arr.length;\n    if(length == 1) {\n        return arr.join(\"\");\n    }\n    \n    const currentIndex = Math.floor(arr.length / 2);\n    let left = arr.slice(0, currentIndex);\n    let right = arr.slice(currentIndex, length);\n\n    return  combine( fenzhi(left) , fenzhi(right) );\n}\n\n// 我这里使用大数相加\nvar combine = function(arr1, arr2) {\n    let result = [];\n    let length1 = arr1.length - 1;\n    let length2 = arr2.length - 1;\n\n    let add = 0;\n\n    let i = 0;\n    let j = 0;\n\n    while(length1 >= 0 || length2 >= 0) {\n        let num1 = length1 >= 0 ? arr1[length1] : 0;\n        let num2 = length2 >= 0 ? arr2[length2] : 0\n        let res = num1 * 1 + num2 * 1 + add * 1;\n        let div = res % 10;\n        add = Math.floor(res / 10);\n        result.unshift(div);\n        length2--;\n        length1--;\n    }\n    if(add > 0) {\n        result.unshift(add);\n    }\n    // console.log(\"result\", result)\n    return result;\n}\n```\n\n","slug":"字符串相乘","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrga003jmroj537z4u6z","content":"<p><a href=\"https://leetcode-cn.com/problems/multiply-strings/\" target=\"_blank\" rel=\"noopener\">字符串相乘</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定两个字符串 <code>num1</code> 和 <code>num2</code> ,返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p>\n<p>示例：</p>\n<pre class=\" language-html\"><code class=\"language-html\">输入: num1 = \"2\", num2 = \"3\"\n输出: \"6\"</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们以 <code>num1 = &quot;123&quot;</code>, <code>num2 = &quot;456&quot;</code>做例子</p>\n<pre class=\" language-html\"><code class=\"language-html\">       1  2  3\n       4  5  6\n    --------------\n    1  3  6  8\n    9  1  2  0       \n 4  5  6\n ------------------\n 5  6  0  8  8</code></pre>\n<ul>\n<li>我们循环 123，分别乘以下面的 456,</li>\n<li>3 * 456 得到的是 1368</li>\n<li>2 * 456 得到的是 912， 但此时的2应该是20， 所以得到的结果是 9120</li>\n<li>1 * 456 得到的是 456， 但此时的1应该是100，所以得到的结果是 45600</li>\n<li>将这三个结果加起来即可</li>\n</ul>\n<p><strong>注意：</strong>我们每次相乘的结果都用数组存起来， <code>1368 =&gt; [1,3,6,8]</code> 如此类推</p>\n<ul>\n<li>后面就是大数相加了，将所有的数组都加起来，另外这里使用了分治 </li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */</span>\n<span class=\"token keyword\">var</span> multiply <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> num2 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> length1 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length2 <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> multiplyAdd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> times <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">let</span> resArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> length1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> currentNum1 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">let</span> resultArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> length2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> tempRes <span class=\"token operator\">=</span> currentNum1 <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> multiplyAdd<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> tempRes <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            multiplyAdd <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>tempRes <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultArray<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>multiplyAdd <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resultArray<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>multiplyAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            multiplyAdd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> times<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resultArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        times<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        resArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>resultArray<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> resArr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token function\">fenzhi</span><span class=\"token punctuation\">(</span>resArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/** \n * [\"1386\", \"9120\", \"45600\"]\n * 递归分支\n * 递归结束条件时，数组只剩下一个的时候, 直接返回\n * 剩下的就是左右两个相加了 combine(left, right),  // 简单说就是 left + right\n */</span> \n<span class=\"token keyword\">var</span> fenzhi <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> currentIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>currentIndex<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span>  <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span> <span class=\"token function\">fenzhi</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token function\">fenzhi</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 我这里使用大数相加</span>\n<span class=\"token keyword\">var</span> combine <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length1 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length2 <span class=\"token operator\">=</span> arr2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> add <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>length1 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> length2 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> length1 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> arr1<span class=\"token punctuation\">[</span>length1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> num2 <span class=\"token operator\">=</span> length2 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> arr2<span class=\"token punctuation\">[</span>length2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> num1 <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> num2 <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> add <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> res <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        add <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        length2<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        length1<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>add <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// console.log(\"result\", result)</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/multiply-strings/\" target=\"_blank\" rel=\"noopener\">字符串相乘</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定两个字符串 <code>num1</code> 和 <code>num2</code> ,返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p>\n<p>示例：</p>\n<pre><code class=\"html\">输入: num1 = &quot;2&quot;, num2 = &quot;3&quot;\n输出: &quot;6&quot;</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们以 <code>num1 = &quot;123&quot;</code>, <code>num2 = &quot;456&quot;</code>做例子</p>\n<pre><code class=\"html\">       1  2  3\n       4  5  6\n    --------------\n    1  3  6  8\n    9  1  2  0       \n 4  5  6\n ------------------\n 5  6  0  8  8</code></pre>\n<ul>\n<li>我们循环 123，分别乘以下面的 456,</li>\n<li>3 * 456 得到的是 1368</li>\n<li>2 * 456 得到的是 912， 但此时的2应该是20， 所以得到的结果是 9120</li>\n<li>1 * 456 得到的是 456， 但此时的1应该是100，所以得到的结果是 45600</li>\n<li>将这三个结果加起来即可</li>\n</ul>\n<p><strong>注意：</strong>我们每次相乘的结果都用数组存起来， <code>1368 =&gt; [1,3,6,8]</code> 如此类推</p>\n<ul>\n<li>后面就是大数相加了，将所有的数组都加起来，另外这里使用了分治 </li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n    if(num1 == 0 || num2 == 0) {\n        return &quot;0&quot;;\n    }\n\n    let length1 = num1.length;\n    let length2 = num2.length;\n\n    let multiplyAdd = 0;\n    let times = 0; \n    let resArr = []\n    for(let i = length1 - 1; i &gt;= 0; i--) {\n        let currentNum1 = num1[i] * 1\n        let resultArray = []\n        for(let j = length2 - 1; j &gt;= 0; j--) {\n            const tempRes = currentNum1 * (num2[j] * 1) + multiplyAdd;\n            const div = tempRes % 10;\n            multiplyAdd = Math.floor(tempRes / 10);\n            resultArray.unshift(div)\n        }\n        if(multiplyAdd &gt; 0) {\n            resultArray.unshift(multiplyAdd);\n            multiplyAdd = 0;\n        }\n        for(let k = 0; k &lt; times; k++) {\n            resultArray.push(0)\n        }\n        times++;\n        resArr.push(resultArray.join(&quot;&quot;))\n    }\n    if(resArr.length &lt;= 1) {\n        return resArr.join(&quot;&quot;)\n    }\n    const test = fenzhi(resArr);\n\n    return test.join(&quot;&quot;);\n\n};\n\n/** \n * [&quot;1386&quot;, &quot;9120&quot;, &quot;45600&quot;]\n * 递归分支\n * 递归结束条件时，数组只剩下一个的时候, 直接返回\n * 剩下的就是左右两个相加了 combine(left, right),  // 简单说就是 left + right\n */ \nvar fenzhi = function(arr) {\n    let length = arr.length;\n    if(length == 1) {\n        return arr.join(&quot;&quot;);\n    }\n\n    const currentIndex = Math.floor(arr.length / 2);\n    let left = arr.slice(0, currentIndex);\n    let right = arr.slice(currentIndex, length);\n\n    return  combine( fenzhi(left) , fenzhi(right) );\n}\n\n// 我这里使用大数相加\nvar combine = function(arr1, arr2) {\n    let result = [];\n    let length1 = arr1.length - 1;\n    let length2 = arr2.length - 1;\n\n    let add = 0;\n\n    let i = 0;\n    let j = 0;\n\n    while(length1 &gt;= 0 || length2 &gt;= 0) {\n        let num1 = length1 &gt;= 0 ? arr1[length1] : 0;\n        let num2 = length2 &gt;= 0 ? arr2[length2] : 0\n        let res = num1 * 1 + num2 * 1 + add * 1;\n        let div = res % 10;\n        add = Math.floor(res / 10);\n        result.unshift(div);\n        length2--;\n        length1--;\n    }\n    if(add &gt; 0) {\n        result.unshift(add);\n    }\n    // console.log(&quot;result&quot;, result)\n    return result;\n}</code></pre>\n"},{"title":"字符串解码","date":"2020-05-29T10:25:49.000Z","type":"algorithm","_content":"\n[394. 字符串解码](https://leetcode-cn.com/problems/decode-string/)\n\n## 题目描述\n\n编码规则为：`k[encoded_string]`, 即中括号前表示**重复的次数**，中括号里面的是**重复的字符串**\n\n例子：\n\n```js\ns = \"3[a]2[bc]\", 返回 \"aaabcbc\".\ns = \"3[a2[c]]\", 返回 \"accaccacc\".\ns = \"2[abc]3[cd]ef\", 返回 \"abcabccdcdcdef\".\n```\n\n## 尝试\n\n* 用栈的方式去解决问题\n* 用递归的方式\n\n## 递归解决\n\n* 以`3[a2[c]]`为例子, 变量为`s`\n* 遍历字符串`s`, \n* 如果是`数字`, `/\\d/.test(s[i])`, `i++`,\n* 如果直接是`字母`,那直接往后扫, `i++`\n* 遇到`[`进入递归\n* 遇到`]`结束递归，同时返回`[encode_string]`中括号里面的内容, 同时返回当前`index`，即当前`]`在`s[]`中第几位 \n* 将**第6步**返回的值和**第3步**的重复次数，做个for循环就好了\n\n## 代码实现\n\n```js\nvar decodeString = function(s) {\n    let res = \"\";\n    const sub = generate(s, 0);\n    res += sub.sub;\n    return res\n}\n// 3[a2[c]]\nfunction generate(string, start) {\n    let index = start;\n    let temp = \"\";\n    let tempNum = \"\";\n\n    while(index < string.length) {\n        const current = string[index];\n        if(current == \"[\") {\n            const sub = generate(string, index + 1 );\n            let res = \"\";\n            index = (sub.index)\n            for(let i = 0 ; i < tempNum ; i++) {\n                res += sub.sub\n            }\n            temp += res;\n            tempNum = \"\";\n        } else if(current == \"]\") {\n            let res = temp;\n            return {index: index + 1, sub: res}\n        } else if(/\\d/.test(current)) {\n            tempNum += current\n            index++;\n         } else {\n            temp += current\n            index++\n         }\n    }\n    return {index: index, sub: temp} \n}\n```\n\n","source":"_posts/字符串解码.md","raw":"---\ntitle: 字符串解码\ndate: 2020-05-29 10:25:49\ntype: algorithm\ntags: algorithm-递归\n---\n\n[394. 字符串解码](https://leetcode-cn.com/problems/decode-string/)\n\n## 题目描述\n\n编码规则为：`k[encoded_string]`, 即中括号前表示**重复的次数**，中括号里面的是**重复的字符串**\n\n例子：\n\n```js\ns = \"3[a]2[bc]\", 返回 \"aaabcbc\".\ns = \"3[a2[c]]\", 返回 \"accaccacc\".\ns = \"2[abc]3[cd]ef\", 返回 \"abcabccdcdcdef\".\n```\n\n## 尝试\n\n* 用栈的方式去解决问题\n* 用递归的方式\n\n## 递归解决\n\n* 以`3[a2[c]]`为例子, 变量为`s`\n* 遍历字符串`s`, \n* 如果是`数字`, `/\\d/.test(s[i])`, `i++`,\n* 如果直接是`字母`,那直接往后扫, `i++`\n* 遇到`[`进入递归\n* 遇到`]`结束递归，同时返回`[encode_string]`中括号里面的内容, 同时返回当前`index`，即当前`]`在`s[]`中第几位 \n* 将**第6步**返回的值和**第3步**的重复次数，做个for循环就好了\n\n## 代码实现\n\n```js\nvar decodeString = function(s) {\n    let res = \"\";\n    const sub = generate(s, 0);\n    res += sub.sub;\n    return res\n}\n// 3[a2[c]]\nfunction generate(string, start) {\n    let index = start;\n    let temp = \"\";\n    let tempNum = \"\";\n\n    while(index < string.length) {\n        const current = string[index];\n        if(current == \"[\") {\n            const sub = generate(string, index + 1 );\n            let res = \"\";\n            index = (sub.index)\n            for(let i = 0 ; i < tempNum ; i++) {\n                res += sub.sub\n            }\n            temp += res;\n            tempNum = \"\";\n        } else if(current == \"]\") {\n            let res = temp;\n            return {index: index + 1, sub: res}\n        } else if(/\\d/.test(current)) {\n            tempNum += current\n            index++;\n         } else {\n            temp += current\n            index++\n         }\n    }\n    return {index: index, sub: temp} \n}\n```\n\n","slug":"字符串解码","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgb003mmroja833d0ny","content":"<p><a href=\"https://leetcode-cn.com/problems/decode-string/\" target=\"_blank\" rel=\"noopener\">394. 字符串解码</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>编码规则为：<code>k[encoded_string]</code>, 即中括号前表示<strong>重复的次数</strong>，中括号里面的是<strong>重复的字符串</strong></p>\n<p>例子：</p>\n<pre class=\" language-js\"><code class=\"language-js\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"3[a]2[bc]\"</span><span class=\"token punctuation\">,</span> 返回 <span class=\"token string\">\"aaabcbc\"</span><span class=\"token punctuation\">.</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"3[a2[c]]\"</span><span class=\"token punctuation\">,</span> 返回 <span class=\"token string\">\"accaccacc\"</span><span class=\"token punctuation\">.</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">\"2[abc]3[cd]ef\"</span><span class=\"token punctuation\">,</span> 返回 <span class=\"token string\">\"abcabccdcdcdef\"</span><span class=\"token punctuation\">.</span></code></pre>\n<h2 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h2><ul>\n<li>用栈的方式去解决问题</li>\n<li>用递归的方式</li>\n</ul>\n<h2 id=\"递归解决\"><a href=\"#递归解决\" class=\"headerlink\" title=\"递归解决\"></a>递归解决</h2><ul>\n<li>以<code>3[a2[c]]</code>为例子, 变量为<code>s</code></li>\n<li>遍历字符串<code>s</code>, </li>\n<li>如果是<code>数字</code>, <code>/\\d/.test(s[i])</code>, <code>i++</code>,</li>\n<li>如果直接是<code>字母</code>,那直接往后扫, <code>i++</code></li>\n<li>遇到<code>[</code>进入递归</li>\n<li>遇到<code>]</code>结束递归，同时返回<code>[encode_string]</code>中括号里面的内容, 同时返回当前<code>index</code>，即当前<code>]</code>在<code>s[]</code>中第几位 </li>\n<li>将<strong>第6步</strong>返回的值和<strong>第3步</strong>的重复次数，做个for循环就好了</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> decodeString <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> sub <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> sub<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// 3[a2[c]]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> tempNum <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> string<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> sub <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tempNum <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> sub<span class=\"token punctuation\">.</span>sub\n            <span class=\"token punctuation\">}</span>\n            temp <span class=\"token operator\">+</span><span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n            tempNum <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">:</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> res<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\d/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            tempNum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> current\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            temp <span class=\"token operator\">+</span><span class=\"token operator\">=</span> current\n            index<span class=\"token operator\">++</span>\n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">:</span> index<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> temp<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/decode-string/\" target=\"_blank\" rel=\"noopener\">394. 字符串解码</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>编码规则为：<code>k[encoded_string]</code>, 即中括号前表示<strong>重复的次数</strong>，中括号里面的是<strong>重复的字符串</strong></p>\n<p>例子：</p>\n<pre><code class=\"js\">s = &quot;3[a]2[bc]&quot;, 返回 &quot;aaabcbc&quot;.\ns = &quot;3[a2[c]]&quot;, 返回 &quot;accaccacc&quot;.\ns = &quot;2[abc]3[cd]ef&quot;, 返回 &quot;abcabccdcdcdef&quot;.</code></pre>\n<h2 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h2><ul>\n<li>用栈的方式去解决问题</li>\n<li>用递归的方式</li>\n</ul>\n<h2 id=\"递归解决\"><a href=\"#递归解决\" class=\"headerlink\" title=\"递归解决\"></a>递归解决</h2><ul>\n<li>以<code>3[a2[c]]</code>为例子, 变量为<code>s</code></li>\n<li>遍历字符串<code>s</code>, </li>\n<li>如果是<code>数字</code>, <code>/\\d/.test(s[i])</code>, <code>i++</code>,</li>\n<li>如果直接是<code>字母</code>,那直接往后扫, <code>i++</code></li>\n<li>遇到<code>[</code>进入递归</li>\n<li>遇到<code>]</code>结束递归，同时返回<code>[encode_string]</code>中括号里面的内容, 同时返回当前<code>index</code>，即当前<code>]</code>在<code>s[]</code>中第几位 </li>\n<li>将<strong>第6步</strong>返回的值和<strong>第3步</strong>的重复次数，做个for循环就好了</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre><code class=\"js\">var decodeString = function(s) {\n    let res = &quot;&quot;;\n    const sub = generate(s, 0);\n    res += sub.sub;\n    return res\n}\n// 3[a2[c]]\nfunction generate(string, start) {\n    let index = start;\n    let temp = &quot;&quot;;\n    let tempNum = &quot;&quot;;\n\n    while(index &lt; string.length) {\n        const current = string[index];\n        if(current == &quot;[&quot;) {\n            const sub = generate(string, index + 1 );\n            let res = &quot;&quot;;\n            index = (sub.index)\n            for(let i = 0 ; i &lt; tempNum ; i++) {\n                res += sub.sub\n            }\n            temp += res;\n            tempNum = &quot;&quot;;\n        } else if(current == &quot;]&quot;) {\n            let res = temp;\n            return {index: index + 1, sub: res}\n        } else if(/\\d/.test(current)) {\n            tempNum += current\n            index++;\n         } else {\n            temp += current\n            index++\n         }\n    }\n    return {index: index, sub: temp} \n}</code></pre>\n"},{"title":"学习webpack源码(2)","date":"2022-02-22T21:17:43.000Z","_content":"\n## 调试\n\n在vscode 中创建调试文件，进行debug, 点击debug，自动创建即可\n\n```js\n{\n  // 使用 IntelliSense 了解相关属性。 \n  // 悬停以查看现有属性的描述。\n  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n  \n    {    \n        \"type\": \"node\",   \n          \"request\": \"launch\",   \n          \"name\": \"debugWebpack\",   \n          \"program\": \"${workspaceFolder}/bin/webpack.js\",  \n          \"console\": \"integratedTerminal\",   \n          \"cwd\": \"${workspaceFolder}\",   \n          \"args\": [        \n            //  \"${workspaceFolder}/examples/examples.js\",   \n            // webpack example 目录，我们选其中一个进行调试即可， 详细 example/README.md\n            \"${workspaceFolder}/examples/commonjs/example.js\",   \n        ]\n    }\n  ]\n}\n```\n\n接之前一篇文章, 创建`compiler`\n1. 接下来可以配合官方文档进行阅读[compiler hook](https://webpack.docschina.org/api/compiler-hooks/)按照官方顺序就是compiler整个生命周期\n\n## 梳理 compiler 生命周期\n1. 首先进行环境初始化, 即`compiler.hook.environment.call()`, 但全局搜索没有做订阅\n2. 环境初始化后会到 `compiler.hook.afterEnvironment.call()`, 说明环境初始化完成， `IgnoringWatchFileSystem`, 应该是做忽略某些文件的监听\n3. 从`lib/webpack` 中的 `new WebpackOptionsApply().process(options, compiler);` 这里其实是对 `option` 的配置进行plugin 的加载，且对compiler 对应周期进行注册监听事件。\n所以这里会经历一个 `entryOption` 的周期， \n例如：`entry 入口`, \n\n```js\n// 处理入口文件, SyncBailHook , 当返回为非undefined时停止往下执行\nnew EntryOptionPlugin().apply(compiler);\n// 执行入口文件回调\ncompiler.hooks.entryOption.call(options.context, options.entry);\n```\n\n```js\n// EntryOptionPlugin\nclass EntryOptionPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.entryOption.tap(\"EntryOptionPlugin\", (context, entry) => {\n\t\t\tEntryOptionPlugin.applyEntryOption(compiler, context, entry);\n\t\t\treturn true;\n\t\t});\n\t}\n  /** 省略其余code */\n}\n```\n\n其余配置也差不多， 然后会执行`compiler.hooks.afterPlugins.call(compiler);` 说明所有的插件已经加载完毕。\n最后调用`compiler.hooks.afterResolvers.call(compiler);` 表示compiler 中3种类型的解析器已经全部设置完成，`new WebpackOptionsApply().process(options, compiler);` 执行完毕\n\n4. 然后 执行 `compiler.hook.initialize.call()` \n5. 最后回到 `lib/webpack` 执行 `compiler.run()`\n\n\n## Compiler \n\n上面已经通过 `new Compiler(options.context)` 创建compiler, 然后调用`compiler.run()` \n进入`lib/compiler.js` 可以看到创建了多个hooks, [关于tapable, 我觉得这篇文章挺好](https://zhuanlan.zhihu.com/p/100974318)\n\n1. `run` 方法执行， 经历了两个`hooks (hooks.beforeRun, hooks.run)`, 最后执行 `this.compiler()`\n\n```js\ncompile(callback) {\n  // 创建 normalFactory, 跟 contextFactory, 创建完成之后调用 hooks.normalModuleFactory.call(); hooks.contextModuleFactory.call()\n  const params = this.newCompilationParams();\n  this.hooks.beforeCompile.callAsync(params, err => {\n    if (err) return callback(err);\n\n    this.hooks.compile.call(params);\n\n    const compilation = this.newCompilation(params);\n\n    const logger = compilation.getLogger(\"webpack.Compiler\");\n\n    logger.time(\"make hook\");\n    this.hooks.make.callAsync(compilation, err => {\n      logger.timeEnd(\"make hook\");\n      if (err) return callback(err);\n\n      logger.time(\"finish make hook\");\n      this.hooks.finishMake.callAsync(compilation, err => {\n        logger.timeEnd(\"finish make hook\");\n        if (err) return callback(err);\n\n        process.nextTick(() => {\n          logger.time(\"finish compilation\");\n          compilation.finish(err => {\n            logger.timeEnd(\"finish compilation\");\n            if (err) return callback(err);\n\n            logger.time(\"seal compilation\");\n            compilation.seal(err => {\n              logger.timeEnd(\"seal compilation\");\n              if (err) return callback(err);\n\n              logger.time(\"afterCompile hook\");\n              this.hooks.afterCompile.callAsync(compilation, err => {\n                logger.timeEnd(\"afterCompile hook\");\n                if (err) return callback(err);\n\n                return callback(null, compilation);\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n```\n\n2.创建 `NormalModuleFactory`, 跟 `contextModuleFactory`, 创建完成之后调用 `hooks.normalModuleFactory.call()`,`hooks.contextModuleFactory.call()`\n`NormalModuleFactory` 用来生成模块的\n\n3. 之后调用 `hooks.beforeCompile`， `beforeCompile` 在[LazyCompilationPlugin](https://github.com/webpack/webpack/blob/main/lib/hmr/LazyCompilationPlugin.js#L331) 下注册了, 这里跟hmr 热更新相关。 同时在[DllReferencePlugin](https://github.com/webpack/webpack/blob/main/lib/DllReferencePlugin.js#L51), 它是用来拆分bundle，提升构建速度的 [具体可以看这](https://webpack.docschina.org/plugins/dll-plugin/)\n\n4. 然后调用 `hook.compile`, 在这[DllReferencePlugin](https://github.com/webpack/webpack/blob/main/lib/DllReferencePlugin.js#L88), [ExternalsPlugin](https://github.com/webpack/webpack/blob/main/lib/ExternalsPlugin.js#L29), [DelegatedPlugin](https://github.com/webpack/webpack/blob/main/lib/DelegatedPlugin.js#L34)三个文件中注册了方法\n\n5. 创建 `compilation` 实例，该实例可以用于factorizeModule, buildModule, addModule， 以及对module的依赖收集, 执行 `compiler.hooks.thisCompilation.call` 以及\n`compiler.hooks.compilation.call`\n\n6. 执行`compiler.hooks.make` 正式进入到编译阶段\n   \n  1. 找到 `tapAsync` 函数， 通过调用`addEntry` 添加入口文件\n  ```js\n  compiler.hooks.make.tapAsync(\"EntryPlugin\", (compilation, callback) => {\n    compilation.addEntry(context, dep, options, err => {\n      callback(err);\n    });\n  });\n  ```\n  2. \n  ```js\n  addEntry(context, entry, optionsOrName, callback) {\n\t\t// TODO webpack 6 remove\n\t\tconst options =\n\t\t\ttypeof optionsOrName === \"object\"\n\t\t\t\t? optionsOrName\n\t\t\t\t: { name: optionsOrName };\n\n\t\tthis._addEntryItem(context, entry, \"dependencies\", options, callback);\n\t}\n  ```\n  3. 然后 `_addEntryItem`, 会判断是否是多入口等等，然后执行`compilation.hooks.addEntry.call` 表示添加入口文件完毕, 最后执行`addModuleTree`\n  ```js\n  this.addModuleTree(\n    {\n      context,\n      dependency: entry,\n      contextInfo: entryData.options.layer\n        ? { issuerLayer: entryData.options.layer }\n        : undefined\n    },\n    (err, module) => {\n      if (err) {\n        this.hooks.failedEntry.call(entry, options, err);\n        return callback(err);\n      }\n      this.hooks.succeedEntry.call(entry, options, module);\n      return callback(null, module);\n    }\n  );\n  ```\n  4. 来看看 `addModuleTree` 函数, `addModuleTree` 里面会执行一个 `handleModuleCreation`\n\n  ```js\n  const Dep = /** @type {DepConstructor} */ (dependency.constructor);\n  // 这里会找到直接找到normalModuleFactory\n  const moduleFactory = this.dependencyFactories.get(Dep);\n  this.handleModuleCreation(\n\t\t\t{\n\t\t\t\tfactory: moduleFactory,\n\t\t\t\tdependencies: [dependency],\n\t\t\t\toriginModule: null,\n\t\t\t\tcontextInfo,\n\t\t\t\tcontext\n\t\t\t},\n\t\t\t(err, result) => {\n\t\t\t\tif (err && this.bail) {\n          // error\n\t\t\t\t} else if (!err && result) {\n\t\t\t\t\tcallback(null, result);\n\t\t\t\t} else {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n  ```\n\n  5. 然后 `handleModuleCreation` 会执行 `factorizeModule`, 先不用管回调\n\n  ```js\n  this.factorizeModule(\n    {\n      currentProfile,\n      factory,\n      dependencies,\n      factoryResult: true,\n      originModule,\n      contextInfo,\n      context\n    },\n    (err, factoryResult) => {\n      /** 省略部分代码， 只需要知道后续会进行 this.addModule(newModule, () => {}) */\n      const newModule = factoryResult.module;\n      this.addModule(newModule, () => {\n        // 下面会执行模块创建以及 依赖收集\n        this._handleModuleBuildAndDependencies(\n          originModule,\n          module,\n          recursive,\n          callback\n        );\n      })\n    }\n  )\n  ```\n\n  6. `this.factorizeModule` 其实就是简单的将当前模块 添加到一个异步队列中\n  ```js\n  // this.factorizeModule 通过new AsyncQueue 创建\n  this.factorizeQueue.add(options, callback);\n  ```\n\n  7. `factorizeQueue.add` 它是一个异步执行 队列，当有一个任务加入到队列中，最后会执行`setImmediate(root._ensureProcessing);`,\n  但值得注意的是`root` 这个参数设计的有点巧妙，是一种父子关系, `this.processDependenciesQueue 的children 包含 this.addModuleQueue, this.factorizeQueue , this.buildQueue` 最后会执行 `setImmediate(root._ensureProcessing);` 当前root 是`this.processDependenciesQueue`。 setImmediate 会在下一次事件循环中调用\n  ```js\n  /** @type {AsyncQueue<Module, Module, Module>} */\n\t\tthis.processDependenciesQueue = new AsyncQueue({\n\t\t\tname: \"processDependencies\",\n\t\t\tparallelism: options.parallelism || 100,\n\t\t\tprocessor: this._processModuleDependencies.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<Module, string, Module>} */\n\t\tthis.addModuleQueue = new AsyncQueue({\n\t\t\tname: \"addModule\",\n\t\t\tparent: this.processDependenciesQueue,\n\t\t\tgetKey: module => module.identifier(),\n\t\t\tprocessor: this._addModule.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<FactorizeModuleOptions, string, Module | ModuleFactoryResult>} */\n\t\tthis.factorizeQueue = new AsyncQueue({\n\t\t\tname: \"factorize\",\n\t\t\tparent: this.addModuleQueue,\n\t\t\tprocessor: this._factorizeModule.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<Module, Module, Module>} */\n\t\tthis.buildQueue = new AsyncQueue({\n\t\t\tname: \"build\",\n\t\t\tparent: this.factorizeQueue,\n\t\t\tprocessor: this._buildModule.bind(this)\n\t\t});\n  ```\n\n  8. ensureProcessing 会遍历当前实例的children，简单说就是遍历 addModuleQueue, factorizeQueue, buildQueue 三个AsyncQueue 然后从这三个实例的队列中找任务去执行\n  ```js\n  _ensureProcessing() {\n    // this = this.processDependenciesQueue,\n    // children 包含 this.addModuleQueue, this.factorizeQueue, this.buildQueue\n\t\tthis._willEnsureProcessing = false;\n\t\tif (this._queued.length > 0) return;\n\t\tif (this._children !== undefined) {\n\t\t\tfor (const child of this._children) {\n\t\t\t\twhile (this._activeTasks < this._parallelism) {\n\t\t\t\t\tconst entry = child._queued.dequeue();\n\t\t\t\t\tif (entry === undefined) break;\n\t\t\t\t\tthis._activeTasks++;\n\t\t\t\t\tentry.state = PROCESSING_STATE;\n\t\t\t\t\tchild._startProcessing(entry);\n\t\t\t\t}\n\t\t\t\tif (child._queued.length > 0) return;\n\t\t\t}\n\t\t}\n\t\tif (!this._willEnsureProcessing) this._needProcessing = false;\n\t}\n  ```\n\n  9. child._startProcessing, 因为一直从入口过来， 此时的child 是factorize\n  ```js\n  _startProcessing(entry) {\n\t\tthis.hooks.beforeStart.callAsync(entry.item, err => {\n\t\t\tif (err) {\n\t\t\t\t// error 处理\n\t\t\t}\n\t\t\tlet inCallback = false;\n\t\t\ttry {\n\t\t\t\t// compliation._addModule 或者 compliation._factorizeModule 或者 compliation._buildModule\n        // 此时调用的是 compliation._factorizeModule\n\t\t\t\tthis._processor(entry.item, (e, r) => {\n\t\t\t\t\tinCallback = true;\n\t\t\t\t\tthis._handleResult(entry, e, r);\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tif (inCallback) throw err;\n\t\t\t\tthis._handleResult(entry, err, null);\n\t\t\t}\n\t\t\tthis.hooks.started.call(entry.item);\n\t\t});\n\t}\n  ```\n\n  10. `_factorizeModule` 调用了 NormalModuleFactory.create\n  调用了 `NormalModuleFactory.hooks.beforeResolve.callAsync`, `NormalModuleFactory.hooks.factorize.callAsync`\n  在`NormalModuleFactory.hooks.factorize.tapAsync`中调用了 `resolve.callAsync`,  在 `resolve.tapAsync` 主要目的是resolve 模块找到模块对应的`loader`\n  以及loader的路径，描述文件等，这里会执行 `enhance-loader`, 并且创建 `parse` 和 `generator` 赋值到`resolveData.createData `\n\n  ```js\n  Object.assign(data.createData, {\n    layer:\n      layer === undefined ? contextInfo.issuerLayer || null : layer,\n    request: stringifyLoadersAndResource(\n      allLoaders,\n      resourceData.resource\n    ),\n    userRequest,\n    rawRequest: request,\n    loaders: allLoaders,\n    resource: resourceData.resource,\n    context:\n      resourceData.context || getContext(resourceData.resource),\n    matchResource: matchResourceData\n      ? matchResourceData.resource\n      : undefined,\n    resourceResolveData: resourceData.data,\n    settings,\n    type,\n    parser: this.getParser(type, settings.parser),\n    parserOptions: settings.parser,\n    generator: this.getGenerator(type, settings.generator),\n    generatorOptions: settings.generator,\n    resolveOptions\n  });\n  ```\n\n  11. 继续执行 `nmf.hooks.afterResolve.callAsync` 和 `nmf.hooks.createModule.callAsync`\n\n  ```js\n  this.hooks.afterResolve.callAsync(resolveData, (err, result) => {\n    const createData = resolveData.createData;\n    this.hooks.createModule.callAsync(createData, resolveData,\n\t\t\t(err, createdModule) => {\n        if(!createModule) {\n          createdModule = new NormalModule(createData);\n        }\n        // SideEffectsFlagPlugin 这里做sideEffect\n        createdModule = this.hooks.module.call(\n          createdModule,\n          createData,\n          resolveData\n        );\n        // 执行完成后调用 hooks.factorize.callAsync 回调 传入当前module 信息, 也就是factory.create 的callback 再callback 中执行AsyncQueue.handleResult\n        return callback(null, createdModule);\n    })\n  })\n  ```\n\n  12. AsyncQueue.handleResult 执行了 加进异步队列的 callback 即 6.5 的回调 addModule, 此时又做了一次6.6 之后的循环 只是改成了`addModule`\n\n  13. `addModule` 经过上面一轮 后执行 \n  ```js\n  this._handleModuleBuildAndDependencies(\n    originModule,\n    module,\n    recursive,\n    callback\n  );\n  ```\n  \n  14. 在 `_handleModuleBuildAndDependencies` 会执行 `this.buildModule` 再回调中会构建依赖\n\n\n\n\n![流程图](./学习webpack源码(2)/2.png)","source":"_posts/学习webpack源码(2).md","raw":"---\ntitle: 学习webpack源码(2)\ndate: 2022-02-22 21:17:43\ntags: webpack\ncategory: [webpack]\n---\n\n## 调试\n\n在vscode 中创建调试文件，进行debug, 点击debug，自动创建即可\n\n```js\n{\n  // 使用 IntelliSense 了解相关属性。 \n  // 悬停以查看现有属性的描述。\n  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n  \n    {    \n        \"type\": \"node\",   \n          \"request\": \"launch\",   \n          \"name\": \"debugWebpack\",   \n          \"program\": \"${workspaceFolder}/bin/webpack.js\",  \n          \"console\": \"integratedTerminal\",   \n          \"cwd\": \"${workspaceFolder}\",   \n          \"args\": [        \n            //  \"${workspaceFolder}/examples/examples.js\",   \n            // webpack example 目录，我们选其中一个进行调试即可， 详细 example/README.md\n            \"${workspaceFolder}/examples/commonjs/example.js\",   \n        ]\n    }\n  ]\n}\n```\n\n接之前一篇文章, 创建`compiler`\n1. 接下来可以配合官方文档进行阅读[compiler hook](https://webpack.docschina.org/api/compiler-hooks/)按照官方顺序就是compiler整个生命周期\n\n## 梳理 compiler 生命周期\n1. 首先进行环境初始化, 即`compiler.hook.environment.call()`, 但全局搜索没有做订阅\n2. 环境初始化后会到 `compiler.hook.afterEnvironment.call()`, 说明环境初始化完成， `IgnoringWatchFileSystem`, 应该是做忽略某些文件的监听\n3. 从`lib/webpack` 中的 `new WebpackOptionsApply().process(options, compiler);` 这里其实是对 `option` 的配置进行plugin 的加载，且对compiler 对应周期进行注册监听事件。\n所以这里会经历一个 `entryOption` 的周期， \n例如：`entry 入口`, \n\n```js\n// 处理入口文件, SyncBailHook , 当返回为非undefined时停止往下执行\nnew EntryOptionPlugin().apply(compiler);\n// 执行入口文件回调\ncompiler.hooks.entryOption.call(options.context, options.entry);\n```\n\n```js\n// EntryOptionPlugin\nclass EntryOptionPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.entryOption.tap(\"EntryOptionPlugin\", (context, entry) => {\n\t\t\tEntryOptionPlugin.applyEntryOption(compiler, context, entry);\n\t\t\treturn true;\n\t\t});\n\t}\n  /** 省略其余code */\n}\n```\n\n其余配置也差不多， 然后会执行`compiler.hooks.afterPlugins.call(compiler);` 说明所有的插件已经加载完毕。\n最后调用`compiler.hooks.afterResolvers.call(compiler);` 表示compiler 中3种类型的解析器已经全部设置完成，`new WebpackOptionsApply().process(options, compiler);` 执行完毕\n\n4. 然后 执行 `compiler.hook.initialize.call()` \n5. 最后回到 `lib/webpack` 执行 `compiler.run()`\n\n\n## Compiler \n\n上面已经通过 `new Compiler(options.context)` 创建compiler, 然后调用`compiler.run()` \n进入`lib/compiler.js` 可以看到创建了多个hooks, [关于tapable, 我觉得这篇文章挺好](https://zhuanlan.zhihu.com/p/100974318)\n\n1. `run` 方法执行， 经历了两个`hooks (hooks.beforeRun, hooks.run)`, 最后执行 `this.compiler()`\n\n```js\ncompile(callback) {\n  // 创建 normalFactory, 跟 contextFactory, 创建完成之后调用 hooks.normalModuleFactory.call(); hooks.contextModuleFactory.call()\n  const params = this.newCompilationParams();\n  this.hooks.beforeCompile.callAsync(params, err => {\n    if (err) return callback(err);\n\n    this.hooks.compile.call(params);\n\n    const compilation = this.newCompilation(params);\n\n    const logger = compilation.getLogger(\"webpack.Compiler\");\n\n    logger.time(\"make hook\");\n    this.hooks.make.callAsync(compilation, err => {\n      logger.timeEnd(\"make hook\");\n      if (err) return callback(err);\n\n      logger.time(\"finish make hook\");\n      this.hooks.finishMake.callAsync(compilation, err => {\n        logger.timeEnd(\"finish make hook\");\n        if (err) return callback(err);\n\n        process.nextTick(() => {\n          logger.time(\"finish compilation\");\n          compilation.finish(err => {\n            logger.timeEnd(\"finish compilation\");\n            if (err) return callback(err);\n\n            logger.time(\"seal compilation\");\n            compilation.seal(err => {\n              logger.timeEnd(\"seal compilation\");\n              if (err) return callback(err);\n\n              logger.time(\"afterCompile hook\");\n              this.hooks.afterCompile.callAsync(compilation, err => {\n                logger.timeEnd(\"afterCompile hook\");\n                if (err) return callback(err);\n\n                return callback(null, compilation);\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n```\n\n2.创建 `NormalModuleFactory`, 跟 `contextModuleFactory`, 创建完成之后调用 `hooks.normalModuleFactory.call()`,`hooks.contextModuleFactory.call()`\n`NormalModuleFactory` 用来生成模块的\n\n3. 之后调用 `hooks.beforeCompile`， `beforeCompile` 在[LazyCompilationPlugin](https://github.com/webpack/webpack/blob/main/lib/hmr/LazyCompilationPlugin.js#L331) 下注册了, 这里跟hmr 热更新相关。 同时在[DllReferencePlugin](https://github.com/webpack/webpack/blob/main/lib/DllReferencePlugin.js#L51), 它是用来拆分bundle，提升构建速度的 [具体可以看这](https://webpack.docschina.org/plugins/dll-plugin/)\n\n4. 然后调用 `hook.compile`, 在这[DllReferencePlugin](https://github.com/webpack/webpack/blob/main/lib/DllReferencePlugin.js#L88), [ExternalsPlugin](https://github.com/webpack/webpack/blob/main/lib/ExternalsPlugin.js#L29), [DelegatedPlugin](https://github.com/webpack/webpack/blob/main/lib/DelegatedPlugin.js#L34)三个文件中注册了方法\n\n5. 创建 `compilation` 实例，该实例可以用于factorizeModule, buildModule, addModule， 以及对module的依赖收集, 执行 `compiler.hooks.thisCompilation.call` 以及\n`compiler.hooks.compilation.call`\n\n6. 执行`compiler.hooks.make` 正式进入到编译阶段\n   \n  1. 找到 `tapAsync` 函数， 通过调用`addEntry` 添加入口文件\n  ```js\n  compiler.hooks.make.tapAsync(\"EntryPlugin\", (compilation, callback) => {\n    compilation.addEntry(context, dep, options, err => {\n      callback(err);\n    });\n  });\n  ```\n  2. \n  ```js\n  addEntry(context, entry, optionsOrName, callback) {\n\t\t// TODO webpack 6 remove\n\t\tconst options =\n\t\t\ttypeof optionsOrName === \"object\"\n\t\t\t\t? optionsOrName\n\t\t\t\t: { name: optionsOrName };\n\n\t\tthis._addEntryItem(context, entry, \"dependencies\", options, callback);\n\t}\n  ```\n  3. 然后 `_addEntryItem`, 会判断是否是多入口等等，然后执行`compilation.hooks.addEntry.call` 表示添加入口文件完毕, 最后执行`addModuleTree`\n  ```js\n  this.addModuleTree(\n    {\n      context,\n      dependency: entry,\n      contextInfo: entryData.options.layer\n        ? { issuerLayer: entryData.options.layer }\n        : undefined\n    },\n    (err, module) => {\n      if (err) {\n        this.hooks.failedEntry.call(entry, options, err);\n        return callback(err);\n      }\n      this.hooks.succeedEntry.call(entry, options, module);\n      return callback(null, module);\n    }\n  );\n  ```\n  4. 来看看 `addModuleTree` 函数, `addModuleTree` 里面会执行一个 `handleModuleCreation`\n\n  ```js\n  const Dep = /** @type {DepConstructor} */ (dependency.constructor);\n  // 这里会找到直接找到normalModuleFactory\n  const moduleFactory = this.dependencyFactories.get(Dep);\n  this.handleModuleCreation(\n\t\t\t{\n\t\t\t\tfactory: moduleFactory,\n\t\t\t\tdependencies: [dependency],\n\t\t\t\toriginModule: null,\n\t\t\t\tcontextInfo,\n\t\t\t\tcontext\n\t\t\t},\n\t\t\t(err, result) => {\n\t\t\t\tif (err && this.bail) {\n          // error\n\t\t\t\t} else if (!err && result) {\n\t\t\t\t\tcallback(null, result);\n\t\t\t\t} else {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n  ```\n\n  5. 然后 `handleModuleCreation` 会执行 `factorizeModule`, 先不用管回调\n\n  ```js\n  this.factorizeModule(\n    {\n      currentProfile,\n      factory,\n      dependencies,\n      factoryResult: true,\n      originModule,\n      contextInfo,\n      context\n    },\n    (err, factoryResult) => {\n      /** 省略部分代码， 只需要知道后续会进行 this.addModule(newModule, () => {}) */\n      const newModule = factoryResult.module;\n      this.addModule(newModule, () => {\n        // 下面会执行模块创建以及 依赖收集\n        this._handleModuleBuildAndDependencies(\n          originModule,\n          module,\n          recursive,\n          callback\n        );\n      })\n    }\n  )\n  ```\n\n  6. `this.factorizeModule` 其实就是简单的将当前模块 添加到一个异步队列中\n  ```js\n  // this.factorizeModule 通过new AsyncQueue 创建\n  this.factorizeQueue.add(options, callback);\n  ```\n\n  7. `factorizeQueue.add` 它是一个异步执行 队列，当有一个任务加入到队列中，最后会执行`setImmediate(root._ensureProcessing);`,\n  但值得注意的是`root` 这个参数设计的有点巧妙，是一种父子关系, `this.processDependenciesQueue 的children 包含 this.addModuleQueue, this.factorizeQueue , this.buildQueue` 最后会执行 `setImmediate(root._ensureProcessing);` 当前root 是`this.processDependenciesQueue`。 setImmediate 会在下一次事件循环中调用\n  ```js\n  /** @type {AsyncQueue<Module, Module, Module>} */\n\t\tthis.processDependenciesQueue = new AsyncQueue({\n\t\t\tname: \"processDependencies\",\n\t\t\tparallelism: options.parallelism || 100,\n\t\t\tprocessor: this._processModuleDependencies.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<Module, string, Module>} */\n\t\tthis.addModuleQueue = new AsyncQueue({\n\t\t\tname: \"addModule\",\n\t\t\tparent: this.processDependenciesQueue,\n\t\t\tgetKey: module => module.identifier(),\n\t\t\tprocessor: this._addModule.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<FactorizeModuleOptions, string, Module | ModuleFactoryResult>} */\n\t\tthis.factorizeQueue = new AsyncQueue({\n\t\t\tname: \"factorize\",\n\t\t\tparent: this.addModuleQueue,\n\t\t\tprocessor: this._factorizeModule.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<Module, Module, Module>} */\n\t\tthis.buildQueue = new AsyncQueue({\n\t\t\tname: \"build\",\n\t\t\tparent: this.factorizeQueue,\n\t\t\tprocessor: this._buildModule.bind(this)\n\t\t});\n  ```\n\n  8. ensureProcessing 会遍历当前实例的children，简单说就是遍历 addModuleQueue, factorizeQueue, buildQueue 三个AsyncQueue 然后从这三个实例的队列中找任务去执行\n  ```js\n  _ensureProcessing() {\n    // this = this.processDependenciesQueue,\n    // children 包含 this.addModuleQueue, this.factorizeQueue, this.buildQueue\n\t\tthis._willEnsureProcessing = false;\n\t\tif (this._queued.length > 0) return;\n\t\tif (this._children !== undefined) {\n\t\t\tfor (const child of this._children) {\n\t\t\t\twhile (this._activeTasks < this._parallelism) {\n\t\t\t\t\tconst entry = child._queued.dequeue();\n\t\t\t\t\tif (entry === undefined) break;\n\t\t\t\t\tthis._activeTasks++;\n\t\t\t\t\tentry.state = PROCESSING_STATE;\n\t\t\t\t\tchild._startProcessing(entry);\n\t\t\t\t}\n\t\t\t\tif (child._queued.length > 0) return;\n\t\t\t}\n\t\t}\n\t\tif (!this._willEnsureProcessing) this._needProcessing = false;\n\t}\n  ```\n\n  9. child._startProcessing, 因为一直从入口过来， 此时的child 是factorize\n  ```js\n  _startProcessing(entry) {\n\t\tthis.hooks.beforeStart.callAsync(entry.item, err => {\n\t\t\tif (err) {\n\t\t\t\t// error 处理\n\t\t\t}\n\t\t\tlet inCallback = false;\n\t\t\ttry {\n\t\t\t\t// compliation._addModule 或者 compliation._factorizeModule 或者 compliation._buildModule\n        // 此时调用的是 compliation._factorizeModule\n\t\t\t\tthis._processor(entry.item, (e, r) => {\n\t\t\t\t\tinCallback = true;\n\t\t\t\t\tthis._handleResult(entry, e, r);\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tif (inCallback) throw err;\n\t\t\t\tthis._handleResult(entry, err, null);\n\t\t\t}\n\t\t\tthis.hooks.started.call(entry.item);\n\t\t});\n\t}\n  ```\n\n  10. `_factorizeModule` 调用了 NormalModuleFactory.create\n  调用了 `NormalModuleFactory.hooks.beforeResolve.callAsync`, `NormalModuleFactory.hooks.factorize.callAsync`\n  在`NormalModuleFactory.hooks.factorize.tapAsync`中调用了 `resolve.callAsync`,  在 `resolve.tapAsync` 主要目的是resolve 模块找到模块对应的`loader`\n  以及loader的路径，描述文件等，这里会执行 `enhance-loader`, 并且创建 `parse` 和 `generator` 赋值到`resolveData.createData `\n\n  ```js\n  Object.assign(data.createData, {\n    layer:\n      layer === undefined ? contextInfo.issuerLayer || null : layer,\n    request: stringifyLoadersAndResource(\n      allLoaders,\n      resourceData.resource\n    ),\n    userRequest,\n    rawRequest: request,\n    loaders: allLoaders,\n    resource: resourceData.resource,\n    context:\n      resourceData.context || getContext(resourceData.resource),\n    matchResource: matchResourceData\n      ? matchResourceData.resource\n      : undefined,\n    resourceResolveData: resourceData.data,\n    settings,\n    type,\n    parser: this.getParser(type, settings.parser),\n    parserOptions: settings.parser,\n    generator: this.getGenerator(type, settings.generator),\n    generatorOptions: settings.generator,\n    resolveOptions\n  });\n  ```\n\n  11. 继续执行 `nmf.hooks.afterResolve.callAsync` 和 `nmf.hooks.createModule.callAsync`\n\n  ```js\n  this.hooks.afterResolve.callAsync(resolveData, (err, result) => {\n    const createData = resolveData.createData;\n    this.hooks.createModule.callAsync(createData, resolveData,\n\t\t\t(err, createdModule) => {\n        if(!createModule) {\n          createdModule = new NormalModule(createData);\n        }\n        // SideEffectsFlagPlugin 这里做sideEffect\n        createdModule = this.hooks.module.call(\n          createdModule,\n          createData,\n          resolveData\n        );\n        // 执行完成后调用 hooks.factorize.callAsync 回调 传入当前module 信息, 也就是factory.create 的callback 再callback 中执行AsyncQueue.handleResult\n        return callback(null, createdModule);\n    })\n  })\n  ```\n\n  12. AsyncQueue.handleResult 执行了 加进异步队列的 callback 即 6.5 的回调 addModule, 此时又做了一次6.6 之后的循环 只是改成了`addModule`\n\n  13. `addModule` 经过上面一轮 后执行 \n  ```js\n  this._handleModuleBuildAndDependencies(\n    originModule,\n    module,\n    recursive,\n    callback\n  );\n  ```\n  \n  14. 在 `_handleModuleBuildAndDependencies` 会执行 `this.buildModule` 再回调中会构建依赖\n\n\n\n\n![流程图](./学习webpack源码(2)/2.png)","slug":"学习webpack源码(2)","published":1,"updated":"2023-09-22T04:24:26.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgc003pmrojd3pf17yx","content":"<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>在vscode 中创建调试文件，进行debug, 点击debug，自动创建即可</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 使用 IntelliSense 了解相关属性。 </span>\n  <span class=\"token comment\" spellcheck=\"true\">// 悬停以查看现有属性的描述。</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>\n  <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"configurations\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n\n    <span class=\"token punctuation\">{</span>    \n        <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>   \n          <span class=\"token string\">\"request\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>   \n          <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"debugWebpack\"</span><span class=\"token punctuation\">,</span>   \n          <span class=\"token string\">\"program\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${workspaceFolder}/bin/webpack.js\"</span><span class=\"token punctuation\">,</span>  \n          <span class=\"token string\">\"console\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"integratedTerminal\"</span><span class=\"token punctuation\">,</span>   \n          <span class=\"token string\">\"cwd\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${workspaceFolder}\"</span><span class=\"token punctuation\">,</span>   \n          <span class=\"token string\">\"args\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>        \n            <span class=\"token comment\" spellcheck=\"true\">//  \"${workspaceFolder}/examples/examples.js\",   </span>\n            <span class=\"token comment\" spellcheck=\"true\">// webpack example 目录，我们选其中一个进行调试即可， 详细 example/README.md</span>\n            <span class=\"token string\">\"${workspaceFolder}/examples/commonjs/example.js\"</span><span class=\"token punctuation\">,</span>   \n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>接之前一篇文章, 创建<code>compiler</code></p>\n<ol>\n<li>接下来可以配合官方文档进行阅读<a href=\"https://webpack.docschina.org/api/compiler-hooks/\" target=\"_blank\" rel=\"noopener\">compiler hook</a>按照官方顺序就是compiler整个生命周期</li>\n</ol>\n<h2 id=\"梳理-compiler-生命周期\"><a href=\"#梳理-compiler-生命周期\" class=\"headerlink\" title=\"梳理 compiler 生命周期\"></a>梳理 compiler 生命周期</h2><ol>\n<li>首先进行环境初始化, 即<code>compiler.hook.environment.call()</code>, 但全局搜索没有做订阅</li>\n<li>环境初始化后会到 <code>compiler.hook.afterEnvironment.call()</code>, 说明环境初始化完成， <code>IgnoringWatchFileSystem</code>, 应该是做忽略某些文件的监听</li>\n<li>从<code>lib/webpack</code> 中的 <code>new WebpackOptionsApply().process(options, compiler);</code> 这里其实是对 <code>option</code> 的配置进行plugin 的加载，且对compiler 对应周期进行注册监听事件。<br>所以这里会经历一个 <code>entryOption</code> 的周期，<br>例如：<code>entry 入口</code>, </li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 处理入口文件, SyncBailHook , 当返回为非undefined时停止往下执行</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">EntryOptionPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 执行入口文件回调</span>\ncompiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>entryOption<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// EntryOptionPlugin</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EntryOptionPlugin</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>entryOption<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EntryOptionPlugin\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            EntryOptionPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">applyEntryOption</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">/** 省略其余code */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>其余配置也差不多， 然后会执行<code>compiler.hooks.afterPlugins.call(compiler);</code> 说明所有的插件已经加载完毕。<br>最后调用<code>compiler.hooks.afterResolvers.call(compiler);</code> 表示compiler 中3种类型的解析器已经全部设置完成，<code>new WebpackOptionsApply().process(options, compiler);</code> 执行完毕</p>\n<ol start=\"4\">\n<li>然后 执行 <code>compiler.hook.initialize.call()</code> </li>\n<li>最后回到 <code>lib/webpack</code> 执行 <code>compiler.run()</code></li>\n</ol>\n<h2 id=\"Compiler\"><a href=\"#Compiler\" class=\"headerlink\" title=\"Compiler\"></a>Compiler</h2><p>上面已经通过 <code>new Compiler(options.context)</code> 创建compiler, 然后调用<code>compiler.run()</code><br>进入<code>lib/compiler.js</code> 可以看到创建了多个hooks, <a href=\"https://zhuanlan.zhihu.com/p/100974318\" target=\"_blank\" rel=\"noopener\">关于tapable, 我觉得这篇文章挺好</a></p>\n<ol>\n<li><code>run</code> 方法执行， 经历了两个<code>hooks (hooks.beforeRun, hooks.run)</code>, 最后执行 <code>this.compiler()</code></li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 创建 normalFactory, 跟 contextFactory, 创建完成之后调用 hooks.normalModuleFactory.call(); hooks.contextModuleFactory.call()</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCompilationParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>beforeCompile<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>compile<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> compilation <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCompilation</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack.Compiler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"make hook\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      logger<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"make hook\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      logger<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish make hook\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>finishMake<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish make hook\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish compilation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          compilation<span class=\"token punctuation\">.</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish compilation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seal compilation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            compilation<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n              logger<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seal compilation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n              logger<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterCompile hook\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>afterCompile<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterCompile hook\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>2.创建 <code>NormalModuleFactory</code>, 跟 <code>contextModuleFactory</code>, 创建完成之后调用 <code>hooks.normalModuleFactory.call()</code>,<code>hooks.contextModuleFactory.call()</code><br><code>NormalModuleFactory</code> 用来生成模块的</p>\n<ol start=\"3\">\n<li><p>之后调用 <code>hooks.beforeCompile</code>， <code>beforeCompile</code> 在<a href=\"https://github.com/webpack/webpack/blob/main/lib/hmr/LazyCompilationPlugin.js#L331\" target=\"_blank\" rel=\"noopener\">LazyCompilationPlugin</a> 下注册了, 这里跟hmr 热更新相关。 同时在<a href=\"https://github.com/webpack/webpack/blob/main/lib/DllReferencePlugin.js#L51\" target=\"_blank\" rel=\"noopener\">DllReferencePlugin</a>, 它是用来拆分bundle，提升构建速度的 <a href=\"https://webpack.docschina.org/plugins/dll-plugin/\" target=\"_blank\" rel=\"noopener\">具体可以看这</a></p>\n</li>\n<li><p>然后调用 <code>hook.compile</code>, 在这<a href=\"https://github.com/webpack/webpack/blob/main/lib/DllReferencePlugin.js#L88\" target=\"_blank\" rel=\"noopener\">DllReferencePlugin</a>, <a href=\"https://github.com/webpack/webpack/blob/main/lib/ExternalsPlugin.js#L29\" target=\"_blank\" rel=\"noopener\">ExternalsPlugin</a>, <a href=\"https://github.com/webpack/webpack/blob/main/lib/DelegatedPlugin.js#L34\" target=\"_blank\" rel=\"noopener\">DelegatedPlugin</a>三个文件中注册了方法</p>\n</li>\n<li><p>创建 <code>compilation</code> 实例，该实例可以用于factorizeModule, buildModule, addModule， 以及对module的依赖收集, 执行 <code>compiler.hooks.thisCompilation.call</code> 以及<br><code>compiler.hooks.compilation.call</code></p>\n</li>\n<li><p>执行<code>compiler.hooks.make</code> 正式进入到编译阶段</p>\n<ol>\n<li><p>找到 <code>tapAsync</code> 函数， 通过调用<code>addEntry</code> 添加入口文件</p>\n<pre class=\" language-js\"><code class=\"language-js\">compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">.</span><span class=\"token function\">tapAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EntryPlugin\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\ncompilation<span class=\"token punctuation\">.</span><span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> dep<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">,</span> optionsOrName<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// TODO webpack 6 remove</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">typeof</span> optionsOrName <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span>\n          <span class=\"token operator\">?</span> optionsOrName\n          <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> optionsOrName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_addEntryItem</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dependencies\"</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>然后 <code>_addEntryItem</code>, 会判断是否是多入口等等，然后执行<code>compilation.hooks.addEntry.call</code> 表示添加入口文件完毕, 最后执行<code>addModuleTree</code></p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addModuleTree</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">{</span>\ncontext<span class=\"token punctuation\">,</span>\ndependency<span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">,</span>\ncontextInfo<span class=\"token punctuation\">:</span> entryData<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>layer\n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> issuerLayer<span class=\"token punctuation\">:</span> entryData<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>layer <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">:</span> undefined\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>failedEntry<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>succeedEntry<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>来看看 <code>addModuleTree</code> 函数, <code>addModuleTree</code> 里面会执行一个 <code>handleModuleCreation</code></p>\n</li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Dep <span class=\"token operator\">=</span> <span class=\"token comment\" spellcheck=\"true\">/** @type {DepConstructor} */</span> <span class=\"token punctuation\">(</span>dependency<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 这里会找到直接找到normalModuleFactory</span>\n<span class=\"token keyword\">const</span> moduleFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dependencyFactories<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleModuleCreation</span><span class=\"token punctuation\">(</span>\n         <span class=\"token punctuation\">{</span>\n             factory<span class=\"token punctuation\">:</span> moduleFactory<span class=\"token punctuation\">,</span>\n             dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>dependency<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             originModule<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n             contextInfo<span class=\"token punctuation\">,</span>\n             context\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\" spellcheck=\"true\">// error</span>\n             <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>err <span class=\"token operator\">&amp;&amp;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ol start=\"5\">\n<li>然后 <code>handleModuleCreation</code> 会执行 <code>factorizeModule</code>, 先不用管回调</li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">factorizeModule</span><span class=\"token punctuation\">(</span>\n <span class=\"token punctuation\">{</span>\n   currentProfile<span class=\"token punctuation\">,</span>\n   factory<span class=\"token punctuation\">,</span>\n   dependencies<span class=\"token punctuation\">,</span>\n   factoryResult<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n   originModule<span class=\"token punctuation\">,</span>\n   contextInfo<span class=\"token punctuation\">,</span>\n   context\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> factoryResult<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">/** 省略部分代码， 只需要知道后续会进行 this.addModule(newModule, () => {}) */</span>\n   <span class=\"token keyword\">const</span> newModule <span class=\"token operator\">=</span> factoryResult<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span>newModule<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\" spellcheck=\"true\">// 下面会执行模块创建以及 依赖收集</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleModuleBuildAndDependencies</span><span class=\"token punctuation\">(</span>\n       originModule<span class=\"token punctuation\">,</span>\n       module<span class=\"token punctuation\">,</span>\n       recursive<span class=\"token punctuation\">,</span>\n       callback\n     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"6\">\n<li><p><code>this.factorizeModule</code> 其实就是简单的将当前模块 添加到一个异步队列中</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// this.factorizeModule 通过new AsyncQueue 创建</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>factorizeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p><code>factorizeQueue.add</code> 它是一个异步执行 队列，当有一个任务加入到队列中，最后会执行<code>setImmediate(root._ensureProcessing);</code>,<br>但值得注意的是<code>root</code> 这个参数设计的有点巧妙，是一种父子关系, <code>this.processDependenciesQueue 的children 包含 this.addModuleQueue, this.factorizeQueue , this.buildQueue</code> 最后会执行 <code>setImmediate(root._ensureProcessing);</code> 当前root 是<code>this.processDependenciesQueue</code>。 setImmediate 会在下一次事件循环中调用</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/** @type {AsyncQueue&lt;Module, Module, Module>} */</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>processDependenciesQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AsyncQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"processDependencies\"</span><span class=\"token punctuation\">,</span>\n      parallelism<span class=\"token punctuation\">:</span> options<span class=\"token punctuation\">.</span>parallelism <span class=\"token operator\">||</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n      processor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_processModuleDependencies<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/** @type {AsyncQueue&lt;Module, string, Module>} */</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addModuleQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AsyncQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"addModule\"</span><span class=\"token punctuation\">,</span>\n      parent<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>processDependenciesQueue<span class=\"token punctuation\">,</span>\n      getKey<span class=\"token punctuation\">:</span> module <span class=\"token operator\">=</span><span class=\"token operator\">></span> module<span class=\"token punctuation\">.</span><span class=\"token function\">identifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      processor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_addModule<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/** @type {AsyncQueue&lt;FactorizeModuleOptions, string, Module | ModuleFactoryResult>} */</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>factorizeQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AsyncQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"factorize\"</span><span class=\"token punctuation\">,</span>\n      parent<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addModuleQueue<span class=\"token punctuation\">,</span>\n      processor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_factorizeModule<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">/** @type {AsyncQueue&lt;Module, Module, Module>} */</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buildQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AsyncQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span>\n      parent<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>factorizeQueue<span class=\"token punctuation\">,</span>\n      processor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_buildModule<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>ensureProcessing 会遍历当前实例的children，简单说就是遍历 addModuleQueue, factorizeQueue, buildQueue 三个AsyncQueue 然后从这三个实例的队列中找任务去执行</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token function\">_ensureProcessing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">// this = this.processDependenciesQueue,</span>\n<span class=\"token comment\" spellcheck=\"true\">// children 包含 this.addModuleQueue, this.factorizeQueue, this.buildQueue</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_willEnsureProcessing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_queued<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_children <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> child <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_activeTasks <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_parallelism<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>_queued<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_activeTasks<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n              entry<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> PROCESSING_STATE<span class=\"token punctuation\">;</span>\n              child<span class=\"token punctuation\">.</span><span class=\"token function\">_startProcessing</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>_queued<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_willEnsureProcessing<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_needProcessing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>child._startProcessing, 因为一直从入口过来， 此时的child 是factorize</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token function\">_startProcessing</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>beforeStart<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// error 处理</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">let</span> inCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// compliation._addModule 或者 compliation._factorizeModule 或者 compliation._buildModule</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 此时调用的是 compliation._factorizeModule</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_processor</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n              inCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleResult</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inCallback<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleResult</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>started<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p><code>_factorizeModule</code> 调用了 NormalModuleFactory.create<br>调用了 <code>NormalModuleFactory.hooks.beforeResolve.callAsync</code>, <code>NormalModuleFactory.hooks.factorize.callAsync</code><br>在<code>NormalModuleFactory.hooks.factorize.tapAsync</code>中调用了 <code>resolve.callAsync</code>,  在 <code>resolve.tapAsync</code> 主要目的是resolve 模块找到模块对应的<code>loader</code><br>以及loader的路径，描述文件等，这里会执行 <code>enhance-loader</code>, 并且创建 <code>parse</code> 和 <code>generator</code> 赋值到<code>resolveData.createData</code></p>\n</li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>createData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n layer<span class=\"token punctuation\">:</span>\n   layer <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> contextInfo<span class=\"token punctuation\">.</span>issuerLayer <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> layer<span class=\"token punctuation\">,</span>\n request<span class=\"token punctuation\">:</span> <span class=\"token function\">stringifyLoadersAndResource</span><span class=\"token punctuation\">(</span>\n   allLoaders<span class=\"token punctuation\">,</span>\n   resourceData<span class=\"token punctuation\">.</span>resource\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n userRequest<span class=\"token punctuation\">,</span>\n rawRequest<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">,</span>\n loaders<span class=\"token punctuation\">:</span> allLoaders<span class=\"token punctuation\">,</span>\n resource<span class=\"token punctuation\">:</span> resourceData<span class=\"token punctuation\">.</span>resource<span class=\"token punctuation\">,</span>\n context<span class=\"token punctuation\">:</span>\n   resourceData<span class=\"token punctuation\">.</span>context <span class=\"token operator\">||</span> <span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span>resourceData<span class=\"token punctuation\">.</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n matchResource<span class=\"token punctuation\">:</span> matchResourceData\n   <span class=\"token operator\">?</span> matchResourceData<span class=\"token punctuation\">.</span>resource\n   <span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">,</span>\n resourceResolveData<span class=\"token punctuation\">:</span> resourceData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n settings<span class=\"token punctuation\">,</span>\n type<span class=\"token punctuation\">,</span>\n parser<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParser</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>parser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n parserOptions<span class=\"token punctuation\">:</span> settings<span class=\"token punctuation\">.</span>parser<span class=\"token punctuation\">,</span>\n generator<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getGenerator</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n generatorOptions<span class=\"token punctuation\">:</span> settings<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">,</span>\n resolveOptions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ol start=\"11\">\n<li>继续执行 <code>nmf.hooks.afterResolve.callAsync</code> 和 <code>nmf.hooks.createModule.callAsync</code></li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>afterResolve<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>resolveData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> createData <span class=\"token operator\">=</span> resolveData<span class=\"token punctuation\">.</span>createData<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>createModule<span class=\"token punctuation\">.</span><span class=\"token function\">callAsync</span><span class=\"token punctuation\">(</span>createData<span class=\"token punctuation\">,</span> resolveData<span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> createdModule<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>createModule<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       createdModule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NormalModule</span><span class=\"token punctuation\">(</span>createData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\" spellcheck=\"true\">// SideEffectsFlagPlugin 这里做sideEffect</span>\n     createdModule <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n       createdModule<span class=\"token punctuation\">,</span>\n       createData<span class=\"token punctuation\">,</span>\n       resolveData\n     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\" spellcheck=\"true\">// 执行完成后调用 hooks.factorize.callAsync 回调 传入当前module 信息, 也就是factory.create 的callback 再callback 中执行AsyncQueue.handleResult</span>\n     <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> createdModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"12\">\n<li><p>AsyncQueue.handleResult 执行了 加进异步队列的 callback 即 6.5 的回调 addModule, 此时又做了一次6.6 之后的循环 只是改成了<code>addModule</code></p>\n</li>\n<li><p><code>addModule</code> 经过上面一轮 后执行 </p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleModuleBuildAndDependencies</span><span class=\"token punctuation\">(</span>\noriginModule<span class=\"token punctuation\">,</span>\nmodule<span class=\"token punctuation\">,</span>\nrecursive<span class=\"token punctuation\">,</span>\ncallback\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>在 <code>_handleModuleBuildAndDependencies</code> 会执行 <code>this.buildModule</code> 再回调中会构建依赖</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/2022/02/22/%E5%AD%A6%E4%B9%A0webpack%E6%BA%90%E7%A0%81(2)/2.png\" alt=\"流程图\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>在vscode 中创建调试文件，进行debug, 点击debug，自动创建即可</p>\n<pre><code class=\"js\">{\n  // 使用 IntelliSense 了解相关属性。 \n  // 悬停以查看现有属性的描述。\n  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n  &quot;version&quot;: &quot;0.2.0&quot;,\n  &quot;configurations&quot;: [\n\n    {    \n        &quot;type&quot;: &quot;node&quot;,   \n          &quot;request&quot;: &quot;launch&quot;,   \n          &quot;name&quot;: &quot;debugWebpack&quot;,   \n          &quot;program&quot;: &quot;${workspaceFolder}/bin/webpack.js&quot;,  \n          &quot;console&quot;: &quot;integratedTerminal&quot;,   \n          &quot;cwd&quot;: &quot;${workspaceFolder}&quot;,   \n          &quot;args&quot;: [        \n            //  &quot;${workspaceFolder}/examples/examples.js&quot;,   \n            // webpack example 目录，我们选其中一个进行调试即可， 详细 example/README.md\n            &quot;${workspaceFolder}/examples/commonjs/example.js&quot;,   \n        ]\n    }\n  ]\n}</code></pre>\n<p>接之前一篇文章, 创建<code>compiler</code></p>\n<ol>\n<li>接下来可以配合官方文档进行阅读<a href=\"https://webpack.docschina.org/api/compiler-hooks/\" target=\"_blank\" rel=\"noopener\">compiler hook</a>按照官方顺序就是compiler整个生命周期</li>\n</ol>\n<h2 id=\"梳理-compiler-生命周期\"><a href=\"#梳理-compiler-生命周期\" class=\"headerlink\" title=\"梳理 compiler 生命周期\"></a>梳理 compiler 生命周期</h2><ol>\n<li>首先进行环境初始化, 即<code>compiler.hook.environment.call()</code>, 但全局搜索没有做订阅</li>\n<li>环境初始化后会到 <code>compiler.hook.afterEnvironment.call()</code>, 说明环境初始化完成， <code>IgnoringWatchFileSystem</code>, 应该是做忽略某些文件的监听</li>\n<li>从<code>lib/webpack</code> 中的 <code>new WebpackOptionsApply().process(options, compiler);</code> 这里其实是对 <code>option</code> 的配置进行plugin 的加载，且对compiler 对应周期进行注册监听事件。<br>所以这里会经历一个 <code>entryOption</code> 的周期，<br>例如：<code>entry 入口</code>, </li>\n</ol>\n<pre><code class=\"js\">// 处理入口文件, SyncBailHook , 当返回为非undefined时停止往下执行\nnew EntryOptionPlugin().apply(compiler);\n// 执行入口文件回调\ncompiler.hooks.entryOption.call(options.context, options.entry);</code></pre>\n<pre><code class=\"js\">// EntryOptionPlugin\nclass EntryOptionPlugin {\n    apply(compiler) {\n        compiler.hooks.entryOption.tap(&quot;EntryOptionPlugin&quot;, (context, entry) =&gt; {\n            EntryOptionPlugin.applyEntryOption(compiler, context, entry);\n            return true;\n        });\n    }\n  /** 省略其余code */\n}</code></pre>\n<p>其余配置也差不多， 然后会执行<code>compiler.hooks.afterPlugins.call(compiler);</code> 说明所有的插件已经加载完毕。<br>最后调用<code>compiler.hooks.afterResolvers.call(compiler);</code> 表示compiler 中3种类型的解析器已经全部设置完成，<code>new WebpackOptionsApply().process(options, compiler);</code> 执行完毕</p>\n<ol start=\"4\">\n<li>然后 执行 <code>compiler.hook.initialize.call()</code> </li>\n<li>最后回到 <code>lib/webpack</code> 执行 <code>compiler.run()</code></li>\n</ol>\n<h2 id=\"Compiler\"><a href=\"#Compiler\" class=\"headerlink\" title=\"Compiler\"></a>Compiler</h2><p>上面已经通过 <code>new Compiler(options.context)</code> 创建compiler, 然后调用<code>compiler.run()</code><br>进入<code>lib/compiler.js</code> 可以看到创建了多个hooks, <a href=\"https://zhuanlan.zhihu.com/p/100974318\" target=\"_blank\" rel=\"noopener\">关于tapable, 我觉得这篇文章挺好</a></p>\n<ol>\n<li><code>run</code> 方法执行， 经历了两个<code>hooks (hooks.beforeRun, hooks.run)</code>, 最后执行 <code>this.compiler()</code></li>\n</ol>\n<pre><code class=\"js\">compile(callback) {\n  // 创建 normalFactory, 跟 contextFactory, 创建完成之后调用 hooks.normalModuleFactory.call(); hooks.contextModuleFactory.call()\n  const params = this.newCompilationParams();\n  this.hooks.beforeCompile.callAsync(params, err =&gt; {\n    if (err) return callback(err);\n\n    this.hooks.compile.call(params);\n\n    const compilation = this.newCompilation(params);\n\n    const logger = compilation.getLogger(&quot;webpack.Compiler&quot;);\n\n    logger.time(&quot;make hook&quot;);\n    this.hooks.make.callAsync(compilation, err =&gt; {\n      logger.timeEnd(&quot;make hook&quot;);\n      if (err) return callback(err);\n\n      logger.time(&quot;finish make hook&quot;);\n      this.hooks.finishMake.callAsync(compilation, err =&gt; {\n        logger.timeEnd(&quot;finish make hook&quot;);\n        if (err) return callback(err);\n\n        process.nextTick(() =&gt; {\n          logger.time(&quot;finish compilation&quot;);\n          compilation.finish(err =&gt; {\n            logger.timeEnd(&quot;finish compilation&quot;);\n            if (err) return callback(err);\n\n            logger.time(&quot;seal compilation&quot;);\n            compilation.seal(err =&gt; {\n              logger.timeEnd(&quot;seal compilation&quot;);\n              if (err) return callback(err);\n\n              logger.time(&quot;afterCompile hook&quot;);\n              this.hooks.afterCompile.callAsync(compilation, err =&gt; {\n                logger.timeEnd(&quot;afterCompile hook&quot;);\n                if (err) return callback(err);\n\n                return callback(null, compilation);\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}</code></pre>\n<p>2.创建 <code>NormalModuleFactory</code>, 跟 <code>contextModuleFactory</code>, 创建完成之后调用 <code>hooks.normalModuleFactory.call()</code>,<code>hooks.contextModuleFactory.call()</code><br><code>NormalModuleFactory</code> 用来生成模块的</p>\n<ol start=\"3\">\n<li><p>之后调用 <code>hooks.beforeCompile</code>， <code>beforeCompile</code> 在<a href=\"https://github.com/webpack/webpack/blob/main/lib/hmr/LazyCompilationPlugin.js#L331\" target=\"_blank\" rel=\"noopener\">LazyCompilationPlugin</a> 下注册了, 这里跟hmr 热更新相关。 同时在<a href=\"https://github.com/webpack/webpack/blob/main/lib/DllReferencePlugin.js#L51\" target=\"_blank\" rel=\"noopener\">DllReferencePlugin</a>, 它是用来拆分bundle，提升构建速度的 <a href=\"https://webpack.docschina.org/plugins/dll-plugin/\" target=\"_blank\" rel=\"noopener\">具体可以看这</a></p>\n</li>\n<li><p>然后调用 <code>hook.compile</code>, 在这<a href=\"https://github.com/webpack/webpack/blob/main/lib/DllReferencePlugin.js#L88\" target=\"_blank\" rel=\"noopener\">DllReferencePlugin</a>, <a href=\"https://github.com/webpack/webpack/blob/main/lib/ExternalsPlugin.js#L29\" target=\"_blank\" rel=\"noopener\">ExternalsPlugin</a>, <a href=\"https://github.com/webpack/webpack/blob/main/lib/DelegatedPlugin.js#L34\" target=\"_blank\" rel=\"noopener\">DelegatedPlugin</a>三个文件中注册了方法</p>\n</li>\n<li><p>创建 <code>compilation</code> 实例，该实例可以用于factorizeModule, buildModule, addModule， 以及对module的依赖收集, 执行 <code>compiler.hooks.thisCompilation.call</code> 以及<br><code>compiler.hooks.compilation.call</code></p>\n</li>\n<li><p>执行<code>compiler.hooks.make</code> 正式进入到编译阶段</p>\n<ol>\n<li><p>找到 <code>tapAsync</code> 函数， 通过调用<code>addEntry</code> 添加入口文件</p>\n<pre><code class=\"js\">compiler.hooks.make.tapAsync(&quot;EntryPlugin&quot;, (compilation, callback) =&gt; {\ncompilation.addEntry(context, dep, options, err =&gt; {\ncallback(err);\n});\n});</code></pre>\n</li>\n<li><pre><code class=\"js\">addEntry(context, entry, optionsOrName, callback) {\n  // TODO webpack 6 remove\n  const options =\n      typeof optionsOrName === &quot;object&quot;\n          ? optionsOrName\n          : { name: optionsOrName };\n\n  this._addEntryItem(context, entry, &quot;dependencies&quot;, options, callback);\n}</code></pre>\n</li>\n<li><p>然后 <code>_addEntryItem</code>, 会判断是否是多入口等等，然后执行<code>compilation.hooks.addEntry.call</code> 表示添加入口文件完毕, 最后执行<code>addModuleTree</code></p>\n<pre><code class=\"js\">this.addModuleTree(\n{\ncontext,\ndependency: entry,\ncontextInfo: entryData.options.layer\n  ? { issuerLayer: entryData.options.layer }\n  : undefined\n},\n(err, module) =&gt; {\nif (err) {\n  this.hooks.failedEntry.call(entry, options, err);\n  return callback(err);\n}\nthis.hooks.succeedEntry.call(entry, options, module);\nreturn callback(null, module);\n}\n);</code></pre>\n</li>\n<li><p>来看看 <code>addModuleTree</code> 函数, <code>addModuleTree</code> 里面会执行一个 <code>handleModuleCreation</code></p>\n</li>\n</ol>\n<pre><code class=\"js\">const Dep = /** @type {DepConstructor} */ (dependency.constructor);\n// 这里会找到直接找到normalModuleFactory\nconst moduleFactory = this.dependencyFactories.get(Dep);\nthis.handleModuleCreation(\n         {\n             factory: moduleFactory,\n             dependencies: [dependency],\n             originModule: null,\n             contextInfo,\n             context\n         },\n         (err, result) =&gt; {\n             if (err &amp;&amp; this.bail) {\n       // error\n             } else if (!err &amp;&amp; result) {\n                 callback(null, result);\n             } else {\n                 callback();\n             }\n         }\n     );</code></pre>\n<ol start=\"5\">\n<li>然后 <code>handleModuleCreation</code> 会执行 <code>factorizeModule</code>, 先不用管回调</li>\n</ol>\n<pre><code class=\"js\">this.factorizeModule(\n {\n   currentProfile,\n   factory,\n   dependencies,\n   factoryResult: true,\n   originModule,\n   contextInfo,\n   context\n },\n (err, factoryResult) =&gt; {\n   /** 省略部分代码， 只需要知道后续会进行 this.addModule(newModule, () =&gt; {}) */\n   const newModule = factoryResult.module;\n   this.addModule(newModule, () =&gt; {\n     // 下面会执行模块创建以及 依赖收集\n     this._handleModuleBuildAndDependencies(\n       originModule,\n       module,\n       recursive,\n       callback\n     );\n   })\n }\n)</code></pre>\n<ol start=\"6\">\n<li><p><code>this.factorizeModule</code> 其实就是简单的将当前模块 添加到一个异步队列中</p>\n<pre><code class=\"js\">// this.factorizeModule 通过new AsyncQueue 创建\nthis.factorizeQueue.add(options, callback);</code></pre>\n</li>\n<li><p><code>factorizeQueue.add</code> 它是一个异步执行 队列，当有一个任务加入到队列中，最后会执行<code>setImmediate(root._ensureProcessing);</code>,<br>但值得注意的是<code>root</code> 这个参数设计的有点巧妙，是一种父子关系, <code>this.processDependenciesQueue 的children 包含 this.addModuleQueue, this.factorizeQueue , this.buildQueue</code> 最后会执行 <code>setImmediate(root._ensureProcessing);</code> 当前root 是<code>this.processDependenciesQueue</code>。 setImmediate 会在下一次事件循环中调用</p>\n<pre><code class=\"js\">/** @type {AsyncQueue&lt;Module, Module, Module&gt;} */\n  this.processDependenciesQueue = new AsyncQueue({\n      name: &quot;processDependencies&quot;,\n      parallelism: options.parallelism || 100,\n      processor: this._processModuleDependencies.bind(this)\n  });\n  /** @type {AsyncQueue&lt;Module, string, Module&gt;} */\n  this.addModuleQueue = new AsyncQueue({\n      name: &quot;addModule&quot;,\n      parent: this.processDependenciesQueue,\n      getKey: module =&gt; module.identifier(),\n      processor: this._addModule.bind(this)\n  });\n  /** @type {AsyncQueue&lt;FactorizeModuleOptions, string, Module | ModuleFactoryResult&gt;} */\n  this.factorizeQueue = new AsyncQueue({\n      name: &quot;factorize&quot;,\n      parent: this.addModuleQueue,\n      processor: this._factorizeModule.bind(this)\n  });\n  /** @type {AsyncQueue&lt;Module, Module, Module&gt;} */\n  this.buildQueue = new AsyncQueue({\n      name: &quot;build&quot;,\n      parent: this.factorizeQueue,\n      processor: this._buildModule.bind(this)\n  });</code></pre>\n</li>\n<li><p>ensureProcessing 会遍历当前实例的children，简单说就是遍历 addModuleQueue, factorizeQueue, buildQueue 三个AsyncQueue 然后从这三个实例的队列中找任务去执行</p>\n<pre><code class=\"js\">_ensureProcessing() {\n// this = this.processDependenciesQueue,\n// children 包含 this.addModuleQueue, this.factorizeQueue, this.buildQueue\n  this._willEnsureProcessing = false;\n  if (this._queued.length &gt; 0) return;\n  if (this._children !== undefined) {\n      for (const child of this._children) {\n          while (this._activeTasks &lt; this._parallelism) {\n              const entry = child._queued.dequeue();\n              if (entry === undefined) break;\n              this._activeTasks++;\n              entry.state = PROCESSING_STATE;\n              child._startProcessing(entry);\n          }\n          if (child._queued.length &gt; 0) return;\n      }\n  }\n  if (!this._willEnsureProcessing) this._needProcessing = false;\n}</code></pre>\n</li>\n<li><p>child._startProcessing, 因为一直从入口过来， 此时的child 是factorize</p>\n<pre><code class=\"js\">_startProcessing(entry) {\n  this.hooks.beforeStart.callAsync(entry.item, err =&gt; {\n      if (err) {\n          // error 处理\n      }\n      let inCallback = false;\n      try {\n          // compliation._addModule 或者 compliation._factorizeModule 或者 compliation._buildModule\n  // 此时调用的是 compliation._factorizeModule\n          this._processor(entry.item, (e, r) =&gt; {\n              inCallback = true;\n              this._handleResult(entry, e, r);\n          });\n      } catch (err) {\n          if (inCallback) throw err;\n          this._handleResult(entry, err, null);\n      }\n      this.hooks.started.call(entry.item);\n  });\n}</code></pre>\n</li>\n<li><p><code>_factorizeModule</code> 调用了 NormalModuleFactory.create<br>调用了 <code>NormalModuleFactory.hooks.beforeResolve.callAsync</code>, <code>NormalModuleFactory.hooks.factorize.callAsync</code><br>在<code>NormalModuleFactory.hooks.factorize.tapAsync</code>中调用了 <code>resolve.callAsync</code>,  在 <code>resolve.tapAsync</code> 主要目的是resolve 模块找到模块对应的<code>loader</code><br>以及loader的路径，描述文件等，这里会执行 <code>enhance-loader</code>, 并且创建 <code>parse</code> 和 <code>generator</code> 赋值到<code>resolveData.createData</code></p>\n</li>\n</ol>\n<pre><code class=\"js\">Object.assign(data.createData, {\n layer:\n   layer === undefined ? contextInfo.issuerLayer || null : layer,\n request: stringifyLoadersAndResource(\n   allLoaders,\n   resourceData.resource\n ),\n userRequest,\n rawRequest: request,\n loaders: allLoaders,\n resource: resourceData.resource,\n context:\n   resourceData.context || getContext(resourceData.resource),\n matchResource: matchResourceData\n   ? matchResourceData.resource\n   : undefined,\n resourceResolveData: resourceData.data,\n settings,\n type,\n parser: this.getParser(type, settings.parser),\n parserOptions: settings.parser,\n generator: this.getGenerator(type, settings.generator),\n generatorOptions: settings.generator,\n resolveOptions\n});</code></pre>\n<ol start=\"11\">\n<li>继续执行 <code>nmf.hooks.afterResolve.callAsync</code> 和 <code>nmf.hooks.createModule.callAsync</code></li>\n</ol>\n<pre><code class=\"js\">this.hooks.afterResolve.callAsync(resolveData, (err, result) =&gt; {\n const createData = resolveData.createData;\n this.hooks.createModule.callAsync(createData, resolveData,\n         (err, createdModule) =&gt; {\n     if(!createModule) {\n       createdModule = new NormalModule(createData);\n     }\n     // SideEffectsFlagPlugin 这里做sideEffect\n     createdModule = this.hooks.module.call(\n       createdModule,\n       createData,\n       resolveData\n     );\n     // 执行完成后调用 hooks.factorize.callAsync 回调 传入当前module 信息, 也就是factory.create 的callback 再callback 中执行AsyncQueue.handleResult\n     return callback(null, createdModule);\n })\n})</code></pre>\n<ol start=\"12\">\n<li><p>AsyncQueue.handleResult 执行了 加进异步队列的 callback 即 6.5 的回调 addModule, 此时又做了一次6.6 之后的循环 只是改成了<code>addModule</code></p>\n</li>\n<li><p><code>addModule</code> 经过上面一轮 后执行 </p>\n<pre><code class=\"js\">this._handleModuleBuildAndDependencies(\noriginModule,\nmodule,\nrecursive,\ncallback\n);</code></pre>\n</li>\n<li><p>在 <code>_handleModuleBuildAndDependencies</code> 会执行 <code>this.buildModule</code> 再回调中会构建依赖</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/2022/02/22/%E5%AD%A6%E4%B9%A0webpack%E6%BA%90%E7%A0%81(2)/2.png\" alt=\"流程图\"></p>\n"},{"title":"学习webpack源码","date":"2022-01-17T10:17:43.000Z","_content":"\n## webpack 执行文件\n\n`/bin/webpack` 这个文件相对简单，其实就是判断一下`webpack-cli` 是否已经安装，没有安装就调用命令安装，要是已经安装则使用`webpack-cli`\n\n### 1. 声明 `webpack-cli` 信息对象\n\n```js\nconst cli = {\n\tname: \"webpack-cli\",\n\tpackage: \"webpack-cli\",\n\tbinName: \"webpack-cli\",\n\tinstalled: isInstalled(\"webpack-cli\"),\n\turl: \"https://github.com/webpack/webpack-cli\"\n};\n```\n\n### 2. 判断 `webpack-cli` 是否有安装, 只要判断目录下`node_module` 是有`webpack-cli` 这个文件夹即可\n\n```js\nconst isInstalled = packageName => {\n\tif (process.versions.pnp) {\n\t\treturn true;\n\t}\n\n\tconst path = require(\"path\");\n\tconst fs = require(\"graceful-fs\");\n\n\tlet dir = __dirname;\n\n\tdo {\n\t\ttry {\n\t\t\tif (fs.statSync(path.join(dir, \"node_modules\", packageName)).isDirectory()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (_error) {\n\t\t\t// Nothing\n\t\t}\n\t} while (dir !== (dir = path.dirname(dir)));\n\n\treturn false;\n};\n```\n\n### 3. 判断 `webpack-cli` 是否有安装，如果有则调用`runCli`, 没有则 执行`runCommand`\n\n```js\nif (!cli.installed) {\n\tconst path = require(\"path\");\n\tconst fs = require(\"graceful-fs\");\n\tconst readLine = require(\"readline\");\n\n\tconst notify =\n\t\t\"CLI for webpack must be installed.\\n\" + `  ${cli.name} (${cli.url})\\n`;\n\n\tconsole.error(notify);\n\n\t/** 判断是使用yarn 还是node 还是其他的包管理工具 */\n\tlet packageManager;\n\n\tif (fs.existsSync(path.resolve(process.cwd(), \"yarn.lock\"))) {\n\t\tpackageManager = \"yarn\";\n\t} else if (fs.existsSync(path.resolve(process.cwd(), \"pnpm-lock.yaml\"))) {\n\t\tpackageManager = \"pnpm\";\n\t} else {\n\t\tpackageManager = \"npm\";\n\t}\n\n\tconst installOptions = [packageManager === \"yarn\" ? \"add\" : \"install\", \"-D\"];\n\n\tconsole.error(\n\t\t`We will use \"${packageManager}\" to install the CLI via \"${packageManager} ${installOptions.join(\n\t\t\t\" \"\n\t\t)} ${cli.package}\".`\n\t);\n\n\tconst question = `Do you want to install 'webpack-cli' (yes/no): `;\n\n\tconst questionInterface = readLine.createInterface({\n\t\tinput: process.stdin,\n\t\toutput: process.stderr\n\t});\n\n\tprocess.exitCode = 1;\n\tquestionInterface.question(question, answer => {\n\t\tquestionInterface.close();\n\t\t/** 命令行输入y 时，安装`webpack-cli`, 否则提示需要安装webpack-cli */\n\t\tconst normalizedAnswer = answer.toLowerCase().startsWith(\"y\");\n\n\t\tif (!normalizedAnswer) {\n\t\t\tconsole.error(\n\t\t\t\t\"You need to install 'webpack-cli' to use webpack via CLI.\\n\" +\n\t\t\t\t\t\"You can also install the CLI manually.\"\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\t\tprocess.exitCode = 0;\n\n\t\trunCommand(packageManager, installOptions.concat(cli.package))\n\t\t\t.then(() => {\n\t\t\t\trunCli(cli);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error);\n\t\t\t\tprocess.exitCode = 1;\n\t\t\t});\n\t});\n} else {\n\trunCli(cli);\n}\n```\n\n### 4. runCammand 执行命令\n\n```js\nconst runCommand = (command, args) => {\n\tconst cp = require(\"child_process\");\n\treturn new Promise((resolve, reject) => {\n\t\tconst executedCommand = cp.spawn(command, args, {\n\t\t\tstdio: \"inherit\",\n\t\t\tshell: true\n\t\t});\n\n\t\texecutedCommand.on(\"error\", error => {\n\t\t\treject(error);\n\t\t});\n\n\t\texecutedCommand.on(\"exit\", code => {\n\t\t\tif (code === 0) {\n\t\t\t\tresolve();\n\t\t\t} else {\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t});\n};\n\n```\n\n### 5. 最后 runCli, 执行`webpack-cli`\n\n```js\nconst runCli = cli => {\n\tconst path = require(\"path\");\n\t/** webpack-cli, 这里require.resolve 是获取webpack-cli.package.json 的目录路径 */\n\tconst pkgPath = require.resolve(`${cli.package}/package.json`);\n\tconst pkg = require(pkgPath);\n\trequire(path.resolve(path.dirname(pkgPath), pkg.bin[cli.binName]));\n};\n```\n\n## webpack-cli\n\n1. 上面所说运行`webpack-cli` 中的`package.json` 下的 `bin`, 即 `./bin/cli.js`\n2. `./bin/cli.js` 执行了 `runCli()` 从 `../lib/bootstrap` 中加载啊\n3. 然后执行了`cli = new WebpackCli()`, 然后调用了`cli.run()`\n4. `new WebpackCli()` 的构造函数中使用了 [commander](https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md)\n5. `cli.run` 调用了 `this.program.action` 回调 调用 `await loadCommandByName(commandToRun, true);`,然后在调用了 `makeCommand`, `makeCommand` 调用了 `loadWebpack`, 并且 `getBuiltInOptions` 创建了`webpack` 的`option` 也就是 `webpack.config.js`, 最后在`makeCommand` 调用了`command.action` 触发回调，调用了`await this.runWebpack(options, isWatchCommandUsed);`。\n总结一下流程 `this.program.action -> loadCommandByName -> makeCommad( loadWebpack, runWebpack )`\n6. runWebpack 执行了 createCompiler 然后返回 `this.webpack(option)`\n\n```js\nconst webpack = require('webpack');\nconst config = require('./webpack.config');\ncompiler = webpack(config)\ncompiler.run((err) => {\n\tconsole.log(err)\n})\n```\n\n## webpack 源码\n\n### 主入口\n```js\n// webpack.js\n// webpack 函数简易结构\ncosnt webpack = (option, callback) => {\n\t/** 先忽略掉watch */\n\tconst create = () => {\n\t\tlet compiler = createCompiler(option);\n\t\treturn { compiler };\n\t}\n\t/** 判断有没有回调，最终都是返回compiler */\n\tif (callback) {\n\t\tconst { compiler } = create()\n\t\tcompiler.run(() => {\n\t\t\tcallback()\n\t\t})\n\t\treturn compiler\n\t} else {\n\t\tconst { compiler } = create();\n\t\treturn compiler\n\t}\n\n\treturn compiler\n}\n```\n\n### createCompiler\n\n```js\n// lib/webpack.js\nconst createCompiler = rawOptions => {\n\t/** 序列化一下option */\n\tconst options = getNormalizedWebpackOptions(rawOptions);\n\t// 设置一下默认值比如context 设为当前运行目录\n\tapplyWebpackOptionsBaseDefaults(options);\n\t/** compiler 最主要的函数在于run 函数 */\n\tconst compiler = new Compiler(options.context);\n\tcompiler.options = options;\n\n\t// 加载plugins , 先加载我们配置文件下的plugin\n\tif (Array.isArray(options.plugins)) {\n\t\tfor (const plugin of options.plugins) {\n\t\t\tif (typeof plugin === \"function\") {\n\t\t\t\tplugin.call(compiler, compiler);\n\t\t\t} else {\n\t\t\t\tplugin.apply(compiler);\n\t\t\t}\n\t\t}\n\t}\n\t// 给option默认值\n\tapplyWebpackOptionsDefaults(options);\n\t/** 触发环境设置hooks */\n\tcompiler.hooks.environment.call();\n\tcompiler.hooks.afterEnvironment.call();\n\t// 给config 的 key/value 转换成插件 plugin\n\tnew WebpackOptionsApply().process(options, compiler);\n\tcompiler.hooks.initialize.call();\n\treturn compiler;\n};\n```\n\n![流程图](./学习webpack源码/1.png)\n","source":"_posts/学习webpack源码.md","raw":"---\ntitle: 学习webpack源码\ndate: 2022-1-17 10:17:43\ntags: webpack\ncategory: [webpack]\n---\n\n## webpack 执行文件\n\n`/bin/webpack` 这个文件相对简单，其实就是判断一下`webpack-cli` 是否已经安装，没有安装就调用命令安装，要是已经安装则使用`webpack-cli`\n\n### 1. 声明 `webpack-cli` 信息对象\n\n```js\nconst cli = {\n\tname: \"webpack-cli\",\n\tpackage: \"webpack-cli\",\n\tbinName: \"webpack-cli\",\n\tinstalled: isInstalled(\"webpack-cli\"),\n\turl: \"https://github.com/webpack/webpack-cli\"\n};\n```\n\n### 2. 判断 `webpack-cli` 是否有安装, 只要判断目录下`node_module` 是有`webpack-cli` 这个文件夹即可\n\n```js\nconst isInstalled = packageName => {\n\tif (process.versions.pnp) {\n\t\treturn true;\n\t}\n\n\tconst path = require(\"path\");\n\tconst fs = require(\"graceful-fs\");\n\n\tlet dir = __dirname;\n\n\tdo {\n\t\ttry {\n\t\t\tif (fs.statSync(path.join(dir, \"node_modules\", packageName)).isDirectory()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (_error) {\n\t\t\t// Nothing\n\t\t}\n\t} while (dir !== (dir = path.dirname(dir)));\n\n\treturn false;\n};\n```\n\n### 3. 判断 `webpack-cli` 是否有安装，如果有则调用`runCli`, 没有则 执行`runCommand`\n\n```js\nif (!cli.installed) {\n\tconst path = require(\"path\");\n\tconst fs = require(\"graceful-fs\");\n\tconst readLine = require(\"readline\");\n\n\tconst notify =\n\t\t\"CLI for webpack must be installed.\\n\" + `  ${cli.name} (${cli.url})\\n`;\n\n\tconsole.error(notify);\n\n\t/** 判断是使用yarn 还是node 还是其他的包管理工具 */\n\tlet packageManager;\n\n\tif (fs.existsSync(path.resolve(process.cwd(), \"yarn.lock\"))) {\n\t\tpackageManager = \"yarn\";\n\t} else if (fs.existsSync(path.resolve(process.cwd(), \"pnpm-lock.yaml\"))) {\n\t\tpackageManager = \"pnpm\";\n\t} else {\n\t\tpackageManager = \"npm\";\n\t}\n\n\tconst installOptions = [packageManager === \"yarn\" ? \"add\" : \"install\", \"-D\"];\n\n\tconsole.error(\n\t\t`We will use \"${packageManager}\" to install the CLI via \"${packageManager} ${installOptions.join(\n\t\t\t\" \"\n\t\t)} ${cli.package}\".`\n\t);\n\n\tconst question = `Do you want to install 'webpack-cli' (yes/no): `;\n\n\tconst questionInterface = readLine.createInterface({\n\t\tinput: process.stdin,\n\t\toutput: process.stderr\n\t});\n\n\tprocess.exitCode = 1;\n\tquestionInterface.question(question, answer => {\n\t\tquestionInterface.close();\n\t\t/** 命令行输入y 时，安装`webpack-cli`, 否则提示需要安装webpack-cli */\n\t\tconst normalizedAnswer = answer.toLowerCase().startsWith(\"y\");\n\n\t\tif (!normalizedAnswer) {\n\t\t\tconsole.error(\n\t\t\t\t\"You need to install 'webpack-cli' to use webpack via CLI.\\n\" +\n\t\t\t\t\t\"You can also install the CLI manually.\"\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\t\tprocess.exitCode = 0;\n\n\t\trunCommand(packageManager, installOptions.concat(cli.package))\n\t\t\t.then(() => {\n\t\t\t\trunCli(cli);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error);\n\t\t\t\tprocess.exitCode = 1;\n\t\t\t});\n\t});\n} else {\n\trunCli(cli);\n}\n```\n\n### 4. runCammand 执行命令\n\n```js\nconst runCommand = (command, args) => {\n\tconst cp = require(\"child_process\");\n\treturn new Promise((resolve, reject) => {\n\t\tconst executedCommand = cp.spawn(command, args, {\n\t\t\tstdio: \"inherit\",\n\t\t\tshell: true\n\t\t});\n\n\t\texecutedCommand.on(\"error\", error => {\n\t\t\treject(error);\n\t\t});\n\n\t\texecutedCommand.on(\"exit\", code => {\n\t\t\tif (code === 0) {\n\t\t\t\tresolve();\n\t\t\t} else {\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t});\n};\n\n```\n\n### 5. 最后 runCli, 执行`webpack-cli`\n\n```js\nconst runCli = cli => {\n\tconst path = require(\"path\");\n\t/** webpack-cli, 这里require.resolve 是获取webpack-cli.package.json 的目录路径 */\n\tconst pkgPath = require.resolve(`${cli.package}/package.json`);\n\tconst pkg = require(pkgPath);\n\trequire(path.resolve(path.dirname(pkgPath), pkg.bin[cli.binName]));\n};\n```\n\n## webpack-cli\n\n1. 上面所说运行`webpack-cli` 中的`package.json` 下的 `bin`, 即 `./bin/cli.js`\n2. `./bin/cli.js` 执行了 `runCli()` 从 `../lib/bootstrap` 中加载啊\n3. 然后执行了`cli = new WebpackCli()`, 然后调用了`cli.run()`\n4. `new WebpackCli()` 的构造函数中使用了 [commander](https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md)\n5. `cli.run` 调用了 `this.program.action` 回调 调用 `await loadCommandByName(commandToRun, true);`,然后在调用了 `makeCommand`, `makeCommand` 调用了 `loadWebpack`, 并且 `getBuiltInOptions` 创建了`webpack` 的`option` 也就是 `webpack.config.js`, 最后在`makeCommand` 调用了`command.action` 触发回调，调用了`await this.runWebpack(options, isWatchCommandUsed);`。\n总结一下流程 `this.program.action -> loadCommandByName -> makeCommad( loadWebpack, runWebpack )`\n6. runWebpack 执行了 createCompiler 然后返回 `this.webpack(option)`\n\n```js\nconst webpack = require('webpack');\nconst config = require('./webpack.config');\ncompiler = webpack(config)\ncompiler.run((err) => {\n\tconsole.log(err)\n})\n```\n\n## webpack 源码\n\n### 主入口\n```js\n// webpack.js\n// webpack 函数简易结构\ncosnt webpack = (option, callback) => {\n\t/** 先忽略掉watch */\n\tconst create = () => {\n\t\tlet compiler = createCompiler(option);\n\t\treturn { compiler };\n\t}\n\t/** 判断有没有回调，最终都是返回compiler */\n\tif (callback) {\n\t\tconst { compiler } = create()\n\t\tcompiler.run(() => {\n\t\t\tcallback()\n\t\t})\n\t\treturn compiler\n\t} else {\n\t\tconst { compiler } = create();\n\t\treturn compiler\n\t}\n\n\treturn compiler\n}\n```\n\n### createCompiler\n\n```js\n// lib/webpack.js\nconst createCompiler = rawOptions => {\n\t/** 序列化一下option */\n\tconst options = getNormalizedWebpackOptions(rawOptions);\n\t// 设置一下默认值比如context 设为当前运行目录\n\tapplyWebpackOptionsBaseDefaults(options);\n\t/** compiler 最主要的函数在于run 函数 */\n\tconst compiler = new Compiler(options.context);\n\tcompiler.options = options;\n\n\t// 加载plugins , 先加载我们配置文件下的plugin\n\tif (Array.isArray(options.plugins)) {\n\t\tfor (const plugin of options.plugins) {\n\t\t\tif (typeof plugin === \"function\") {\n\t\t\t\tplugin.call(compiler, compiler);\n\t\t\t} else {\n\t\t\t\tplugin.apply(compiler);\n\t\t\t}\n\t\t}\n\t}\n\t// 给option默认值\n\tapplyWebpackOptionsDefaults(options);\n\t/** 触发环境设置hooks */\n\tcompiler.hooks.environment.call();\n\tcompiler.hooks.afterEnvironment.call();\n\t// 给config 的 key/value 转换成插件 plugin\n\tnew WebpackOptionsApply().process(options, compiler);\n\tcompiler.hooks.initialize.call();\n\treturn compiler;\n};\n```\n\n![流程图](./学习webpack源码/1.png)\n","slug":"学习webpack源码","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgd003smrojaun6b8mb","content":"<h2 id=\"webpack-执行文件\"><a href=\"#webpack-执行文件\" class=\"headerlink\" title=\"webpack 执行文件\"></a>webpack 执行文件</h2><p><code>/bin/webpack</code> 这个文件相对简单，其实就是判断一下<code>webpack-cli</code> 是否已经安装，没有安装就调用命令安装，要是已经安装则使用<code>webpack-cli</code></p>\n<h3 id=\"1-声明-webpack-cli-信息对象\"><a href=\"#1-声明-webpack-cli-信息对象\" class=\"headerlink\" title=\"1. 声明 webpack-cli 信息对象\"></a>1. 声明 <code>webpack-cli</code> 信息对象</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cli <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"webpack-cli\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">package</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"webpack-cli\"</span><span class=\"token punctuation\">,</span>\n    binName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"webpack-cli\"</span><span class=\"token punctuation\">,</span>\n    installed<span class=\"token punctuation\">:</span> <span class=\"token function\">isInstalled</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack-cli\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/webpack/webpack-cli\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"2-判断-webpack-cli-是否有安装-只要判断目录下node-module-是有webpack-cli-这个文件夹即可\"><a href=\"#2-判断-webpack-cli-是否有安装-只要判断目录下node-module-是有webpack-cli-这个文件夹即可\" class=\"headerlink\" title=\"2. 判断 webpack-cli 是否有安装, 只要判断目录下node_module 是有webpack-cli 这个文件夹即可\"></a>2. 判断 <code>webpack-cli</code> 是否有安装, 只要判断目录下<code>node_module</code> 是有<code>webpack-cli</code> 这个文件夹即可</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isInstalled <span class=\"token operator\">=</span> packageName <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>versions<span class=\"token punctuation\">.</span>pnp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"graceful-fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> dir <span class=\"token operator\">=</span> __dirname<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> packageName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">_error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// Nothing</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">!==</span> <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"3-判断-webpack-cli-是否有安装，如果有则调用runCli-没有则-执行runCommand\"><a href=\"#3-判断-webpack-cli-是否有安装，如果有则调用runCli-没有则-执行runCommand\" class=\"headerlink\" title=\"3. 判断 webpack-cli 是否有安装，如果有则调用runCli, 没有则 执行runCommand\"></a>3. 判断 <code>webpack-cli</code> 是否有安装，如果有则调用<code>runCli</code>, 没有则 执行<code>runCommand</code></h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cli<span class=\"token punctuation\">.</span>installed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"graceful-fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> readLine <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readline\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> notify <span class=\"token operator\">=</span>\n        <span class=\"token string\">\"CLI for webpack must be installed.\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token string\">`  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cli<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cli<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)\\n`</span></span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>notify<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** 判断是使用yarn 还是node 还是其他的包管理工具 */</span>\n    <span class=\"token keyword\">let</span> packageManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yarn.lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        packageManager <span class=\"token operator\">=</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pnpm-lock.yaml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        packageManager <span class=\"token operator\">=</span> <span class=\"token string\">\"pnpm\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        packageManager <span class=\"token operator\">=</span> <span class=\"token string\">\"npm\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> installOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>packageManager <span class=\"token operator\">===</span> <span class=\"token string\">\"yarn\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"install\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-D\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token string\">`We will use \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>packageManager<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" to install the CLI via \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>packageManager<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>installOptions<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\" \"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cli<span class=\"token punctuation\">.</span><span class=\"token keyword\">package</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\".`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> question <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`Do you want to install 'webpack-cli' (yes/no): `</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> questionInterface <span class=\"token operator\">=</span> readLine<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        input<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n        output<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>stderr\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    process<span class=\"token punctuation\">.</span>exitCode <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    questionInterface<span class=\"token punctuation\">.</span><span class=\"token function\">question</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">,</span> answer <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        questionInterface<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/** 命令行输入y 时，安装`webpack-cli`, 否则提示需要安装webpack-cli */</span>\n        <span class=\"token keyword\">const</span> normalizedAnswer <span class=\"token operator\">=</span> answer<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>normalizedAnswer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"You need to install 'webpack-cli' to use webpack via CLI.\\n\"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"You can also install the CLI manually.\"</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        process<span class=\"token punctuation\">.</span>exitCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">runCommand</span><span class=\"token punctuation\">(</span>packageManager<span class=\"token punctuation\">,</span> installOptions<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">.</span><span class=\"token keyword\">package</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">runCli</span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                process<span class=\"token punctuation\">.</span>exitCode <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runCli</span><span class=\"token punctuation\">(</span>cli<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"4-runCammand-执行命令\"><a href=\"#4-runCammand-执行命令\" class=\"headerlink\" title=\"4. runCammand 执行命令\"></a>4. runCammand 执行命令</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> runCommand <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> cp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child_process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> executedCommand <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            stdio<span class=\"token punctuation\">:</span> <span class=\"token string\">\"inherit\"</span><span class=\"token punctuation\">,</span>\n            shell<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        executedCommand<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> error <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        executedCommand<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">,</span> code <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"5-最后-runCli-执行webpack-cli\"><a href=\"#5-最后-runCli-执行webpack-cli\" class=\"headerlink\" title=\"5. 最后 runCli, 执行webpack-cli\"></a>5. 最后 runCli, 执行<code>webpack-cli</code></h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> runCli <span class=\"token operator\">=</span> cli <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** webpack-cli, 这里require.resolve 是获取webpack-cli.package.json 的目录路径 */</span>\n    <span class=\"token keyword\">const</span> pkgPath <span class=\"token operator\">=</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cli<span class=\"token punctuation\">.</span><span class=\"token keyword\">package</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/package.json`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> pkg <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>pkgPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>pkgPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pkg<span class=\"token punctuation\">.</span>bin<span class=\"token punctuation\">[</span>cli<span class=\"token punctuation\">.</span>binName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"webpack-cli\"><a href=\"#webpack-cli\" class=\"headerlink\" title=\"webpack-cli\"></a>webpack-cli</h2><ol>\n<li>上面所说运行<code>webpack-cli</code> 中的<code>package.json</code> 下的 <code>bin</code>, 即 <code>./bin/cli.js</code></li>\n<li><code>./bin/cli.js</code> 执行了 <code>runCli()</code> 从 <code>../lib/bootstrap</code> 中加载啊</li>\n<li>然后执行了<code>cli = new WebpackCli()</code>, 然后调用了<code>cli.run()</code></li>\n<li><code>new WebpackCli()</code> 的构造函数中使用了 <a href=\"https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md\" target=\"_blank\" rel=\"noopener\">commander</a></li>\n<li><code>cli.run</code> 调用了 <code>this.program.action</code> 回调 调用 <code>await loadCommandByName(commandToRun, true);</code>,然后在调用了 <code>makeCommand</code>, <code>makeCommand</code> 调用了 <code>loadWebpack</code>, 并且 <code>getBuiltInOptions</code> 创建了<code>webpack</code> 的<code>option</code> 也就是 <code>webpack.config.js</code>, 最后在<code>makeCommand</code> 调用了<code>command.action</code> 触发回调，调用了<code>await this.runWebpack(options, isWatchCommandUsed);</code>。<br>总结一下流程 <code>this.program.action -&gt; loadCommandByName -&gt; makeCommad( loadWebpack, runWebpack )</code></li>\n<li>runWebpack 执行了 createCompiler 然后返回 <code>this.webpack(option)</code></li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncompiler <span class=\"token operator\">=</span> <span class=\"token function\">webpack</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\ncompiler<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"webpack-源码\"><a href=\"#webpack-源码\" class=\"headerlink\" title=\"webpack 源码\"></a>webpack 源码</h2><h3 id=\"主入口\"><a href=\"#主入口\" class=\"headerlink\" title=\"主入口\"></a>主入口</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// webpack.js</span>\n<span class=\"token comment\" spellcheck=\"true\">// webpack 函数简易结构</span>\ncosnt webpack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 先忽略掉watch */</span>\n    <span class=\"token keyword\">const</span> create <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> compiler <span class=\"token operator\">=</span> <span class=\"token function\">createCompiler</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> compiler <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 判断有没有回调，最终都是返回compiler */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> compiler <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        compiler<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> compiler\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> compiler <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> compiler\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> compiler\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"createCompiler\"><a href=\"#createCompiler\" class=\"headerlink\" title=\"createCompiler\"></a>createCompiler</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// lib/webpack.js</span>\n<span class=\"token keyword\">const</span> createCompiler <span class=\"token operator\">=</span> rawOptions <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 序列化一下option */</span>\n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token function\">getNormalizedWebpackOptions</span><span class=\"token punctuation\">(</span>rawOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 设置一下默认值比如context 设为当前运行目录</span>\n    <span class=\"token function\">applyWebpackOptionsBaseDefaults</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** compiler 最主要的函数在于run 函数 */</span>\n    <span class=\"token keyword\">const</span> compiler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Compiler</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    compiler<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 加载plugins , 先加载我们配置文件下的plugin</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> plugin <span class=\"token keyword\">of</span> options<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> plugin <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                plugin<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">,</span> compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                plugin<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 给option默认值</span>\n    <span class=\"token function\">applyWebpackOptionsDefaults</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 触发环境设置hooks */</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>afterEnvironment<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 给config 的 key/value 转换成插件 plugin</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebpackOptionsApply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>initialize<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> compiler<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"/2022/01/17/%E5%AD%A6%E4%B9%A0webpack%E6%BA%90%E7%A0%81/1.png\" alt=\"流程图\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"webpack-执行文件\"><a href=\"#webpack-执行文件\" class=\"headerlink\" title=\"webpack 执行文件\"></a>webpack 执行文件</h2><p><code>/bin/webpack</code> 这个文件相对简单，其实就是判断一下<code>webpack-cli</code> 是否已经安装，没有安装就调用命令安装，要是已经安装则使用<code>webpack-cli</code></p>\n<h3 id=\"1-声明-webpack-cli-信息对象\"><a href=\"#1-声明-webpack-cli-信息对象\" class=\"headerlink\" title=\"1. 声明 webpack-cli 信息对象\"></a>1. 声明 <code>webpack-cli</code> 信息对象</h3><pre><code class=\"js\">const cli = {\n    name: &quot;webpack-cli&quot;,\n    package: &quot;webpack-cli&quot;,\n    binName: &quot;webpack-cli&quot;,\n    installed: isInstalled(&quot;webpack-cli&quot;),\n    url: &quot;https://github.com/webpack/webpack-cli&quot;\n};</code></pre>\n<h3 id=\"2-判断-webpack-cli-是否有安装-只要判断目录下node-module-是有webpack-cli-这个文件夹即可\"><a href=\"#2-判断-webpack-cli-是否有安装-只要判断目录下node-module-是有webpack-cli-这个文件夹即可\" class=\"headerlink\" title=\"2. 判断 webpack-cli 是否有安装, 只要判断目录下node_module 是有webpack-cli 这个文件夹即可\"></a>2. 判断 <code>webpack-cli</code> 是否有安装, 只要判断目录下<code>node_module</code> 是有<code>webpack-cli</code> 这个文件夹即可</h3><pre><code class=\"js\">const isInstalled = packageName =&gt; {\n    if (process.versions.pnp) {\n        return true;\n    }\n\n    const path = require(&quot;path&quot;);\n    const fs = require(&quot;graceful-fs&quot;);\n\n    let dir = __dirname;\n\n    do {\n        try {\n            if (fs.statSync(path.join(dir, &quot;node_modules&quot;, packageName)).isDirectory()) {\n                return true;\n            }\n        } catch (_error) {\n            // Nothing\n        }\n    } while (dir !== (dir = path.dirname(dir)));\n\n    return false;\n};</code></pre>\n<h3 id=\"3-判断-webpack-cli-是否有安装，如果有则调用runCli-没有则-执行runCommand\"><a href=\"#3-判断-webpack-cli-是否有安装，如果有则调用runCli-没有则-执行runCommand\" class=\"headerlink\" title=\"3. 判断 webpack-cli 是否有安装，如果有则调用runCli, 没有则 执行runCommand\"></a>3. 判断 <code>webpack-cli</code> 是否有安装，如果有则调用<code>runCli</code>, 没有则 执行<code>runCommand</code></h3><pre><code class=\"js\">if (!cli.installed) {\n    const path = require(&quot;path&quot;);\n    const fs = require(&quot;graceful-fs&quot;);\n    const readLine = require(&quot;readline&quot;);\n\n    const notify =\n        &quot;CLI for webpack must be installed.\\n&quot; + `  ${cli.name} (${cli.url})\\n`;\n\n    console.error(notify);\n\n    /** 判断是使用yarn 还是node 还是其他的包管理工具 */\n    let packageManager;\n\n    if (fs.existsSync(path.resolve(process.cwd(), &quot;yarn.lock&quot;))) {\n        packageManager = &quot;yarn&quot;;\n    } else if (fs.existsSync(path.resolve(process.cwd(), &quot;pnpm-lock.yaml&quot;))) {\n        packageManager = &quot;pnpm&quot;;\n    } else {\n        packageManager = &quot;npm&quot;;\n    }\n\n    const installOptions = [packageManager === &quot;yarn&quot; ? &quot;add&quot; : &quot;install&quot;, &quot;-D&quot;];\n\n    console.error(\n        `We will use &quot;${packageManager}&quot; to install the CLI via &quot;${packageManager} ${installOptions.join(\n            &quot; &quot;\n        )} ${cli.package}&quot;.`\n    );\n\n    const question = `Do you want to install &#39;webpack-cli&#39; (yes/no): `;\n\n    const questionInterface = readLine.createInterface({\n        input: process.stdin,\n        output: process.stderr\n    });\n\n    process.exitCode = 1;\n    questionInterface.question(question, answer =&gt; {\n        questionInterface.close();\n        /** 命令行输入y 时，安装`webpack-cli`, 否则提示需要安装webpack-cli */\n        const normalizedAnswer = answer.toLowerCase().startsWith(&quot;y&quot;);\n\n        if (!normalizedAnswer) {\n            console.error(\n                &quot;You need to install &#39;webpack-cli&#39; to use webpack via CLI.\\n&quot; +\n                    &quot;You can also install the CLI manually.&quot;\n            );\n\n            return;\n        }\n        process.exitCode = 0;\n\n        runCommand(packageManager, installOptions.concat(cli.package))\n            .then(() =&gt; {\n                runCli(cli);\n            })\n            .catch(error =&gt; {\n                console.error(error);\n                process.exitCode = 1;\n            });\n    });\n} else {\n    runCli(cli);\n}</code></pre>\n<h3 id=\"4-runCammand-执行命令\"><a href=\"#4-runCammand-执行命令\" class=\"headerlink\" title=\"4. runCammand 执行命令\"></a>4. runCammand 执行命令</h3><pre><code class=\"js\">const runCommand = (command, args) =&gt; {\n    const cp = require(&quot;child_process&quot;);\n    return new Promise((resolve, reject) =&gt; {\n        const executedCommand = cp.spawn(command, args, {\n            stdio: &quot;inherit&quot;,\n            shell: true\n        });\n\n        executedCommand.on(&quot;error&quot;, error =&gt; {\n            reject(error);\n        });\n\n        executedCommand.on(&quot;exit&quot;, code =&gt; {\n            if (code === 0) {\n                resolve();\n            } else {\n                reject();\n            }\n        });\n    });\n};\n</code></pre>\n<h3 id=\"5-最后-runCli-执行webpack-cli\"><a href=\"#5-最后-runCli-执行webpack-cli\" class=\"headerlink\" title=\"5. 最后 runCli, 执行webpack-cli\"></a>5. 最后 runCli, 执行<code>webpack-cli</code></h3><pre><code class=\"js\">const runCli = cli =&gt; {\n    const path = require(&quot;path&quot;);\n    /** webpack-cli, 这里require.resolve 是获取webpack-cli.package.json 的目录路径 */\n    const pkgPath = require.resolve(`${cli.package}/package.json`);\n    const pkg = require(pkgPath);\n    require(path.resolve(path.dirname(pkgPath), pkg.bin[cli.binName]));\n};</code></pre>\n<h2 id=\"webpack-cli\"><a href=\"#webpack-cli\" class=\"headerlink\" title=\"webpack-cli\"></a>webpack-cli</h2><ol>\n<li>上面所说运行<code>webpack-cli</code> 中的<code>package.json</code> 下的 <code>bin</code>, 即 <code>./bin/cli.js</code></li>\n<li><code>./bin/cli.js</code> 执行了 <code>runCli()</code> 从 <code>../lib/bootstrap</code> 中加载啊</li>\n<li>然后执行了<code>cli = new WebpackCli()</code>, 然后调用了<code>cli.run()</code></li>\n<li><code>new WebpackCli()</code> 的构造函数中使用了 <a href=\"https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md\" target=\"_blank\" rel=\"noopener\">commander</a></li>\n<li><code>cli.run</code> 调用了 <code>this.program.action</code> 回调 调用 <code>await loadCommandByName(commandToRun, true);</code>,然后在调用了 <code>makeCommand</code>, <code>makeCommand</code> 调用了 <code>loadWebpack</code>, 并且 <code>getBuiltInOptions</code> 创建了<code>webpack</code> 的<code>option</code> 也就是 <code>webpack.config.js</code>, 最后在<code>makeCommand</code> 调用了<code>command.action</code> 触发回调，调用了<code>await this.runWebpack(options, isWatchCommandUsed);</code>。<br>总结一下流程 <code>this.program.action -&gt; loadCommandByName -&gt; makeCommad( loadWebpack, runWebpack )</code></li>\n<li>runWebpack 执行了 createCompiler 然后返回 <code>this.webpack(option)</code></li>\n</ol>\n<pre><code class=\"js\">const webpack = require(&#39;webpack&#39;);\nconst config = require(&#39;./webpack.config&#39;);\ncompiler = webpack(config)\ncompiler.run((err) =&gt; {\n    console.log(err)\n})</code></pre>\n<h2 id=\"webpack-源码\"><a href=\"#webpack-源码\" class=\"headerlink\" title=\"webpack 源码\"></a>webpack 源码</h2><h3 id=\"主入口\"><a href=\"#主入口\" class=\"headerlink\" title=\"主入口\"></a>主入口</h3><pre><code class=\"js\">// webpack.js\n// webpack 函数简易结构\ncosnt webpack = (option, callback) =&gt; {\n    /** 先忽略掉watch */\n    const create = () =&gt; {\n        let compiler = createCompiler(option);\n        return { compiler };\n    }\n    /** 判断有没有回调，最终都是返回compiler */\n    if (callback) {\n        const { compiler } = create()\n        compiler.run(() =&gt; {\n            callback()\n        })\n        return compiler\n    } else {\n        const { compiler } = create();\n        return compiler\n    }\n\n    return compiler\n}</code></pre>\n<h3 id=\"createCompiler\"><a href=\"#createCompiler\" class=\"headerlink\" title=\"createCompiler\"></a>createCompiler</h3><pre><code class=\"js\">// lib/webpack.js\nconst createCompiler = rawOptions =&gt; {\n    /** 序列化一下option */\n    const options = getNormalizedWebpackOptions(rawOptions);\n    // 设置一下默认值比如context 设为当前运行目录\n    applyWebpackOptionsBaseDefaults(options);\n    /** compiler 最主要的函数在于run 函数 */\n    const compiler = new Compiler(options.context);\n    compiler.options = options;\n\n    // 加载plugins , 先加载我们配置文件下的plugin\n    if (Array.isArray(options.plugins)) {\n        for (const plugin of options.plugins) {\n            if (typeof plugin === &quot;function&quot;) {\n                plugin.call(compiler, compiler);\n            } else {\n                plugin.apply(compiler);\n            }\n        }\n    }\n    // 给option默认值\n    applyWebpackOptionsDefaults(options);\n    /** 触发环境设置hooks */\n    compiler.hooks.environment.call();\n    compiler.hooks.afterEnvironment.call();\n    // 给config 的 key/value 转换成插件 plugin\n    new WebpackOptionsApply().process(options, compiler);\n    compiler.hooks.initialize.call();\n    return compiler;\n};</code></pre>\n<p><img src=\"/2022/01/17/%E5%AD%A6%E4%B9%A0webpack%E6%BA%90%E7%A0%81/1.png\" alt=\"流程图\"></p>\n"},{"title":"对antd-pro一些理解","date":"2020-08-26T16:27:19.000Z","_content":"\n[umi文档](https://umijs.org/)\n\n执行 `npm create umi` 创建 `antd-pro` 项目\n\n\n## 路由\n\n整个 umi 建立的项目可以自定义路由，也可以约定式路由，我就直接对自定义路由展开\n配置可以写在 `config/config.ts` 下或者写在根目录下 `.umirc.ts` 的**routes**中\n\n```jsx\n{\n    path: '/',\n    component: '../layouts/BlankLayout',\n    routes: [\n    {\n        path: '/',\n        component: '../layouts/UserLayout',\n        Routes: ['src/pages/Authorized'],\n        authority: ['admin', 'user'], // 权限角色\n        routes: [\n            {\n                name: '/test',\n                icon: 'smile',\n                path: '/test',\n                component: './test',\n            },\n            {\n                name: '/test2',\n                authority: ['admin', 'user'], // 权限角色\n                routes: [\n                    {\n                        name: '',\n                        icon: 'smile',\n                        path: '/test2/step1'\n                    }\n                ]\n            }\n           \n        ],\n    }\n}\n```\n\n### 侧边栏/导航栏\n\n**注意：**我们暂时不对它内置路由到底是怎么实现的，但我想的其原理就是对`react-router`进行配置吧\n\n路由设置完之后对**导航栏进行配置**, [文档](https://procomponents.ant.design/components/layout#%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96)\n\n另外[umi文档中的插件](https://umijs.org/zh-CN/plugins/plugin-layout#logo) 也是可以进行导航栏的废纸的\n\n#### @ant-design/pro-layout\n\n[文档](https://procomponents.ant.design/components/layout#%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96)\n\n```jsx\n<ProLayout\n    // 这里的route是在上面配置自动获取的，不配置那么就不会显示在导航栏中\n    route={props.route}  \n>\n</ProLayout>\n```\n\n## 权限\n\n说一下antd-pro的权限, 我们可以看到 `utils/authority.ts`, 作用是获取/设置`localstorage`中的用户角色，然后通过路由中的 `Route`跟`authority` 判断其是否有准入条件。 \n\n**v4.1.0貌似有bug，不会经过`pages/Authority.tsx`判断权限**\n\n* 先通过 `pages/Authority.tsx` 文件判断**用户登录**以及**权限路由**\n    * 用户已登录， 获取当前`location.pathname`在路由表中的权限，一直向上找，跟`localstorage`获取的权限判断，没权限 跳转到 `403`\n    * 用户没登录，跳转登录页\n    * 然后再经过路由下的 `Component`, 或者说是他的`Children`\n\n### 查看封装的<Authorized/> 组件\n\n项目多次使用该组件， 使用方法如下：\n\n```js\nconst notMatch = (\n    <div>not Match</div>\n)\n/**\n * @param {string | string[] | Promise<boolean>} authority\n * @param { React.ReactNode } notMatch\n * \n*/\n\n<Authorized authority={authorized!.authority} noMatch={noMatch}>\n    {children}\n</Authorized>\n```\n\n#### Authorized 实现\n\n```jsx\n// 此时的 RenderAuthorize 来自 src/Authorithy/index\n// 重新包装了一下Authority，使得 currentAuthority = ['admin', 'user'] 在整个周期都能使用\n// getAuthority 就是获取当前权限\nlet Authorized = RenderAuthorize(getAuthority()); // 此时还是从新包装了一下Authorited\n```\n* RenderAuthorize\n\n```jsx\nconst RenderAuthorize = renderAuthorize(Authorized);\n```\n\n返回闭包，同时导出CURRENT, 当前`current` 也就是 `getAuthority()`的值， 也可以理解成一个`HOC`吧\n\n```jsx\n/**\n * use  authority or getAuthority\n * @param {string|()=>String} currentAuthority\n */\nfunction renderAuthorize(Authorized) {\n    return function (currentAuthority) {\n        if (currentAuthority) {\n            if (typeof currentAuthority === 'function') {\n                CURRENT = currentAuthority();\n            }\n\n            if (Object.prototype.toString.call(currentAuthority) === '[object String]' || Array.isArray(currentAuthority))\n                {\n                    CURRENT = currentAuthority;\n                }\n            } else {\n                CURRENT = 'NULL';\n            }\n\n        return Authorized;\n    };\n}\nexport { CURRENT }\nexport default (Authorized) => renderAuthorize(Authorized);\n```\n\n* <Authorized>\n\n这个组件逻辑很简单， 需要看`check`函数，传入的`authority` 是 ['admin'] 为例子\n如果通过`check` 那么返回`children`, 否则返回 `<notMatch>`\n\n```jsx\nconst Authorized: React.FunctionComponent<AuthorizedProps> = ({\n  children,\n  authority,\n  noMatch = (\n    <Result\n      status=\"403\"\n      title=\"403\"\n      subTitle=\"Sorry, you are not authorized to access this page.\"\n    />\n  ),\n}) => {\n  const childrenRender: React.ReactNode = typeof children === 'undefined' ? null : children;\n  //\n  const dom = check(authority, childrenRender, noMatch);\n  return <>{dom}</>;\n};\n\n```\n\n* 在来看看check函数\n\n下面的CURRENT 就是上面的`renderAuthorize` 导出的CURRENT\n\n```jsx\n/**\n * @param {string| stirng[]} authority 这里的authority 就是 ['admin'], 也就是准入条件\n * @param { React.ReactNode } target 也就是 children\n * @param { React.ReactNode } Exception notMatch\n*/\nfunction check<T, K>(authority: IAuthorityType, target: T, Exception: K): T | K | React.ReactNode {\n  return checkPermissions<T, K>(authority, CURRENT, target, Exception);\n}\n```\n\n* 再来看看 checkPermissions\n\n1. 如果准入权限为空，那么直接渲染`target`\n2. 要是`authority`跟`currentAuthority`都是数组的时候，那看看有没有交集有交集那就返回`target`\n3. 要是`authority`为字符串，那么看看我们的current中有没有这个权限就可以了\n4. 要是`authority`为`promise`那么就进入promise的操作\n5. 要是`authority`为方法，那就执行一下， 参数为`current`\n\n```js\n/**\n * 通用权限检查方法\n * Common check permissions method\n * @param { 权限判定 | Permission judgment } authority\n * @param { 你的权限 | Your permission description } currentAuthority\n * @param { 通过的组件 | Passing components } target\n * @param { 未通过的组件 | no pass components } Exception\n */\nconst checkPermissions = <T, K>(\n  authority: IAuthorityType,\n  currentAuthority: string | string[],\n  target: T,\n  Exception: K,\n): T | K | React.ReactNode => {\n  // 没有判定权限.默认查看所有\n  // Retirement authority, return target;\n  if (!authority) {\n    return target;\n  }\n  // 数组处理\n  if (Array.isArray(authority)) {\n    if (Array.isArray(currentAuthority)) {\n      if (currentAuthority.some((item) => authority.includes(item))) {\n        return target;\n      }\n    } else if (authority.includes(currentAuthority)) {\n      return target;\n    }\n    return Exception;\n  }\n  // string 处理\n  if (typeof authority === 'string') {\n    if (Array.isArray(currentAuthority)) {\n      if (currentAuthority.some((item) => authority === item)) {\n        return target;\n      }\n    } else if (authority === currentAuthority) {\n      return target;\n    }\n    return Exception;\n  }\n  // Promise 处理\n  if (authority instanceof Promise) {\n    return <PromiseRender<T, K> ok={target} error={Exception} promise={authority} />;\n  }\n  // Function 处理\n  if (typeof authority === 'function') {\n    const bool = authority(currentAuthority);\n    // 函数执行后返回值是 Promise\n    if (bool instanceof Promise) {\n      return <PromiseRender<T, K> ok={target} error={Exception} promise={bool} />;\n    }\n    if (bool) {\n      return target;\n    }\n    return Exception;\n  }\n  throw new Error('unsupported parameters');\n};\n```\n\n\n## 登录组件\n\n`pages/user/login` 查看 `index.tsx`\n\n`Login`页面有一个 <LoginForm> 包裹着两个 `<Tab>`, `<Tab>`下面又是一下Input组件，只是被重新包装了\n\n```jsx\n// 我们可以看出 UserName, Password 等等都是LoginForm导出的\nconst { Tab, UserName, Password, Mobile, Captcha, Submit } = LoginForm;\n```\n\n我们看下 `Login` 这个页面的大体结构\n\n* 用一个`<LoginForm />` 包裹着两个`<Tab>`, `<Tab>` 底下是登录按钮还有其他的登录方式\n* 其中一个`<Tab>对应的是账号密码登录`， 另一个是`短信验证码登录`\n* 下面的`status`, `loginType` 是 `redux`的状态，表示登录失败后会有报错信息\n* `<LoginForm>` 的 `activeKey` 只有两个 `account`, `mobile` 代表账号登录跟短信登录\n\n\n```jsx\n<LoginForm activeKey={type} onTabChange={setType} onSubmit={handleSubmit}>\n  <Tab key=\"account\" tab=\"账户密码登录\">\n    {status === 'error' && loginType === 'account' && !submitting && (\n      <LoginMessage content=\"账户或密码错误（admin/ant.design）\" />\n    )}\n    <UserName/>\n    <Password/>\n  </Tab>\n  <Tab key=\"mobile\" tab=\"手机号登录\">\n    {status === 'error' && loginType === 'mobile' && !submitting && (\n      <LoginMessage content=\"验证码错误\" />\n    )}\n    <Mobile/>\n    <Captcha/>\n  </Tab>\n  <div>\n    <Checkbox checked={autoLogin} onChange={(e) => setAutoLogin(e.target.checked)}>\n      自动登录\n    </Checkbox>\n    <a>忘记密码</a>\n  </div>\n  <Submit loading={submitting}>登录</Submit>\n  <div className={styles.other}>\n    其他登录方式\n    <AlipayCircleOutlined className={styles.icon} />\n    <TaobaoCircleOutlined className={styles.icon} />\n    <WeiboCircleOutlined className={styles.icon} />\n    <Link className={styles.register} to=\"/user/register\">\n      注册账户\n    </Link>\n  </div>\n</LoginForm>\n```\n\n### <LoginForm>\n\n* 首先先创建一个 `Context`， 这个context 主要是给 `<LoginTab>` 使用的\n\n\n#### LoginTab 实现\n简单看就是 \n\n```jsx\n// antd 官网\n<Tabs defaultActiveKey=\"1\" onChange={callback}>\n  <TabPane tab=\"Tab 1\" key=\"1\">\n    Content of Tab Pane 1\n  </TabPane>\n  <TabPane tab=\"Tab 2\" key=\"2\">\n    Content of Tab Pane 2\n  </TabPane>\n  <TabPane tab=\"Tab 3\" key=\"3\">\n    Content of Tab Pane 3\n  </TabPane>\n</Tabs>\n```\n\n\n```js\nconst LoginTab: React.FC<LoginTabProps> = (props) => {\n  useEffect(() => {\n    const uniqueId = generateId('login-tab-'); //治理生成唯一的tab id\n    const { tabUtil } = props;\n    if (tabUtil) {\n      tabUtil.addTab(uniqueId);\n    }\n  }, []);\n  const { children } = props;\n  return <TabPane {...props}>{props.active && children}</TabPane>;\n};\n\nconst WrapContext: React.FC<TabPaneProps> & {\n  typeName: string;\n} = (props) => (\n  <LoginContext.Consumer>\n    {(value) => <LoginTab tabUtil={value.tabUtil} {...props} />}\n  </LoginContext.Consumer>\n);\n```\n\n我们看看provider 的用法\n\n```jsx\n// 此时这里用上了hook然后加载的时候会加载一个tab，当切换的时候会添加另一个tab\nconst [tabs, setTabs] = useState<string[]>([]);\n// 这个active貌似没什么用\nconst [active, setActive] = useState({});\n// 此时声明当前的tab是哪一个 是 account 还是 mobile\nconst [type, setType] = useMergeValue('', {\n  value: props.activeKey,\n  onChange: props.onTabChange,\n});\n<LoginContext.Provider\n  value={{\n    tabUtil: {\n      addTab: (id) => {\n        setTabs([...tabs, id]);\n      },\n      removeTab: (id) => {\n        setTabs(tabs.filter((currentId) => currentId !== id));\n      },\n    },\n    updateActive: (activeItem) => {\n      if (!active) return;\n      if (active[type]) {\n        active[type].push(activeItem);\n      } else {\n        active[type] = [activeItem];\n      }\n      setActive(active);\n    },\n  }}\n>\n<LoginContext.Provider>\n\n```","source":"_posts/对antd-pro一些理解.md","raw":"---\ntitle: 对antd-pro一些理解\ndate: 2020-08-26 16:27:19\ntags: [react, antd]\ncategories: [react, antd]\n---\n\n[umi文档](https://umijs.org/)\n\n执行 `npm create umi` 创建 `antd-pro` 项目\n\n\n## 路由\n\n整个 umi 建立的项目可以自定义路由，也可以约定式路由，我就直接对自定义路由展开\n配置可以写在 `config/config.ts` 下或者写在根目录下 `.umirc.ts` 的**routes**中\n\n```jsx\n{\n    path: '/',\n    component: '../layouts/BlankLayout',\n    routes: [\n    {\n        path: '/',\n        component: '../layouts/UserLayout',\n        Routes: ['src/pages/Authorized'],\n        authority: ['admin', 'user'], // 权限角色\n        routes: [\n            {\n                name: '/test',\n                icon: 'smile',\n                path: '/test',\n                component: './test',\n            },\n            {\n                name: '/test2',\n                authority: ['admin', 'user'], // 权限角色\n                routes: [\n                    {\n                        name: '',\n                        icon: 'smile',\n                        path: '/test2/step1'\n                    }\n                ]\n            }\n           \n        ],\n    }\n}\n```\n\n### 侧边栏/导航栏\n\n**注意：**我们暂时不对它内置路由到底是怎么实现的，但我想的其原理就是对`react-router`进行配置吧\n\n路由设置完之后对**导航栏进行配置**, [文档](https://procomponents.ant.design/components/layout#%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96)\n\n另外[umi文档中的插件](https://umijs.org/zh-CN/plugins/plugin-layout#logo) 也是可以进行导航栏的废纸的\n\n#### @ant-design/pro-layout\n\n[文档](https://procomponents.ant.design/components/layout#%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96)\n\n```jsx\n<ProLayout\n    // 这里的route是在上面配置自动获取的，不配置那么就不会显示在导航栏中\n    route={props.route}  \n>\n</ProLayout>\n```\n\n## 权限\n\n说一下antd-pro的权限, 我们可以看到 `utils/authority.ts`, 作用是获取/设置`localstorage`中的用户角色，然后通过路由中的 `Route`跟`authority` 判断其是否有准入条件。 \n\n**v4.1.0貌似有bug，不会经过`pages/Authority.tsx`判断权限**\n\n* 先通过 `pages/Authority.tsx` 文件判断**用户登录**以及**权限路由**\n    * 用户已登录， 获取当前`location.pathname`在路由表中的权限，一直向上找，跟`localstorage`获取的权限判断，没权限 跳转到 `403`\n    * 用户没登录，跳转登录页\n    * 然后再经过路由下的 `Component`, 或者说是他的`Children`\n\n### 查看封装的<Authorized/> 组件\n\n项目多次使用该组件， 使用方法如下：\n\n```js\nconst notMatch = (\n    <div>not Match</div>\n)\n/**\n * @param {string | string[] | Promise<boolean>} authority\n * @param { React.ReactNode } notMatch\n * \n*/\n\n<Authorized authority={authorized!.authority} noMatch={noMatch}>\n    {children}\n</Authorized>\n```\n\n#### Authorized 实现\n\n```jsx\n// 此时的 RenderAuthorize 来自 src/Authorithy/index\n// 重新包装了一下Authority，使得 currentAuthority = ['admin', 'user'] 在整个周期都能使用\n// getAuthority 就是获取当前权限\nlet Authorized = RenderAuthorize(getAuthority()); // 此时还是从新包装了一下Authorited\n```\n* RenderAuthorize\n\n```jsx\nconst RenderAuthorize = renderAuthorize(Authorized);\n```\n\n返回闭包，同时导出CURRENT, 当前`current` 也就是 `getAuthority()`的值， 也可以理解成一个`HOC`吧\n\n```jsx\n/**\n * use  authority or getAuthority\n * @param {string|()=>String} currentAuthority\n */\nfunction renderAuthorize(Authorized) {\n    return function (currentAuthority) {\n        if (currentAuthority) {\n            if (typeof currentAuthority === 'function') {\n                CURRENT = currentAuthority();\n            }\n\n            if (Object.prototype.toString.call(currentAuthority) === '[object String]' || Array.isArray(currentAuthority))\n                {\n                    CURRENT = currentAuthority;\n                }\n            } else {\n                CURRENT = 'NULL';\n            }\n\n        return Authorized;\n    };\n}\nexport { CURRENT }\nexport default (Authorized) => renderAuthorize(Authorized);\n```\n\n* <Authorized>\n\n这个组件逻辑很简单， 需要看`check`函数，传入的`authority` 是 ['admin'] 为例子\n如果通过`check` 那么返回`children`, 否则返回 `<notMatch>`\n\n```jsx\nconst Authorized: React.FunctionComponent<AuthorizedProps> = ({\n  children,\n  authority,\n  noMatch = (\n    <Result\n      status=\"403\"\n      title=\"403\"\n      subTitle=\"Sorry, you are not authorized to access this page.\"\n    />\n  ),\n}) => {\n  const childrenRender: React.ReactNode = typeof children === 'undefined' ? null : children;\n  //\n  const dom = check(authority, childrenRender, noMatch);\n  return <>{dom}</>;\n};\n\n```\n\n* 在来看看check函数\n\n下面的CURRENT 就是上面的`renderAuthorize` 导出的CURRENT\n\n```jsx\n/**\n * @param {string| stirng[]} authority 这里的authority 就是 ['admin'], 也就是准入条件\n * @param { React.ReactNode } target 也就是 children\n * @param { React.ReactNode } Exception notMatch\n*/\nfunction check<T, K>(authority: IAuthorityType, target: T, Exception: K): T | K | React.ReactNode {\n  return checkPermissions<T, K>(authority, CURRENT, target, Exception);\n}\n```\n\n* 再来看看 checkPermissions\n\n1. 如果准入权限为空，那么直接渲染`target`\n2. 要是`authority`跟`currentAuthority`都是数组的时候，那看看有没有交集有交集那就返回`target`\n3. 要是`authority`为字符串，那么看看我们的current中有没有这个权限就可以了\n4. 要是`authority`为`promise`那么就进入promise的操作\n5. 要是`authority`为方法，那就执行一下， 参数为`current`\n\n```js\n/**\n * 通用权限检查方法\n * Common check permissions method\n * @param { 权限判定 | Permission judgment } authority\n * @param { 你的权限 | Your permission description } currentAuthority\n * @param { 通过的组件 | Passing components } target\n * @param { 未通过的组件 | no pass components } Exception\n */\nconst checkPermissions = <T, K>(\n  authority: IAuthorityType,\n  currentAuthority: string | string[],\n  target: T,\n  Exception: K,\n): T | K | React.ReactNode => {\n  // 没有判定权限.默认查看所有\n  // Retirement authority, return target;\n  if (!authority) {\n    return target;\n  }\n  // 数组处理\n  if (Array.isArray(authority)) {\n    if (Array.isArray(currentAuthority)) {\n      if (currentAuthority.some((item) => authority.includes(item))) {\n        return target;\n      }\n    } else if (authority.includes(currentAuthority)) {\n      return target;\n    }\n    return Exception;\n  }\n  // string 处理\n  if (typeof authority === 'string') {\n    if (Array.isArray(currentAuthority)) {\n      if (currentAuthority.some((item) => authority === item)) {\n        return target;\n      }\n    } else if (authority === currentAuthority) {\n      return target;\n    }\n    return Exception;\n  }\n  // Promise 处理\n  if (authority instanceof Promise) {\n    return <PromiseRender<T, K> ok={target} error={Exception} promise={authority} />;\n  }\n  // Function 处理\n  if (typeof authority === 'function') {\n    const bool = authority(currentAuthority);\n    // 函数执行后返回值是 Promise\n    if (bool instanceof Promise) {\n      return <PromiseRender<T, K> ok={target} error={Exception} promise={bool} />;\n    }\n    if (bool) {\n      return target;\n    }\n    return Exception;\n  }\n  throw new Error('unsupported parameters');\n};\n```\n\n\n## 登录组件\n\n`pages/user/login` 查看 `index.tsx`\n\n`Login`页面有一个 <LoginForm> 包裹着两个 `<Tab>`, `<Tab>`下面又是一下Input组件，只是被重新包装了\n\n```jsx\n// 我们可以看出 UserName, Password 等等都是LoginForm导出的\nconst { Tab, UserName, Password, Mobile, Captcha, Submit } = LoginForm;\n```\n\n我们看下 `Login` 这个页面的大体结构\n\n* 用一个`<LoginForm />` 包裹着两个`<Tab>`, `<Tab>` 底下是登录按钮还有其他的登录方式\n* 其中一个`<Tab>对应的是账号密码登录`， 另一个是`短信验证码登录`\n* 下面的`status`, `loginType` 是 `redux`的状态，表示登录失败后会有报错信息\n* `<LoginForm>` 的 `activeKey` 只有两个 `account`, `mobile` 代表账号登录跟短信登录\n\n\n```jsx\n<LoginForm activeKey={type} onTabChange={setType} onSubmit={handleSubmit}>\n  <Tab key=\"account\" tab=\"账户密码登录\">\n    {status === 'error' && loginType === 'account' && !submitting && (\n      <LoginMessage content=\"账户或密码错误（admin/ant.design）\" />\n    )}\n    <UserName/>\n    <Password/>\n  </Tab>\n  <Tab key=\"mobile\" tab=\"手机号登录\">\n    {status === 'error' && loginType === 'mobile' && !submitting && (\n      <LoginMessage content=\"验证码错误\" />\n    )}\n    <Mobile/>\n    <Captcha/>\n  </Tab>\n  <div>\n    <Checkbox checked={autoLogin} onChange={(e) => setAutoLogin(e.target.checked)}>\n      自动登录\n    </Checkbox>\n    <a>忘记密码</a>\n  </div>\n  <Submit loading={submitting}>登录</Submit>\n  <div className={styles.other}>\n    其他登录方式\n    <AlipayCircleOutlined className={styles.icon} />\n    <TaobaoCircleOutlined className={styles.icon} />\n    <WeiboCircleOutlined className={styles.icon} />\n    <Link className={styles.register} to=\"/user/register\">\n      注册账户\n    </Link>\n  </div>\n</LoginForm>\n```\n\n### <LoginForm>\n\n* 首先先创建一个 `Context`， 这个context 主要是给 `<LoginTab>` 使用的\n\n\n#### LoginTab 实现\n简单看就是 \n\n```jsx\n// antd 官网\n<Tabs defaultActiveKey=\"1\" onChange={callback}>\n  <TabPane tab=\"Tab 1\" key=\"1\">\n    Content of Tab Pane 1\n  </TabPane>\n  <TabPane tab=\"Tab 2\" key=\"2\">\n    Content of Tab Pane 2\n  </TabPane>\n  <TabPane tab=\"Tab 3\" key=\"3\">\n    Content of Tab Pane 3\n  </TabPane>\n</Tabs>\n```\n\n\n```js\nconst LoginTab: React.FC<LoginTabProps> = (props) => {\n  useEffect(() => {\n    const uniqueId = generateId('login-tab-'); //治理生成唯一的tab id\n    const { tabUtil } = props;\n    if (tabUtil) {\n      tabUtil.addTab(uniqueId);\n    }\n  }, []);\n  const { children } = props;\n  return <TabPane {...props}>{props.active && children}</TabPane>;\n};\n\nconst WrapContext: React.FC<TabPaneProps> & {\n  typeName: string;\n} = (props) => (\n  <LoginContext.Consumer>\n    {(value) => <LoginTab tabUtil={value.tabUtil} {...props} />}\n  </LoginContext.Consumer>\n);\n```\n\n我们看看provider 的用法\n\n```jsx\n// 此时这里用上了hook然后加载的时候会加载一个tab，当切换的时候会添加另一个tab\nconst [tabs, setTabs] = useState<string[]>([]);\n// 这个active貌似没什么用\nconst [active, setActive] = useState({});\n// 此时声明当前的tab是哪一个 是 account 还是 mobile\nconst [type, setType] = useMergeValue('', {\n  value: props.activeKey,\n  onChange: props.onTabChange,\n});\n<LoginContext.Provider\n  value={{\n    tabUtil: {\n      addTab: (id) => {\n        setTabs([...tabs, id]);\n      },\n      removeTab: (id) => {\n        setTabs(tabs.filter((currentId) => currentId !== id));\n      },\n    },\n    updateActive: (activeItem) => {\n      if (!active) return;\n      if (active[type]) {\n        active[type].push(activeItem);\n      } else {\n        active[type] = [activeItem];\n      }\n      setActive(active);\n    },\n  }}\n>\n<LoginContext.Provider>\n\n```","slug":"对antd-pro一些理解","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrge003wmroj6zrt3lrs","content":"<p><a href=\"https://umijs.org/\" target=\"_blank\" rel=\"noopener\">umi文档</a></p>\n<p>执行 <code>npm create umi</code> 创建 <code>antd-pro</code> 项目</p>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>整个 umi 建立的项目可以自定义路由，也可以约定式路由，我就直接对自定义路由展开<br>配置可以写在 <code>config/config.ts</code> 下或者写在根目录下 <code>.umirc.ts</code> 的<strong>routes</strong>中</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token punctuation\">:</span> <span class=\"token string\">'../layouts/BlankLayout'</span><span class=\"token punctuation\">,</span>\n    routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n        component<span class=\"token punctuation\">:</span> <span class=\"token string\">'../layouts/UserLayout'</span><span class=\"token punctuation\">,</span>\n        Routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src/pages/Authorized'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        authority<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 权限角色</span>\n        routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                name<span class=\"token punctuation\">:</span> <span class=\"token string\">'/test'</span><span class=\"token punctuation\">,</span>\n                icon<span class=\"token punctuation\">:</span> <span class=\"token string\">'smile'</span><span class=\"token punctuation\">,</span>\n                path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/test'</span><span class=\"token punctuation\">,</span>\n                component<span class=\"token punctuation\">:</span> <span class=\"token string\">'./test'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                name<span class=\"token punctuation\">:</span> <span class=\"token string\">'/test2'</span><span class=\"token punctuation\">,</span>\n                authority<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 权限角色</span>\n                routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">{</span>\n                        name<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n                        icon<span class=\"token punctuation\">:</span> <span class=\"token string\">'smile'</span><span class=\"token punctuation\">,</span>\n                        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/test2/step1'</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"侧边栏-导航栏\"><a href=\"#侧边栏-导航栏\" class=\"headerlink\" title=\"侧边栏/导航栏\"></a>侧边栏/导航栏</h3><p><strong>注意：</strong>我们暂时不对它内置路由到底是怎么实现的，但我想的其原理就是对<code>react-router</code>进行配置吧</p>\n<p>路由设置完之后对<strong>导航栏进行配置</strong>, <a href=\"https://procomponents.ant.design/components/layout#%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p>另外<a href=\"https://umijs.org/zh-CN/plugins/plugin-layout#logo\" target=\"_blank\" rel=\"noopener\">umi文档中的插件</a> 也是可以进行导航栏的废纸的</p>\n<h4 id=\"ant-design-pro-layout\"><a href=\"#ant-design-pro-layout\" class=\"headerlink\" title=\"@ant-design/pro-layout\"></a>@ant-design/pro-layout</h4><p><a href=\"https://procomponents.ant.design/components/layout#%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">&lt;</span>ProLayout\n    <span class=\"token comment\" spellcheck=\"true\">// 这里的route是在上面配置自动获取的，不配置那么就不会显示在导航栏中</span>\n    route<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">}</span>  \n<span class=\"token operator\">></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ProLayout</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><p>说一下antd-pro的权限, 我们可以看到 <code>utils/authority.ts</code>, 作用是获取/设置<code>localstorage</code>中的用户角色，然后通过路由中的 <code>Route</code>跟<code>authority</code> 判断其是否有准入条件。 </p>\n<p><strong>v4.1.0貌似有bug，不会经过<code>pages/Authority.tsx</code>判断权限</strong></p>\n<ul>\n<li>先通过 <code>pages/Authority.tsx</code> 文件判断<strong>用户登录</strong>以及<strong>权限路由</strong><ul>\n<li>用户已登录， 获取当前<code>location.pathname</code>在路由表中的权限，一直向上找，跟<code>localstorage</code>获取的权限判断，没权限 跳转到 <code>403</code></li>\n<li>用户没登录，跳转登录页</li>\n<li>然后再经过路由下的 <code>Component</code>, 或者说是他的<code>Children</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看封装的-组件\"><a href=\"#查看封装的-组件\" class=\"headerlink\" title=\"查看封装的 组件\"></a>查看封装的<Authorized> 组件</Authorized></h3><p>项目多次使用该组件， 使用方法如下：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notMatch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>not Match<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @param {string | string[] | Promise&lt;boolean>} authority\n * @param { React.ReactNode } notMatch\n * \n*/</span>\n\n<span class=\"token operator\">&lt;</span>Authorized authority<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>authorized<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>authority<span class=\"token punctuation\">}</span> noMatch<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>noMatch<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Authorized<span class=\"token operator\">></span></code></pre>\n<h4 id=\"Authorized-实现\"><a href=\"#Authorized-实现\" class=\"headerlink\" title=\"Authorized 实现\"></a>Authorized 实现</h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// 此时的 RenderAuthorize 来自 src/Authorithy/index</span>\n<span class=\"token comment\" spellcheck=\"true\">// 重新包装了一下Authority，使得 currentAuthority = ['admin', 'user'] 在整个周期都能使用</span>\n<span class=\"token comment\" spellcheck=\"true\">// getAuthority 就是获取当前权限</span>\n<span class=\"token keyword\">let</span> Authorized <span class=\"token operator\">=</span> <span class=\"token function\">RenderAuthorize</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAuthority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 此时还是从新包装了一下Authorited</span></code></pre>\n<ul>\n<li>RenderAuthorize</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> RenderAuthorize <span class=\"token operator\">=</span> <span class=\"token function\">renderAuthorize</span><span class=\"token punctuation\">(</span>Authorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>返回闭包，同时导出CURRENT, 当前<code>current</code> 也就是 <code>getAuthority()</code>的值， 也可以理解成一个<code>HOC</code>吧</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * use  authority or getAuthority\n * @param {string|()=>String} currentAuthority\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderAuthorize</span><span class=\"token punctuation\">(</span>Authorized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>currentAuthority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentAuthority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> currentAuthority <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                CURRENT <span class=\"token operator\">=</span> <span class=\"token function\">currentAuthority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>currentAuthority<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object String]'</span> <span class=\"token operator\">||</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>currentAuthority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    CURRENT <span class=\"token operator\">=</span> currentAuthority<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                CURRENT <span class=\"token operator\">=</span> <span class=\"token string\">'NULL'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> Authorized<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> CURRENT <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span>Authorized<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">renderAuthorize</span><span class=\"token punctuation\">(</span>Authorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li><Authorized>\n\n</Authorized></li>\n</ul>\n<p>这个组件逻辑很简单， 需要看<code>check</code>函数，传入的<code>authority</code> 是 [‘admin’] 为例子<br>如果通过<code>check</code> 那么返回<code>children</code>, 否则返回 <code>&lt;notMatch&gt;</code></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Authorized<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FunctionComponent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AuthorizedProps</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  children<span class=\"token punctuation\">,</span>\n  authority<span class=\"token punctuation\">,</span>\n  noMatch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Result</span>\n      <span class=\"token attr-name\">status</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>403<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>403<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">subTitle</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Sorry,</span> <span class=\"token attr-name\">you</span> <span class=\"token attr-name\">are</span> <span class=\"token attr-name\">not</span> <span class=\"token attr-name\">authorized</span> <span class=\"token attr-name\">to</span> <span class=\"token attr-name\">access</span> <span class=\"token attr-name\">this</span> <span class=\"token attr-name\">page.\"</span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> childrenRender<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> children <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">//</span>\n  <span class=\"token keyword\">const</span> dom <span class=\"token operator\">=</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>authority<span class=\"token punctuation\">,</span> childrenRender<span class=\"token punctuation\">,</span> noMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>dom<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>在来看看check函数</li>\n</ul>\n<p>下面的CURRENT 就是上面的<code>renderAuthorize</code> 导出的CURRENT</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {string| stirng[]} authority 这里的authority 就是 ['admin'], 也就是准入条件\n * @param { React.ReactNode } target 也就是 children\n * @param { React.ReactNode } Exception notMatch\n*/</span>\n<span class=\"token keyword\">function</span> check<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>authority<span class=\"token punctuation\">:</span> IAuthorityType<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">,</span> Exception<span class=\"token punctuation\">:</span> K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> T <span class=\"token operator\">|</span> K <span class=\"token operator\">|</span> React<span class=\"token punctuation\">.</span>ReactNode <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> checkPermissions<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>authority<span class=\"token punctuation\">,</span> CURRENT<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>再来看看 checkPermissions</li>\n</ul>\n<ol>\n<li>如果准入权限为空，那么直接渲染<code>target</code></li>\n<li>要是<code>authority</code>跟<code>currentAuthority</code>都是数组的时候，那看看有没有交集有交集那就返回<code>target</code></li>\n<li>要是<code>authority</code>为字符串，那么看看我们的current中有没有这个权限就可以了</li>\n<li>要是<code>authority</code>为<code>promise</code>那么就进入promise的操作</li>\n<li>要是<code>authority</code>为方法，那就执行一下， 参数为<code>current</code></li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 通用权限检查方法\n * Common check permissions method\n * @param { 权限判定 | Permission judgment } authority\n * @param { 你的权限 | Your permission description } currentAuthority\n * @param { 通过的组件 | Passing components } target\n * @param { 未通过的组件 | no pass components } Exception\n */</span>\n<span class=\"token keyword\">const</span> checkPermissions <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  authority<span class=\"token punctuation\">:</span> IAuthorityType<span class=\"token punctuation\">,</span>\n  currentAuthority<span class=\"token punctuation\">:</span> string <span class=\"token operator\">|</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  target<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">,</span>\n  Exception<span class=\"token punctuation\">:</span> K<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> T <span class=\"token operator\">|</span> K <span class=\"token operator\">|</span> React<span class=\"token punctuation\">.</span>ReactNode <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 没有判定权限.默认查看所有</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Retirement authority, return target;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>authority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 数组处理</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>authority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>currentAuthority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentAuthority<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> authority<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authority<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>currentAuthority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> Exception<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// string 处理</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> authority <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>currentAuthority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentAuthority<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> authority <span class=\"token operator\">===</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authority <span class=\"token operator\">===</span> currentAuthority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> Exception<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Promise 处理</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authority <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>PromiseRender<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K<span class=\"token operator\">></span> ok<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span> error<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Exception<span class=\"token punctuation\">}</span> promise<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>authority<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Function 处理</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> authority <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> bool <span class=\"token operator\">=</span> <span class=\"token function\">authority</span><span class=\"token punctuation\">(</span>currentAuthority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 函数执行后返回值是 Promise</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bool <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>PromiseRender<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> K<span class=\"token operator\">></span> ok<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span> error<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Exception<span class=\"token punctuation\">}</span> promise<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>bool<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> Exception<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unsupported parameters'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"登录组件\"><a href=\"#登录组件\" class=\"headerlink\" title=\"登录组件\"></a>登录组件</h2><p><code>pages/user/login</code> 查看 <code>index.tsx</code></p>\n<p><code>Login</code>页面有一个 <LoginForm> 包裹着两个 <code>&lt;Tab&gt;</code>, <code>&lt;Tab&gt;</code>下面又是一下Input组件，只是被重新包装了</LoginForm></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// 我们可以看出 UserName, Password 等等都是LoginForm导出的</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Tab<span class=\"token punctuation\">,</span> UserName<span class=\"token punctuation\">,</span> Password<span class=\"token punctuation\">,</span> Mobile<span class=\"token punctuation\">,</span> Captcha<span class=\"token punctuation\">,</span> Submit <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> LoginForm<span class=\"token punctuation\">;</span></code></pre>\n<p>我们看下 <code>Login</code> 这个页面的大体结构</p>\n<ul>\n<li>用一个<code>&lt;LoginForm /&gt;</code> 包裹着两个<code>&lt;Tab&gt;</code>, <code>&lt;Tab&gt;</code> 底下是登录按钮还有其他的登录方式</li>\n<li>其中一个<code>&lt;Tab&gt;对应的是账号密码登录</code>， 另一个是<code>短信验证码登录</code></li>\n<li>下面的<code>status</code>, <code>loginType</code> 是 <code>redux</code>的状态，表示登录失败后会有报错信息</li>\n<li><code>&lt;LoginForm&gt;</code> 的 <code>activeKey</code> 只有两个 <code>account</code>, <code>mobile</code> 代表账号登录跟短信登录</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LoginForm</span> <span class=\"token attr-name\">activeKey</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onTabChange</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>setType<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Tab</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>account<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tab</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>账户密码登录<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">{</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'error'</span> <span class=\"token operator\">&amp;&amp;</span> loginType <span class=\"token operator\">===</span> <span class=\"token string\">'account'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>submitting <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LoginMessage</span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>账户或密码错误（admin/ant.design）<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>UserName</span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Password</span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Tab</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Tab</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mobile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tab</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>手机号登录<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">{</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'error'</span> <span class=\"token operator\">&amp;&amp;</span> loginType <span class=\"token operator\">===</span> <span class=\"token string\">'mobile'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>submitting <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LoginMessage</span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>验证码错误<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Mobile</span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Captcha</span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Tab</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Checkbox</span> <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>autoLogin<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">setAutoLogin</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n      自动登录\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Checkbox</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">></span></span>忘记密码<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Submit</span> <span class=\"token attr-name\">loading</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>submitting<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Submit</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>other<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n    其他登录方式\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AlipayCircleOutlined</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>icon<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TaobaoCircleOutlined</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>icon<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WeiboCircleOutlined</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>icon<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/user/register<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      注册账户\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Link</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LoginForm</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a><LoginForm></LoginForm></h3><ul>\n<li>首先先创建一个 <code>Context</code>， 这个context 主要是给 <code>&lt;LoginTab&gt;</code> 使用的</li>\n</ul>\n<h4 id=\"LoginTab-实现\"><a href=\"#LoginTab-实现\" class=\"headerlink\" title=\"LoginTab 实现\"></a>LoginTab 实现</h4><p>简单看就是 </p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// antd 官网</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Tabs</span> <span class=\"token attr-name\">defaultActiveKey</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>callback<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TabPane</span> <span class=\"token attr-name\">tab</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Tab</span> <span class=\"token attr-name\">1\"</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Content <span class=\"token keyword\">of</span> Tab Pane <span class=\"token number\">1</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TabPane</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TabPane</span> <span class=\"token attr-name\">tab</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Tab</span> <span class=\"token attr-name\">2\"</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Content <span class=\"token keyword\">of</span> Tab Pane <span class=\"token number\">2</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TabPane</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TabPane</span> <span class=\"token attr-name\">tab</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Tab</span> <span class=\"token attr-name\">3\"</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Content <span class=\"token keyword\">of</span> Tab Pane <span class=\"token number\">3</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TabPane</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Tabs</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> LoginTab<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FC<span class=\"token operator\">&lt;</span>LoginTabProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> uniqueId <span class=\"token operator\">=</span> <span class=\"token function\">generateId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login-tab-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//治理生成唯一的tab id</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tabUtil <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tabUtil<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tabUtil<span class=\"token punctuation\">.</span><span class=\"token function\">addTab</span><span class=\"token punctuation\">(</span>uniqueId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>TabPane <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>active <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TabPane<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> WrapContext<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FC<span class=\"token operator\">&lt;</span>TabPaneProps<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  typeName<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>LoginContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>LoginTab tabUtil<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">.</span>tabUtil<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>LoginContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>我们看看provider 的用法</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// 此时这里用上了hook然后加载的时候会加载一个tab，当切换的时候会添加另一个tab</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tabs<span class=\"token punctuation\">,</span> setTabs<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 这个active貌似没什么用</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>active<span class=\"token punctuation\">,</span> setActive<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 此时声明当前的tab是哪一个 是 account 还是 mobile</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">,</span> setType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMergeValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>activeKey<span class=\"token punctuation\">,</span>\n  onChange<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>onTabChange<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LoginContext.Provider</span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    tabUtil<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      addTab<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTabs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      removeTab<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTabs</span><span class=\"token punctuation\">(</span>tabs<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentId<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> currentId <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span></span><span class=\"token attr-name\">,</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">updateActive:</span></span> <span class=\"token attr-name\">(activeItem)</span> <span class=\"token attr-name\">=</span><span class=\"token punctuation\">></span> <span class=\"token attr-name\">{</span>\n      <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(!active)</span> <span class=\"token attr-name\">return;</span>\n      <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(active[type])</span> <span class=\"token attr-name\">{</span>\n        <span class=\"token attr-name\">active[type].push(activeItem);</span>\n      <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">else</span> <span class=\"token attr-name\">{</span>\n        <span class=\"token attr-name\">active[type]</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> [activeItem];</span>\n      <span class=\"token attr-name\">}</span>\n      <span class=\"token attr-name\">setActive(active);</span>\n    <span class=\"token attr-name\">},</span>\n  <span class=\"token attr-name\">}}</span>\n<span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LoginContext.Provider</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://umijs.org/\" target=\"_blank\" rel=\"noopener\">umi文档</a></p>\n<p>执行 <code>npm create umi</code> 创建 <code>antd-pro</code> 项目</p>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>整个 umi 建立的项目可以自定义路由，也可以约定式路由，我就直接对自定义路由展开<br>配置可以写在 <code>config/config.ts</code> 下或者写在根目录下 <code>.umirc.ts</code> 的<strong>routes</strong>中</p>\n<pre><code class=\"jsx\">{\n    path: &#39;/&#39;,\n    component: &#39;../layouts/BlankLayout&#39;,\n    routes: [\n    {\n        path: &#39;/&#39;,\n        component: &#39;../layouts/UserLayout&#39;,\n        Routes: [&#39;src/pages/Authorized&#39;],\n        authority: [&#39;admin&#39;, &#39;user&#39;], // 权限角色\n        routes: [\n            {\n                name: &#39;/test&#39;,\n                icon: &#39;smile&#39;,\n                path: &#39;/test&#39;,\n                component: &#39;./test&#39;,\n            },\n            {\n                name: &#39;/test2&#39;,\n                authority: [&#39;admin&#39;, &#39;user&#39;], // 权限角色\n                routes: [\n                    {\n                        name: &#39;&#39;,\n                        icon: &#39;smile&#39;,\n                        path: &#39;/test2/step1&#39;\n                    }\n                ]\n            }\n\n        ],\n    }\n}</code></pre>\n<h3 id=\"侧边栏-导航栏\"><a href=\"#侧边栏-导航栏\" class=\"headerlink\" title=\"侧边栏/导航栏\"></a>侧边栏/导航栏</h3><p><strong>注意：</strong>我们暂时不对它内置路由到底是怎么实现的，但我想的其原理就是对<code>react-router</code>进行配置吧</p>\n<p>路由设置完之后对<strong>导航栏进行配置</strong>, <a href=\"https://procomponents.ant.design/components/layout#%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<p>另外<a href=\"https://umijs.org/zh-CN/plugins/plugin-layout#logo\" target=\"_blank\" rel=\"noopener\">umi文档中的插件</a> 也是可以进行导航栏的废纸的</p>\n<h4 id=\"ant-design-pro-layout\"><a href=\"#ant-design-pro-layout\" class=\"headerlink\" title=\"@ant-design/pro-layout\"></a>@ant-design/pro-layout</h4><p><a href=\"https://procomponents.ant.design/components/layout#%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<pre><code class=\"jsx\">&lt;ProLayout\n    // 这里的route是在上面配置自动获取的，不配置那么就不会显示在导航栏中\n    route={props.route}  \n&gt;\n&lt;/ProLayout&gt;</code></pre>\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><p>说一下antd-pro的权限, 我们可以看到 <code>utils/authority.ts</code>, 作用是获取/设置<code>localstorage</code>中的用户角色，然后通过路由中的 <code>Route</code>跟<code>authority</code> 判断其是否有准入条件。 </p>\n<p><strong>v4.1.0貌似有bug，不会经过<code>pages/Authority.tsx</code>判断权限</strong></p>\n<ul>\n<li>先通过 <code>pages/Authority.tsx</code> 文件判断<strong>用户登录</strong>以及<strong>权限路由</strong><ul>\n<li>用户已登录， 获取当前<code>location.pathname</code>在路由表中的权限，一直向上找，跟<code>localstorage</code>获取的权限判断，没权限 跳转到 <code>403</code></li>\n<li>用户没登录，跳转登录页</li>\n<li>然后再经过路由下的 <code>Component</code>, 或者说是他的<code>Children</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看封装的-组件\"><a href=\"#查看封装的-组件\" class=\"headerlink\" title=\"查看封装的 组件\"></a>查看封装的<Authorized> 组件</Authorized></h3><p>项目多次使用该组件， 使用方法如下：</p>\n<pre><code class=\"js\">const notMatch = (\n    &lt;div&gt;not Match&lt;/div&gt;\n)\n/**\n * @param {string | string[] | Promise&lt;boolean&gt;} authority\n * @param { React.ReactNode } notMatch\n * \n*/\n\n&lt;Authorized authority={authorized!.authority} noMatch={noMatch}&gt;\n    {children}\n&lt;/Authorized&gt;</code></pre>\n<h4 id=\"Authorized-实现\"><a href=\"#Authorized-实现\" class=\"headerlink\" title=\"Authorized 实现\"></a>Authorized 实现</h4><pre><code class=\"jsx\">// 此时的 RenderAuthorize 来自 src/Authorithy/index\n// 重新包装了一下Authority，使得 currentAuthority = [&#39;admin&#39;, &#39;user&#39;] 在整个周期都能使用\n// getAuthority 就是获取当前权限\nlet Authorized = RenderAuthorize(getAuthority()); // 此时还是从新包装了一下Authorited</code></pre>\n<ul>\n<li>RenderAuthorize</li>\n</ul>\n<pre><code class=\"jsx\">const RenderAuthorize = renderAuthorize(Authorized);</code></pre>\n<p>返回闭包，同时导出CURRENT, 当前<code>current</code> 也就是 <code>getAuthority()</code>的值， 也可以理解成一个<code>HOC</code>吧</p>\n<pre><code class=\"jsx\">/**\n * use  authority or getAuthority\n * @param {string|()=&gt;String} currentAuthority\n */\nfunction renderAuthorize(Authorized) {\n    return function (currentAuthority) {\n        if (currentAuthority) {\n            if (typeof currentAuthority === &#39;function&#39;) {\n                CURRENT = currentAuthority();\n            }\n\n            if (Object.prototype.toString.call(currentAuthority) === &#39;[object String]&#39; || Array.isArray(currentAuthority))\n                {\n                    CURRENT = currentAuthority;\n                }\n            } else {\n                CURRENT = &#39;NULL&#39;;\n            }\n\n        return Authorized;\n    };\n}\nexport { CURRENT }\nexport default (Authorized) =&gt; renderAuthorize(Authorized);</code></pre>\n<ul>\n<li><Authorized>\n\n</Authorized></li>\n</ul>\n<p>这个组件逻辑很简单， 需要看<code>check</code>函数，传入的<code>authority</code> 是 [‘admin’] 为例子<br>如果通过<code>check</code> 那么返回<code>children</code>, 否则返回 <code>&lt;notMatch&gt;</code></p>\n<pre><code class=\"jsx\">const Authorized: React.FunctionComponent&lt;AuthorizedProps&gt; = ({\n  children,\n  authority,\n  noMatch = (\n    &lt;Result\n      status=&quot;403&quot;\n      title=&quot;403&quot;\n      subTitle=&quot;Sorry, you are not authorized to access this page.&quot;\n    /&gt;\n  ),\n}) =&gt; {\n  const childrenRender: React.ReactNode = typeof children === &#39;undefined&#39; ? null : children;\n  //\n  const dom = check(authority, childrenRender, noMatch);\n  return &lt;&gt;{dom}&lt;/&gt;;\n};\n</code></pre>\n<ul>\n<li>在来看看check函数</li>\n</ul>\n<p>下面的CURRENT 就是上面的<code>renderAuthorize</code> 导出的CURRENT</p>\n<pre><code class=\"jsx\">/**\n * @param {string| stirng[]} authority 这里的authority 就是 [&#39;admin&#39;], 也就是准入条件\n * @param { React.ReactNode } target 也就是 children\n * @param { React.ReactNode } Exception notMatch\n*/\nfunction check&lt;T, K&gt;(authority: IAuthorityType, target: T, Exception: K): T | K | React.ReactNode {\n  return checkPermissions&lt;T, K&gt;(authority, CURRENT, target, Exception);\n}</code></pre>\n<ul>\n<li>再来看看 checkPermissions</li>\n</ul>\n<ol>\n<li>如果准入权限为空，那么直接渲染<code>target</code></li>\n<li>要是<code>authority</code>跟<code>currentAuthority</code>都是数组的时候，那看看有没有交集有交集那就返回<code>target</code></li>\n<li>要是<code>authority</code>为字符串，那么看看我们的current中有没有这个权限就可以了</li>\n<li>要是<code>authority</code>为<code>promise</code>那么就进入promise的操作</li>\n<li>要是<code>authority</code>为方法，那就执行一下， 参数为<code>current</code></li>\n</ol>\n<pre><code class=\"js\">/**\n * 通用权限检查方法\n * Common check permissions method\n * @param { 权限判定 | Permission judgment } authority\n * @param { 你的权限 | Your permission description } currentAuthority\n * @param { 通过的组件 | Passing components } target\n * @param { 未通过的组件 | no pass components } Exception\n */\nconst checkPermissions = &lt;T, K&gt;(\n  authority: IAuthorityType,\n  currentAuthority: string | string[],\n  target: T,\n  Exception: K,\n): T | K | React.ReactNode =&gt; {\n  // 没有判定权限.默认查看所有\n  // Retirement authority, return target;\n  if (!authority) {\n    return target;\n  }\n  // 数组处理\n  if (Array.isArray(authority)) {\n    if (Array.isArray(currentAuthority)) {\n      if (currentAuthority.some((item) =&gt; authority.includes(item))) {\n        return target;\n      }\n    } else if (authority.includes(currentAuthority)) {\n      return target;\n    }\n    return Exception;\n  }\n  // string 处理\n  if (typeof authority === &#39;string&#39;) {\n    if (Array.isArray(currentAuthority)) {\n      if (currentAuthority.some((item) =&gt; authority === item)) {\n        return target;\n      }\n    } else if (authority === currentAuthority) {\n      return target;\n    }\n    return Exception;\n  }\n  // Promise 处理\n  if (authority instanceof Promise) {\n    return &lt;PromiseRender&lt;T, K&gt; ok={target} error={Exception} promise={authority} /&gt;;\n  }\n  // Function 处理\n  if (typeof authority === &#39;function&#39;) {\n    const bool = authority(currentAuthority);\n    // 函数执行后返回值是 Promise\n    if (bool instanceof Promise) {\n      return &lt;PromiseRender&lt;T, K&gt; ok={target} error={Exception} promise={bool} /&gt;;\n    }\n    if (bool) {\n      return target;\n    }\n    return Exception;\n  }\n  throw new Error(&#39;unsupported parameters&#39;);\n};</code></pre>\n<h2 id=\"登录组件\"><a href=\"#登录组件\" class=\"headerlink\" title=\"登录组件\"></a>登录组件</h2><p><code>pages/user/login</code> 查看 <code>index.tsx</code></p>\n<p><code>Login</code>页面有一个 <LoginForm> 包裹着两个 <code>&lt;Tab&gt;</code>, <code>&lt;Tab&gt;</code>下面又是一下Input组件，只是被重新包装了</LoginForm></p>\n<pre><code class=\"jsx\">// 我们可以看出 UserName, Password 等等都是LoginForm导出的\nconst { Tab, UserName, Password, Mobile, Captcha, Submit } = LoginForm;</code></pre>\n<p>我们看下 <code>Login</code> 这个页面的大体结构</p>\n<ul>\n<li>用一个<code>&lt;LoginForm /&gt;</code> 包裹着两个<code>&lt;Tab&gt;</code>, <code>&lt;Tab&gt;</code> 底下是登录按钮还有其他的登录方式</li>\n<li>其中一个<code>&lt;Tab&gt;对应的是账号密码登录</code>， 另一个是<code>短信验证码登录</code></li>\n<li>下面的<code>status</code>, <code>loginType</code> 是 <code>redux</code>的状态，表示登录失败后会有报错信息</li>\n<li><code>&lt;LoginForm&gt;</code> 的 <code>activeKey</code> 只有两个 <code>account</code>, <code>mobile</code> 代表账号登录跟短信登录</li>\n</ul>\n<pre><code class=\"jsx\">&lt;LoginForm activeKey={type} onTabChange={setType} onSubmit={handleSubmit}&gt;\n  &lt;Tab key=&quot;account&quot; tab=&quot;账户密码登录&quot;&gt;\n    {status === &#39;error&#39; &amp;&amp; loginType === &#39;account&#39; &amp;&amp; !submitting &amp;&amp; (\n      &lt;LoginMessage content=&quot;账户或密码错误（admin/ant.design）&quot; /&gt;\n    )}\n    &lt;UserName/&gt;\n    &lt;Password/&gt;\n  &lt;/Tab&gt;\n  &lt;Tab key=&quot;mobile&quot; tab=&quot;手机号登录&quot;&gt;\n    {status === &#39;error&#39; &amp;&amp; loginType === &#39;mobile&#39; &amp;&amp; !submitting &amp;&amp; (\n      &lt;LoginMessage content=&quot;验证码错误&quot; /&gt;\n    )}\n    &lt;Mobile/&gt;\n    &lt;Captcha/&gt;\n  &lt;/Tab&gt;\n  &lt;div&gt;\n    &lt;Checkbox checked={autoLogin} onChange={(e) =&gt; setAutoLogin(e.target.checked)}&gt;\n      自动登录\n    &lt;/Checkbox&gt;\n    &lt;a&gt;忘记密码&lt;/a&gt;\n  &lt;/div&gt;\n  &lt;Submit loading={submitting}&gt;登录&lt;/Submit&gt;\n  &lt;div className={styles.other}&gt;\n    其他登录方式\n    &lt;AlipayCircleOutlined className={styles.icon} /&gt;\n    &lt;TaobaoCircleOutlined className={styles.icon} /&gt;\n    &lt;WeiboCircleOutlined className={styles.icon} /&gt;\n    &lt;Link className={styles.register} to=&quot;/user/register&quot;&gt;\n      注册账户\n    &lt;/Link&gt;\n  &lt;/div&gt;\n&lt;/LoginForm&gt;</code></pre>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a><LoginForm></LoginForm></h3><ul>\n<li>首先先创建一个 <code>Context</code>， 这个context 主要是给 <code>&lt;LoginTab&gt;</code> 使用的</li>\n</ul>\n<h4 id=\"LoginTab-实现\"><a href=\"#LoginTab-实现\" class=\"headerlink\" title=\"LoginTab 实现\"></a>LoginTab 实现</h4><p>简单看就是 </p>\n<pre><code class=\"jsx\">// antd 官网\n&lt;Tabs defaultActiveKey=&quot;1&quot; onChange={callback}&gt;\n  &lt;TabPane tab=&quot;Tab 1&quot; key=&quot;1&quot;&gt;\n    Content of Tab Pane 1\n  &lt;/TabPane&gt;\n  &lt;TabPane tab=&quot;Tab 2&quot; key=&quot;2&quot;&gt;\n    Content of Tab Pane 2\n  &lt;/TabPane&gt;\n  &lt;TabPane tab=&quot;Tab 3&quot; key=&quot;3&quot;&gt;\n    Content of Tab Pane 3\n  &lt;/TabPane&gt;\n&lt;/Tabs&gt;</code></pre>\n<pre><code class=\"js\">const LoginTab: React.FC&lt;LoginTabProps&gt; = (props) =&gt; {\n  useEffect(() =&gt; {\n    const uniqueId = generateId(&#39;login-tab-&#39;); //治理生成唯一的tab id\n    const { tabUtil } = props;\n    if (tabUtil) {\n      tabUtil.addTab(uniqueId);\n    }\n  }, []);\n  const { children } = props;\n  return &lt;TabPane {...props}&gt;{props.active &amp;&amp; children}&lt;/TabPane&gt;;\n};\n\nconst WrapContext: React.FC&lt;TabPaneProps&gt; &amp; {\n  typeName: string;\n} = (props) =&gt; (\n  &lt;LoginContext.Consumer&gt;\n    {(value) =&gt; &lt;LoginTab tabUtil={value.tabUtil} {...props} /&gt;}\n  &lt;/LoginContext.Consumer&gt;\n);</code></pre>\n<p>我们看看provider 的用法</p>\n<pre><code class=\"jsx\">// 此时这里用上了hook然后加载的时候会加载一个tab，当切换的时候会添加另一个tab\nconst [tabs, setTabs] = useState&lt;string[]&gt;([]);\n// 这个active貌似没什么用\nconst [active, setActive] = useState({});\n// 此时声明当前的tab是哪一个 是 account 还是 mobile\nconst [type, setType] = useMergeValue(&#39;&#39;, {\n  value: props.activeKey,\n  onChange: props.onTabChange,\n});\n&lt;LoginContext.Provider\n  value={{\n    tabUtil: {\n      addTab: (id) => {\n        setTabs([...tabs, id]);\n      },\n      removeTab: (id) => {\n        setTabs(tabs.filter((currentId) => currentId !== id));\n      },\n    },\n    updateActive: (activeItem) => {\n      if (!active) return;\n      if (active[type]) {\n        active[type].push(activeItem);\n      } else {\n        active[type] = [activeItem];\n      }\n      setActive(active);\n    },\n  }}\n&gt;\n&lt;LoginContext.Provider&gt;\n</code></pre>\n"},{"title":"对近期工作的一些思考","date":"2021-10-07T13:32:44.000Z","_content":"\n## 业务工作\n\n之前要做一个类似于`装修模块的东西`，比如`app 首页，活动页等等`，如下图所示\n\n![图例](./对近期工作的一些思考/1.jpg)\n\n左边是一个`组件树`， 中间是`整个内容模块的展示`， 右边是`对所选中的内容进行编辑`\n\n## 技术栈\n\n因为之前同事是使用[brick-design](https://github.com/brick-design/brick-design) 做二次开发的，所以也就继续沿用了。\n\n用`lerna` 去管理这些包，比如`brick-design`， 还有一些`组件`。最后`build` 的时候会放到`私有源`上\n\n## 开发准备工作\n\n因为`brick-design` 作为工具库，所以我们要通过`yarn add` 的方式去安装，所以在开发时候需要使用到`npm link` 到`brick-design` 上。\n具体查看[npm link](https://www.jianshu.com/p/82076fc481a6)\n\n## brick-design 原理\n\n**brick-design原理:** 它是通过去维护整个`pageConfig`去实现组件自定义，`pageConfig`就是一个`用数据结构表达的一颗树`，每个节点都有一个`props`。\n\n数据结构如下：\n```jsx\nconst pageConfig = {\n\t\"1\": {\n\t\tcomponentName: 'Layout',\n\t\ttitle: '组件树',\n\t\tprops: {\n\t\t\tstyle: {\n\t\t\t\twidth: '100%',\n\t\t\t}\n\t\t},\n\t\tchildNodes: ['2']\n\t},\n\t\"2\": {\n\t\tcomponentName: 'CouponContainer', // 需要到 <BrickProvider config={} /> config 需要注册该组件, 不然会找不到该组件\n\t\ttitle: '优惠券容器',\n\t\tprops: {},\n\t\tchildNodes: ['3']\n\t},\n\t\"3\": {\n\t\tcomponentName: 'CouponItem',\n\t\ttitle: '优惠券1',\n\t\tprops: {\n\t\t\tname: '优惠券名',\n\t\t\tid: '优惠券id'\n\t\t},\n\t}\n}\n```\n\n在用这个`brick-design` 的时候感觉原理上跟`formily`类似，`pageConfig` 相当于`formily` 的`schema`, 他们两同样需要对自定义的组件作注册事件 \n[组件注册](https://github.com/brick-design/brick-design/blob/master/examples/react-example/src/configs/index.ts)\n\n#### 实现CouponContainer 和 CouponItem\n\n```jsx\ninterface Iprops {\n  children: React.ReactNode,\n\t/** 控制显示与隐藏 */\n  visible: 0 | 1,\n\t/** 下面这些是brick-design 的属性，就是给这个容器在选中状态的样式等其余属性 */\n  className: string,\n  onClick?: () => void,\n  onDrag?: () => void,\n  onDragEnd?: () => void,\n  onDragEnter?: () => void,\n  onDragStart?: () => void,\n  onMouseOver?: () => void,\n  getOperateState?: any,\n}\n\nconst Coupon: React.FC<Iprops> & { Item: typeof CouponItem } = (props: Iprops) => {\n  const { children, className, visible = true, ...other } = props;\n  const classNameStr = cx(\n    styles.container,\n    className,\n  );\n  const { onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver, getOperateState } = other;\n\n  const divProps = {\n    onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver,\n  };\n\t// 这里做个提示：使用当前props的theme 配合 React.children.map, 以及React.cloneElement 形成不一样的布局，比如商品两列布局，或者是一行一个，\n  return (\n    <>\n    {\n      !!visible && (\n        <div {...divProps} className={classNameStr}>\n          {children}\n        </div>\n      ) || null\n    }\n    </>\n  );\n};\n\n\ninterface ItemIprops {\n\tid?: number\n\tname?: string,\n\tclassName: string,\n\tonClick: () => void,\n\tonDrag: () => void,\n\tonDragEnd: () => void,\n\tonDragEnter: () => void,\n\tonDragStart: () => void,\n\tonMouseOver: () => void,\n\tdraggable?: false\n\tgetOperateState: any,\n}\n\nconst CouponItem: React.FC<ItemIprops> = (props: ItemIprops) => {\n  const { className, ...other} = props;\n  const { onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver, getOperateState, ...rest} = other;\n  const { id, name } = rest;\n  const divProps = {\n    onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver,\n  };\n  const isNotNull = useMemo(() => id, [id]);\n  return (\n    <div className={cx(styles.item)}>\n      <div {...divProps} className={className}>\n        <CouponsItem id={id} name={name} isNull={!isNotNull} />\n      </div>\n    </div>\n  );\n};\n\nCoupon.Item = CouponItem;\n```\n\n## 迷茫与改进\n\n* 一开始是跟同事一样的做法，就是先写一个 `pageConfig` 的一个模板，然后从后端请求接口后把当中的值一一塞进去。\n* 在右边装修内容的时候写成了一个个单独的组件，只要一改变就会触发`pageConfig`, 修改`当前选择的组件的props`, 甚至不需要按确认按钮，\n这样变得非常难处理，无法做数据验证等等。\n* 对于重复数据可继续选择问题， 即当我选择了一个id为1的优惠券时，我再新建一个子节点，我还能再继续选择这张优惠券，数据冗余。\n\n### 改进\n\n* 对于第一个问题，解决方案是根据后端返回的数据去构建一个`pageConfig`, 而不是根据模板去一一塞过去。 hooks 如下\n\n```js\nfunction useGetLayout() {\n\tconst { id } = usePageStatus();\n  const [detail, setDetail] = useState<DetailType | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n\n\t/** 获取布局 */\n\tuseEffect(() => {\n    let isValid = true;\n\t\tif (!id) {\n\t\t\treturn;\n\t\t}\n    async function fetchData() {\n      setLoading(true);\n      const { code, data } = await Api({id: id});\n      if (!isValid) {\n        return;\n      }\n      setLoading(false);\n      if (code === 1000) {\n        const isEmptyObject = Object.keys(data.adornContent).length === 0;\n        const tempData = {\n          ...data,\n          adornContent: isEmptyObject ? DEFAULT_DATA : data.adornContent\n        };\n        setDetail(tempData as unknown as DetailType);\n      }\n    }\n    fetchData();\n    return () => {\n      isValid = false;\n    };\n  }, [id]);\n\n\t/** 根据后端返回的布局内容去构建pageConfig， 一部分代码 */\n\tuseEffect(() => {\n\t\tif (!detail) {\n\t\t\treturn;\n\t\t}\n\t\tasync function setData() {\n\t\t\tconst { adornContent } = detail!;\n\t\t\tlet startKey = 0;\n\t\t\tconst firstChildKeys: string[] = [];\n\t\t\tlet pageConfig = {};\n\t\t\t/** 未排序数组 */\n\t\t\tconst dataSourceList: { key: keyof typeof adornContent, sort: number }[] = [];\n\t\t\tObject.keys(adornContent).map((_item: keyof typeof adornContent) => {\n\t\t\t\tdataSourceList.push({\n\t\t\t\t\tkey: _item,\n\t\t\t\t\tsort: adornContent[_item].sort\n\t\t\t\t});\n\t\t\t});\n\t\t\tconst sortedList = dataSourceList.sort((a, b) => a.sort - b.sort);\n\t\t\tfor (const _row of sortedList) {\n\t\t\t\tstartKey = startKey + 1;\n\t\t\t\tfirstChildKeys.push(startKey.toString());\n\t\t\t\tconst target = adornContent[_row.key];\n\t\t\t\tconst currentProps = target.props;\n\t\t\t\tconst childrenData = currentProps.childrenData || [];\n\t\t\t\tconst props = _row.key === 'top' ? {\n\t\t\t\t\timageUrl: currentProps.imageUrl\n\t\t\t\t\t} : {\n\t\t\t\t\t\tvisible: currentProps.visible || true,\n\t\t\t\t\t\ttheme: currentProps.theme || 0,\n\t\t\t\t\t\ttitle: currentProps.title,\n\t\t\t\t\t};\n\t\t\t\tconst childPropsData = _row.key === 'top' ? {} : {\n\t\t\t\t\tchildComponentName: `${CHILD_COMPONENT_NAME[_row.key]}`,\n\t\t\t\t\taddBtnText: '添加子节点',\n\t\t\t\t\tchildProps: {\n\t\t\t\t\t\totherProps: {\n\t\t\t\t\t\t\ttype: `${_row.key}Item`\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tlet tempConfig = {\n\t\t\t\t\tcomponentName: COMPONENT_NAME[_row.key],\n\t\t\t\t\ttitle: title[_row.key] || currentProps.title,\n\t\t\t\t\tprops: props,\n\t\t\t\t\totherProps: {\n\t\t\t\t\t\ttype: _row.key\n\t\t\t\t\t},\n\t\t\t\t\tcanDelete: false,\n\t\t\t\t\t...childPropsData,\n\t\t\t\t\tchildNodes: [],\n\t\t\t\t};\n\t\t\t\tconst childNodesKeys: string[] = [];\n\t\t\t\t/**\n\t\t\t\t * @tofix \n\t\t\t\t * 这里不应该这么写，但是后端的接口分了一块一块，那也没办法 \n\t\t\t\t * 这里应该先根据后端返回的结果先在前端处理一遍，变成 {key: [1, 2, 3]， key2: [2,3,4]} 这样的数据结构，然后请求后端接口，让后端一次返回所有数据\n\t\t\t\t * 而不是一块一块的去请求借口\n\t\t\t\t */\n\t\t\t\tif ( childrenData.length > 0) {\n\t\t\t\t\t/** 这里用key value 的形式对应formated data ，格式化请求前的数据*/\n\t\t\t\t\tconst formatedData = formatData[_row.key]?.(childrenData);\n\t\t\t\t\t/** 这里用key value 的形式对应api */\n\t\t\t\t\tconst requestData = await service[_row.key]?.(formatedData, { ctlType: 'none' });\n\t\t\t\t\t/** 这里用key value 的形式对应formated data ，格式化请求后的数据*/\n\t\t\t\t\tconst afterRequestFormatedData = afterRequestFormat[_row.key]?.(requestData);\n\t\t\t\t\tafterRequestFormatedData?.forEach((_item, _index) => {\n\t\t\t\t\t\tconst keyNum = `${startKey}-${_index + 1}`;\n\t\t\t\t\t\tchildNodesKeys.push(keyNum);\n\t\t\t\t\t\tconst sonConfig = {\n\t\t\t\t\t\t\tcomponentName: `${CHILD_COMPONENT_NAME[_row.key]}`,\n\t\t\t\t\t\t\ttitle: _item?.productName || _item.name,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t..._item,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\totherProps: {\n\t\t\t\t\t\t\t\ttype:  `${_row.key}Item`\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tchildNodes: []\n\t\t\t\t\t\t};\n\t\t\t\t\t\tpageConfig[keyNum] = sonConfig;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\ttempConfig = {\n\t\t\t\t\t...tempConfig,\n\t\t\t\t\tchildNodes: childNodesKeys\n\t\t\t\t};\n\t\t\t\tpageConfig[startKey] = tempConfig;\n\t\t\t}\n\t\t\tpageConfig = {\n\t\t\t\t0: {\n\t\t\t\t\t\"componentName\": \"MallLayout\",\n\t\t\t\t\ttitle: '组件树',\n\t\t\t\t\t\"props\": {\n\t\t\t\t\t\t\"style\": {\n\t\t\t\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"childNodes\": firstChildKeys\n\t\t\t\t},\n\t\t\t\t...pageConfig,\n\t\t\t};\n\n\t\t\tconsole.log(\"pageConfig\", pageConfig);\n\t\t\tupdatePageConfig(pageConfig);\n\n\t\t}\n\t\tsetData();\n\t}, [detail]);\n}\n```\n\n* 针对第二个问题，改用formily，把编辑内容变成`form`, 或者`formily`  \n* 针对第三个问题，再写一个`hook`，针对`pageConfig`发生改变时，返回已有的`key:value`值,根据选择组件获取对应的`key`.即`sameKey[selectInfo.key]`,在table设置rowSelection 设置disabled既可, 数据接口如下：\n\n```jsx\n{\n\tcoupon: [1, 2],\n\thot: [251, 235],\n\tdiscount: [251, 235]\n}\n```\n\n## APP 端显示\n\napp 那边使用的是 `react-native`, \n那么写一个获取`layout` 布局以及 获取数据的`hook`, 这样做既可以把逻辑抽离，又优雅，到时候`迁移到小程序`上就方便多了\n\n因为我们的数据格式是： \n```jsx\n{\n\tcoupon: {\n\t\tsort: 1,\n\t\ttitle: '优惠券',\n\t\tchildrenData: [\n\t\t\t{ type: 1, id: 1 },\n\t\t\t{ type: 2, id: 2 }\n\t\t]\n\t},\n\thot: {\n\t\tsort: 2,\n\t\ttitle: '推荐',\n\t\tchildrenData: [231, 255]\n\t},\n\tdiscount: {\n\t\tsort: 3,\n\t\ttitle: '折扣',\n\t\tchildrenData: [231, 255]\n\t},\n}\n```\n\n先通过前端筛选数据，将空值筛选掉，然后提交给后端, 后端一样`key,value` 这样返回数据，\n\n```jsx\n// 前端提交给后端的数据格式\n{\n\tcoupon:[\n\t\t{ type: 1, id: 1 },\n\t\t{ type: 2, id: 2 },\n\t],\n\thot: [231, 255],\n\tdiscount: [231, 255]\n}\n\n// 后端返回给前端的数据格式, 如下\n{\n\tcoupon:[\n\t\t{ type: 1, id: 1, name: '优惠券1' },\n\t\t{ type: 2, id: 2,  name: '优惠券2' },\n\t],\n\thot: [\n\t\t{ title: '商品1', id: 231 },\n\t]\n}\n```\n\n**迷惑行为：**不知道为什么其他同事都是一块内容一个接口，让我感觉非常迷惑。 这样导致的结果就是，`一个页面n 多个接口`，`逻辑难以复用`, 且`太多if/else`。\n\n因为个人不太喜欢写`if/else`, 本人一般会用 `Map` 去代替`if/else`。\n\n最后, 只要遍历`activityData` 并写相对应的容器组件即可，比如 `Coupon`, `CommodityList`, \n\n```jsx\n// activityData\n[\n\t{\n\t\tsort: 1,\n\t\tname: 'coupon',\n\t\tdataSource: [\n\t\t\t{ type: 1, id: 1, name: '优惠券1' },\n\t\t\t{ type: 2, id: 2,  name: '优惠券2' },\n\t\t]\n\t},\n\t{\n\t\tsort: 2,\n\t\tname: 'hot',\n\t\tdataSource: [\n\t\t\t{ title: '商品1', id: 231 },\n\t\t]\n\t}\n]\n```\n\n```jsx\n<ScrollView style={styles.scrollView} scrollIndicatorInsets={{ right: 1 }}>\n\t{\n\t\tactivityData.map((_item: any, _index: number) => {\n\t\t\tconst componentName = ACTIVITY_TYPE.includes(_item.name) 'commodityList' : _item.name\n\n\t\t\tconst Component = ComponentMap[componentName];\n\t\t\tif (!Component) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t\t// eslint-disable-next-line react/no-array-index-key\n\t\t\treturn <Component key={`${_item.name}-${_index}`} activityType={_item.name}  {..._item} />\n\t\t})\n\t}\n</ScrollView>\n```","source":"_posts/对近期工作的一些思考.md","raw":"---\ntitle: 对近期工作的一些思考\ndate: 2021-10-07 13:32:44\ntags: [react]\n---\n\n## 业务工作\n\n之前要做一个类似于`装修模块的东西`，比如`app 首页，活动页等等`，如下图所示\n\n![图例](./对近期工作的一些思考/1.jpg)\n\n左边是一个`组件树`， 中间是`整个内容模块的展示`， 右边是`对所选中的内容进行编辑`\n\n## 技术栈\n\n因为之前同事是使用[brick-design](https://github.com/brick-design/brick-design) 做二次开发的，所以也就继续沿用了。\n\n用`lerna` 去管理这些包，比如`brick-design`， 还有一些`组件`。最后`build` 的时候会放到`私有源`上\n\n## 开发准备工作\n\n因为`brick-design` 作为工具库，所以我们要通过`yarn add` 的方式去安装，所以在开发时候需要使用到`npm link` 到`brick-design` 上。\n具体查看[npm link](https://www.jianshu.com/p/82076fc481a6)\n\n## brick-design 原理\n\n**brick-design原理:** 它是通过去维护整个`pageConfig`去实现组件自定义，`pageConfig`就是一个`用数据结构表达的一颗树`，每个节点都有一个`props`。\n\n数据结构如下：\n```jsx\nconst pageConfig = {\n\t\"1\": {\n\t\tcomponentName: 'Layout',\n\t\ttitle: '组件树',\n\t\tprops: {\n\t\t\tstyle: {\n\t\t\t\twidth: '100%',\n\t\t\t}\n\t\t},\n\t\tchildNodes: ['2']\n\t},\n\t\"2\": {\n\t\tcomponentName: 'CouponContainer', // 需要到 <BrickProvider config={} /> config 需要注册该组件, 不然会找不到该组件\n\t\ttitle: '优惠券容器',\n\t\tprops: {},\n\t\tchildNodes: ['3']\n\t},\n\t\"3\": {\n\t\tcomponentName: 'CouponItem',\n\t\ttitle: '优惠券1',\n\t\tprops: {\n\t\t\tname: '优惠券名',\n\t\t\tid: '优惠券id'\n\t\t},\n\t}\n}\n```\n\n在用这个`brick-design` 的时候感觉原理上跟`formily`类似，`pageConfig` 相当于`formily` 的`schema`, 他们两同样需要对自定义的组件作注册事件 \n[组件注册](https://github.com/brick-design/brick-design/blob/master/examples/react-example/src/configs/index.ts)\n\n#### 实现CouponContainer 和 CouponItem\n\n```jsx\ninterface Iprops {\n  children: React.ReactNode,\n\t/** 控制显示与隐藏 */\n  visible: 0 | 1,\n\t/** 下面这些是brick-design 的属性，就是给这个容器在选中状态的样式等其余属性 */\n  className: string,\n  onClick?: () => void,\n  onDrag?: () => void,\n  onDragEnd?: () => void,\n  onDragEnter?: () => void,\n  onDragStart?: () => void,\n  onMouseOver?: () => void,\n  getOperateState?: any,\n}\n\nconst Coupon: React.FC<Iprops> & { Item: typeof CouponItem } = (props: Iprops) => {\n  const { children, className, visible = true, ...other } = props;\n  const classNameStr = cx(\n    styles.container,\n    className,\n  );\n  const { onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver, getOperateState } = other;\n\n  const divProps = {\n    onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver,\n  };\n\t// 这里做个提示：使用当前props的theme 配合 React.children.map, 以及React.cloneElement 形成不一样的布局，比如商品两列布局，或者是一行一个，\n  return (\n    <>\n    {\n      !!visible && (\n        <div {...divProps} className={classNameStr}>\n          {children}\n        </div>\n      ) || null\n    }\n    </>\n  );\n};\n\n\ninterface ItemIprops {\n\tid?: number\n\tname?: string,\n\tclassName: string,\n\tonClick: () => void,\n\tonDrag: () => void,\n\tonDragEnd: () => void,\n\tonDragEnter: () => void,\n\tonDragStart: () => void,\n\tonMouseOver: () => void,\n\tdraggable?: false\n\tgetOperateState: any,\n}\n\nconst CouponItem: React.FC<ItemIprops> = (props: ItemIprops) => {\n  const { className, ...other} = props;\n  const { onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver, getOperateState, ...rest} = other;\n  const { id, name } = rest;\n  const divProps = {\n    onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver,\n  };\n  const isNotNull = useMemo(() => id, [id]);\n  return (\n    <div className={cx(styles.item)}>\n      <div {...divProps} className={className}>\n        <CouponsItem id={id} name={name} isNull={!isNotNull} />\n      </div>\n    </div>\n  );\n};\n\nCoupon.Item = CouponItem;\n```\n\n## 迷茫与改进\n\n* 一开始是跟同事一样的做法，就是先写一个 `pageConfig` 的一个模板，然后从后端请求接口后把当中的值一一塞进去。\n* 在右边装修内容的时候写成了一个个单独的组件，只要一改变就会触发`pageConfig`, 修改`当前选择的组件的props`, 甚至不需要按确认按钮，\n这样变得非常难处理，无法做数据验证等等。\n* 对于重复数据可继续选择问题， 即当我选择了一个id为1的优惠券时，我再新建一个子节点，我还能再继续选择这张优惠券，数据冗余。\n\n### 改进\n\n* 对于第一个问题，解决方案是根据后端返回的数据去构建一个`pageConfig`, 而不是根据模板去一一塞过去。 hooks 如下\n\n```js\nfunction useGetLayout() {\n\tconst { id } = usePageStatus();\n  const [detail, setDetail] = useState<DetailType | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n\n\t/** 获取布局 */\n\tuseEffect(() => {\n    let isValid = true;\n\t\tif (!id) {\n\t\t\treturn;\n\t\t}\n    async function fetchData() {\n      setLoading(true);\n      const { code, data } = await Api({id: id});\n      if (!isValid) {\n        return;\n      }\n      setLoading(false);\n      if (code === 1000) {\n        const isEmptyObject = Object.keys(data.adornContent).length === 0;\n        const tempData = {\n          ...data,\n          adornContent: isEmptyObject ? DEFAULT_DATA : data.adornContent\n        };\n        setDetail(tempData as unknown as DetailType);\n      }\n    }\n    fetchData();\n    return () => {\n      isValid = false;\n    };\n  }, [id]);\n\n\t/** 根据后端返回的布局内容去构建pageConfig， 一部分代码 */\n\tuseEffect(() => {\n\t\tif (!detail) {\n\t\t\treturn;\n\t\t}\n\t\tasync function setData() {\n\t\t\tconst { adornContent } = detail!;\n\t\t\tlet startKey = 0;\n\t\t\tconst firstChildKeys: string[] = [];\n\t\t\tlet pageConfig = {};\n\t\t\t/** 未排序数组 */\n\t\t\tconst dataSourceList: { key: keyof typeof adornContent, sort: number }[] = [];\n\t\t\tObject.keys(adornContent).map((_item: keyof typeof adornContent) => {\n\t\t\t\tdataSourceList.push({\n\t\t\t\t\tkey: _item,\n\t\t\t\t\tsort: adornContent[_item].sort\n\t\t\t\t});\n\t\t\t});\n\t\t\tconst sortedList = dataSourceList.sort((a, b) => a.sort - b.sort);\n\t\t\tfor (const _row of sortedList) {\n\t\t\t\tstartKey = startKey + 1;\n\t\t\t\tfirstChildKeys.push(startKey.toString());\n\t\t\t\tconst target = adornContent[_row.key];\n\t\t\t\tconst currentProps = target.props;\n\t\t\t\tconst childrenData = currentProps.childrenData || [];\n\t\t\t\tconst props = _row.key === 'top' ? {\n\t\t\t\t\timageUrl: currentProps.imageUrl\n\t\t\t\t\t} : {\n\t\t\t\t\t\tvisible: currentProps.visible || true,\n\t\t\t\t\t\ttheme: currentProps.theme || 0,\n\t\t\t\t\t\ttitle: currentProps.title,\n\t\t\t\t\t};\n\t\t\t\tconst childPropsData = _row.key === 'top' ? {} : {\n\t\t\t\t\tchildComponentName: `${CHILD_COMPONENT_NAME[_row.key]}`,\n\t\t\t\t\taddBtnText: '添加子节点',\n\t\t\t\t\tchildProps: {\n\t\t\t\t\t\totherProps: {\n\t\t\t\t\t\t\ttype: `${_row.key}Item`\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tlet tempConfig = {\n\t\t\t\t\tcomponentName: COMPONENT_NAME[_row.key],\n\t\t\t\t\ttitle: title[_row.key] || currentProps.title,\n\t\t\t\t\tprops: props,\n\t\t\t\t\totherProps: {\n\t\t\t\t\t\ttype: _row.key\n\t\t\t\t\t},\n\t\t\t\t\tcanDelete: false,\n\t\t\t\t\t...childPropsData,\n\t\t\t\t\tchildNodes: [],\n\t\t\t\t};\n\t\t\t\tconst childNodesKeys: string[] = [];\n\t\t\t\t/**\n\t\t\t\t * @tofix \n\t\t\t\t * 这里不应该这么写，但是后端的接口分了一块一块，那也没办法 \n\t\t\t\t * 这里应该先根据后端返回的结果先在前端处理一遍，变成 {key: [1, 2, 3]， key2: [2,3,4]} 这样的数据结构，然后请求后端接口，让后端一次返回所有数据\n\t\t\t\t * 而不是一块一块的去请求借口\n\t\t\t\t */\n\t\t\t\tif ( childrenData.length > 0) {\n\t\t\t\t\t/** 这里用key value 的形式对应formated data ，格式化请求前的数据*/\n\t\t\t\t\tconst formatedData = formatData[_row.key]?.(childrenData);\n\t\t\t\t\t/** 这里用key value 的形式对应api */\n\t\t\t\t\tconst requestData = await service[_row.key]?.(formatedData, { ctlType: 'none' });\n\t\t\t\t\t/** 这里用key value 的形式对应formated data ，格式化请求后的数据*/\n\t\t\t\t\tconst afterRequestFormatedData = afterRequestFormat[_row.key]?.(requestData);\n\t\t\t\t\tafterRequestFormatedData?.forEach((_item, _index) => {\n\t\t\t\t\t\tconst keyNum = `${startKey}-${_index + 1}`;\n\t\t\t\t\t\tchildNodesKeys.push(keyNum);\n\t\t\t\t\t\tconst sonConfig = {\n\t\t\t\t\t\t\tcomponentName: `${CHILD_COMPONENT_NAME[_row.key]}`,\n\t\t\t\t\t\t\ttitle: _item?.productName || _item.name,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t..._item,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\totherProps: {\n\t\t\t\t\t\t\t\ttype:  `${_row.key}Item`\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tchildNodes: []\n\t\t\t\t\t\t};\n\t\t\t\t\t\tpageConfig[keyNum] = sonConfig;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\ttempConfig = {\n\t\t\t\t\t...tempConfig,\n\t\t\t\t\tchildNodes: childNodesKeys\n\t\t\t\t};\n\t\t\t\tpageConfig[startKey] = tempConfig;\n\t\t\t}\n\t\t\tpageConfig = {\n\t\t\t\t0: {\n\t\t\t\t\t\"componentName\": \"MallLayout\",\n\t\t\t\t\ttitle: '组件树',\n\t\t\t\t\t\"props\": {\n\t\t\t\t\t\t\"style\": {\n\t\t\t\t\t\t\t\"width\": \"100%\",\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"childNodes\": firstChildKeys\n\t\t\t\t},\n\t\t\t\t...pageConfig,\n\t\t\t};\n\n\t\t\tconsole.log(\"pageConfig\", pageConfig);\n\t\t\tupdatePageConfig(pageConfig);\n\n\t\t}\n\t\tsetData();\n\t}, [detail]);\n}\n```\n\n* 针对第二个问题，改用formily，把编辑内容变成`form`, 或者`formily`  \n* 针对第三个问题，再写一个`hook`，针对`pageConfig`发生改变时，返回已有的`key:value`值,根据选择组件获取对应的`key`.即`sameKey[selectInfo.key]`,在table设置rowSelection 设置disabled既可, 数据接口如下：\n\n```jsx\n{\n\tcoupon: [1, 2],\n\thot: [251, 235],\n\tdiscount: [251, 235]\n}\n```\n\n## APP 端显示\n\napp 那边使用的是 `react-native`, \n那么写一个获取`layout` 布局以及 获取数据的`hook`, 这样做既可以把逻辑抽离，又优雅，到时候`迁移到小程序`上就方便多了\n\n因为我们的数据格式是： \n```jsx\n{\n\tcoupon: {\n\t\tsort: 1,\n\t\ttitle: '优惠券',\n\t\tchildrenData: [\n\t\t\t{ type: 1, id: 1 },\n\t\t\t{ type: 2, id: 2 }\n\t\t]\n\t},\n\thot: {\n\t\tsort: 2,\n\t\ttitle: '推荐',\n\t\tchildrenData: [231, 255]\n\t},\n\tdiscount: {\n\t\tsort: 3,\n\t\ttitle: '折扣',\n\t\tchildrenData: [231, 255]\n\t},\n}\n```\n\n先通过前端筛选数据，将空值筛选掉，然后提交给后端, 后端一样`key,value` 这样返回数据，\n\n```jsx\n// 前端提交给后端的数据格式\n{\n\tcoupon:[\n\t\t{ type: 1, id: 1 },\n\t\t{ type: 2, id: 2 },\n\t],\n\thot: [231, 255],\n\tdiscount: [231, 255]\n}\n\n// 后端返回给前端的数据格式, 如下\n{\n\tcoupon:[\n\t\t{ type: 1, id: 1, name: '优惠券1' },\n\t\t{ type: 2, id: 2,  name: '优惠券2' },\n\t],\n\thot: [\n\t\t{ title: '商品1', id: 231 },\n\t]\n}\n```\n\n**迷惑行为：**不知道为什么其他同事都是一块内容一个接口，让我感觉非常迷惑。 这样导致的结果就是，`一个页面n 多个接口`，`逻辑难以复用`, 且`太多if/else`。\n\n因为个人不太喜欢写`if/else`, 本人一般会用 `Map` 去代替`if/else`。\n\n最后, 只要遍历`activityData` 并写相对应的容器组件即可，比如 `Coupon`, `CommodityList`, \n\n```jsx\n// activityData\n[\n\t{\n\t\tsort: 1,\n\t\tname: 'coupon',\n\t\tdataSource: [\n\t\t\t{ type: 1, id: 1, name: '优惠券1' },\n\t\t\t{ type: 2, id: 2,  name: '优惠券2' },\n\t\t]\n\t},\n\t{\n\t\tsort: 2,\n\t\tname: 'hot',\n\t\tdataSource: [\n\t\t\t{ title: '商品1', id: 231 },\n\t\t]\n\t}\n]\n```\n\n```jsx\n<ScrollView style={styles.scrollView} scrollIndicatorInsets={{ right: 1 }}>\n\t{\n\t\tactivityData.map((_item: any, _index: number) => {\n\t\t\tconst componentName = ACTIVITY_TYPE.includes(_item.name) 'commodityList' : _item.name\n\n\t\t\tconst Component = ComponentMap[componentName];\n\t\t\tif (!Component) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t\t// eslint-disable-next-line react/no-array-index-key\n\t\t\treturn <Component key={`${_item.name}-${_index}`} activityType={_item.name}  {..._item} />\n\t\t})\n\t}\n</ScrollView>\n```","slug":"对近期工作的一些思考","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgg003zmroj9hu7ff8g","content":"<h2 id=\"业务工作\"><a href=\"#业务工作\" class=\"headerlink\" title=\"业务工作\"></a>业务工作</h2><p>之前要做一个类似于<code>装修模块的东西</code>，比如<code>app 首页，活动页等等</code>，如下图所示</p>\n<p><img src=\"/2021/10/07/%E5%AF%B9%E8%BF%91%E6%9C%9F%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/1.jpg\" alt=\"图例\"></p>\n<p>左边是一个<code>组件树</code>， 中间是<code>整个内容模块的展示</code>， 右边是<code>对所选中的内容进行编辑</code></p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><p>因为之前同事是使用<a href=\"https://github.com/brick-design/brick-design\" target=\"_blank\" rel=\"noopener\">brick-design</a> 做二次开发的，所以也就继续沿用了。</p>\n<p>用<code>lerna</code> 去管理这些包，比如<code>brick-design</code>， 还有一些<code>组件</code>。最后<code>build</code> 的时候会放到<code>私有源</code>上</p>\n<h2 id=\"开发准备工作\"><a href=\"#开发准备工作\" class=\"headerlink\" title=\"开发准备工作\"></a>开发准备工作</h2><p>因为<code>brick-design</code> 作为工具库，所以我们要通过<code>yarn add</code> 的方式去安装，所以在开发时候需要使用到<code>npm link</code> 到<code>brick-design</code> 上。<br>具体查看<a href=\"https://www.jianshu.com/p/82076fc481a6\" target=\"_blank\" rel=\"noopener\">npm link</a></p>\n<h2 id=\"brick-design-原理\"><a href=\"#brick-design-原理\" class=\"headerlink\" title=\"brick-design 原理\"></a>brick-design 原理</h2><p><strong>brick-design原理:</strong> 它是通过去维护整个<code>pageConfig</code>去实现组件自定义，<code>pageConfig</code>就是一个<code>用数据结构表达的一颗树</code>，每个节点都有一个<code>props</code>。</p>\n<p>数据结构如下：</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> pageConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        componentName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Layout'</span><span class=\"token punctuation\">,</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'组件树'</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                width<span class=\"token punctuation\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        childNodes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        componentName<span class=\"token punctuation\">:</span> <span class=\"token string\">'CouponContainer'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 需要到 &lt;BrickProvider config={} /> config 需要注册该组件, 不然会找不到该组件</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'优惠券容器'</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        childNodes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        componentName<span class=\"token punctuation\">:</span> <span class=\"token string\">'CouponItem'</span><span class=\"token punctuation\">,</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'优惠券1'</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'优惠券名'</span><span class=\"token punctuation\">,</span>\n            id<span class=\"token punctuation\">:</span> <span class=\"token string\">'优惠券id'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>在用这个<code>brick-design</code> 的时候感觉原理上跟<code>formily</code>类似，<code>pageConfig</code> 相当于<code>formily</code> 的<code>schema</code>, 他们两同样需要对自定义的组件作注册事件<br><a href=\"https://github.com/brick-design/brick-design/blob/master/examples/react-example/src/configs/index.ts\" target=\"_blank\" rel=\"noopener\">组件注册</a></p>\n<h4 id=\"实现CouponContainer-和-CouponItem\"><a href=\"#实现CouponContainer-和-CouponItem\" class=\"headerlink\" title=\"实现CouponContainer 和 CouponItem\"></a>实现CouponContainer 和 CouponItem</h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iprops</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 控制显示与隐藏 */</span>\n  visible<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">/** 下面这些是brick-design 的属性，就是给这个容器在选中状态的样式等其余属性 */</span>\n  className<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n  onClick<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  onDrag<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  onDragEnd<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  onDragEnter<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  onDragStart<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  onMouseOver<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  getOperateState<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Coupon<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Iprops</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> Item<span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span> CouponItem <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> Iprops<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> visible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> classNameStr <span class=\"token operator\">=</span> <span class=\"token function\">cx</span><span class=\"token punctuation\">(</span>\n    styles<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">,</span>\n    className<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> onDrag<span class=\"token punctuation\">,</span> onDragEnd<span class=\"token punctuation\">,</span> onDragEnter<span class=\"token punctuation\">,</span> onDragStart<span class=\"token punctuation\">,</span> onMouseOver<span class=\"token punctuation\">,</span> getOperateState <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> other<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> divProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    onClick<span class=\"token punctuation\">,</span> onDrag<span class=\"token punctuation\">,</span> onDragEnd<span class=\"token punctuation\">,</span> onDragEnter<span class=\"token punctuation\">,</span> onDragStart<span class=\"token punctuation\">,</span> onMouseOver<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这里做个提示：使用当前props的theme 配合 React.children.map, 以及React.cloneElement 形成不一样的布局，比如商品两列布局，或者是一行一个，</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">!</span><span class=\"token operator\">!</span>visible <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>divProps<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classNameStr<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ItemIprops</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> number\n    name<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n    className<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n    onClick<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    onDrag<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    onDragEnd<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    onDragEnter<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    onDragStart<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    onMouseOver<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    draggable<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n    getOperateState<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> CouponItem<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemIprops</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> ItemIprops<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> className<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> onDrag<span class=\"token punctuation\">,</span> onDragEnd<span class=\"token punctuation\">,</span> onDragEnter<span class=\"token punctuation\">,</span> onDragStart<span class=\"token punctuation\">,</span> onMouseOver<span class=\"token punctuation\">,</span> getOperateState<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> other<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> rest<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> divProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    onClick<span class=\"token punctuation\">,</span> onDrag<span class=\"token punctuation\">,</span> onDragEnd<span class=\"token punctuation\">,</span> onDragEnter<span class=\"token punctuation\">,</span> onDragStart<span class=\"token punctuation\">,</span> onMouseOver<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isNotNull <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>divProps<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CouponsItem</span> <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">isNull</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>isNotNull<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nCoupon<span class=\"token punctuation\">.</span>Item <span class=\"token operator\">=</span> CouponItem<span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"迷茫与改进\"><a href=\"#迷茫与改进\" class=\"headerlink\" title=\"迷茫与改进\"></a>迷茫与改进</h2><ul>\n<li>一开始是跟同事一样的做法，就是先写一个 <code>pageConfig</code> 的一个模板，然后从后端请求接口后把当中的值一一塞进去。</li>\n<li>在右边装修内容的时候写成了一个个单独的组件，只要一改变就会触发<code>pageConfig</code>, 修改<code>当前选择的组件的props</code>, 甚至不需要按确认按钮，<br>这样变得非常难处理，无法做数据验证等等。</li>\n<li>对于重复数据可继续选择问题， 即当我选择了一个id为1的优惠券时，我再新建一个子节点，我还能再继续选择这张优惠券，数据冗余。</li>\n</ul>\n<h3 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h3><ul>\n<li>对于第一个问题，解决方案是根据后端返回的数据去构建一个<code>pageConfig</code>, 而不是根据模板去一一塞过去。 hooks 如下</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useGetLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">usePageStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>detail<span class=\"token punctuation\">,</span> setDetail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>DetailType <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** 获取布局 */</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> code<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">Api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">===</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> isEmptyObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>adornContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> tempData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>data<span class=\"token punctuation\">,</span>\n          adornContent<span class=\"token punctuation\">:</span> isEmptyObject <span class=\"token operator\">?</span> DEFAULT_DATA <span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>adornContent\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setDetail</span><span class=\"token punctuation\">(</span>tempData <span class=\"token keyword\">as</span> unknown <span class=\"token keyword\">as</span> DetailType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      isValid <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/** 根据后端返回的布局内容去构建pageConfig， 一部分代码 */</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>detail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> adornContent <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> detail<span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> startKey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> firstChildKeys<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> pageConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">/** 未排序数组 */</span>\n            <span class=\"token keyword\">const</span> dataSourceList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> keyof <span class=\"token keyword\">typeof</span> adornContent<span class=\"token punctuation\">,</span> sort<span class=\"token punctuation\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>adornContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_item<span class=\"token punctuation\">:</span> keyof <span class=\"token keyword\">typeof</span> adornContent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                dataSourceList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                    key<span class=\"token punctuation\">:</span> _item<span class=\"token punctuation\">,</span>\n                    sort<span class=\"token punctuation\">:</span> adornContent<span class=\"token punctuation\">[</span>_item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sort\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> sortedList <span class=\"token operator\">=</span> dataSourceList<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span>sort <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _row <span class=\"token keyword\">of</span> sortedList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                startKey <span class=\"token operator\">=</span> startKey <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                firstChildKeys<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>startKey<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> adornContent<span class=\"token punctuation\">[</span>_row<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> currentProps <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> childrenData <span class=\"token operator\">=</span> currentProps<span class=\"token punctuation\">.</span>childrenData <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> _row<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'top'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n                    imageUrl<span class=\"token punctuation\">:</span> currentProps<span class=\"token punctuation\">.</span>imageUrl\n                    <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                        visible<span class=\"token punctuation\">:</span> currentProps<span class=\"token punctuation\">.</span>visible <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                        theme<span class=\"token punctuation\">:</span> currentProps<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                        title<span class=\"token punctuation\">:</span> currentProps<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> childPropsData <span class=\"token operator\">=</span> _row<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'top'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    childComponentName<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>CHILD_COMPONENT_NAME<span class=\"token punctuation\">[</span>_row<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span>\n                    addBtnText<span class=\"token punctuation\">:</span> <span class=\"token string\">'添加子节点'</span><span class=\"token punctuation\">,</span>\n                    childProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                        otherProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                            type<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_row<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Item`</span></span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> tempConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                    componentName<span class=\"token punctuation\">:</span> COMPONENT_NAME<span class=\"token punctuation\">[</span>_row<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    title<span class=\"token punctuation\">:</span> title<span class=\"token punctuation\">[</span>_row<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> currentProps<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n                    props<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">,</span>\n                    otherProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                        type<span class=\"token punctuation\">:</span> _row<span class=\"token punctuation\">.</span>key\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    canDelete<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token operator\">...</span>childPropsData<span class=\"token punctuation\">,</span>\n                    childNodes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> childNodesKeys<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">/**\n                 * @tofix \n                 * 这里不应该这么写，但是后端的接口分了一块一块，那也没办法 \n                 * 这里应该先根据后端返回的结果先在前端处理一遍，变成 {key: [1, 2, 3]， key2: [2,3,4]} 这样的数据结构，然后请求后端接口，让后端一次返回所有数据\n                 * 而不是一块一块的去请求借口\n                 */</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> childrenData<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">/** 这里用key value 的形式对应formated data ，格式化请求前的数据*/</span>\n                    <span class=\"token keyword\">const</span> formatedData <span class=\"token operator\">=</span> formatData<span class=\"token punctuation\">[</span>_row<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>childrenData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">/** 这里用key value 的形式对应api */</span>\n                    <span class=\"token keyword\">const</span> requestData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> service<span class=\"token punctuation\">[</span>_row<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>formatedData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> ctlType<span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">/** 这里用key value 的形式对应formated data ，格式化请求后的数据*/</span>\n                    <span class=\"token keyword\">const</span> afterRequestFormatedData <span class=\"token operator\">=</span> afterRequestFormat<span class=\"token punctuation\">[</span>_row<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>requestData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    afterRequestFormatedData<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_item<span class=\"token punctuation\">,</span> _index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">const</span> keyNum <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>startKey<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n                        childNodesKeys<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>keyNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">const</span> sonConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                            componentName<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>CHILD_COMPONENT_NAME<span class=\"token punctuation\">[</span>_row<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span>\n                            title<span class=\"token punctuation\">:</span> _item<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>productName <span class=\"token operator\">||</span> _item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n                            props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token operator\">...</span>_item<span class=\"token punctuation\">,</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            otherProps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                                type<span class=\"token punctuation\">:</span>  <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_row<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Item`</span></span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            childNodes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                        pageConfig<span class=\"token punctuation\">[</span>keyNum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sonConfig<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                tempConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token operator\">...</span>tempConfig<span class=\"token punctuation\">,</span>\n                    childNodes<span class=\"token punctuation\">:</span> childNodesKeys\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                pageConfig<span class=\"token punctuation\">[</span>startKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempConfig<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            pageConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"componentName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"MallLayout\"</span><span class=\"token punctuation\">,</span>\n                    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'组件树'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"props\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token string\">\"style\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token string\">\"width\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"100%\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"childNodes\"</span><span class=\"token punctuation\">:</span> firstChildKeys\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token operator\">...</span>pageConfig<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pageConfig\"</span><span class=\"token punctuation\">,</span> pageConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">updatePageConfig</span><span class=\"token punctuation\">(</span>pageConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>detail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>针对第二个问题，改用formily，把编辑内容变成<code>form</code>, 或者<code>formily</code>  </li>\n<li>针对第三个问题，再写一个<code>hook</code>，针对<code>pageConfig</code>发生改变时，返回已有的<code>key:value</code>值,根据选择组件获取对应的<code>key</code>.即<code>sameKey[selectInfo.key]</code>,在table设置rowSelection 设置disabled既可, 数据接口如下：</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n    coupon<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">251</span><span class=\"token punctuation\">,</span> <span class=\"token number\">235</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    discount<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">251</span><span class=\"token punctuation\">,</span> <span class=\"token number\">235</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"APP-端显示\"><a href=\"#APP-端显示\" class=\"headerlink\" title=\"APP 端显示\"></a>APP 端显示</h2><p>app 那边使用的是 <code>react-native</code>,<br>那么写一个获取<code>layout</code> 布局以及 获取数据的<code>hook</code>, 这样做既可以把逻辑抽离，又优雅，到时候<code>迁移到小程序</code>上就方便多了</p>\n<p>因为我们的数据格式是： </p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n    coupon<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        sort<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'优惠券'</span><span class=\"token punctuation\">,</span>\n        childrenData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        sort<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'推荐'</span><span class=\"token punctuation\">,</span>\n        childrenData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">231</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    discount<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        sort<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'折扣'</span><span class=\"token punctuation\">,</span>\n        childrenData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">231</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>先通过前端筛选数据，将空值筛选掉，然后提交给后端, 后端一样<code>key,value</code> 这样返回数据，</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// 前端提交给后端的数据格式</span>\n<span class=\"token punctuation\">{</span>\n    coupon<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">231</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    discount<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">231</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 后端返回给前端的数据格式, 如下</span>\n<span class=\"token punctuation\">{</span>\n    coupon<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'优惠券1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'优惠券2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'商品1'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">231</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>迷惑行为：</strong>不知道为什么其他同事都是一块内容一个接口，让我感觉非常迷惑。 这样导致的结果就是，<code>一个页面n 多个接口</code>，<code>逻辑难以复用</code>, 且<code>太多if/else</code>。</p>\n<p>因为个人不太喜欢写<code>if/else</code>, 本人一般会用 <code>Map</code> 去代替<code>if/else</code>。</p>\n<p>最后, 只要遍历<code>activityData</code> 并写相对应的容器组件即可，比如 <code>Coupon</code>, <code>CommodityList</code>, </p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// activityData</span>\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        sort<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'coupon'</span><span class=\"token punctuation\">,</span>\n        dataSource<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'优惠券1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'优惠券2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        sort<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'hot'</span><span class=\"token punctuation\">,</span>\n        dataSource<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'商品1'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">231</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ScrollView</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>scrollView<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">scrollIndicatorInsets</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> right<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">{</span>\n        activityData<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_item<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span> _index<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> componentName <span class=\"token operator\">=</span> ACTIVITY_TYPE<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>_item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token string\">'commodityList'</span> <span class=\"token punctuation\">:</span> _item<span class=\"token punctuation\">.</span>name\n\n            <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> ComponentMap<span class=\"token punctuation\">[</span>componentName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">// eslint-disable-next-line react/no-array-index-key</span>\n            <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Component</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">activityType</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>_item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span>  <span class=\"token attr-name\">{..._item}</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ScrollView</span><span class=\"token punctuation\">></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"业务工作\"><a href=\"#业务工作\" class=\"headerlink\" title=\"业务工作\"></a>业务工作</h2><p>之前要做一个类似于<code>装修模块的东西</code>，比如<code>app 首页，活动页等等</code>，如下图所示</p>\n<p><img src=\"/2021/10/07/%E5%AF%B9%E8%BF%91%E6%9C%9F%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/1.jpg\" alt=\"图例\"></p>\n<p>左边是一个<code>组件树</code>， 中间是<code>整个内容模块的展示</code>， 右边是<code>对所选中的内容进行编辑</code></p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><p>因为之前同事是使用<a href=\"https://github.com/brick-design/brick-design\" target=\"_blank\" rel=\"noopener\">brick-design</a> 做二次开发的，所以也就继续沿用了。</p>\n<p>用<code>lerna</code> 去管理这些包，比如<code>brick-design</code>， 还有一些<code>组件</code>。最后<code>build</code> 的时候会放到<code>私有源</code>上</p>\n<h2 id=\"开发准备工作\"><a href=\"#开发准备工作\" class=\"headerlink\" title=\"开发准备工作\"></a>开发准备工作</h2><p>因为<code>brick-design</code> 作为工具库，所以我们要通过<code>yarn add</code> 的方式去安装，所以在开发时候需要使用到<code>npm link</code> 到<code>brick-design</code> 上。<br>具体查看<a href=\"https://www.jianshu.com/p/82076fc481a6\" target=\"_blank\" rel=\"noopener\">npm link</a></p>\n<h2 id=\"brick-design-原理\"><a href=\"#brick-design-原理\" class=\"headerlink\" title=\"brick-design 原理\"></a>brick-design 原理</h2><p><strong>brick-design原理:</strong> 它是通过去维护整个<code>pageConfig</code>去实现组件自定义，<code>pageConfig</code>就是一个<code>用数据结构表达的一颗树</code>，每个节点都有一个<code>props</code>。</p>\n<p>数据结构如下：</p>\n<pre><code class=\"jsx\">const pageConfig = {\n    &quot;1&quot;: {\n        componentName: &#39;Layout&#39;,\n        title: &#39;组件树&#39;,\n        props: {\n            style: {\n                width: &#39;100%&#39;,\n            }\n        },\n        childNodes: [&#39;2&#39;]\n    },\n    &quot;2&quot;: {\n        componentName: &#39;CouponContainer&#39;, // 需要到 &lt;BrickProvider config={} /&gt; config 需要注册该组件, 不然会找不到该组件\n        title: &#39;优惠券容器&#39;,\n        props: {},\n        childNodes: [&#39;3&#39;]\n    },\n    &quot;3&quot;: {\n        componentName: &#39;CouponItem&#39;,\n        title: &#39;优惠券1&#39;,\n        props: {\n            name: &#39;优惠券名&#39;,\n            id: &#39;优惠券id&#39;\n        },\n    }\n}</code></pre>\n<p>在用这个<code>brick-design</code> 的时候感觉原理上跟<code>formily</code>类似，<code>pageConfig</code> 相当于<code>formily</code> 的<code>schema</code>, 他们两同样需要对自定义的组件作注册事件<br><a href=\"https://github.com/brick-design/brick-design/blob/master/examples/react-example/src/configs/index.ts\" target=\"_blank\" rel=\"noopener\">组件注册</a></p>\n<h4 id=\"实现CouponContainer-和-CouponItem\"><a href=\"#实现CouponContainer-和-CouponItem\" class=\"headerlink\" title=\"实现CouponContainer 和 CouponItem\"></a>实现CouponContainer 和 CouponItem</h4><pre><code class=\"jsx\">interface Iprops {\n  children: React.ReactNode,\n    /** 控制显示与隐藏 */\n  visible: 0 | 1,\n    /** 下面这些是brick-design 的属性，就是给这个容器在选中状态的样式等其余属性 */\n  className: string,\n  onClick?: () =&gt; void,\n  onDrag?: () =&gt; void,\n  onDragEnd?: () =&gt; void,\n  onDragEnter?: () =&gt; void,\n  onDragStart?: () =&gt; void,\n  onMouseOver?: () =&gt; void,\n  getOperateState?: any,\n}\n\nconst Coupon: React.FC&lt;Iprops&gt; &amp; { Item: typeof CouponItem } = (props: Iprops) =&gt; {\n  const { children, className, visible = true, ...other } = props;\n  const classNameStr = cx(\n    styles.container,\n    className,\n  );\n  const { onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver, getOperateState } = other;\n\n  const divProps = {\n    onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver,\n  };\n    // 这里做个提示：使用当前props的theme 配合 React.children.map, 以及React.cloneElement 形成不一样的布局，比如商品两列布局，或者是一行一个，\n  return (\n    &lt;&gt;\n    {\n      !!visible &amp;&amp; (\n        &lt;div {...divProps} className={classNameStr}&gt;\n          {children}\n        &lt;/div&gt;\n      ) || null\n    }\n    &lt;/&gt;\n  );\n};\n\n\ninterface ItemIprops {\n    id?: number\n    name?: string,\n    className: string,\n    onClick: () =&gt; void,\n    onDrag: () =&gt; void,\n    onDragEnd: () =&gt; void,\n    onDragEnter: () =&gt; void,\n    onDragStart: () =&gt; void,\n    onMouseOver: () =&gt; void,\n    draggable?: false\n    getOperateState: any,\n}\n\nconst CouponItem: React.FC&lt;ItemIprops&gt; = (props: ItemIprops) =&gt; {\n  const { className, ...other} = props;\n  const { onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver, getOperateState, ...rest} = other;\n  const { id, name } = rest;\n  const divProps = {\n    onClick, onDrag, onDragEnd, onDragEnter, onDragStart, onMouseOver,\n  };\n  const isNotNull = useMemo(() =&gt; id, [id]);\n  return (\n    &lt;div className={cx(styles.item)}&gt;\n      &lt;div {...divProps} className={className}&gt;\n        &lt;CouponsItem id={id} name={name} isNull={!isNotNull} /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nCoupon.Item = CouponItem;</code></pre>\n<h2 id=\"迷茫与改进\"><a href=\"#迷茫与改进\" class=\"headerlink\" title=\"迷茫与改进\"></a>迷茫与改进</h2><ul>\n<li>一开始是跟同事一样的做法，就是先写一个 <code>pageConfig</code> 的一个模板，然后从后端请求接口后把当中的值一一塞进去。</li>\n<li>在右边装修内容的时候写成了一个个单独的组件，只要一改变就会触发<code>pageConfig</code>, 修改<code>当前选择的组件的props</code>, 甚至不需要按确认按钮，<br>这样变得非常难处理，无法做数据验证等等。</li>\n<li>对于重复数据可继续选择问题， 即当我选择了一个id为1的优惠券时，我再新建一个子节点，我还能再继续选择这张优惠券，数据冗余。</li>\n</ul>\n<h3 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h3><ul>\n<li>对于第一个问题，解决方案是根据后端返回的数据去构建一个<code>pageConfig</code>, 而不是根据模板去一一塞过去。 hooks 如下</li>\n</ul>\n<pre><code class=\"js\">function useGetLayout() {\n    const { id } = usePageStatus();\n  const [detail, setDetail] = useState&lt;DetailType | null&gt;(null);\n  const [loading, setLoading] = useState&lt;boolean&gt;(false);\n\n    /** 获取布局 */\n    useEffect(() =&gt; {\n    let isValid = true;\n        if (!id) {\n            return;\n        }\n    async function fetchData() {\n      setLoading(true);\n      const { code, data } = await Api({id: id});\n      if (!isValid) {\n        return;\n      }\n      setLoading(false);\n      if (code === 1000) {\n        const isEmptyObject = Object.keys(data.adornContent).length === 0;\n        const tempData = {\n          ...data,\n          adornContent: isEmptyObject ? DEFAULT_DATA : data.adornContent\n        };\n        setDetail(tempData as unknown as DetailType);\n      }\n    }\n    fetchData();\n    return () =&gt; {\n      isValid = false;\n    };\n  }, [id]);\n\n    /** 根据后端返回的布局内容去构建pageConfig， 一部分代码 */\n    useEffect(() =&gt; {\n        if (!detail) {\n            return;\n        }\n        async function setData() {\n            const { adornContent } = detail!;\n            let startKey = 0;\n            const firstChildKeys: string[] = [];\n            let pageConfig = {};\n            /** 未排序数组 */\n            const dataSourceList: { key: keyof typeof adornContent, sort: number }[] = [];\n            Object.keys(adornContent).map((_item: keyof typeof adornContent) =&gt; {\n                dataSourceList.push({\n                    key: _item,\n                    sort: adornContent[_item].sort\n                });\n            });\n            const sortedList = dataSourceList.sort((a, b) =&gt; a.sort - b.sort);\n            for (const _row of sortedList) {\n                startKey = startKey + 1;\n                firstChildKeys.push(startKey.toString());\n                const target = adornContent[_row.key];\n                const currentProps = target.props;\n                const childrenData = currentProps.childrenData || [];\n                const props = _row.key === &#39;top&#39; ? {\n                    imageUrl: currentProps.imageUrl\n                    } : {\n                        visible: currentProps.visible || true,\n                        theme: currentProps.theme || 0,\n                        title: currentProps.title,\n                    };\n                const childPropsData = _row.key === &#39;top&#39; ? {} : {\n                    childComponentName: `${CHILD_COMPONENT_NAME[_row.key]}`,\n                    addBtnText: &#39;添加子节点&#39;,\n                    childProps: {\n                        otherProps: {\n                            type: `${_row.key}Item`\n                        },\n                    },\n                };\n                let tempConfig = {\n                    componentName: COMPONENT_NAME[_row.key],\n                    title: title[_row.key] || currentProps.title,\n                    props: props,\n                    otherProps: {\n                        type: _row.key\n                    },\n                    canDelete: false,\n                    ...childPropsData,\n                    childNodes: [],\n                };\n                const childNodesKeys: string[] = [];\n                /**\n                 * @tofix \n                 * 这里不应该这么写，但是后端的接口分了一块一块，那也没办法 \n                 * 这里应该先根据后端返回的结果先在前端处理一遍，变成 {key: [1, 2, 3]， key2: [2,3,4]} 这样的数据结构，然后请求后端接口，让后端一次返回所有数据\n                 * 而不是一块一块的去请求借口\n                 */\n                if ( childrenData.length &gt; 0) {\n                    /** 这里用key value 的形式对应formated data ，格式化请求前的数据*/\n                    const formatedData = formatData[_row.key]?.(childrenData);\n                    /** 这里用key value 的形式对应api */\n                    const requestData = await service[_row.key]?.(formatedData, { ctlType: &#39;none&#39; });\n                    /** 这里用key value 的形式对应formated data ，格式化请求后的数据*/\n                    const afterRequestFormatedData = afterRequestFormat[_row.key]?.(requestData);\n                    afterRequestFormatedData?.forEach((_item, _index) =&gt; {\n                        const keyNum = `${startKey}-${_index + 1}`;\n                        childNodesKeys.push(keyNum);\n                        const sonConfig = {\n                            componentName: `${CHILD_COMPONENT_NAME[_row.key]}`,\n                            title: _item?.productName || _item.name,\n                            props: {\n                                ..._item,\n                            },\n                            otherProps: {\n                                type:  `${_row.key}Item`\n                            },\n                            childNodes: []\n                        };\n                        pageConfig[keyNum] = sonConfig;\n                    });\n                }\n\n                tempConfig = {\n                    ...tempConfig,\n                    childNodes: childNodesKeys\n                };\n                pageConfig[startKey] = tempConfig;\n            }\n            pageConfig = {\n                0: {\n                    &quot;componentName&quot;: &quot;MallLayout&quot;,\n                    title: &#39;组件树&#39;,\n                    &quot;props&quot;: {\n                        &quot;style&quot;: {\n                            &quot;width&quot;: &quot;100%&quot;,\n                        }\n                    },\n                    &quot;childNodes&quot;: firstChildKeys\n                },\n                ...pageConfig,\n            };\n\n            console.log(&quot;pageConfig&quot;, pageConfig);\n            updatePageConfig(pageConfig);\n\n        }\n        setData();\n    }, [detail]);\n}</code></pre>\n<ul>\n<li>针对第二个问题，改用formily，把编辑内容变成<code>form</code>, 或者<code>formily</code>  </li>\n<li>针对第三个问题，再写一个<code>hook</code>，针对<code>pageConfig</code>发生改变时，返回已有的<code>key:value</code>值,根据选择组件获取对应的<code>key</code>.即<code>sameKey[selectInfo.key]</code>,在table设置rowSelection 设置disabled既可, 数据接口如下：</li>\n</ul>\n<pre><code class=\"jsx\">{\n    coupon: [1, 2],\n    hot: [251, 235],\n    discount: [251, 235]\n}</code></pre>\n<h2 id=\"APP-端显示\"><a href=\"#APP-端显示\" class=\"headerlink\" title=\"APP 端显示\"></a>APP 端显示</h2><p>app 那边使用的是 <code>react-native</code>,<br>那么写一个获取<code>layout</code> 布局以及 获取数据的<code>hook</code>, 这样做既可以把逻辑抽离，又优雅，到时候<code>迁移到小程序</code>上就方便多了</p>\n<p>因为我们的数据格式是： </p>\n<pre><code class=\"jsx\">{\n    coupon: {\n        sort: 1,\n        title: &#39;优惠券&#39;,\n        childrenData: [\n            { type: 1, id: 1 },\n            { type: 2, id: 2 }\n        ]\n    },\n    hot: {\n        sort: 2,\n        title: &#39;推荐&#39;,\n        childrenData: [231, 255]\n    },\n    discount: {\n        sort: 3,\n        title: &#39;折扣&#39;,\n        childrenData: [231, 255]\n    },\n}</code></pre>\n<p>先通过前端筛选数据，将空值筛选掉，然后提交给后端, 后端一样<code>key,value</code> 这样返回数据，</p>\n<pre><code class=\"jsx\">// 前端提交给后端的数据格式\n{\n    coupon:[\n        { type: 1, id: 1 },\n        { type: 2, id: 2 },\n    ],\n    hot: [231, 255],\n    discount: [231, 255]\n}\n\n// 后端返回给前端的数据格式, 如下\n{\n    coupon:[\n        { type: 1, id: 1, name: &#39;优惠券1&#39; },\n        { type: 2, id: 2,  name: &#39;优惠券2&#39; },\n    ],\n    hot: [\n        { title: &#39;商品1&#39;, id: 231 },\n    ]\n}</code></pre>\n<p><strong>迷惑行为：</strong>不知道为什么其他同事都是一块内容一个接口，让我感觉非常迷惑。 这样导致的结果就是，<code>一个页面n 多个接口</code>，<code>逻辑难以复用</code>, 且<code>太多if/else</code>。</p>\n<p>因为个人不太喜欢写<code>if/else</code>, 本人一般会用 <code>Map</code> 去代替<code>if/else</code>。</p>\n<p>最后, 只要遍历<code>activityData</code> 并写相对应的容器组件即可，比如 <code>Coupon</code>, <code>CommodityList</code>, </p>\n<pre><code class=\"jsx\">// activityData\n[\n    {\n        sort: 1,\n        name: &#39;coupon&#39;,\n        dataSource: [\n            { type: 1, id: 1, name: &#39;优惠券1&#39; },\n            { type: 2, id: 2,  name: &#39;优惠券2&#39; },\n        ]\n    },\n    {\n        sort: 2,\n        name: &#39;hot&#39;,\n        dataSource: [\n            { title: &#39;商品1&#39;, id: 231 },\n        ]\n    }\n]</code></pre>\n<pre><code class=\"jsx\">&lt;ScrollView style={styles.scrollView} scrollIndicatorInsets={{ right: 1 }}&gt;\n    {\n        activityData.map((_item: any, _index: number) =&gt; {\n            const componentName = ACTIVITY_TYPE.includes(_item.name) &#39;commodityList&#39; : _item.name\n\n            const Component = ComponentMap[componentName];\n            if (!Component) {\n                return null\n            }\n            // eslint-disable-next-line react/no-array-index-key\n            return &lt;Component key={`${_item.name}-${_index}`} activityType={_item.name}  {..._item} /&gt;\n        })\n    }\n&lt;/ScrollView&gt;</code></pre>\n"},{"title":"导航栏吸顶","date":"2020-04-09T16:06:17.000Z","_content":"\n\n## 导航栏吸顶\n\n> 当页面滚动超过导航栏时，导航栏依附固定在页面顶端\n\n下面介绍两种方式吧， 一种是 `position: sticky`, 另一种是`getBoundingClientRect()`\n\n## position: sticky 实现\n\n```css\n.stickyPostion {\n    postion: sticky;\n    top: 0;\n}\n```\n\n使用条件：\n* 父元素不能`overflow:hidden`或者`overflow:auto`属性。\n* 必须指定`top`、`bottom`、`left`、`right`4个值之一，否则只会处于相对定位\n* 父元素的高度不能低于sticky元素的高度\n* sticky元素仅在其父元素内生效\n\n### sticky 坑\n\n* 兼容性不太好\n* 不能触发 `BFC`\n\n\n## getBoundingClientRect()\n\ngetBoundingClientRect用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。\n**getBoundingClientRect是DOM元素到浏览器可视范围的距离（不包含文档卷起的部分）**。\n\n* 获取当前 nav 到浏览器顶端的距离。\n* 直接监听scroll 事件，\n* **用div包裹住nav导航栏，我们只需要获取当前div到顶端的距离即可，等到时 top值为0的时候，设置子级的position:fixed, 还原只需取消掉子级的position即可**\n  * 如果没有用div 包裹 nav导航栏的话，等top 值为0，就无法还原了，position 一直为fix, getBoundingClientRect.top值一直为0;\n\n结构应该如下：\n```html\n<div ref={this.stickyRef} id=\"sticky\">\n    <div className={isFixed ? styles.fix : styles.static}> // 这个为nav\n        <div>吸顶效果</div>\n    </div>\n</div>\n```\n\n```js\ncomponentDidMount() {\n    const top = this.stickyRef.current.getBoundingClientRect().top;\n    this.setState({\n        initPostionTop: top\n    })\n    window.addEventListener('scroll', this.handleScroll);\n}\n```\n\n```js\nhandleScroll = (e) => {\n    const { isFixed, initPostionTop } = this.state\n    const scrollTop = e.srcElement.body.scrollTop || e.srcElement.documentElement.scrollTop;\n    // 这里做了个优化，防止频繁setState, 如果一开始为吸顶，以及滚动距离大于 nav 到顶部的距离的时候，\n    // 或者 （不吸顶同时当前滚动距离小于nav到顶部的距离时)我们操作\n    if(isFixed && scrollTop >= initPostionTop || !isFixed && scrollTop <= initPostionTop) {\n        return ;\n    }  else  {\n        this.setState({\n            isFixed: scrollTop > initPostionTop\n        })\n    }\n}\n\n```\n\n## 小程序 (我使用的是Taro)\n\n> 小程序不支持 `window.addEventListener('scroll', this.handleScroll);`，只有`onPageScroll`\n\n下面是官方说明\n**注意：请只在需要的时候才在 page 中定义此方法，不要定义空方法。以减少不必要的事件派发对渲染层-逻辑层通信的影响。注意：请避免在 onPageScroll 中过于频繁的执行 this.setState() 等引起逻辑层-渲染层通信的操作。尤其是每次传输大量数据，会影响通信耗时。**\n\ntaro获取节点有点坑\n\n```js\ncomponentDidMount() {\n    // 注意this.$scope\n    const query = Taro.createSelectorQuery().in(this.$scope);\n    query.select('#sticky').boundingClientRect((rect) => {\n        this.setState({\n            initPostionTop: rect.top\n        })\n    }).exec();\n}\n```\n\nonPageScroll 代码基本一样\n\n\n## 坑\n\n* 这种方式有个坑，当吸顶的一瞬间，会发生抖动，这是因为 `position`变成`fixed` 的时候脱离了文档流。\n解决方案是 在`postion:fixed;`的元素里添加`transform: translateZ(0);`,我想应该是开启gpu 渲染，所以变得顺滑了吧\n\n## 关于优化\n\n> h5 优化，可以用另一种方式，就是用 监听滚动的时候使用 节流， 可以用 lodash.throttle\n\n`window.addEventListener('scroll', _.throttle(self.handleScrollThree, 50));`\n\n## 效果\n\n![b8827be2b9af0f70b7b9e3e9838e30e6.gif](https://i.loli.net/2020/04/10/a4kQYARnKp3oIsy.gif)","source":"_posts/导航栏吸顶.md","raw":"---\ntitle: 导航栏吸顶\ndate: 2020-04-09 16:06:17\ntags: js\ncategory: js\n---\n\n\n## 导航栏吸顶\n\n> 当页面滚动超过导航栏时，导航栏依附固定在页面顶端\n\n下面介绍两种方式吧， 一种是 `position: sticky`, 另一种是`getBoundingClientRect()`\n\n## position: sticky 实现\n\n```css\n.stickyPostion {\n    postion: sticky;\n    top: 0;\n}\n```\n\n使用条件：\n* 父元素不能`overflow:hidden`或者`overflow:auto`属性。\n* 必须指定`top`、`bottom`、`left`、`right`4个值之一，否则只会处于相对定位\n* 父元素的高度不能低于sticky元素的高度\n* sticky元素仅在其父元素内生效\n\n### sticky 坑\n\n* 兼容性不太好\n* 不能触发 `BFC`\n\n\n## getBoundingClientRect()\n\ngetBoundingClientRect用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。\n**getBoundingClientRect是DOM元素到浏览器可视范围的距离（不包含文档卷起的部分）**。\n\n* 获取当前 nav 到浏览器顶端的距离。\n* 直接监听scroll 事件，\n* **用div包裹住nav导航栏，我们只需要获取当前div到顶端的距离即可，等到时 top值为0的时候，设置子级的position:fixed, 还原只需取消掉子级的position即可**\n  * 如果没有用div 包裹 nav导航栏的话，等top 值为0，就无法还原了，position 一直为fix, getBoundingClientRect.top值一直为0;\n\n结构应该如下：\n```html\n<div ref={this.stickyRef} id=\"sticky\">\n    <div className={isFixed ? styles.fix : styles.static}> // 这个为nav\n        <div>吸顶效果</div>\n    </div>\n</div>\n```\n\n```js\ncomponentDidMount() {\n    const top = this.stickyRef.current.getBoundingClientRect().top;\n    this.setState({\n        initPostionTop: top\n    })\n    window.addEventListener('scroll', this.handleScroll);\n}\n```\n\n```js\nhandleScroll = (e) => {\n    const { isFixed, initPostionTop } = this.state\n    const scrollTop = e.srcElement.body.scrollTop || e.srcElement.documentElement.scrollTop;\n    // 这里做了个优化，防止频繁setState, 如果一开始为吸顶，以及滚动距离大于 nav 到顶部的距离的时候，\n    // 或者 （不吸顶同时当前滚动距离小于nav到顶部的距离时)我们操作\n    if(isFixed && scrollTop >= initPostionTop || !isFixed && scrollTop <= initPostionTop) {\n        return ;\n    }  else  {\n        this.setState({\n            isFixed: scrollTop > initPostionTop\n        })\n    }\n}\n\n```\n\n## 小程序 (我使用的是Taro)\n\n> 小程序不支持 `window.addEventListener('scroll', this.handleScroll);`，只有`onPageScroll`\n\n下面是官方说明\n**注意：请只在需要的时候才在 page 中定义此方法，不要定义空方法。以减少不必要的事件派发对渲染层-逻辑层通信的影响。注意：请避免在 onPageScroll 中过于频繁的执行 this.setState() 等引起逻辑层-渲染层通信的操作。尤其是每次传输大量数据，会影响通信耗时。**\n\ntaro获取节点有点坑\n\n```js\ncomponentDidMount() {\n    // 注意this.$scope\n    const query = Taro.createSelectorQuery().in(this.$scope);\n    query.select('#sticky').boundingClientRect((rect) => {\n        this.setState({\n            initPostionTop: rect.top\n        })\n    }).exec();\n}\n```\n\nonPageScroll 代码基本一样\n\n\n## 坑\n\n* 这种方式有个坑，当吸顶的一瞬间，会发生抖动，这是因为 `position`变成`fixed` 的时候脱离了文档流。\n解决方案是 在`postion:fixed;`的元素里添加`transform: translateZ(0);`,我想应该是开启gpu 渲染，所以变得顺滑了吧\n\n## 关于优化\n\n> h5 优化，可以用另一种方式，就是用 监听滚动的时候使用 节流， 可以用 lodash.throttle\n\n`window.addEventListener('scroll', _.throttle(self.handleScrollThree, 50));`\n\n## 效果\n\n![b8827be2b9af0f70b7b9e3e9838e30e6.gif](https://i.loli.net/2020/04/10/a4kQYARnKp3oIsy.gif)","slug":"导航栏吸顶","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgh0043mrojd9s0265d","content":"<h2 id=\"导航栏吸顶\"><a href=\"#导航栏吸顶\" class=\"headerlink\" title=\"导航栏吸顶\"></a>导航栏吸顶</h2><blockquote>\n<p>当页面滚动超过导航栏时，导航栏依附固定在页面顶端</p>\n</blockquote>\n<p>下面介绍两种方式吧， 一种是 <code>position: sticky</code>, 另一种是<code>getBoundingClientRect()</code></p>\n<h2 id=\"position-sticky-实现\"><a href=\"#position-sticky-实现\" class=\"headerlink\" title=\"position: sticky 实现\"></a>position: sticky 实现</h2><pre class=\" language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.stickyPostion</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">postion</span><span class=\"token punctuation\">:</span> sticky<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>使用条件：</p>\n<ul>\n<li>父元素不能<code>overflow:hidden</code>或者<code>overflow:auto</code>属性。</li>\n<li>必须指定<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>4个值之一，否则只会处于相对定位</li>\n<li>父元素的高度不能低于sticky元素的高度</li>\n<li>sticky元素仅在其父元素内生效</li>\n</ul>\n<h3 id=\"sticky-坑\"><a href=\"#sticky-坑\" class=\"headerlink\" title=\"sticky 坑\"></a>sticky 坑</h3><ul>\n<li>兼容性不太好</li>\n<li>不能触发 <code>BFC</code></li>\n</ul>\n<h2 id=\"getBoundingClientRect\"><a href=\"#getBoundingClientRect\" class=\"headerlink\" title=\"getBoundingClientRect()\"></a>getBoundingClientRect()</h2><p>getBoundingClientRect用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。<br><strong>getBoundingClientRect是DOM元素到浏览器可视范围的距离（不包含文档卷起的部分）</strong>。</p>\n<ul>\n<li>获取当前 nav 到浏览器顶端的距离。</li>\n<li>直接监听scroll 事件，</li>\n<li><strong>用div包裹住nav导航栏，我们只需要获取当前div到顶端的距离即可，等到时 top值为0的时候，设置子级的position:fixed, 还原只需取消掉子级的position即可</strong><ul>\n<li>如果没有用div 包裹 nav导航栏的话，等top 值为0，就无法还原了，position 一直为fix, getBoundingClientRect.top值一直为0;</li>\n</ul>\n</li>\n</ul>\n<p>结构应该如下：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{this.stickyRef}</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sticky<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{isFixed</span> <span class=\"token attr-name\">?</span> <span class=\"token attr-name\">styles.fix</span> <span class=\"token attr-name\">:</span> <span class=\"token attr-name\">styles.static}</span><span class=\"token punctuation\">></span></span> // 这个为nav\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>吸顶效果<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> top <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stickyRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        initPostionTop<span class=\"token punctuation\">:</span> top\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleScroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-js\"><code class=\"language-js\">handleScroll <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isFixed<span class=\"token punctuation\">,</span> initPostionTop <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">const</span> scrollTop <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这里做了个优化，防止频繁setState, 如果一开始为吸顶，以及滚动距离大于 nav 到顶部的距离的时候，</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 或者 （不吸顶同时当前滚动距离小于nav到顶部的距离时)我们操作</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isFixed <span class=\"token operator\">&amp;&amp;</span> scrollTop <span class=\"token operator\">>=</span> initPostionTop <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>isFixed <span class=\"token operator\">&amp;&amp;</span> scrollTop <span class=\"token operator\">&lt;=</span> initPostionTop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  <span class=\"token keyword\">else</span>  <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            isFixed<span class=\"token punctuation\">:</span> scrollTop <span class=\"token operator\">></span> initPostionTop\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"小程序-我使用的是Taro\"><a href=\"#小程序-我使用的是Taro\" class=\"headerlink\" title=\"小程序 (我使用的是Taro)\"></a>小程序 (我使用的是Taro)</h2><blockquote>\n<p>小程序不支持 <code>window.addEventListener(&#39;scroll&#39;, this.handleScroll);</code>，只有<code>onPageScroll</code></p>\n</blockquote>\n<p>下面是官方说明<br><strong>注意：请只在需要的时候才在 page 中定义此方法，不要定义空方法。以减少不必要的事件派发对渲染层-逻辑层通信的影响。注意：请避免在 onPageScroll 中过于频繁的执行 this.setState() 等引起逻辑层-渲染层通信的操作。尤其是每次传输大量数据，会影响通信耗时。</strong></p>\n<p>taro获取节点有点坑</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 注意this.$scope</span>\n    <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> Taro<span class=\"token punctuation\">.</span><span class=\"token function\">createSelectorQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    query<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#sticky'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            initPostionTop<span class=\"token punctuation\">:</span> rect<span class=\"token punctuation\">.</span>top\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>onPageScroll 代码基本一样</p>\n<h2 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h2><ul>\n<li>这种方式有个坑，当吸顶的一瞬间，会发生抖动，这是因为 <code>position</code>变成<code>fixed</code> 的时候脱离了文档流。<br>解决方案是 在<code>postion:fixed;</code>的元素里添加<code>transform: translateZ(0);</code>,我想应该是开启gpu 渲染，所以变得顺滑了吧</li>\n</ul>\n<h2 id=\"关于优化\"><a href=\"#关于优化\" class=\"headerlink\" title=\"关于优化\"></a>关于优化</h2><blockquote>\n<p>h5 优化，可以用另一种方式，就是用 监听滚动的时候使用 节流， 可以用 lodash.throttle</p>\n</blockquote>\n<p><code>window.addEventListener(&#39;scroll&#39;, _.throttle(self.handleScrollThree, 50));</code></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://i.loli.net/2020/04/10/a4kQYARnKp3oIsy.gif\" alt=\"b8827be2b9af0f70b7b9e3e9838e30e6.gif\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"导航栏吸顶\"><a href=\"#导航栏吸顶\" class=\"headerlink\" title=\"导航栏吸顶\"></a>导航栏吸顶</h2><blockquote>\n<p>当页面滚动超过导航栏时，导航栏依附固定在页面顶端</p>\n</blockquote>\n<p>下面介绍两种方式吧， 一种是 <code>position: sticky</code>, 另一种是<code>getBoundingClientRect()</code></p>\n<h2 id=\"position-sticky-实现\"><a href=\"#position-sticky-实现\" class=\"headerlink\" title=\"position: sticky 实现\"></a>position: sticky 实现</h2><pre><code class=\"css\">.stickyPostion {\n    postion: sticky;\n    top: 0;\n}</code></pre>\n<p>使用条件：</p>\n<ul>\n<li>父元素不能<code>overflow:hidden</code>或者<code>overflow:auto</code>属性。</li>\n<li>必须指定<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>4个值之一，否则只会处于相对定位</li>\n<li>父元素的高度不能低于sticky元素的高度</li>\n<li>sticky元素仅在其父元素内生效</li>\n</ul>\n<h3 id=\"sticky-坑\"><a href=\"#sticky-坑\" class=\"headerlink\" title=\"sticky 坑\"></a>sticky 坑</h3><ul>\n<li>兼容性不太好</li>\n<li>不能触发 <code>BFC</code></li>\n</ul>\n<h2 id=\"getBoundingClientRect\"><a href=\"#getBoundingClientRect\" class=\"headerlink\" title=\"getBoundingClientRect()\"></a>getBoundingClientRect()</h2><p>getBoundingClientRect用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。<br><strong>getBoundingClientRect是DOM元素到浏览器可视范围的距离（不包含文档卷起的部分）</strong>。</p>\n<ul>\n<li>获取当前 nav 到浏览器顶端的距离。</li>\n<li>直接监听scroll 事件，</li>\n<li><strong>用div包裹住nav导航栏，我们只需要获取当前div到顶端的距离即可，等到时 top值为0的时候，设置子级的position:fixed, 还原只需取消掉子级的position即可</strong><ul>\n<li>如果没有用div 包裹 nav导航栏的话，等top 值为0，就无法还原了，position 一直为fix, getBoundingClientRect.top值一直为0;</li>\n</ul>\n</li>\n</ul>\n<p>结构应该如下：</p>\n<pre><code class=\"html\">&lt;div ref={this.stickyRef} id=&quot;sticky&quot;&gt;\n    &lt;div className={isFixed ? styles.fix : styles.static}&gt; // 这个为nav\n        &lt;div&gt;吸顶效果&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class=\"js\">componentDidMount() {\n    const top = this.stickyRef.current.getBoundingClientRect().top;\n    this.setState({\n        initPostionTop: top\n    })\n    window.addEventListener(&#39;scroll&#39;, this.handleScroll);\n}</code></pre>\n<pre><code class=\"js\">handleScroll = (e) =&gt; {\n    const { isFixed, initPostionTop } = this.state\n    const scrollTop = e.srcElement.body.scrollTop || e.srcElement.documentElement.scrollTop;\n    // 这里做了个优化，防止频繁setState, 如果一开始为吸顶，以及滚动距离大于 nav 到顶部的距离的时候，\n    // 或者 （不吸顶同时当前滚动距离小于nav到顶部的距离时)我们操作\n    if(isFixed &amp;&amp; scrollTop &gt;= initPostionTop || !isFixed &amp;&amp; scrollTop &lt;= initPostionTop) {\n        return ;\n    }  else  {\n        this.setState({\n            isFixed: scrollTop &gt; initPostionTop\n        })\n    }\n}\n</code></pre>\n<h2 id=\"小程序-我使用的是Taro\"><a href=\"#小程序-我使用的是Taro\" class=\"headerlink\" title=\"小程序 (我使用的是Taro)\"></a>小程序 (我使用的是Taro)</h2><blockquote>\n<p>小程序不支持 <code>window.addEventListener(&#39;scroll&#39;, this.handleScroll);</code>，只有<code>onPageScroll</code></p>\n</blockquote>\n<p>下面是官方说明<br><strong>注意：请只在需要的时候才在 page 中定义此方法，不要定义空方法。以减少不必要的事件派发对渲染层-逻辑层通信的影响。注意：请避免在 onPageScroll 中过于频繁的执行 this.setState() 等引起逻辑层-渲染层通信的操作。尤其是每次传输大量数据，会影响通信耗时。</strong></p>\n<p>taro获取节点有点坑</p>\n<pre><code class=\"js\">componentDidMount() {\n    // 注意this.$scope\n    const query = Taro.createSelectorQuery().in(this.$scope);\n    query.select(&#39;#sticky&#39;).boundingClientRect((rect) =&gt; {\n        this.setState({\n            initPostionTop: rect.top\n        })\n    }).exec();\n}</code></pre>\n<p>onPageScroll 代码基本一样</p>\n<h2 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h2><ul>\n<li>这种方式有个坑，当吸顶的一瞬间，会发生抖动，这是因为 <code>position</code>变成<code>fixed</code> 的时候脱离了文档流。<br>解决方案是 在<code>postion:fixed;</code>的元素里添加<code>transform: translateZ(0);</code>,我想应该是开启gpu 渲染，所以变得顺滑了吧</li>\n</ul>\n<h2 id=\"关于优化\"><a href=\"#关于优化\" class=\"headerlink\" title=\"关于优化\"></a>关于优化</h2><blockquote>\n<p>h5 优化，可以用另一种方式，就是用 监听滚动的时候使用 节流， 可以用 lodash.throttle</p>\n</blockquote>\n<p><code>window.addEventListener(&#39;scroll&#39;, _.throttle(self.handleScrollThree, 50));</code></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://i.loli.net/2020/04/10/a4kQYARnKp3oIsy.gif\" alt=\"b8827be2b9af0f70b7b9e3e9838e30e6.gif\"></p>\n"},{"title":"手写源码系列","date":"2020-09-08T21:03:38.000Z","_content":"\n## 防抖\n\n```jsx\nfunction debound(fn, wait) {\n    let time;\n    return function(...args) {\n        if(time) {\n            clearTimeOut(time)\n        } \n\n        time = setTimeOut(() => {\n            fn.apply(this, args)\n        }, wait)\n    }\n}\n```\n\n## 节流\n\n节流的意思 是在单位时间内只执行一次\n```jsx\nfunction throttle(fn, wait) {\n    let time = null;\n\n    return function(...args) {\n        if(!time) {\n            // 当前没有事件\n            time = setTimeOut(() => {\n                time = null;\n                fn.apply(this, args)\n            }, wait)\n        }\n    }\n}\n\n```\n\n## promise\n\n[参考链接](https://github.com/lgwebdream/FE-Interview/issues/29)\n\n","source":"_posts/手写源码系列.md","raw":"---\ntitle: 手写源码系列\ndate: 2020-09-08 21:03:38\ntags: 源码\ncategories: 源码\n---\n\n## 防抖\n\n```jsx\nfunction debound(fn, wait) {\n    let time;\n    return function(...args) {\n        if(time) {\n            clearTimeOut(time)\n        } \n\n        time = setTimeOut(() => {\n            fn.apply(this, args)\n        }, wait)\n    }\n}\n```\n\n## 节流\n\n节流的意思 是在单位时间内只执行一次\n```jsx\nfunction throttle(fn, wait) {\n    let time = null;\n\n    return function(...args) {\n        if(!time) {\n            // 当前没有事件\n            time = setTimeOut(() => {\n                time = null;\n                fn.apply(this, args)\n            }, wait)\n        }\n    }\n}\n\n```\n\n## promise\n\n[参考链接](https://github.com/lgwebdream/FE-Interview/issues/29)\n\n","slug":"手写源码系列","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgj0047mroj4kh571fc","content":"<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">debound</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">clearTimeOut</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> \n\n        time <span class=\"token operator\">=</span> <span class=\"token function\">setTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            fn<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><p>节流的意思 是在单位时间内只执行一次</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 当前没有事件</span>\n            time <span class=\"token operator\">=</span> <span class=\"token function\">setTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                time <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                fn<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h2><p><a href=\"https://github.com/lgwebdream/FE-Interview/issues/29\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><pre><code class=\"jsx\">function debound(fn, wait) {\n    let time;\n    return function(...args) {\n        if(time) {\n            clearTimeOut(time)\n        } \n\n        time = setTimeOut(() =&gt; {\n            fn.apply(this, args)\n        }, wait)\n    }\n}</code></pre>\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><p>节流的意思 是在单位时间内只执行一次</p>\n<pre><code class=\"jsx\">function throttle(fn, wait) {\n    let time = null;\n\n    return function(...args) {\n        if(!time) {\n            // 当前没有事件\n            time = setTimeOut(() =&gt; {\n                time = null;\n                fn.apply(this, args)\n            }, wait)\n        }\n    }\n}\n</code></pre>\n<h2 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h2><p><a href=\"https://github.com/lgwebdream/FE-Interview/issues/29\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n"},{"title":"打家劫舍","date":"2020-05-29T23:45:17.000Z","type":"algorithm","_content":"\n[198. 打家劫舍](https://leetcode-cn.com/problems/house-robber/)\n\n\n## 题目描述\n\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。\n\n```js\n输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n\n```\n\n## 尝试\n\n* 一开始以为是 `i奇数`的值相加，与`偶数`的值相加，最后比最大值，提交发现是错误的\n* 然后一想就知道是一位数组的动态规划\n\n\n## 题解\n\n* 定义数组含义： `dp[i]` 设定第i房间时，所偷的钱为最大\n* 找出数组元素间的关系式 => 递推公式。 题目规定：小偷不能连续偷窃相邻的房子，至少隔一个房间，\n  那么当我偷到第i房间的时候，我只要求出第i-2房间时跟第i-3房间时的最大值即可，`i-2`表示隔了一间房间， `i-3`表示隔了2个房间\n  所以递推公式为 `dp[i] = nums[i] + Math.max(dp[i - 3], dp[i - 2])`\n* 找出初始条件： 第0间自然是`nums[0]`, 但我们递推公式 `i-3`和`i-2` 理论上没有非正整数的房间，我们手动输入为0吧\n\n\n```js\nvar rob = function(nums) {\n    // dp[i] = nums[i] + Max(dp[i-3], dp[i-2]) \n    let dp = new Map();\n    dp[0] = nums[0];\n    dp[-1] = 0;\n    dp[-2] = 0;\n\n    // dp(1) = nums[1] + max(dp(1-3), dp[1-2])\n    for(let i = 1; i < nums.length; i++) {\n        dp[i] = nums[i] + Math.max(dp[i-3], dp[i-2]);\n    }\n    let result = 0;\n    for(let i = 0; i < nums.length; i++) {\n        result = Math.max(result, dp[i]);      \n    }\n    return result\n};\n```\n","source":"_posts/打家劫舍.md","raw":"---\ntitle: 打家劫舍\ndate: 2020-05-29 23:45:17\ntype: algorithm\ntags: algorithm-动态规划\n---\n\n[198. 打家劫舍](https://leetcode-cn.com/problems/house-robber/)\n\n\n## 题目描述\n\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。\n\n```js\n输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n\n```\n\n## 尝试\n\n* 一开始以为是 `i奇数`的值相加，与`偶数`的值相加，最后比最大值，提交发现是错误的\n* 然后一想就知道是一位数组的动态规划\n\n\n## 题解\n\n* 定义数组含义： `dp[i]` 设定第i房间时，所偷的钱为最大\n* 找出数组元素间的关系式 => 递推公式。 题目规定：小偷不能连续偷窃相邻的房子，至少隔一个房间，\n  那么当我偷到第i房间的时候，我只要求出第i-2房间时跟第i-3房间时的最大值即可，`i-2`表示隔了一间房间， `i-3`表示隔了2个房间\n  所以递推公式为 `dp[i] = nums[i] + Math.max(dp[i - 3], dp[i - 2])`\n* 找出初始条件： 第0间自然是`nums[0]`, 但我们递推公式 `i-3`和`i-2` 理论上没有非正整数的房间，我们手动输入为0吧\n\n\n```js\nvar rob = function(nums) {\n    // dp[i] = nums[i] + Max(dp[i-3], dp[i-2]) \n    let dp = new Map();\n    dp[0] = nums[0];\n    dp[-1] = 0;\n    dp[-2] = 0;\n\n    // dp(1) = nums[1] + max(dp(1-3), dp[1-2])\n    for(let i = 1; i < nums.length; i++) {\n        dp[i] = nums[i] + Math.max(dp[i-3], dp[i-2]);\n    }\n    let result = 0;\n    for(let i = 0; i < nums.length; i++) {\n        result = Math.max(result, dp[i]);      \n    }\n    return result\n};\n```\n","slug":"打家劫舍","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgk004amroj4yyy83og","content":"<p><a href=\"https://leetcode-cn.com/problems/house-robber/\" target=\"_blank\" rel=\"noopener\">198. 打家劫舍</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p>\n<pre class=\" language-js\"><code class=\"language-js\">输入<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n输出<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n解释<span class=\"token punctuation\">:</span> 偷窃 <span class=\"token number\">1</span> 号房屋 <span class=\"token punctuation\">(</span>金额 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> ，然后偷窃 <span class=\"token number\">3</span> 号房屋 <span class=\"token punctuation\">(</span>金额 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>。\n     偷窃到的最高金额 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span> 。\n</code></pre>\n<h2 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h2><ul>\n<li>一开始以为是 <code>i奇数</code>的值相加，与<code>偶数</code>的值相加，最后比最大值，提交发现是错误的</li>\n<li>然后一想就知道是一位数组的动态规划</li>\n</ul>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><ul>\n<li>定义数组含义： <code>dp[i]</code> 设定第i房间时，所偷的钱为最大</li>\n<li>找出数组元素间的关系式 =&gt; 递推公式。 题目规定：小偷不能连续偷窃相邻的房子，至少隔一个房间，<br>那么当我偷到第i房间的时候，我只要求出第i-2房间时跟第i-3房间时的最大值即可，<code>i-2</code>表示隔了一间房间， <code>i-3</code>表示隔了2个房间<br>所以递推公式为 <code>dp[i] = nums[i] + Math.max(dp[i - 3], dp[i - 2])</code></li>\n<li>找出初始条件： 第0间自然是<code>nums[0]</code>, 但我们递推公式 <code>i-3</code>和<code>i-2</code> 理论上没有非正整数的房间，我们手动输入为0吧</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> rob <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// dp[i] = nums[i] + Max(dp[i-3], dp[i-2]) </span>\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// dp(1) = nums[1] + max(dp(1-3), dp[1-2])</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/house-robber/\" target=\"_blank\" rel=\"noopener\">198. 打家劫舍</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p>\n<pre><code class=\"js\">输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n</code></pre>\n<h2 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h2><ul>\n<li>一开始以为是 <code>i奇数</code>的值相加，与<code>偶数</code>的值相加，最后比最大值，提交发现是错误的</li>\n<li>然后一想就知道是一位数组的动态规划</li>\n</ul>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><ul>\n<li>定义数组含义： <code>dp[i]</code> 设定第i房间时，所偷的钱为最大</li>\n<li>找出数组元素间的关系式 =&gt; 递推公式。 题目规定：小偷不能连续偷窃相邻的房子，至少隔一个房间，<br>那么当我偷到第i房间的时候，我只要求出第i-2房间时跟第i-3房间时的最大值即可，<code>i-2</code>表示隔了一间房间， <code>i-3</code>表示隔了2个房间<br>所以递推公式为 <code>dp[i] = nums[i] + Math.max(dp[i - 3], dp[i - 2])</code></li>\n<li>找出初始条件： 第0间自然是<code>nums[0]</code>, 但我们递推公式 <code>i-3</code>和<code>i-2</code> 理论上没有非正整数的房间，我们手动输入为0吧</li>\n</ul>\n<pre><code class=\"js\">var rob = function(nums) {\n    // dp[i] = nums[i] + Max(dp[i-3], dp[i-2]) \n    let dp = new Map();\n    dp[0] = nums[0];\n    dp[-1] = 0;\n    dp[-2] = 0;\n\n    // dp(1) = nums[1] + max(dp(1-3), dp[1-2])\n    for(let i = 1; i &lt; nums.length; i++) {\n        dp[i] = nums[i] + Math.max(dp[i-3], dp[i-2]);\n    }\n    let result = 0;\n    for(let i = 0; i &lt; nums.length; i++) {\n        result = Math.max(result, dp[i]);      \n    }\n    return result\n};</code></pre>\n"},{"title":"搜索插入位置","date":"2020-07-17T14:47:33.000Z","type":"algorithm","_content":"\n[35. 搜索插入位置](https://leetcode-cn.com/problems/search-insert-position/)\n\n\n## 题目描述\n\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n你可以假设数组中无重复元素。\n\n示例：\n\n> 输入: [1,3,5,6], 0\n> 输出: 0\n\n## 思想\n\n* 因为是有序的数组，所以我们可以使用二分法找到插入的位置\n\n## 代码\n\n```js\nvar searchInsert = function(nums, target) {\n    // 二分查找\n    let left = 0;\n    let right = nums.length - 1;\n    while(left < right) {\n        let m = Math.floor( (right + left) / 2 );\n        if(nums[m] == target) {\n            return m;\n        }\n        if(target < nums[m]) {\n            right = m - 1;\n        } else {\n            left = m + 1;\n        }\n    }\n    let mid = Math.floor((right + left) / 2);\n    mid = mid > 0 ? mid : 0; // 为了解决负数问题\n    // 最后我们已经知道了左边跟右边的边界了，然后我们用target 比对一下 nums[mid] 就知道是放在当前位置还是放在后面一个位置了\n    \n    return target > nums[mid] ? mid + 1 : mid ; \n};\n```\n\n","source":"_posts/搜索插入位置.md","raw":"---\ntitle: 搜索插入位置\ndate: 2020-07-17 14:47:33\ntags: algorithm-二分法\ntype: algorithm\n---\n\n[35. 搜索插入位置](https://leetcode-cn.com/problems/search-insert-position/)\n\n\n## 题目描述\n\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n你可以假设数组中无重复元素。\n\n示例：\n\n> 输入: [1,3,5,6], 0\n> 输出: 0\n\n## 思想\n\n* 因为是有序的数组，所以我们可以使用二分法找到插入的位置\n\n## 代码\n\n```js\nvar searchInsert = function(nums, target) {\n    // 二分查找\n    let left = 0;\n    let right = nums.length - 1;\n    while(left < right) {\n        let m = Math.floor( (right + left) / 2 );\n        if(nums[m] == target) {\n            return m;\n        }\n        if(target < nums[m]) {\n            right = m - 1;\n        } else {\n            left = m + 1;\n        }\n    }\n    let mid = Math.floor((right + left) / 2);\n    mid = mid > 0 ? mid : 0; // 为了解决负数问题\n    // 最后我们已经知道了左边跟右边的边界了，然后我们用target 比对一下 nums[mid] 就知道是放在当前位置还是放在后面一个位置了\n    \n    return target > nums[mid] ? mid + 1 : mid ; \n};\n```\n\n","slug":"搜索插入位置","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgm004fmroj4ddkhyfe","content":"<p><a href=\"https://leetcode-cn.com/problems/search-insert-position/\" target=\"_blank\" rel=\"noopener\">35. 搜索插入位置</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>你可以假设数组中无重复元素。</p>\n<p>示例：</p>\n<blockquote>\n<p>输入: [1,3,5,6], 0<br>输出: 0</p>\n</blockquote>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><ul>\n<li>因为是有序的数组，所以我们可以使用二分法找到插入的位置</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> searchInsert <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 二分查找</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">+</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            right <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            left <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">+</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mid <span class=\"token operator\">=</span> mid <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> mid <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 为了解决负数问题</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 最后我们已经知道了左边跟右边的边界了，然后我们用target 比对一下 nums[mid] 就知道是放在当前位置还是放在后面一个位置了</span>\n\n    <span class=\"token keyword\">return</span> target <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> mid <span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/search-insert-position/\" target=\"_blank\" rel=\"noopener\">35. 搜索插入位置</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>你可以假设数组中无重复元素。</p>\n<p>示例：</p>\n<blockquote>\n<p>输入: [1,3,5,6], 0<br>输出: 0</p>\n</blockquote>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><ul>\n<li>因为是有序的数组，所以我们可以使用二分法找到插入的位置</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">var searchInsert = function(nums, target) {\n    // 二分查找\n    let left = 0;\n    let right = nums.length - 1;\n    while(left &lt; right) {\n        let m = Math.floor( (right + left) / 2 );\n        if(nums[m] == target) {\n            return m;\n        }\n        if(target &lt; nums[m]) {\n            right = m - 1;\n        } else {\n            left = m + 1;\n        }\n    }\n    let mid = Math.floor((right + left) / 2);\n    mid = mid &gt; 0 ? mid : 0; // 为了解决负数问题\n    // 最后我们已经知道了左边跟右边的边界了，然后我们用target 比对一下 nums[mid] 就知道是放在当前位置还是放在后面一个位置了\n\n    return target &gt; nums[mid] ? mid + 1 : mid ; \n};</code></pre>\n"},{"title":"数组中的第K个最大元素","date":"2020-06-29T11:24:02.000Z","type":"algorithm","_content":"\n[数组中的第K个最大元素](https://leetcode-cn.com/problems/kth-largest-element-in-an-array/)\n\n## 题目描述\n\n在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。\n\n> 输入: [3,2,1,5,6,4] 和 k = 2\n> 输出: 5 \n> 解释：排序后数组结果[1,2,3,4,5,6], 取第二大的那个数就是 5\n\n## 分析\n\n* 这个题目直接想就是**数组通过排序后获取倒数第k个数**\n* 这里我使用快速排序\n\n### 代码\n\n```js\n// 快速排序\nfunction quicksort(nums, low, high) {\n    let i;\n    let j;\n    let s;\n    while (high > low) {\n        i = low;\n        j = high;\n        s = nums[low];\n        while (i < j) {\n            while (nums[j] > s) {\n                j--;\n            }\n            nums[i] = nums[j];\n            while (s >= nums[i] && i < j) {\n                i++;\n            }\n            nums[j] = nums[i];\n        }\n        nums[i] = s;\n        quicksort(nums, low, i - 1);\n        low = i + 1;\n    }\n    return nums;\n}\nvar findKthLargest = function(nums, k) {\n    const newNums = quicksort(nums, 0, nums.length - 1);\n    return newNums[nums.length - k];\n};\n```","source":"_posts/数组中的第K个最大元素.md","raw":"---\ntitle: 数组中的第K个最大元素\ndate: 2020-06-29 11:24:02\ntype: algorithm\ntags: [algorithm-排序, algorithm-快速排序]\n---\n\n[数组中的第K个最大元素](https://leetcode-cn.com/problems/kth-largest-element-in-an-array/)\n\n## 题目描述\n\n在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。\n\n> 输入: [3,2,1,5,6,4] 和 k = 2\n> 输出: 5 \n> 解释：排序后数组结果[1,2,3,4,5,6], 取第二大的那个数就是 5\n\n## 分析\n\n* 这个题目直接想就是**数组通过排序后获取倒数第k个数**\n* 这里我使用快速排序\n\n### 代码\n\n```js\n// 快速排序\nfunction quicksort(nums, low, high) {\n    let i;\n    let j;\n    let s;\n    while (high > low) {\n        i = low;\n        j = high;\n        s = nums[low];\n        while (i < j) {\n            while (nums[j] > s) {\n                j--;\n            }\n            nums[i] = nums[j];\n            while (s >= nums[i] && i < j) {\n                i++;\n            }\n            nums[j] = nums[i];\n        }\n        nums[i] = s;\n        quicksort(nums, low, i - 1);\n        low = i + 1;\n    }\n    return nums;\n}\nvar findKthLargest = function(nums, k) {\n    const newNums = quicksort(nums, 0, nums.length - 1);\n    return newNums[nums.length - k];\n};\n```","slug":"数组中的第K个最大元素","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgn004imrojgkdkhtqy","content":"<p><a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/\" target=\"_blank\" rel=\"noopener\">数组中的第K个最大元素</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>\n<blockquote>\n<p>输入: [3,2,1,5,6,4] 和 k = 2<br>输出: 5<br>解释：排序后数组结果[1,2,3,4,5,6], 取第二大的那个数就是 5</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>这个题目直接想就是<strong>数组通过排序后获取倒数第k个数</strong></li>\n<li>这里我使用快速排序</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 快速排序</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">></span> low<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        i <span class=\"token operator\">=</span> low<span class=\"token punctuation\">;</span>\n        j <span class=\"token operator\">=</span> high<span class=\"token punctuation\">;</span>\n        s <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">>=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        low <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> findKthLargest <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newNums <span class=\"token operator\">=</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> newNums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/\" target=\"_blank\" rel=\"noopener\">数组中的第K个最大元素</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>\n<blockquote>\n<p>输入: [3,2,1,5,6,4] 和 k = 2<br>输出: 5<br>解释：排序后数组结果[1,2,3,4,5,6], 取第二大的那个数就是 5</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>这个题目直接想就是<strong>数组通过排序后获取倒数第k个数</strong></li>\n<li>这里我使用快速排序</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"js\">// 快速排序\nfunction quicksort(nums, low, high) {\n    let i;\n    let j;\n    let s;\n    while (high &gt; low) {\n        i = low;\n        j = high;\n        s = nums[low];\n        while (i &lt; j) {\n            while (nums[j] &gt; s) {\n                j--;\n            }\n            nums[i] = nums[j];\n            while (s &gt;= nums[i] &amp;&amp; i &lt; j) {\n                i++;\n            }\n            nums[j] = nums[i];\n        }\n        nums[i] = s;\n        quicksort(nums, low, i - 1);\n        low = i + 1;\n    }\n    return nums;\n}\nvar findKthLargest = function(nums, k) {\n    const newNums = quicksort(nums, 0, nums.length - 1);\n    return newNums[nums.length - k];\n};</code></pre>\n"},{"title":"整数拆分","date":"2020-07-30T10:54:46.000Z","type":"algorithm","_content":"\n[整数拆分力扣上](https://leetcode-cn.com/problems/integer-break/)\n\n\n## 题目描述\n\n给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。\n\n示例1: \n\n```html\n输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1。\n```\n\n示例2：\n\n```html\n输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。\n```\n\n## 思想\n\n* 2 => 1 + 1 \n* 3 => 2 + 1\n* 4 => 2 + 2\n* 5 => 2 + 3\n* 6 => 3 + 3\n* 7 => 3 + 4\n* 8 => 3 + 3 + 2\n* 9 => 3 + 3 + 3\n* 10 => 3 + 3 + 2 + 2\n\n\n观察 10 跟 8, 还有 7 的关系， 观察9 跟 7 还有 6 的关系, 我这里直接用dp表示\n* `dp[10] = max(dp[8] * 2, dp[7] * 3)`,  =>  `max(3 * 3 * 3 * 2, 3 * 4 * 3)`\n* `dp[9] = max(dp[7] * 2, dp[6] * 3)`,   =>  `max(3 * 4 * 2, 3 * 3 * 3)`\n\n**注意：**但你会发现 从dp[6] 往上就不符合上面的方法了，\n* ~~dp[6] = max(dp[4] * 2, dp[3] * 3)~~\n\n所以我直接做了暴力破解！直接赋值\n\n\n\n## 代码\n\n```js\n/**\n * @param {number} n\n * @return {number}\n */\nvar integerBreak = function(n) {\n    let dp = Array(n + 1).fill(1);\n    dp[3] = 2;\n    dp[4] = 4;\n    dp[5] = 6\n    dp[6] = 9\n\n    for(let i = 7; i <= n; i++) {\n        dp[i] = Math.max(dp[i - 3] * 3, dp[i - 2] * 2);\n    }\n\n    return dp[n]\n\n};\n```\n\n## 官方题解\n\n`dp[i]=max(2×(i−2),2×dp[i−2],3×(i−3),3×dp[i−3])`\n\n```c++\nclass Solution {\npublic:\n    int integerBreak(int n) {\n        if (n < 4) {\n            return n - 1;\n        }\n        vector <int> dp(n + 1);\n        dp[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = max(max(2 * (i - 2), 2 * dp[i - 2]), max(3 * (i - 3), 3 * dp[i - 3]));\n        }\n        return dp[n];\n    }\n};\n\n```","source":"_posts/整数拆分.md","raw":"---\ntitle: 整数拆分\ndate: 2020-07-30 10:54:46\ntype: algorithm\ntags: algorithm-动态规划\n---\n\n[整数拆分力扣上](https://leetcode-cn.com/problems/integer-break/)\n\n\n## 题目描述\n\n给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。\n\n示例1: \n\n```html\n输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1。\n```\n\n示例2：\n\n```html\n输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。\n```\n\n## 思想\n\n* 2 => 1 + 1 \n* 3 => 2 + 1\n* 4 => 2 + 2\n* 5 => 2 + 3\n* 6 => 3 + 3\n* 7 => 3 + 4\n* 8 => 3 + 3 + 2\n* 9 => 3 + 3 + 3\n* 10 => 3 + 3 + 2 + 2\n\n\n观察 10 跟 8, 还有 7 的关系， 观察9 跟 7 还有 6 的关系, 我这里直接用dp表示\n* `dp[10] = max(dp[8] * 2, dp[7] * 3)`,  =>  `max(3 * 3 * 3 * 2, 3 * 4 * 3)`\n* `dp[9] = max(dp[7] * 2, dp[6] * 3)`,   =>  `max(3 * 4 * 2, 3 * 3 * 3)`\n\n**注意：**但你会发现 从dp[6] 往上就不符合上面的方法了，\n* ~~dp[6] = max(dp[4] * 2, dp[3] * 3)~~\n\n所以我直接做了暴力破解！直接赋值\n\n\n\n## 代码\n\n```js\n/**\n * @param {number} n\n * @return {number}\n */\nvar integerBreak = function(n) {\n    let dp = Array(n + 1).fill(1);\n    dp[3] = 2;\n    dp[4] = 4;\n    dp[5] = 6\n    dp[6] = 9\n\n    for(let i = 7; i <= n; i++) {\n        dp[i] = Math.max(dp[i - 3] * 3, dp[i - 2] * 2);\n    }\n\n    return dp[n]\n\n};\n```\n\n## 官方题解\n\n`dp[i]=max(2×(i−2),2×dp[i−2],3×(i−3),3×dp[i−3])`\n\n```c++\nclass Solution {\npublic:\n    int integerBreak(int n) {\n        if (n < 4) {\n            return n - 1;\n        }\n        vector <int> dp(n + 1);\n        dp[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = max(max(2 * (i - 2), 2 * dp[i - 2]), max(3 * (i - 3), 3 * dp[i - 3]));\n        }\n        return dp[n];\n    }\n};\n\n```","slug":"整数拆分","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgo004nmrojgs163sdo","content":"<p><a href=\"https://leetcode-cn.com/problems/integer-break/\" target=\"_blank\" rel=\"noopener\">整数拆分力扣上</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p>\n<p>示例1: </p>\n<pre class=\" language-html\"><code class=\"language-html\">输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1。</code></pre>\n<p>示例2：</p>\n<pre class=\" language-html\"><code class=\"language-html\">输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。</code></pre>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><ul>\n<li>2 =&gt; 1 + 1 </li>\n<li>3 =&gt; 2 + 1</li>\n<li>4 =&gt; 2 + 2</li>\n<li>5 =&gt; 2 + 3</li>\n<li>6 =&gt; 3 + 3</li>\n<li>7 =&gt; 3 + 4</li>\n<li>8 =&gt; 3 + 3 + 2</li>\n<li>9 =&gt; 3 + 3 + 3</li>\n<li>10 =&gt; 3 + 3 + 2 + 2</li>\n</ul>\n<p>观察 10 跟 8, 还有 7 的关系， 观察9 跟 7 还有 6 的关系, 我这里直接用dp表示</p>\n<ul>\n<li><code>dp[10] = max(dp[8] * 2, dp[7] * 3)</code>,  =&gt;  <code>max(3 * 3 * 3 * 2, 3 * 4 * 3)</code></li>\n<li><code>dp[9] = max(dp[7] * 2, dp[6] * 3)</code>,   =&gt;  <code>max(3 * 4 * 2, 3 * 3 * 3)</code></li>\n</ul>\n<p><strong>注意：</strong>但你会发现 从dp[6] 往上就不符合上面的方法了，</p>\n<ul>\n<li><del>dp[6] = max(dp[4] * 2, dp[3] * 3)</del></li>\n</ul>\n<p>所以我直接做了暴力破解！直接赋值</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {number} n\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> integerBreak <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"官方题解\"><a href=\"#官方题解\" class=\"headerlink\" title=\"官方题解\"></a>官方题解</h2><p><code>dp[i]=max(2×(i−2),2×dp[i−2],3×(i−3),3×dp[i−3])</code></p>\n<pre class=\" language-c++\"><code class=\"language-c++\">class Solution {\npublic:\n    int integerBreak(int n) {\n        if (n < 4) {\n            return n - 1;\n        }\n        vector <int> dp(n + 1);\n        dp[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = max(max(2 * (i - 2), 2 * dp[i - 2]), max(3 * (i - 3), 3 * dp[i - 3]));\n        }\n        return dp[n];\n    }\n};\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/integer-break/\" target=\"_blank\" rel=\"noopener\">整数拆分力扣上</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p>\n<p>示例1: </p>\n<pre><code class=\"html\">输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1。</code></pre>\n<p>示例2：</p>\n<pre><code class=\"html\">输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。</code></pre>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><ul>\n<li>2 =&gt; 1 + 1 </li>\n<li>3 =&gt; 2 + 1</li>\n<li>4 =&gt; 2 + 2</li>\n<li>5 =&gt; 2 + 3</li>\n<li>6 =&gt; 3 + 3</li>\n<li>7 =&gt; 3 + 4</li>\n<li>8 =&gt; 3 + 3 + 2</li>\n<li>9 =&gt; 3 + 3 + 3</li>\n<li>10 =&gt; 3 + 3 + 2 + 2</li>\n</ul>\n<p>观察 10 跟 8, 还有 7 的关系， 观察9 跟 7 还有 6 的关系, 我这里直接用dp表示</p>\n<ul>\n<li><code>dp[10] = max(dp[8] * 2, dp[7] * 3)</code>,  =&gt;  <code>max(3 * 3 * 3 * 2, 3 * 4 * 3)</code></li>\n<li><code>dp[9] = max(dp[7] * 2, dp[6] * 3)</code>,   =&gt;  <code>max(3 * 4 * 2, 3 * 3 * 3)</code></li>\n</ul>\n<p><strong>注意：</strong>但你会发现 从dp[6] 往上就不符合上面的方法了，</p>\n<ul>\n<li><del>dp[6] = max(dp[4] * 2, dp[3] * 3)</del></li>\n</ul>\n<p>所以我直接做了暴力破解！直接赋值</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">/**\n * @param {number} n\n * @return {number}\n */\nvar integerBreak = function(n) {\n    let dp = Array(n + 1).fill(1);\n    dp[3] = 2;\n    dp[4] = 4;\n    dp[5] = 6\n    dp[6] = 9\n\n    for(let i = 7; i &lt;= n; i++) {\n        dp[i] = Math.max(dp[i - 3] * 3, dp[i - 2] * 2);\n    }\n\n    return dp[n]\n\n};</code></pre>\n<h2 id=\"官方题解\"><a href=\"#官方题解\" class=\"headerlink\" title=\"官方题解\"></a>官方题解</h2><p><code>dp[i]=max(2×(i−2),2×dp[i−2],3×(i−3),3×dp[i−3])</code></p>\n<pre><code class=\"c++\">class Solution {\npublic:\n    int integerBreak(int n) {\n        if (n &lt; 4) {\n            return n - 1;\n        }\n        vector &lt;int&gt; dp(n + 1);\n        dp[2] = 1;\n        for (int i = 3; i &lt;= n; i++) {\n            dp[i] = max(max(2 * (i - 2), 2 * dp[i - 2]), max(3 * (i - 3), 3 * dp[i - 3]));\n        }\n        return dp[n];\n    }\n};\n</code></pre>\n"},{"title":"最佳观光组合","date":"2020-06-17T14:50:13.000Z","type":"algorithm","_content":"\n## 最佳观光组合\n\n[题目](https://leetcode-cn.com/problems/best-sightseeing-pair/)\n\n## 题目描述\n\n给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。\n一对景点（i < j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。\n返回一对观光景点能取得的最高分。\n\n示例：\n\n> 输入：[8,1,5,2,6]\n> 输出：11\n> 解释：i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11\n\n## 暴力破解\n\n```js\nvar maxScoreSightseeingPair = function(A) {\n    let max = 0;\n    const length = A.length;\n    for(let i = 0; i < length; i++) {\n       for(let j = i + 1; j < length; j++) {\n            max = Math.max((A[i] + A[j] + i - j), max); \n       } \n    }\n    return max\n};\n```\n\n## 分析\n\n我们可以看方程 `A[i] + A[j] + i - j => A[i] + i + A[j] - j`, 我们遍历数组 可以知道 `A[j] - j` 是可以知道的并且是固定的，所以只要把 `A[i] + i` 变为最大即可，所以 `max + A[j] - j` \n\n\n## 动态规划\n\n>  max = A[i] + A[j] + i - j = A[i] + i + A[j] - j\n\n```js\nvar maxScoreSightseeingPair = function(A) {\n    let len = A.length;\n    let dp = [];\n    let max = 0;\n    dp[0] = 0;\n\n    for(let i = 1; i < len; i++){\n        dp[i] = Math.max(dp[i - 1], A[i - 1] + i - 1);\n        max = Math.max(max, dp[i] + A[i] - i);\n    }\n    return max;\n}\n\n```\n\n## 优化\n\n```js\nvar maxScoreSightseeingPair = function(A) {\n    let res = 0;\n    let max = 0;\n    const length = A.length;\n    debugger;\n    // A[i] + A[j] + i - j => A[i] + i + A[j] - j\n    // 我们知道A[j] - j 是固定的, 只要维护 A[i] + i 为最大即可，所以就遍历一次 => max + A[j] - j\n    for(let i = 0; i < length; i++) {\n        res = Math.max(max + A[i] - i, res);\n        max = Math.max(max, A[i] + i)\n    }\n\n    return res;\n};\n```\n\n","source":"_posts/最佳观光组合.md","raw":"---\ntitle: 最佳观光组合\ndate: 2020-06-17 14:50:13\ntype: algorithm\ntags: [algorithm-基础, algorithm-动态规划]\n---\n\n## 最佳观光组合\n\n[题目](https://leetcode-cn.com/problems/best-sightseeing-pair/)\n\n## 题目描述\n\n给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。\n一对景点（i < j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。\n返回一对观光景点能取得的最高分。\n\n示例：\n\n> 输入：[8,1,5,2,6]\n> 输出：11\n> 解释：i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11\n\n## 暴力破解\n\n```js\nvar maxScoreSightseeingPair = function(A) {\n    let max = 0;\n    const length = A.length;\n    for(let i = 0; i < length; i++) {\n       for(let j = i + 1; j < length; j++) {\n            max = Math.max((A[i] + A[j] + i - j), max); \n       } \n    }\n    return max\n};\n```\n\n## 分析\n\n我们可以看方程 `A[i] + A[j] + i - j => A[i] + i + A[j] - j`, 我们遍历数组 可以知道 `A[j] - j` 是可以知道的并且是固定的，所以只要把 `A[i] + i` 变为最大即可，所以 `max + A[j] - j` \n\n\n## 动态规划\n\n>  max = A[i] + A[j] + i - j = A[i] + i + A[j] - j\n\n```js\nvar maxScoreSightseeingPair = function(A) {\n    let len = A.length;\n    let dp = [];\n    let max = 0;\n    dp[0] = 0;\n\n    for(let i = 1; i < len; i++){\n        dp[i] = Math.max(dp[i - 1], A[i - 1] + i - 1);\n        max = Math.max(max, dp[i] + A[i] - i);\n    }\n    return max;\n}\n\n```\n\n## 优化\n\n```js\nvar maxScoreSightseeingPair = function(A) {\n    let res = 0;\n    let max = 0;\n    const length = A.length;\n    debugger;\n    // A[i] + A[j] + i - j => A[i] + i + A[j] - j\n    // 我们知道A[j] - j 是固定的, 只要维护 A[i] + i 为最大即可，所以就遍历一次 => max + A[j] - j\n    for(let i = 0; i < length; i++) {\n        res = Math.max(max + A[i] - i, res);\n        max = Math.max(max, A[i] + i)\n    }\n\n    return res;\n};\n```\n\n","slug":"最佳观光组合","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgp004pmrojhr1ahwxa","content":"<h2 id=\"最佳观光组合\"><a href=\"#最佳观光组合\" class=\"headerlink\" title=\"最佳观光组合\"></a>最佳观光组合</h2><p><a href=\"https://leetcode-cn.com/problems/best-sightseeing-pair/\" target=\"_blank\" rel=\"noopener\">题目</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。<br>一对景点（i &lt; j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。<br>返回一对观光景点能取得的最高分。</p>\n<p>示例：</p>\n<blockquote>\n<p>输入：[8,1,5,2,6]<br>输出：11<br>解释：i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</p>\n</blockquote>\n<h2 id=\"暴力破解\"><a href=\"#暴力破解\" class=\"headerlink\" title=\"暴力破解\"></a>暴力破解</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> maxScoreSightseeingPair <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n       <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> max\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们可以看方程 <code>A[i] + A[j] + i - j =&gt; A[i] + i + A[j] - j</code>, 我们遍历数组 可以知道 <code>A[j] - j</code> 是可以知道的并且是固定的，所以只要把 <code>A[i] + i</code> 变为最大即可，所以 <code>max + A[j] - j</code> </p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><blockquote>\n<p> max = A[i] + A[j] + i - j = A[i] + i + A[j] - j</p>\n</blockquote>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> maxScoreSightseeingPair <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> maxScoreSightseeingPair <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// A[i] + A[j] + i - j => A[i] + i + A[j] - j</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 我们知道A[j] - j 是固定的, 只要维护 A[i] + i 为最大即可，所以就遍历一次 => max + A[j] - j</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">+</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"最佳观光组合\"><a href=\"#最佳观光组合\" class=\"headerlink\" title=\"最佳观光组合\"></a>最佳观光组合</h2><p><a href=\"https://leetcode-cn.com/problems/best-sightseeing-pair/\" target=\"_blank\" rel=\"noopener\">题目</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。<br>一对景点（i &lt; j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。<br>返回一对观光景点能取得的最高分。</p>\n<p>示例：</p>\n<blockquote>\n<p>输入：[8,1,5,2,6]<br>输出：11<br>解释：i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</p>\n</blockquote>\n<h2 id=\"暴力破解\"><a href=\"#暴力破解\" class=\"headerlink\" title=\"暴力破解\"></a>暴力破解</h2><pre><code class=\"js\">var maxScoreSightseeingPair = function(A) {\n    let max = 0;\n    const length = A.length;\n    for(let i = 0; i &lt; length; i++) {\n       for(let j = i + 1; j &lt; length; j++) {\n            max = Math.max((A[i] + A[j] + i - j), max); \n       } \n    }\n    return max\n};</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们可以看方程 <code>A[i] + A[j] + i - j =&gt; A[i] + i + A[j] - j</code>, 我们遍历数组 可以知道 <code>A[j] - j</code> 是可以知道的并且是固定的，所以只要把 <code>A[i] + i</code> 变为最大即可，所以 <code>max + A[j] - j</code> </p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><blockquote>\n<p> max = A[i] + A[j] + i - j = A[i] + i + A[j] - j</p>\n</blockquote>\n<pre><code class=\"js\">var maxScoreSightseeingPair = function(A) {\n    let len = A.length;\n    let dp = [];\n    let max = 0;\n    dp[0] = 0;\n\n    for(let i = 1; i &lt; len; i++){\n        dp[i] = Math.max(dp[i - 1], A[i - 1] + i - 1);\n        max = Math.max(max, dp[i] + A[i] - i);\n    }\n    return max;\n}\n</code></pre>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><pre><code class=\"js\">var maxScoreSightseeingPair = function(A) {\n    let res = 0;\n    let max = 0;\n    const length = A.length;\n    debugger;\n    // A[i] + A[j] + i - j =&gt; A[i] + i + A[j] - j\n    // 我们知道A[j] - j 是固定的, 只要维护 A[i] + i 为最大即可，所以就遍历一次 =&gt; max + A[j] - j\n    for(let i = 0; i &lt; length; i++) {\n        res = Math.max(max + A[i] - i, res);\n        max = Math.max(max, A[i] + i)\n    }\n\n    return res;\n};</code></pre>\n"},{"title":"最小路径和","date":"2020-07-23T10:53:00.000Z","type":"algorithm","_content":"\n[最小路径和](https://leetcode-cn.com/problems/minimum-path-sum/)\n\n这道题跟[三角形最小路径和](./三角形最小路径和.md)类似\n\n\n## 题目描述\n给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n\n**说明：**每次只能向下或者向右移动一步。\n\n示例：\n\n``` html\n输入:\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 7\n解释: 因为路径 1→3→1→1→1 的总和最小。\n```\n\n## 思想\n\n这是一道二维数组的动态规划题目， 左边表示输入， 右边表示dp 结果集\n* 第一行只能够向右走， 所以  `dp[i][j] = grid[i][j] + dp[i][j - 1];`\n* 第一列只能向下走，所以 `dp[i][j] = grid[i][j] + dp[i - 1][j]`\n* 其余符合 `dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1])`;\n\n<style>\n.minPathSum {\n    display: flex;\n    flex-direction: row;\n}\n.minPathSum-right {\n    margin-left: 10px\n}\n@media screen and (max-width: 800px) {\n    .minPathSum {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .minPathSum-right {\n        margin-left: 0px\n    }\n}\n</style>w\n\n<div  class=\"minPathSum\">\n    <div class=\"left\">\n        <p>输入</p>\n        <table>\n            <thead>\n                <th>i / k</th>\n                <th>k = 0</th>\n                <th>k = 1</th>\n                <th>k = 2</th>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>i = 0</td>\n                    <td>1</td>\n                    <td>3</td>\n                    <td>1</td>\n                </tr>\n                <tr>\n                    <td>i = 1</td>\n                    <td>1</td>\n                    <td>5</td>\n                    <td>1</td>\n                </tr>\n                <tr>\n                    <td>i = 2</td>\n                    <td>4</td>\n                    <td>2</td>\n                    <td>1</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"minPathSum-right\">\n        <p>dp结果集</p>\n        <table>\n            <thead>\n                <th>i / k</th>\n                <th>k = 0</th>\n                <th>k = 1</th>\n                <th>k = 2</th>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>i = 0</td>\n                    <td>1</td>\n                    <td>4</td>\n                    <td>5</td>\n                </tr>\n                <tr>\n                    <td>i = 1</td>\n                    <td>2</td>\n                    <td>7 (上面dp值与左边dp值比较取最小 + grid)</td>\n                    <td>6</td>\n                </tr>\n                <tr>\n                    <td>i = 2</td>\n                    <td>6</td>\n                    <td>8</td>\n                    <td>7</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n## 代码\n\n```js\n/**\n * 二维数组的动态规划\n * 当前 dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);\n * 第一行只能够向右走， 所以  dp[i][j] = grid[i][j] + dp[i][j - 1];\n * 第一列只能向下走，所以 dp[i][j] = grid[i][j] + dp[i - 1][j]\n */\nvar minPathSum = function(grid) {\n    let rows = grid.length;\n    let columns = grid[0].length;\n    let dp = [];\n    \n    for(let i = 0; i < rows; i++) {\n        let temp = [];\n        for(let j = 0; j < columns; j++) {\n            if(i == 0 && j == 0) {\n                temp.push(grid[i][j]);\n            } else if(j == 0) {\n                temp.push(grid[i][j] + dp[i - 1][j]);\n            } else if(i == 0) {\n                temp.push(grid[i][j] + temp[j - 1])\n            } else {\n                temp.push(grid[i][j] + Math.min(dp[i - 1][j], temp[j - 1]))\n            }\n\n        }\n        dp.push(temp);\n    }\n    return dp[rows - 1][columns - 1]\n};\n```\n\n\n","source":"_posts/最小路径和.md","raw":"---\ntitle: 最小路径和\ndate: 2020-07-23 10:53:00\ntags: algorithm-动态规划\ntype: algorithm\n---\n\n[最小路径和](https://leetcode-cn.com/problems/minimum-path-sum/)\n\n这道题跟[三角形最小路径和](./三角形最小路径和.md)类似\n\n\n## 题目描述\n给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n\n**说明：**每次只能向下或者向右移动一步。\n\n示例：\n\n``` html\n输入:\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 7\n解释: 因为路径 1→3→1→1→1 的总和最小。\n```\n\n## 思想\n\n这是一道二维数组的动态规划题目， 左边表示输入， 右边表示dp 结果集\n* 第一行只能够向右走， 所以  `dp[i][j] = grid[i][j] + dp[i][j - 1];`\n* 第一列只能向下走，所以 `dp[i][j] = grid[i][j] + dp[i - 1][j]`\n* 其余符合 `dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1])`;\n\n<style>\n.minPathSum {\n    display: flex;\n    flex-direction: row;\n}\n.minPathSum-right {\n    margin-left: 10px\n}\n@media screen and (max-width: 800px) {\n    .minPathSum {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .minPathSum-right {\n        margin-left: 0px\n    }\n}\n</style>w\n\n<div  class=\"minPathSum\">\n    <div class=\"left\">\n        <p>输入</p>\n        <table>\n            <thead>\n                <th>i / k</th>\n                <th>k = 0</th>\n                <th>k = 1</th>\n                <th>k = 2</th>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>i = 0</td>\n                    <td>1</td>\n                    <td>3</td>\n                    <td>1</td>\n                </tr>\n                <tr>\n                    <td>i = 1</td>\n                    <td>1</td>\n                    <td>5</td>\n                    <td>1</td>\n                </tr>\n                <tr>\n                    <td>i = 2</td>\n                    <td>4</td>\n                    <td>2</td>\n                    <td>1</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"minPathSum-right\">\n        <p>dp结果集</p>\n        <table>\n            <thead>\n                <th>i / k</th>\n                <th>k = 0</th>\n                <th>k = 1</th>\n                <th>k = 2</th>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>i = 0</td>\n                    <td>1</td>\n                    <td>4</td>\n                    <td>5</td>\n                </tr>\n                <tr>\n                    <td>i = 1</td>\n                    <td>2</td>\n                    <td>7 (上面dp值与左边dp值比较取最小 + grid)</td>\n                    <td>6</td>\n                </tr>\n                <tr>\n                    <td>i = 2</td>\n                    <td>6</td>\n                    <td>8</td>\n                    <td>7</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n## 代码\n\n```js\n/**\n * 二维数组的动态规划\n * 当前 dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);\n * 第一行只能够向右走， 所以  dp[i][j] = grid[i][j] + dp[i][j - 1];\n * 第一列只能向下走，所以 dp[i][j] = grid[i][j] + dp[i - 1][j]\n */\nvar minPathSum = function(grid) {\n    let rows = grid.length;\n    let columns = grid[0].length;\n    let dp = [];\n    \n    for(let i = 0; i < rows; i++) {\n        let temp = [];\n        for(let j = 0; j < columns; j++) {\n            if(i == 0 && j == 0) {\n                temp.push(grid[i][j]);\n            } else if(j == 0) {\n                temp.push(grid[i][j] + dp[i - 1][j]);\n            } else if(i == 0) {\n                temp.push(grid[i][j] + temp[j - 1])\n            } else {\n                temp.push(grid[i][j] + Math.min(dp[i - 1][j], temp[j - 1]))\n            }\n\n        }\n        dp.push(temp);\n    }\n    return dp[rows - 1][columns - 1]\n};\n```\n\n\n","slug":"最小路径和","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgr004umrojfjzpfd11","content":"<p><a href=\"https://leetcode-cn.com/problems/minimum-path-sum/\" target=\"_blank\" rel=\"noopener\">最小路径和</a></p>\n<p>这道题跟<a href=\"./三角形最小路径和.md\">三角形最小路径和</a>类似</p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>\n<p>示例：</p>\n<pre class=\" language-html\"><code class=\"language-html\">输入:\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 7\n解释: 因为路径 1→3→1→1→1 的总和最小。</code></pre>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>这是一道二维数组的动态规划题目， 左边表示输入， 右边表示dp 结果集</p>\n<ul>\n<li>第一行只能够向右走， 所以  <code>dp[i][j] = grid[i][j] + dp[i][j - 1];</code></li>\n<li>第一列只能向下走，所以 <code>dp[i][j] = grid[i][j] + dp[i - 1][j]</code></li>\n<li>其余符合 <code>dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1])</code>;</li>\n</ul>\n<style>\n.minPathSum {\n    display: flex;\n    flex-direction: row;\n}\n.minPathSum-right {\n    margin-left: 10px\n}\n@media screen and (max-width: 800px) {\n    .minPathSum {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .minPathSum-right {\n        margin-left: 0px\n    }\n}\n</style>w\n\n<div class=\"minPathSum\">\n    <div class=\"left\">\n        <p>输入</p>\n        <table>\n            <thead>\n                <th>i / k</th>\n                <th>k = 0</th>\n                <th>k = 1</th>\n                <th>k = 2</th>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>i = 0</td>\n                    <td>1</td>\n                    <td>3</td>\n                    <td>1</td>\n                </tr>\n                <tr>\n                    <td>i = 1</td>\n                    <td>1</td>\n                    <td>5</td>\n                    <td>1</td>\n                </tr>\n                <tr>\n                    <td>i = 2</td>\n                    <td>4</td>\n                    <td>2</td>\n                    <td>1</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"minPathSum-right\">\n        <p>dp结果集</p>\n        <table>\n            <thead>\n                <th>i / k</th>\n                <th>k = 0</th>\n                <th>k = 1</th>\n                <th>k = 2</th>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>i = 0</td>\n                    <td>1</td>\n                    <td>4</td>\n                    <td>5</td>\n                </tr>\n                <tr>\n                    <td>i = 1</td>\n                    <td>2</td>\n                    <td>7 (上面dp值与左边dp值比较取最小 + grid)</td>\n                    <td>6</td>\n                </tr>\n                <tr>\n                    <td>i = 2</td>\n                    <td>6</td>\n                    <td>8</td>\n                    <td>7</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 二维数组的动态规划\n * 当前 dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);\n * 第一行只能够向右走， 所以  dp[i][j] = grid[i][j] + dp[i][j - 1];\n * 第一列只能向下走，所以 dp[i][j] = grid[i][j] + dp[i - 1][j]\n */</span>\n<span class=\"token keyword\">var</span> minPathSum <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> rows <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> columns <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> columns<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n        dp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>rows <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>columns <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/minimum-path-sum/\" target=\"_blank\" rel=\"noopener\">最小路径和</a></p>\n<p>这道题跟<a href=\"./三角形最小路径和.md\">三角形最小路径和</a>类似</p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>\n<p>示例：</p>\n<pre><code class=\"html\">输入:\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 7\n解释: 因为路径 1→3→1→1→1 的总和最小。</code></pre>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>这是一道二维数组的动态规划题目， 左边表示输入， 右边表示dp 结果集</p>\n<ul>\n<li>第一行只能够向右走， 所以  <code>dp[i][j] = grid[i][j] + dp[i][j - 1];</code></li>\n<li>第一列只能向下走，所以 <code>dp[i][j] = grid[i][j] + dp[i - 1][j]</code></li>\n<li>其余符合 <code>dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1])</code>;</li>\n</ul>\n<style>\n.minPathSum {\n    display: flex;\n    flex-direction: row;\n}\n.minPathSum-right {\n    margin-left: 10px\n}\n@media screen and (max-width: 800px) {\n    .minPathSum {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .minPathSum-right {\n        margin-left: 0px\n    }\n}\n</style>w\n\n<div class=\"minPathSum\">\n    <div class=\"left\">\n        <p>输入</p>\n        <table>\n            <thead>\n                <th>i / k</th>\n                <th>k = 0</th>\n                <th>k = 1</th>\n                <th>k = 2</th>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>i = 0</td>\n                    <td>1</td>\n                    <td>3</td>\n                    <td>1</td>\n                </tr>\n                <tr>\n                    <td>i = 1</td>\n                    <td>1</td>\n                    <td>5</td>\n                    <td>1</td>\n                </tr>\n                <tr>\n                    <td>i = 2</td>\n                    <td>4</td>\n                    <td>2</td>\n                    <td>1</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"minPathSum-right\">\n        <p>dp结果集</p>\n        <table>\n            <thead>\n                <th>i / k</th>\n                <th>k = 0</th>\n                <th>k = 1</th>\n                <th>k = 2</th>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>i = 0</td>\n                    <td>1</td>\n                    <td>4</td>\n                    <td>5</td>\n                </tr>\n                <tr>\n                    <td>i = 1</td>\n                    <td>2</td>\n                    <td>7 (上面dp值与左边dp值比较取最小 + grid)</td>\n                    <td>6</td>\n                </tr>\n                <tr>\n                    <td>i = 2</td>\n                    <td>6</td>\n                    <td>8</td>\n                    <td>7</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">/**\n * 二维数组的动态规划\n * 当前 dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);\n * 第一行只能够向右走， 所以  dp[i][j] = grid[i][j] + dp[i][j - 1];\n * 第一列只能向下走，所以 dp[i][j] = grid[i][j] + dp[i - 1][j]\n */\nvar minPathSum = function(grid) {\n    let rows = grid.length;\n    let columns = grid[0].length;\n    let dp = [];\n\n    for(let i = 0; i &lt; rows; i++) {\n        let temp = [];\n        for(let j = 0; j &lt; columns; j++) {\n            if(i == 0 &amp;&amp; j == 0) {\n                temp.push(grid[i][j]);\n            } else if(j == 0) {\n                temp.push(grid[i][j] + dp[i - 1][j]);\n            } else if(i == 0) {\n                temp.push(grid[i][j] + temp[j - 1])\n            } else {\n                temp.push(grid[i][j] + Math.min(dp[i - 1][j], temp[j - 1]))\n            }\n\n        }\n        dp.push(temp);\n    }\n    return dp[rows - 1][columns - 1]\n};</code></pre>\n"},{"title":"有序链表转换二叉搜索树","date":"2020-08-18T10:38:08.000Z","type":"algorithm","_content":"\n[有序链表转换二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/)\n\n**这道题跟[将有序数组转换为二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/)有点相似**\n\n## 题目描述\n\n给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。\n\n本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1\n\n### 示例1\n\n```html\n给定的有序链表： [-10, -3, 0, 5, 9],\n\n一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n\n```\n\n\n## 分析\n\n* 先把**链表**遍历出来，然后进行下面的操作\n* [具体分析可以看](https://chow_bill.gitee.io/2020/07/03/108-%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/)\n\n\n## 代码\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {TreeNode}\n */\nvar sortedListToBST = function(head) {\n    let array = getSortedList(head);\n    let res = toBST(array);\n    return res;\n};\n\nvar getSortedList = function(head) {\n    let result = [];\n    let p = head;\n\n    while(p != null) {\n        result.push(p.val);\n        p = p.next;\n    }\n\n    return result;    \n}\n\nvar toBST = function(array) {\n    let length = array.length;\n\n    if(length == 0) {\n        return null\n    }\n\n    let mid = Math.floor(length / 2);\n    let left = array.slice(0, mid);\n    let right = array.slice(mid + 1, length);\n\n    let root = new TreeNode(array[mid]);\n    root.left = toBST(left);\n    root.right = toBST(right);\n\n    return root;\n}\n```\n","source":"_posts/有序链表转换二叉搜索树.md","raw":"---\ntitle: 有序链表转换二叉搜索树\ndate: 2020-08-18 10:38:08\ntags: [algorithm-递归, algorithm-二叉树]\ntype: algorithm\n---\n\n[有序链表转换二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/)\n\n**这道题跟[将有序数组转换为二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/)有点相似**\n\n## 题目描述\n\n给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。\n\n本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1\n\n### 示例1\n\n```html\n给定的有序链表： [-10, -3, 0, 5, 9],\n\n一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n\n```\n\n\n## 分析\n\n* 先把**链表**遍历出来，然后进行下面的操作\n* [具体分析可以看](https://chow_bill.gitee.io/2020/07/03/108-%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/)\n\n\n## 代码\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {TreeNode}\n */\nvar sortedListToBST = function(head) {\n    let array = getSortedList(head);\n    let res = toBST(array);\n    return res;\n};\n\nvar getSortedList = function(head) {\n    let result = [];\n    let p = head;\n\n    while(p != null) {\n        result.push(p.val);\n        p = p.next;\n    }\n\n    return result;    \n}\n\nvar toBST = function(array) {\n    let length = array.length;\n\n    if(length == 0) {\n        return null\n    }\n\n    let mid = Math.floor(length / 2);\n    let left = array.slice(0, mid);\n    let right = array.slice(mid + 1, length);\n\n    let root = new TreeNode(array[mid]);\n    root.left = toBST(left);\n    root.right = toBST(right);\n\n    return root;\n}\n```\n","slug":"有序链表转换二叉搜索树","published":1,"updated":"2023-09-22T04:24:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgs004wmroj2efc8yvb","content":"<p><a href=\"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">有序链表转换二叉搜索树</a></p>\n<p><strong>这道题跟<a href=\"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">将有序数组转换为二叉搜索树</a>有点相似</strong></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p>\n<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1</p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><pre class=\" language-html\"><code class=\"language-html\">给定的有序链表： [-10, -3, 0, 5, 9],\n\n一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>先把<strong>链表</strong>遍历出来，然后进行下面的操作</li>\n<li><a href=\"https://chow_bill.gitee.io/2020/07/03/108-%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/\" target=\"_blank\" rel=\"noopener\">具体分析可以看</a></li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @param {ListNode} head\n * @return {TreeNode}\n */</span>\n<span class=\"token keyword\">var</span> sortedListToBST <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token function\">getSortedList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">toBST</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> getSortedList <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> toBST <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">toBST</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">toBST</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">有序链表转换二叉搜索树</a></p>\n<p><strong>这道题跟<a href=\"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">将有序数组转换为二叉搜索树</a>有点相似</strong></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p>\n<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1</p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><pre><code class=\"html\">给定的有序链表： [-10, -3, 0, 5, 9],\n\n一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>先把<strong>链表</strong>遍历出来，然后进行下面的操作</li>\n<li><a href=\"https://chow_bill.gitee.io/2020/07/03/108-%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/\" target=\"_blank\" rel=\"noopener\">具体分析可以看</a></li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {TreeNode}\n */\nvar sortedListToBST = function(head) {\n    let array = getSortedList(head);\n    let res = toBST(array);\n    return res;\n};\n\nvar getSortedList = function(head) {\n    let result = [];\n    let p = head;\n\n    while(p != null) {\n        result.push(p.val);\n        p = p.next;\n    }\n\n    return result;    \n}\n\nvar toBST = function(array) {\n    let length = array.length;\n\n    if(length == 0) {\n        return null\n    }\n\n    let mid = Math.floor(length / 2);\n    let left = array.slice(0, mid);\n    let right = array.slice(mid + 1, length);\n\n    let root = new TreeNode(array[mid]);\n    root.left = toBST(left);\n    root.right = toBST(right);\n\n    return root;\n}</code></pre>\n"},{"title":"有效括号","date":"2020-08-14T11:34:28.000Z","type":"algorithm","_content":"\n[有效的括号](https://leetcode-cn.com/problems/valid-parentheses/)\n\n## 题目描述\n\n给定一个只包括 `'('，')'，'{'，'}'，'['，']'` 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n\n**注意**空字符串可被认为是有效字符串。\n\n### 示例\n\n示例1： \n\n```html\n输入: \"()\"\n输出: true\n```\n\n示例2： \n\n```html\n输入: \"()[]{}\"\n输出: true\n```\n\n示例3： \n\n```html\n输入: \"([)]\"\n输出: false\n```\n\n示例4： \n\n```html\n输入: \"{[]}\"\n输出: true\n```\n\n## 思路\n\n* 遍历 `s`\n* 当遇到`[`, `(`, `{` 这些括号的时候就入栈。\n* 当遇到`]`, `)`, `}` 这些括号的时候就出栈，出栈 判断与当前`s[i]` 是否匹配为闭合的括号, 即是否是一对。出栈`(`, 当前`s[i]`为`)`则为一对\n\n## 代码\n\n```js\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    let length = s.length;\n    // 做优化，看了答案后添加\n    if(length % 2 == 1) {\n        return false;\n    }\n\n    // 建立字典， \n    let map = {\n        \"{\": \"}\",\n        \"(\": \")\",\n        \"[\": \"]\",\n    }\n\n    let inqueue = [\"{\", \"(\", \"[\"];\n    let stack = [];\n\n    for(let i = 0; i < s.length; i++) {\n        const current = s[i];\n        // 判断以下是否属于开合 的括号\n        if(inqueue.includes(current)) {\n            stack.unshift(current);\n            continue;\n        }\n\n        // 出栈， 判断当前出栈的括号是否跟 s[i] 为一对，\n        let pop = stack.shift();\n        if(current !== map[pop]) {\n            return false\n        } \n    }\n    // 最后判断以下栈里面还有没有数据，有的话那就代表还有没有匹配的括号\n    return stack.length == 0 ;\n};\n```\n\n","source":"_posts/有效括号.md","raw":"---\ntitle: 有效括号\ndate: 2020-08-14 11:34:28\ntags: algorithm-栈\ntype: algorithm\n---\n\n[有效的括号](https://leetcode-cn.com/problems/valid-parentheses/)\n\n## 题目描述\n\n给定一个只包括 `'('，')'，'{'，'}'，'['，']'` 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n\n**注意**空字符串可被认为是有效字符串。\n\n### 示例\n\n示例1： \n\n```html\n输入: \"()\"\n输出: true\n```\n\n示例2： \n\n```html\n输入: \"()[]{}\"\n输出: true\n```\n\n示例3： \n\n```html\n输入: \"([)]\"\n输出: false\n```\n\n示例4： \n\n```html\n输入: \"{[]}\"\n输出: true\n```\n\n## 思路\n\n* 遍历 `s`\n* 当遇到`[`, `(`, `{` 这些括号的时候就入栈。\n* 当遇到`]`, `)`, `}` 这些括号的时候就出栈，出栈 判断与当前`s[i]` 是否匹配为闭合的括号, 即是否是一对。出栈`(`, 当前`s[i]`为`)`则为一对\n\n## 代码\n\n```js\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    let length = s.length;\n    // 做优化，看了答案后添加\n    if(length % 2 == 1) {\n        return false;\n    }\n\n    // 建立字典， \n    let map = {\n        \"{\": \"}\",\n        \"(\": \")\",\n        \"[\": \"]\",\n    }\n\n    let inqueue = [\"{\", \"(\", \"[\"];\n    let stack = [];\n\n    for(let i = 0; i < s.length; i++) {\n        const current = s[i];\n        // 判断以下是否属于开合 的括号\n        if(inqueue.includes(current)) {\n            stack.unshift(current);\n            continue;\n        }\n\n        // 出栈， 判断当前出栈的括号是否跟 s[i] 为一对，\n        let pop = stack.shift();\n        if(current !== map[pop]) {\n            return false\n        } \n    }\n    // 最后判断以下栈里面还有没有数据，有的话那就代表还有没有匹配的括号\n    return stack.length == 0 ;\n};\n```\n\n","slug":"有效括号","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgu0050mrojgqt457vi","content":"<p><a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">有效的括号</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个只包括 <code>&#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>\n<p><strong>注意</strong>空字符串可被认为是有效字符串。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>示例1： </p>\n<pre class=\" language-html\"><code class=\"language-html\">输入: \"()\"\n输出: true</code></pre>\n<p>示例2： </p>\n<pre class=\" language-html\"><code class=\"language-html\">输入: \"()[]{}\"\n输出: true</code></pre>\n<p>示例3： </p>\n<pre class=\" language-html\"><code class=\"language-html\">输入: \"([)]\"\n输出: false</code></pre>\n<p>示例4： </p>\n<pre class=\" language-html\"><code class=\"language-html\">输入: \"{[]}\"\n输出: true</code></pre>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>遍历 <code>s</code></li>\n<li>当遇到<code>[</code>, <code>(</code>, <code>{</code> 这些括号的时候就入栈。</li>\n<li>当遇到<code>]</code>, <code>)</code>, <code>}</code> 这些括号的时候就出栈，出栈 判断与当前<code>s[i]</code> 是否匹配为闭合的括号, 即是否是一对。出栈<code>(</code>, 当前<code>s[i]</code>为<code>)</code>则为一对</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {string} s\n * @return {boolean}\n */</span>\n<span class=\"token keyword\">var</span> isValid <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 做优化，看了答案后添加</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 建立字典， </span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"{\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> inqueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"{\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 判断以下是否属于开合 的括号</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inqueue<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 出栈， 判断当前出栈的括号是否跟 s[i] 为一对，</span>\n        <span class=\"token keyword\">let</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">!==</span> map<span class=\"token punctuation\">[</span>pop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 最后判断以下栈里面还有没有数据，有的话那就代表还有没有匹配的括号</span>\n    <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">有效的括号</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个只包括 <code>&#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>\n<p><strong>注意</strong>空字符串可被认为是有效字符串。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>示例1： </p>\n<pre><code class=\"html\">输入: &quot;()&quot;\n输出: true</code></pre>\n<p>示例2： </p>\n<pre><code class=\"html\">输入: &quot;()[]{}&quot;\n输出: true</code></pre>\n<p>示例3： </p>\n<pre><code class=\"html\">输入: &quot;([)]&quot;\n输出: false</code></pre>\n<p>示例4： </p>\n<pre><code class=\"html\">输入: &quot;{[]}&quot;\n输出: true</code></pre>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>遍历 <code>s</code></li>\n<li>当遇到<code>[</code>, <code>(</code>, <code>{</code> 这些括号的时候就入栈。</li>\n<li>当遇到<code>]</code>, <code>)</code>, <code>}</code> 这些括号的时候就出栈，出栈 判断与当前<code>s[i]</code> 是否匹配为闭合的括号, 即是否是一对。出栈<code>(</code>, 当前<code>s[i]</code>为<code>)</code>则为一对</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    let length = s.length;\n    // 做优化，看了答案后添加\n    if(length % 2 == 1) {\n        return false;\n    }\n\n    // 建立字典， \n    let map = {\n        &quot;{&quot;: &quot;}&quot;,\n        &quot;(&quot;: &quot;)&quot;,\n        &quot;[&quot;: &quot;]&quot;,\n    }\n\n    let inqueue = [&quot;{&quot;, &quot;(&quot;, &quot;[&quot;];\n    let stack = [];\n\n    for(let i = 0; i &lt; s.length; i++) {\n        const current = s[i];\n        // 判断以下是否属于开合 的括号\n        if(inqueue.includes(current)) {\n            stack.unshift(current);\n            continue;\n        }\n\n        // 出栈， 判断当前出栈的括号是否跟 s[i] 为一对，\n        let pop = stack.shift();\n        if(current !== map[pop]) {\n            return false\n        } \n    }\n    // 最后判断以下栈里面还有没有数据，有的话那就代表还有没有匹配的括号\n    return stack.length == 0 ;\n};</code></pre>\n"},{"title":"正则表达式","date":"2021-06-14T23:00:00.000Z","_content":"\n## 正则表达式\n\n正则表达式是描述一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。\n\n我们判断字符串是否含有子串，我们一般会用到`indexOf` 还有`includes`方法, 比如 `\"abc\".includes(\"ab\")` 或者 `\"abc\".indexOf(ab)`, 那么这两个有什么区别？\n\n\n\n**includes 返回的是Boolean值;**\n\n**而indexOf 返回的是子串在字符串首次出现的下标，若没有出现返回-1**\n\n\n除了以上两种方法，我们还有正则表达式，`/ab/.test(\"abc\")`\n\n### 先来看几个常用特殊的字符\n\n\n1.  `*` 代表前面的字符`0次`或`多次`， 例子 `/ac*/.test(\"abc\")`\n\n<details>\n<summary><mark>说明</mark></summary>\n\nac*能匹配“a”，也能匹配“ac”以及“acc”。*等价于{0,}。\n</details>\n\n2.  `+` 代表前面的字符`1次`或`多次`， `/ac+/.test(\"abc\")`\n\n<details>\n<summary><mark>说明 </mark></summary>\n\nac+ 能匹配“ac”以及“acc”, 但不能匹配\"a\", +等价于{1,}。\n</details>\n\n3.  `?` 代表前面的字符`0次`或`1次`,   例子 `/ac?/.test(\"abc\")`\n例如，“do(es)?”可以匹配“do”或“does”。?等价于{0,1}。\n4. `/d` 匹配数字\n5. `\\w` 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]\n6. `\\s` 匹配所有空白符，包括换行\n7. `\\S` 匹配非空白符，不包括换行。\n8. `[\\s\\S]` 匹配所有\n\n\n### 基础\n\n#### 字符组 []\n\n**字符组**：允许匹配一组可能出现的字符。比如 [Jj], 那么既可以匹配`J`，也能匹配`j`, 例子\n`/[Jj]ava[Ss]cript/.test(\"JavaScript\")`\n\n#### 区间\n\n在字符组中用`-`代表区间，即`[0-9]`表示的是`[0123456789]`, 同理`[a-z]`表示的是`a到z`任意的数字\n\n#### 字符转义\n\n上面所说，`[]`表示字符组， 而`-` 表示区间连接符，那么如果要匹配`[]` 那么就需要使用转义符 `\\`，\n<details>\n<summary><mark>答案 </mark></summary>\n\n`/\\[\\]/.test(\"[]\")`\n</details>\n\n#### 取反 [^]\n\n`true` 取反 就是`false`, 在正则这里的取反是指 **不会出现的字符**\n\n比如： 匹配不包含数字的字符串 `/[^0-9]/.test(\"abc\")`,\n\n**注意：^符号要在中括号内，不然^代表的是匹配以^后跟随的的字符开头的字符串**，`/^gg/.test(\"gg = good game\")`, 这里表示的是以`gg开头`的匹配式。\n\n这里顺带说一下 `$`, 表示以`$`前面的字符组做结尾的匹配式 `/world$/.test(\"hello world\")`\n\n<details>\n    <summary>不含小写字母的数据</summary>\n\n    `/[^a-z]/.test(\"0123123ADFADJFKL\")`\n</details>\n\n#### 重复\n\n在一个字符组后加上`{N}` 就可以表示在它之前的字符组出现`N`次。例如 `/\\d{3}/` ,表示数字重复3次\n\n假设要匹配 电话号码，那么应该怎么做， 电话号码的格式是`020-12345678`\n\n<details>\n    <summary>匹配电话号码</summary>\n\n    `/\\d{3}-\\d{8}/`\n</details>\n\n\n##### 重复区间 {M,N}\n\n可能有时候，我们不知道具体要匹配字符组要重复的次数，比如身份证有15位也有18位的。那么这时候就可以用重复区间， \n\n`语法：{M,N}，M是下界而N是上界。`\n\n\n> 练习 匹配所有的手机号\n\n```tsx\n\n我们知道手机号必须为11位数，并符合下列几个规则：\n\n第一位数字必须以1开头，第二位数字可以是[3,4,5,7,8]中的任意一个，后面9个数是[0-9]中的任意一个数字\n```\n\n<details>\n    <summary>匹配所有的手机号</summary>\n\n    `/1[34578]\\d{9}/`\n</details>\n\n\n### 贪婪匹配与非贪婪匹配\n\n贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配 (`*`)；\n\n非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配 (`?`)；\n\n例子： `<div>12312</div><div>hello world</div>`\n\n贪婪匹配： `\"<div>12312</div><div>hello world</div>\".match(/<div>.*</div>/)`, 会匹配到 `<div>12312</div><div>hello world</div>`\n\n非贪婪匹配： `\"<div>12312</div><div>hello world</div>\".match(/<div>.*?</div>/)`, 会匹配到 `<div>12312</div>`, 这是因为非贪婪匹配，匹配到第一个子串就结束了,不再往后匹配了\n\n### 分组\n\n**分组：使用的是（），分组一般用在提取匹配的字符串的子串**。 举个例子： `020-12345678` 这是我们的电话号码，但我想提取他的`区号`和`真实的电话号码`，那么我们只需要`/(\\d{3})-(\\d{8})/`即可\n\n**练习1：** 如果我想要提取`<div>hello world</div>`\n<details>\n    <summary> 答案</summary>\n\n    \"<div>hello world</div>\".match(/<div>(.*?)<\\/div>/)\n\n    比较：\n    1. <div>.*?</div>\n    2. <div>(.*?)</div>\n</details>\n\n**练习2：** 如果 我们拥有日期的格式为 `2020-05-20` 或者 `2020 05 20` 或者 `2020/05/20` 这样的格式，我们想要获取他的`年月日` 应该怎么写\n\n<details>\n    <summary> 答案</summary>\n    /(\\d{4})[\\-\\s\\/](\\d{2})[\\-\\s\\/](\\d{2})/\n\n    测试一下\n\n    \"2020-05-20\".match(/(\\d{4})[\\-\\s\\/](\\d{2})[\\-\\s\\/](\\d{2})/)\n\n    中间分隔符是[\\-\\s\\/], 我们换成[\\s\\S]是否也可以？\n\n</details>\n\n\n那如果日期的格式是 2020-5-20 或者是 2021-2-2 那应该怎么改造他\n<details>\n    <summary> 答案</summary>\n    /(\\d{4})[-](\\d{1,2})[-](\\d{1,2})/\n\n</details>\n\n### 非捕获分组\n\n有时候，我们并不需要捕获某个分组的内容，但是又想使用分组的特性。即我不要这个分组。\n**非捕获分组： (?:表达式)**\n\n例子： 现在有 电话号码 `020-12345678` 或者`tel:12345678`, 我只要要他的电话号码，那么`(?:\\d{3}|tel)[-:](\\d{8})`\n\n\n### 分组回溯引用\n\n分组回溯引用的意思就是，我能使用之前匹配的分组, 用`\\1`表示第一个分组， `\\2`表示第二个分组，如此类推\n\n例如，要匹配一段 HTML 代码，比如：`<font>hello world</font>`，我们会写成 `/<\\w+>.*?<\\/\\w+>/`, 这样能匹配`<font>hello world</font>`， 但是如果数据改成这样：`<font>hello world</bar>`, `font` 和 `bar` 不是一对正常的标签，所以上面的表达式不太正确， 这个时候就可以使用**分组回溯引用**, `/<(\\w+)>.*?<\\/\\1>/`\n\n**练习：** 如果要匹配符合 `ab ba` 这种关系的单词, 应该怎么写?\n\n匹配`abba`, `asffs`\n\n<details>\n    <summary> 答案</summary>\n    (\\w+)(\\w+)\\2\\1\n\n</details>\n\n### 正向先行断言\n\n**正向先行断言**：`(?=表达式)`，指在某个位置向右看，表示所在位置右侧必须能匹配表达式，但匹配的表达式不会出现在结果组里面\n\n例如：\n\n我喜欢你 我喜欢 我喜欢我 喜欢 喜欢你\n\n如果要取出`喜欢`两个字，要求这个喜欢后面有你，这个时候就要这么写：`喜欢(?=你)`，这就是正向先行断言。\n\n看这段正则表达式`(?=.*?[a-z])(?=.*?[A-Z]).+`, 这段正则能够匹配**包含至少一个大小写字母的字符串**， 把正则拆开就是 \n\n*  `(?=)` 说明是`后面必须是什么东西`，\n*  `.*?` 表示 `任意东西`\n*  `[a-z]` 表示 `a-z` 的小写字母\n\n结合就是 必须包含`a到z`的任意字符串\n\n> 练习: 密码强度验证规则如下:\n\n* 至少一个大写字母\n* 至少一个小写字母\n* 至少一个数字\n* 至少8个字符\n\n<details>\n    <summary> 答案</summary>\n    /(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).{8}/\n\n</details>\n\n### 反向先行断言\n\n**反向先行断言**：`(?!表达式)`的作用是保证右边不能出现某字符。\n\n用上面的例子就是，如果要取出`喜欢`两个字，**要求这个喜欢后面没有你**，这个时候就要这么写：`喜欢(?!你)`，这就是反向先行断言。\n\n我觉得：正向先行断言跟反向先行断言基本类似，**只是一个取反的操作**\n\n> 练习： 排除qq邮箱\n\n<details>\n    <summary> 答案</summary>\n    /@(?!qq).*/\n\n    @后面没有qq\n</details>\n\n> 用正向现行断言以及反向现行断言 千分位格式化数字\n\n`\"100000\".replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')`\n\n解析: `/\\B(?=(\\d{3})+(?!\\d))`\n\n* `\\B`, 首先先理解 `\\b`, 在字符串中 `\"here is a word\"`, 在这个字符串中其实用很多`\\b`, 就是单词与单词之间有`\\b`，所以如果用 `/\\bhere\\b/` 可以匹配到`here`这个单词,但如果字符串是`hereisaword`, 这样就匹配不了`here`了，我们可以简单是想象成**空格符**。\n`\\B`是只非字间, 和 `\\d`与`\\D`, `\\w` 与 `\\W` 的取反关系一样\n* `(?=(\\d{3}))`: 先分组，3个数字为一组，加正向先行断言也就是 **必须包含3个数字为一组的字符串**\n* `+` 一次或多次\n* `(?!\\d)`: 反向先行断言，**后面必须不能包含数字**\n* 结合就是 `3个数字为一组的子串后面必须没有数字`\n\n### 正向后行断言\n\n先行断言和后行断言只有一个区别，即**先行断言从左往右看，后行断言从右往左看。**\n\n**正向后行断言**：`(?<=表达式)`，指在某个位置向左看，表示所在位置左侧必须能匹配表达式\n\n例如：如果要取出`喜欢`两个字，要求**喜欢的前面有我，后面有你**，这个时候就要这么写：`(?<=我)喜欢(?=你)`。\n\n### 反向后行断言\n\n**反向后行断言**：`(?<!表达式)`，指在某个位置向左看，表示所在位置左侧不能匹配表达式\n\n用上面的例子就是， 我喜欢你， 喜欢前面没有我\n\n例子： 匹配一个 $ 符号: `(?<!\\$)\\$[^\\$]*\\$(?!.)`\n\n解析： \n* `(?<!\\$)\\$`: `$` 前面没有`$`\n* `\\$(?!$)`: `$` 的后面没有`$`\n* `[^\\$]*`: 除了`$` 的任意字符\n\n\n\n### 应用\n\n* 日期转化, 获取年月日，时分秒\n* 获取url中的参数\n* trim() 函数\n* 模板\n\n```tsx\nfunction getUrlParams(url) {\n    const pattern = new RegExp(/(\\w+)=(\\w+)/, 'gi')\n    let res = {};\n    str.replace(reg, (match, p1, p2) => {\n        res[p1] = p2;\n        return `${p1}=${p2}`\n    })\n    return res;\n}\n\ngetUrlParams(\"https://www.baidu.com?username=admin&password=88888888&code=1234\")\n```\n\n> trim()\n\n```tsx\nfunction trim(str, type: \"left\" | \"right\" | \"both\" | \"all\") {\n    if (type === 'left') {\n        return str.replace(/(^\\s*)/g, \"\");\n    }\n    if (type === 'right') {\n        return str.replace(/(\\s*$)/g, \"\")\n    }\n    if (type === 'both') {\n        return str.replace(/(^\\s*)|(\\s*$)/g, \"\"); \n    }\n    return str.replace(/(\\s*)/g, \"\");\n}\n```\n\n> 简易模板引擎\n\n```tsx\n\nconst data = {name: 'Bill', age: 111};\nconst template = `\n    <div>\n        <p>my name is {{name}}</p>\n        <p>年龄 {{age}}</p>\n    </div>\n`\nfunction generate(template, mapData) {\n    const reg = new RegExp(/\\{\\{(.*?)\\}\\}/, \"g\");\n    const res = template.replace(reg, (match, p1) => mapData[p1])\n    return res;\n}\nconst a = generate(template, data);\ndocument.body.innerHTML += a\n\n```\n\n\n...完\n\n","source":"_posts/正则表达式.md","raw":"---\ntitle: 正则表达式\ndate: 2021-06-14 23:00\ntags: [正则]\ncategories: [正则]\n---\n\n## 正则表达式\n\n正则表达式是描述一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。\n\n我们判断字符串是否含有子串，我们一般会用到`indexOf` 还有`includes`方法, 比如 `\"abc\".includes(\"ab\")` 或者 `\"abc\".indexOf(ab)`, 那么这两个有什么区别？\n\n\n\n**includes 返回的是Boolean值;**\n\n**而indexOf 返回的是子串在字符串首次出现的下标，若没有出现返回-1**\n\n\n除了以上两种方法，我们还有正则表达式，`/ab/.test(\"abc\")`\n\n### 先来看几个常用特殊的字符\n\n\n1.  `*` 代表前面的字符`0次`或`多次`， 例子 `/ac*/.test(\"abc\")`\n\n<details>\n<summary><mark>说明</mark></summary>\n\nac*能匹配“a”，也能匹配“ac”以及“acc”。*等价于{0,}。\n</details>\n\n2.  `+` 代表前面的字符`1次`或`多次`， `/ac+/.test(\"abc\")`\n\n<details>\n<summary><mark>说明 </mark></summary>\n\nac+ 能匹配“ac”以及“acc”, 但不能匹配\"a\", +等价于{1,}。\n</details>\n\n3.  `?` 代表前面的字符`0次`或`1次`,   例子 `/ac?/.test(\"abc\")`\n例如，“do(es)?”可以匹配“do”或“does”。?等价于{0,1}。\n4. `/d` 匹配数字\n5. `\\w` 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]\n6. `\\s` 匹配所有空白符，包括换行\n7. `\\S` 匹配非空白符，不包括换行。\n8. `[\\s\\S]` 匹配所有\n\n\n### 基础\n\n#### 字符组 []\n\n**字符组**：允许匹配一组可能出现的字符。比如 [Jj], 那么既可以匹配`J`，也能匹配`j`, 例子\n`/[Jj]ava[Ss]cript/.test(\"JavaScript\")`\n\n#### 区间\n\n在字符组中用`-`代表区间，即`[0-9]`表示的是`[0123456789]`, 同理`[a-z]`表示的是`a到z`任意的数字\n\n#### 字符转义\n\n上面所说，`[]`表示字符组， 而`-` 表示区间连接符，那么如果要匹配`[]` 那么就需要使用转义符 `\\`，\n<details>\n<summary><mark>答案 </mark></summary>\n\n`/\\[\\]/.test(\"[]\")`\n</details>\n\n#### 取反 [^]\n\n`true` 取反 就是`false`, 在正则这里的取反是指 **不会出现的字符**\n\n比如： 匹配不包含数字的字符串 `/[^0-9]/.test(\"abc\")`,\n\n**注意：^符号要在中括号内，不然^代表的是匹配以^后跟随的的字符开头的字符串**，`/^gg/.test(\"gg = good game\")`, 这里表示的是以`gg开头`的匹配式。\n\n这里顺带说一下 `$`, 表示以`$`前面的字符组做结尾的匹配式 `/world$/.test(\"hello world\")`\n\n<details>\n    <summary>不含小写字母的数据</summary>\n\n    `/[^a-z]/.test(\"0123123ADFADJFKL\")`\n</details>\n\n#### 重复\n\n在一个字符组后加上`{N}` 就可以表示在它之前的字符组出现`N`次。例如 `/\\d{3}/` ,表示数字重复3次\n\n假设要匹配 电话号码，那么应该怎么做， 电话号码的格式是`020-12345678`\n\n<details>\n    <summary>匹配电话号码</summary>\n\n    `/\\d{3}-\\d{8}/`\n</details>\n\n\n##### 重复区间 {M,N}\n\n可能有时候，我们不知道具体要匹配字符组要重复的次数，比如身份证有15位也有18位的。那么这时候就可以用重复区间， \n\n`语法：{M,N}，M是下界而N是上界。`\n\n\n> 练习 匹配所有的手机号\n\n```tsx\n\n我们知道手机号必须为11位数，并符合下列几个规则：\n\n第一位数字必须以1开头，第二位数字可以是[3,4,5,7,8]中的任意一个，后面9个数是[0-9]中的任意一个数字\n```\n\n<details>\n    <summary>匹配所有的手机号</summary>\n\n    `/1[34578]\\d{9}/`\n</details>\n\n\n### 贪婪匹配与非贪婪匹配\n\n贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配 (`*`)；\n\n非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配 (`?`)；\n\n例子： `<div>12312</div><div>hello world</div>`\n\n贪婪匹配： `\"<div>12312</div><div>hello world</div>\".match(/<div>.*</div>/)`, 会匹配到 `<div>12312</div><div>hello world</div>`\n\n非贪婪匹配： `\"<div>12312</div><div>hello world</div>\".match(/<div>.*?</div>/)`, 会匹配到 `<div>12312</div>`, 这是因为非贪婪匹配，匹配到第一个子串就结束了,不再往后匹配了\n\n### 分组\n\n**分组：使用的是（），分组一般用在提取匹配的字符串的子串**。 举个例子： `020-12345678` 这是我们的电话号码，但我想提取他的`区号`和`真实的电话号码`，那么我们只需要`/(\\d{3})-(\\d{8})/`即可\n\n**练习1：** 如果我想要提取`<div>hello world</div>`\n<details>\n    <summary> 答案</summary>\n\n    \"<div>hello world</div>\".match(/<div>(.*?)<\\/div>/)\n\n    比较：\n    1. <div>.*?</div>\n    2. <div>(.*?)</div>\n</details>\n\n**练习2：** 如果 我们拥有日期的格式为 `2020-05-20` 或者 `2020 05 20` 或者 `2020/05/20` 这样的格式，我们想要获取他的`年月日` 应该怎么写\n\n<details>\n    <summary> 答案</summary>\n    /(\\d{4})[\\-\\s\\/](\\d{2})[\\-\\s\\/](\\d{2})/\n\n    测试一下\n\n    \"2020-05-20\".match(/(\\d{4})[\\-\\s\\/](\\d{2})[\\-\\s\\/](\\d{2})/)\n\n    中间分隔符是[\\-\\s\\/], 我们换成[\\s\\S]是否也可以？\n\n</details>\n\n\n那如果日期的格式是 2020-5-20 或者是 2021-2-2 那应该怎么改造他\n<details>\n    <summary> 答案</summary>\n    /(\\d{4})[-](\\d{1,2})[-](\\d{1,2})/\n\n</details>\n\n### 非捕获分组\n\n有时候，我们并不需要捕获某个分组的内容，但是又想使用分组的特性。即我不要这个分组。\n**非捕获分组： (?:表达式)**\n\n例子： 现在有 电话号码 `020-12345678` 或者`tel:12345678`, 我只要要他的电话号码，那么`(?:\\d{3}|tel)[-:](\\d{8})`\n\n\n### 分组回溯引用\n\n分组回溯引用的意思就是，我能使用之前匹配的分组, 用`\\1`表示第一个分组， `\\2`表示第二个分组，如此类推\n\n例如，要匹配一段 HTML 代码，比如：`<font>hello world</font>`，我们会写成 `/<\\w+>.*?<\\/\\w+>/`, 这样能匹配`<font>hello world</font>`， 但是如果数据改成这样：`<font>hello world</bar>`, `font` 和 `bar` 不是一对正常的标签，所以上面的表达式不太正确， 这个时候就可以使用**分组回溯引用**, `/<(\\w+)>.*?<\\/\\1>/`\n\n**练习：** 如果要匹配符合 `ab ba` 这种关系的单词, 应该怎么写?\n\n匹配`abba`, `asffs`\n\n<details>\n    <summary> 答案</summary>\n    (\\w+)(\\w+)\\2\\1\n\n</details>\n\n### 正向先行断言\n\n**正向先行断言**：`(?=表达式)`，指在某个位置向右看，表示所在位置右侧必须能匹配表达式，但匹配的表达式不会出现在结果组里面\n\n例如：\n\n我喜欢你 我喜欢 我喜欢我 喜欢 喜欢你\n\n如果要取出`喜欢`两个字，要求这个喜欢后面有你，这个时候就要这么写：`喜欢(?=你)`，这就是正向先行断言。\n\n看这段正则表达式`(?=.*?[a-z])(?=.*?[A-Z]).+`, 这段正则能够匹配**包含至少一个大小写字母的字符串**， 把正则拆开就是 \n\n*  `(?=)` 说明是`后面必须是什么东西`，\n*  `.*?` 表示 `任意东西`\n*  `[a-z]` 表示 `a-z` 的小写字母\n\n结合就是 必须包含`a到z`的任意字符串\n\n> 练习: 密码强度验证规则如下:\n\n* 至少一个大写字母\n* 至少一个小写字母\n* 至少一个数字\n* 至少8个字符\n\n<details>\n    <summary> 答案</summary>\n    /(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).{8}/\n\n</details>\n\n### 反向先行断言\n\n**反向先行断言**：`(?!表达式)`的作用是保证右边不能出现某字符。\n\n用上面的例子就是，如果要取出`喜欢`两个字，**要求这个喜欢后面没有你**，这个时候就要这么写：`喜欢(?!你)`，这就是反向先行断言。\n\n我觉得：正向先行断言跟反向先行断言基本类似，**只是一个取反的操作**\n\n> 练习： 排除qq邮箱\n\n<details>\n    <summary> 答案</summary>\n    /@(?!qq).*/\n\n    @后面没有qq\n</details>\n\n> 用正向现行断言以及反向现行断言 千分位格式化数字\n\n`\"100000\".replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')`\n\n解析: `/\\B(?=(\\d{3})+(?!\\d))`\n\n* `\\B`, 首先先理解 `\\b`, 在字符串中 `\"here is a word\"`, 在这个字符串中其实用很多`\\b`, 就是单词与单词之间有`\\b`，所以如果用 `/\\bhere\\b/` 可以匹配到`here`这个单词,但如果字符串是`hereisaword`, 这样就匹配不了`here`了，我们可以简单是想象成**空格符**。\n`\\B`是只非字间, 和 `\\d`与`\\D`, `\\w` 与 `\\W` 的取反关系一样\n* `(?=(\\d{3}))`: 先分组，3个数字为一组，加正向先行断言也就是 **必须包含3个数字为一组的字符串**\n* `+` 一次或多次\n* `(?!\\d)`: 反向先行断言，**后面必须不能包含数字**\n* 结合就是 `3个数字为一组的子串后面必须没有数字`\n\n### 正向后行断言\n\n先行断言和后行断言只有一个区别，即**先行断言从左往右看，后行断言从右往左看。**\n\n**正向后行断言**：`(?<=表达式)`，指在某个位置向左看，表示所在位置左侧必须能匹配表达式\n\n例如：如果要取出`喜欢`两个字，要求**喜欢的前面有我，后面有你**，这个时候就要这么写：`(?<=我)喜欢(?=你)`。\n\n### 反向后行断言\n\n**反向后行断言**：`(?<!表达式)`，指在某个位置向左看，表示所在位置左侧不能匹配表达式\n\n用上面的例子就是， 我喜欢你， 喜欢前面没有我\n\n例子： 匹配一个 $ 符号: `(?<!\\$)\\$[^\\$]*\\$(?!.)`\n\n解析： \n* `(?<!\\$)\\$`: `$` 前面没有`$`\n* `\\$(?!$)`: `$` 的后面没有`$`\n* `[^\\$]*`: 除了`$` 的任意字符\n\n\n\n### 应用\n\n* 日期转化, 获取年月日，时分秒\n* 获取url中的参数\n* trim() 函数\n* 模板\n\n```tsx\nfunction getUrlParams(url) {\n    const pattern = new RegExp(/(\\w+)=(\\w+)/, 'gi')\n    let res = {};\n    str.replace(reg, (match, p1, p2) => {\n        res[p1] = p2;\n        return `${p1}=${p2}`\n    })\n    return res;\n}\n\ngetUrlParams(\"https://www.baidu.com?username=admin&password=88888888&code=1234\")\n```\n\n> trim()\n\n```tsx\nfunction trim(str, type: \"left\" | \"right\" | \"both\" | \"all\") {\n    if (type === 'left') {\n        return str.replace(/(^\\s*)/g, \"\");\n    }\n    if (type === 'right') {\n        return str.replace(/(\\s*$)/g, \"\")\n    }\n    if (type === 'both') {\n        return str.replace(/(^\\s*)|(\\s*$)/g, \"\"); \n    }\n    return str.replace(/(\\s*)/g, \"\");\n}\n```\n\n> 简易模板引擎\n\n```tsx\n\nconst data = {name: 'Bill', age: 111};\nconst template = `\n    <div>\n        <p>my name is {{name}}</p>\n        <p>年龄 {{age}}</p>\n    </div>\n`\nfunction generate(template, mapData) {\n    const reg = new RegExp(/\\{\\{(.*?)\\}\\}/, \"g\");\n    const res = template.replace(reg, (match, p1) => mapData[p1])\n    return res;\n}\nconst a = generate(template, data);\ndocument.body.innerHTML += a\n\n```\n\n\n...完\n\n","slug":"正则表达式","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgv0053mrojg9fsdii5","content":"<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p>正则表达式是描述一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>\n<p>我们判断字符串是否含有子串，我们一般会用到<code>indexOf</code> 还有<code>includes</code>方法, 比如 <code>&quot;abc&quot;.includes(&quot;ab&quot;)</code> 或者 <code>&quot;abc&quot;.indexOf(ab)</code>, 那么这两个有什么区别？</p>\n<p><strong>includes 返回的是Boolean值;</strong></p>\n<p><strong>而indexOf 返回的是子串在字符串首次出现的下标，若没有出现返回-1</strong></p>\n<p>除了以上两种方法，我们还有正则表达式，<code>/ab/.test(&quot;abc&quot;)</code></p>\n<h3 id=\"先来看几个常用特殊的字符\"><a href=\"#先来看几个常用特殊的字符\" class=\"headerlink\" title=\"先来看几个常用特殊的字符\"></a>先来看几个常用特殊的字符</h3><ol>\n<li><code>*</code> 代表前面的字符<code>0次</code>或<code>多次</code>， 例子 <code>/ac*/.test(&quot;abc&quot;)</code></li>\n</ol>\n<details>\n<summary><mark>说明</mark></summary>\n\n<p>ac<em>能匹配“a”，也能匹配“ac”以及“acc”。</em>等价于{0,}。</p>\n</details>\n\n<ol start=\"2\">\n<li><code>+</code> 代表前面的字符<code>1次</code>或<code>多次</code>， <code>/ac+/.test(&quot;abc&quot;)</code></li>\n</ol>\n<details>\n<summary><mark>说明 </mark></summary>\n\n<p>ac+ 能匹配“ac”以及“acc”, 但不能匹配”a”, +等价于{1,}。</p>\n</details>\n\n<ol start=\"3\">\n<li><code>?</code> 代表前面的字符<code>0次</code>或<code>1次</code>,   例子 <code>/ac?/.test(&quot;abc&quot;)</code><br>例如，“do(es)?”可以匹配“do”或“does”。?等价于{0,1}。</li>\n<li><code>/d</code> 匹配数字</li>\n<li><code>\\w</code> 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</li>\n<li><code>\\s</code> 匹配所有空白符，包括换行</li>\n<li><code>\\S</code> 匹配非空白符，不包括换行。</li>\n<li><code>[\\s\\S]</code> 匹配所有</li>\n</ol>\n<h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><h4 id=\"字符组\"><a href=\"#字符组\" class=\"headerlink\" title=\"字符组 []\"></a>字符组 []</h4><p><strong>字符组</strong>：允许匹配一组可能出现的字符。比如 [Jj], 那么既可以匹配<code>J</code>，也能匹配<code>j</code>, 例子<br><code>/[Jj]ava[Ss]cript/.test(&quot;JavaScript&quot;)</code></p>\n<h4 id=\"区间\"><a href=\"#区间\" class=\"headerlink\" title=\"区间\"></a>区间</h4><p>在字符组中用<code>-</code>代表区间，即<code>[0-9]</code>表示的是<code>[0123456789]</code>, 同理<code>[a-z]</code>表示的是<code>a到z</code>任意的数字</p>\n<h4 id=\"字符转义\"><a href=\"#字符转义\" class=\"headerlink\" title=\"字符转义\"></a>字符转义</h4><p>上面所说，<code>[]</code>表示字符组， 而<code>-</code> 表示区间连接符，那么如果要匹配<code>[]</code> 那么就需要使用转义符 <code>\\</code>，</p>\n<details>\n<summary><mark>答案 </mark></summary>\n\n<p><code>/\\[\\]/.test(&quot;[]&quot;)</code></p>\n</details>\n\n<h4 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"取反 [^]\"></a>取反 [^]</h4><p><code>true</code> 取反 就是<code>false</code>, 在正则这里的取反是指 <strong>不会出现的字符</strong></p>\n<p>比如： 匹配不包含数字的字符串 <code>/[^0-9]/.test(&quot;abc&quot;)</code>,</p>\n<p><strong>注意：^符号要在中括号内，不然^代表的是匹配以^后跟随的的字符开头的字符串</strong>，<code>/^gg/.test(&quot;gg = good game&quot;)</code>, 这里表示的是以<code>gg开头</code>的匹配式。</p>\n<p>这里顺带说一下 <code>$</code>, 表示以<code>$</code>前面的字符组做结尾的匹配式 <code>/world$/.test(&quot;hello world&quot;)</code></p>\n<details>\n    <summary>不含小写字母的数据</summary>\n\n<pre><code>`/[^a-z]/.test(&quot;0123123ADFADJFKL&quot;)`</code></pre></details>\n\n<h4 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h4><p>在一个字符组后加上<code>{N}</code> 就可以表示在它之前的字符组出现<code>N</code>次。例如 <code>/\\d{3}/</code> ,表示数字重复3次</p>\n<p>假设要匹配 电话号码，那么应该怎么做， 电话号码的格式是<code>020-12345678</code></p>\n<details>\n    <summary>匹配电话号码</summary>\n\n<pre><code>`/\\d{3}-\\d{8}/`</code></pre></details>\n\n\n<h5 id=\"重复区间-M-N\"><a href=\"#重复区间-M-N\" class=\"headerlink\" title=\"重复区间 {M,N}\"></a>重复区间 {M,N}</h5><p>可能有时候，我们不知道具体要匹配字符组要重复的次数，比如身份证有15位也有18位的。那么这时候就可以用重复区间， </p>\n<p><code>语法：{M,N}，M是下界而N是上界。</code></p>\n<blockquote>\n<p>练习 匹配所有的手机号</p>\n</blockquote>\n<pre class=\" language-tsx\"><code class=\"language-tsx\">\n我们知道手机号必须为11位数，并符合下列几个规则：\n\n第一位数字必须以1开头，第二位数字可以是[3,4,5,7,8]中的任意一个，后面9个数是[0-9]中的任意一个数字</code></pre>\n<details>\n    <summary>匹配所有的手机号</summary>\n\n<pre><code>`/1[34578]\\d{9}/`</code></pre></details>\n\n\n<h3 id=\"贪婪匹配与非贪婪匹配\"><a href=\"#贪婪匹配与非贪婪匹配\" class=\"headerlink\" title=\"贪婪匹配与非贪婪匹配\"></a>贪婪匹配与非贪婪匹配</h3><p>贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配 (<code>*</code>)；</p>\n<p>非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配 (<code>?</code>)；</p>\n<p>例子： <code>&lt;div&gt;12312&lt;/div&gt;&lt;div&gt;hello world&lt;/div&gt;</code></p>\n<p>贪婪匹配： <code>&quot;&lt;div&gt;12312&lt;/div&gt;&lt;div&gt;hello world&lt;/div&gt;&quot;.match(/&lt;div&gt;.*&lt;/div&gt;/)</code>, 会匹配到 <code>&lt;div&gt;12312&lt;/div&gt;&lt;div&gt;hello world&lt;/div&gt;</code></p>\n<p>非贪婪匹配： <code>&quot;&lt;div&gt;12312&lt;/div&gt;&lt;div&gt;hello world&lt;/div&gt;&quot;.match(/&lt;div&gt;.*?&lt;/div&gt;/)</code>, 会匹配到 <code>&lt;div&gt;12312&lt;/div&gt;</code>, 这是因为非贪婪匹配，匹配到第一个子串就结束了,不再往后匹配了</p>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p><strong>分组：使用的是（），分组一般用在提取匹配的字符串的子串</strong>。 举个例子： <code>020-12345678</code> 这是我们的电话号码，但我想提取他的<code>区号</code>和<code>真实的电话号码</code>，那么我们只需要<code>/(\\d{3})-(\\d{8})/</code>即可</p>\n<p><strong>练习1：</strong> 如果我想要提取<code>&lt;div&gt;hello world&lt;/div&gt;</code></p>\n<details>\n    <summary> 答案</summary>\n\n<pre><code>&quot;&lt;div&gt;hello world&lt;/div&gt;&quot;.match(/&lt;div&gt;(.*?)&lt;\\/div&gt;/)\n\n比较：\n1. &lt;div&gt;.*?&lt;/div&gt;\n2. &lt;div&gt;(.*?)&lt;/div&gt;</code></pre></details>\n\n<p><strong>练习2：</strong> 如果 我们拥有日期的格式为 <code>2020-05-20</code> 或者 <code>2020 05 20</code> 或者 <code>2020/05/20</code> 这样的格式，我们想要获取他的<code>年月日</code> 应该怎么写</p>\n<details>\n    <summary> 答案</summary>\n    /(\\d{4})[\\-\\s\\/](\\d{2})[\\-\\s\\/](\\d{2})/\n\n<pre><code>测试一下\n\n&quot;2020-05-20&quot;.match(/(\\d{4})[\\-\\s\\/](\\d{2})[\\-\\s\\/](\\d{2})/)\n\n中间分隔符是[\\-\\s\\/], 我们换成[\\s\\S]是否也可以？</code></pre></details>\n\n\n<p>那如果日期的格式是 2020-5-20 或者是 2021-2-2 那应该怎么改造他</p>\n<details>\n    <summary> 答案</summary>\n    /(\\d{4})[-](\\d{1,2})[-](\\d{1,2})/\n\n</details>\n\n<h3 id=\"非捕获分组\"><a href=\"#非捕获分组\" class=\"headerlink\" title=\"非捕获分组\"></a>非捕获分组</h3><p>有时候，我们并不需要捕获某个分组的内容，但是又想使用分组的特性。即我不要这个分组。<br><strong>非捕获分组： (?:表达式)</strong></p>\n<p>例子： 现在有 电话号码 <code>020-12345678</code> 或者<code>tel:12345678</code>, 我只要要他的电话号码，那么<code>(?:\\d{3}|tel)[-:](\\d{8})</code></p>\n<h3 id=\"分组回溯引用\"><a href=\"#分组回溯引用\" class=\"headerlink\" title=\"分组回溯引用\"></a>分组回溯引用</h3><p>分组回溯引用的意思就是，我能使用之前匹配的分组, 用<code>\\1</code>表示第一个分组， <code>\\2</code>表示第二个分组，如此类推</p>\n<p>例如，要匹配一段 HTML 代码，比如：<code>&lt;font&gt;hello world&lt;/font&gt;</code>，我们会写成 <code>/&lt;\\w+&gt;.*?&lt;\\/\\w+&gt;/</code>, 这样能匹配<code>&lt;font&gt;hello world&lt;/font&gt;</code>， 但是如果数据改成这样：<code>&lt;font&gt;hello world&lt;/bar&gt;</code>, <code>font</code> 和 <code>bar</code> 不是一对正常的标签，所以上面的表达式不太正确， 这个时候就可以使用<strong>分组回溯引用</strong>, <code>/&lt;(\\w+)&gt;.*?&lt;\\/\\1&gt;/</code></p>\n<p><strong>练习：</strong> 如果要匹配符合 <code>ab ba</code> 这种关系的单词, 应该怎么写?</p>\n<p>匹配<code>abba</code>, <code>asffs</code></p>\n<details>\n    <summary> 答案</summary>\n    (\\w+)(\\w+)\\2\\1\n\n</details>\n\n<h3 id=\"正向先行断言\"><a href=\"#正向先行断言\" class=\"headerlink\" title=\"正向先行断言\"></a>正向先行断言</h3><p><strong>正向先行断言</strong>：<code>(?=表达式)</code>，指在某个位置向右看，表示所在位置右侧必须能匹配表达式，但匹配的表达式不会出现在结果组里面</p>\n<p>例如：</p>\n<p>我喜欢你 我喜欢 我喜欢我 喜欢 喜欢你</p>\n<p>如果要取出<code>喜欢</code>两个字，要求这个喜欢后面有你，这个时候就要这么写：<code>喜欢(?=你)</code>，这就是正向先行断言。</p>\n<p>看这段正则表达式<code>(?=.*?[a-z])(?=.*?[A-Z]).+</code>, 这段正则能够匹配<strong>包含至少一个大小写字母的字符串</strong>， 把正则拆开就是 </p>\n<ul>\n<li><code>(?=)</code> 说明是<code>后面必须是什么东西</code>，</li>\n<li><code>.*?</code> 表示 <code>任意东西</code></li>\n<li><code>[a-z]</code> 表示 <code>a-z</code> 的小写字母</li>\n</ul>\n<p>结合就是 必须包含<code>a到z</code>的任意字符串</p>\n<blockquote>\n<p>练习: 密码强度验证规则如下:</p>\n</blockquote>\n<ul>\n<li>至少一个大写字母</li>\n<li>至少一个小写字母</li>\n<li>至少一个数字</li>\n<li>至少8个字符</li>\n</ul>\n<details>\n    <summary> 答案</summary>\n    /(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).{8}/\n\n</details>\n\n<h3 id=\"反向先行断言\"><a href=\"#反向先行断言\" class=\"headerlink\" title=\"反向先行断言\"></a>反向先行断言</h3><p><strong>反向先行断言</strong>：<code>(?!表达式)</code>的作用是保证右边不能出现某字符。</p>\n<p>用上面的例子就是，如果要取出<code>喜欢</code>两个字，<strong>要求这个喜欢后面没有你</strong>，这个时候就要这么写：<code>喜欢(?!你)</code>，这就是反向先行断言。</p>\n<p>我觉得：正向先行断言跟反向先行断言基本类似，<strong>只是一个取反的操作</strong></p>\n<blockquote>\n<p>练习： 排除qq邮箱</p>\n</blockquote>\n<details>\n    <summary> 答案</summary>\n    /@(?!qq).*/\n\n<pre><code>@后面没有qq</code></pre></details>\n\n<blockquote>\n<p>用正向现行断言以及反向现行断言 千分位格式化数字</p>\n</blockquote>\n<p><code>&quot;100000&quot;.replace(/\\B(?=(\\d{3})+(?!\\d))/g, &#39;,&#39;)</code></p>\n<p>解析: <code>/\\B(?=(\\d{3})+(?!\\d))</code></p>\n<ul>\n<li><code>\\B</code>, 首先先理解 <code>\\b</code>, 在字符串中 <code>&quot;here is a word&quot;</code>, 在这个字符串中其实用很多<code>\\b</code>, 就是单词与单词之间有<code>\\b</code>，所以如果用 <code>/\\bhere\\b/</code> 可以匹配到<code>here</code>这个单词,但如果字符串是<code>hereisaword</code>, 这样就匹配不了<code>here</code>了，我们可以简单是想象成<strong>空格符</strong>。<br><code>\\B</code>是只非字间, 和 <code>\\d</code>与<code>\\D</code>, <code>\\w</code> 与 <code>\\W</code> 的取反关系一样</li>\n<li><code>(?=(\\d{3}))</code>: 先分组，3个数字为一组，加正向先行断言也就是 <strong>必须包含3个数字为一组的字符串</strong></li>\n<li><code>+</code> 一次或多次</li>\n<li><code>(?!\\d)</code>: 反向先行断言，<strong>后面必须不能包含数字</strong></li>\n<li>结合就是 <code>3个数字为一组的子串后面必须没有数字</code></li>\n</ul>\n<h3 id=\"正向后行断言\"><a href=\"#正向后行断言\" class=\"headerlink\" title=\"正向后行断言\"></a>正向后行断言</h3><p>先行断言和后行断言只有一个区别，即<strong>先行断言从左往右看，后行断言从右往左看。</strong></p>\n<p><strong>正向后行断言</strong>：<code>(?&lt;=表达式)</code>，指在某个位置向左看，表示所在位置左侧必须能匹配表达式</p>\n<p>例如：如果要取出<code>喜欢</code>两个字，要求<strong>喜欢的前面有我，后面有你</strong>，这个时候就要这么写：<code>(?&lt;=我)喜欢(?=你)</code>。</p>\n<h3 id=\"反向后行断言\"><a href=\"#反向后行断言\" class=\"headerlink\" title=\"反向后行断言\"></a>反向后行断言</h3><p><strong>反向后行断言</strong>：<code>(?&lt;!表达式)</code>，指在某个位置向左看，表示所在位置左侧不能匹配表达式</p>\n<p>用上面的例子就是， 我喜欢你， 喜欢前面没有我</p>\n<p>例子： 匹配一个 $ 符号: <code>(?&lt;!\\$)\\$[^\\$]*\\$(?!.)</code></p>\n<p>解析： </p>\n<ul>\n<li><code>(?&lt;!\\$)\\$</code>: <code>$</code> 前面没有<code>$</code></li>\n<li><code>\\$(?!$)</code>: <code>$</code> 的后面没有<code>$</code></li>\n<li><code>[^\\$]*</code>: 除了<code>$</code> 的任意字符</li>\n</ul>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>日期转化, 获取年月日，时分秒</li>\n<li>获取url中的参数</li>\n<li>trim() 函数</li>\n<li>模板</li>\n</ul>\n<pre class=\" language-tsx\"><code class=\"language-tsx\">function getUrlParams(url) {\n    const pattern = new RegExp(/(\\w+)=(\\w+)/, 'gi')\n    let res = {};\n    str.replace(reg, (match, p1, p2) => {\n        res[p1] = p2;\n        return `${p1}=${p2}`\n    })\n    return res;\n}\n\ngetUrlParams(\"https://www.baidu.com?username=admin&password=88888888&code=1234\")</code></pre>\n<blockquote>\n<p>trim()</p>\n</blockquote>\n<pre class=\" language-tsx\"><code class=\"language-tsx\">function trim(str, type: \"left\" | \"right\" | \"both\" | \"all\") {\n    if (type === 'left') {\n        return str.replace(/(^\\s*)/g, \"\");\n    }\n    if (type === 'right') {\n        return str.replace(/(\\s*$)/g, \"\")\n    }\n    if (type === 'both') {\n        return str.replace(/(^\\s*)|(\\s*$)/g, \"\"); \n    }\n    return str.replace(/(\\s*)/g, \"\");\n}</code></pre>\n<blockquote>\n<p>简易模板引擎</p>\n</blockquote>\n<pre class=\" language-tsx\"><code class=\"language-tsx\">\nconst data = {name: 'Bill', age: 111};\nconst template = `\n    <div>\n        <p>my name is {{name}}</p>\n        <p>年龄 {{age}}</p>\n    </div>\n`\nfunction generate(template, mapData) {\n    const reg = new RegExp(/\\{\\{(.*?)\\}\\}/, \"g\");\n    const res = template.replace(reg, (match, p1) => mapData[p1])\n    return res;\n}\nconst a = generate(template, data);\ndocument.body.innerHTML += a\n</code></pre>\n<p>…完</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p>正则表达式是描述一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>\n<p>我们判断字符串是否含有子串，我们一般会用到<code>indexOf</code> 还有<code>includes</code>方法, 比如 <code>&quot;abc&quot;.includes(&quot;ab&quot;)</code> 或者 <code>&quot;abc&quot;.indexOf(ab)</code>, 那么这两个有什么区别？</p>\n<p><strong>includes 返回的是Boolean值;</strong></p>\n<p><strong>而indexOf 返回的是子串在字符串首次出现的下标，若没有出现返回-1</strong></p>\n<p>除了以上两种方法，我们还有正则表达式，<code>/ab/.test(&quot;abc&quot;)</code></p>\n<h3 id=\"先来看几个常用特殊的字符\"><a href=\"#先来看几个常用特殊的字符\" class=\"headerlink\" title=\"先来看几个常用特殊的字符\"></a>先来看几个常用特殊的字符</h3><ol>\n<li><code>*</code> 代表前面的字符<code>0次</code>或<code>多次</code>， 例子 <code>/ac*/.test(&quot;abc&quot;)</code></li>\n</ol>\n<details>\n<summary><mark>说明</mark></summary>\n\n<p>ac<em>能匹配“a”，也能匹配“ac”以及“acc”。</em>等价于{0,}。</p>\n</details>\n\n<ol start=\"2\">\n<li><code>+</code> 代表前面的字符<code>1次</code>或<code>多次</code>， <code>/ac+/.test(&quot;abc&quot;)</code></li>\n</ol>\n<details>\n<summary><mark>说明 </mark></summary>\n\n<p>ac+ 能匹配“ac”以及“acc”, 但不能匹配”a”, +等价于{1,}。</p>\n</details>\n\n<ol start=\"3\">\n<li><code>?</code> 代表前面的字符<code>0次</code>或<code>1次</code>,   例子 <code>/ac?/.test(&quot;abc&quot;)</code><br>例如，“do(es)?”可以匹配“do”或“does”。?等价于{0,1}。</li>\n<li><code>/d</code> 匹配数字</li>\n<li><code>\\w</code> 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</li>\n<li><code>\\s</code> 匹配所有空白符，包括换行</li>\n<li><code>\\S</code> 匹配非空白符，不包括换行。</li>\n<li><code>[\\s\\S]</code> 匹配所有</li>\n</ol>\n<h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><h4 id=\"字符组\"><a href=\"#字符组\" class=\"headerlink\" title=\"字符组 []\"></a>字符组 []</h4><p><strong>字符组</strong>：允许匹配一组可能出现的字符。比如 [Jj], 那么既可以匹配<code>J</code>，也能匹配<code>j</code>, 例子<br><code>/[Jj]ava[Ss]cript/.test(&quot;JavaScript&quot;)</code></p>\n<h4 id=\"区间\"><a href=\"#区间\" class=\"headerlink\" title=\"区间\"></a>区间</h4><p>在字符组中用<code>-</code>代表区间，即<code>[0-9]</code>表示的是<code>[0123456789]</code>, 同理<code>[a-z]</code>表示的是<code>a到z</code>任意的数字</p>\n<h4 id=\"字符转义\"><a href=\"#字符转义\" class=\"headerlink\" title=\"字符转义\"></a>字符转义</h4><p>上面所说，<code>[]</code>表示字符组， 而<code>-</code> 表示区间连接符，那么如果要匹配<code>[]</code> 那么就需要使用转义符 <code>\\</code>，</p>\n<details>\n<summary><mark>答案 </mark></summary>\n\n<p><code>/\\[\\]/.test(&quot;[]&quot;)</code></p>\n</details>\n\n<h4 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"取反 [^]\"></a>取反 [^]</h4><p><code>true</code> 取反 就是<code>false</code>, 在正则这里的取反是指 <strong>不会出现的字符</strong></p>\n<p>比如： 匹配不包含数字的字符串 <code>/[^0-9]/.test(&quot;abc&quot;)</code>,</p>\n<p><strong>注意：^符号要在中括号内，不然^代表的是匹配以^后跟随的的字符开头的字符串</strong>，<code>/^gg/.test(&quot;gg = good game&quot;)</code>, 这里表示的是以<code>gg开头</code>的匹配式。</p>\n<p>这里顺带说一下 <code>$</code>, 表示以<code>$</code>前面的字符组做结尾的匹配式 <code>/world$/.test(&quot;hello world&quot;)</code></p>\n<details>\n    <summary>不含小写字母的数据</summary>\n\n<pre><code>`/[^a-z]/.test(&quot;0123123ADFADJFKL&quot;)`</code></pre></details>\n\n<h4 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h4><p>在一个字符组后加上<code>{N}</code> 就可以表示在它之前的字符组出现<code>N</code>次。例如 <code>/\\d{3}/</code> ,表示数字重复3次</p>\n<p>假设要匹配 电话号码，那么应该怎么做， 电话号码的格式是<code>020-12345678</code></p>\n<details>\n    <summary>匹配电话号码</summary>\n\n<pre><code>`/\\d{3}-\\d{8}/`</code></pre></details>\n\n\n<h5 id=\"重复区间-M-N\"><a href=\"#重复区间-M-N\" class=\"headerlink\" title=\"重复区间 {M,N}\"></a>重复区间 {M,N}</h5><p>可能有时候，我们不知道具体要匹配字符组要重复的次数，比如身份证有15位也有18位的。那么这时候就可以用重复区间， </p>\n<p><code>语法：{M,N}，M是下界而N是上界。</code></p>\n<blockquote>\n<p>练习 匹配所有的手机号</p>\n</blockquote>\n<pre><code class=\"tsx\">\n我们知道手机号必须为11位数，并符合下列几个规则：\n\n第一位数字必须以1开头，第二位数字可以是[3,4,5,7,8]中的任意一个，后面9个数是[0-9]中的任意一个数字</code></pre>\n<details>\n    <summary>匹配所有的手机号</summary>\n\n<pre><code>`/1[34578]\\d{9}/`</code></pre></details>\n\n\n<h3 id=\"贪婪匹配与非贪婪匹配\"><a href=\"#贪婪匹配与非贪婪匹配\" class=\"headerlink\" title=\"贪婪匹配与非贪婪匹配\"></a>贪婪匹配与非贪婪匹配</h3><p>贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配 (<code>*</code>)；</p>\n<p>非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配 (<code>?</code>)；</p>\n<p>例子： <code>&lt;div&gt;12312&lt;/div&gt;&lt;div&gt;hello world&lt;/div&gt;</code></p>\n<p>贪婪匹配： <code>&quot;&lt;div&gt;12312&lt;/div&gt;&lt;div&gt;hello world&lt;/div&gt;&quot;.match(/&lt;div&gt;.*&lt;/div&gt;/)</code>, 会匹配到 <code>&lt;div&gt;12312&lt;/div&gt;&lt;div&gt;hello world&lt;/div&gt;</code></p>\n<p>非贪婪匹配： <code>&quot;&lt;div&gt;12312&lt;/div&gt;&lt;div&gt;hello world&lt;/div&gt;&quot;.match(/&lt;div&gt;.*?&lt;/div&gt;/)</code>, 会匹配到 <code>&lt;div&gt;12312&lt;/div&gt;</code>, 这是因为非贪婪匹配，匹配到第一个子串就结束了,不再往后匹配了</p>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p><strong>分组：使用的是（），分组一般用在提取匹配的字符串的子串</strong>。 举个例子： <code>020-12345678</code> 这是我们的电话号码，但我想提取他的<code>区号</code>和<code>真实的电话号码</code>，那么我们只需要<code>/(\\d{3})-(\\d{8})/</code>即可</p>\n<p><strong>练习1：</strong> 如果我想要提取<code>&lt;div&gt;hello world&lt;/div&gt;</code></p>\n<details>\n    <summary> 答案</summary>\n\n<pre><code>&quot;&lt;div&gt;hello world&lt;/div&gt;&quot;.match(/&lt;div&gt;(.*?)&lt;\\/div&gt;/)\n\n比较：\n1. &lt;div&gt;.*?&lt;/div&gt;\n2. &lt;div&gt;(.*?)&lt;/div&gt;</code></pre></details>\n\n<p><strong>练习2：</strong> 如果 我们拥有日期的格式为 <code>2020-05-20</code> 或者 <code>2020 05 20</code> 或者 <code>2020/05/20</code> 这样的格式，我们想要获取他的<code>年月日</code> 应该怎么写</p>\n<details>\n    <summary> 答案</summary>\n    /(\\d{4})[\\-\\s\\/](\\d{2})[\\-\\s\\/](\\d{2})/\n\n<pre><code>测试一下\n\n&quot;2020-05-20&quot;.match(/(\\d{4})[\\-\\s\\/](\\d{2})[\\-\\s\\/](\\d{2})/)\n\n中间分隔符是[\\-\\s\\/], 我们换成[\\s\\S]是否也可以？</code></pre></details>\n\n\n<p>那如果日期的格式是 2020-5-20 或者是 2021-2-2 那应该怎么改造他</p>\n<details>\n    <summary> 答案</summary>\n    /(\\d{4})[-](\\d{1,2})[-](\\d{1,2})/\n\n</details>\n\n<h3 id=\"非捕获分组\"><a href=\"#非捕获分组\" class=\"headerlink\" title=\"非捕获分组\"></a>非捕获分组</h3><p>有时候，我们并不需要捕获某个分组的内容，但是又想使用分组的特性。即我不要这个分组。<br><strong>非捕获分组： (?:表达式)</strong></p>\n<p>例子： 现在有 电话号码 <code>020-12345678</code> 或者<code>tel:12345678</code>, 我只要要他的电话号码，那么<code>(?:\\d{3}|tel)[-:](\\d{8})</code></p>\n<h3 id=\"分组回溯引用\"><a href=\"#分组回溯引用\" class=\"headerlink\" title=\"分组回溯引用\"></a>分组回溯引用</h3><p>分组回溯引用的意思就是，我能使用之前匹配的分组, 用<code>\\1</code>表示第一个分组， <code>\\2</code>表示第二个分组，如此类推</p>\n<p>例如，要匹配一段 HTML 代码，比如：<code>&lt;font&gt;hello world&lt;/font&gt;</code>，我们会写成 <code>/&lt;\\w+&gt;.*?&lt;\\/\\w+&gt;/</code>, 这样能匹配<code>&lt;font&gt;hello world&lt;/font&gt;</code>， 但是如果数据改成这样：<code>&lt;font&gt;hello world&lt;/bar&gt;</code>, <code>font</code> 和 <code>bar</code> 不是一对正常的标签，所以上面的表达式不太正确， 这个时候就可以使用<strong>分组回溯引用</strong>, <code>/&lt;(\\w+)&gt;.*?&lt;\\/\\1&gt;/</code></p>\n<p><strong>练习：</strong> 如果要匹配符合 <code>ab ba</code> 这种关系的单词, 应该怎么写?</p>\n<p>匹配<code>abba</code>, <code>asffs</code></p>\n<details>\n    <summary> 答案</summary>\n    (\\w+)(\\w+)\\2\\1\n\n</details>\n\n<h3 id=\"正向先行断言\"><a href=\"#正向先行断言\" class=\"headerlink\" title=\"正向先行断言\"></a>正向先行断言</h3><p><strong>正向先行断言</strong>：<code>(?=表达式)</code>，指在某个位置向右看，表示所在位置右侧必须能匹配表达式，但匹配的表达式不会出现在结果组里面</p>\n<p>例如：</p>\n<p>我喜欢你 我喜欢 我喜欢我 喜欢 喜欢你</p>\n<p>如果要取出<code>喜欢</code>两个字，要求这个喜欢后面有你，这个时候就要这么写：<code>喜欢(?=你)</code>，这就是正向先行断言。</p>\n<p>看这段正则表达式<code>(?=.*?[a-z])(?=.*?[A-Z]).+</code>, 这段正则能够匹配<strong>包含至少一个大小写字母的字符串</strong>， 把正则拆开就是 </p>\n<ul>\n<li><code>(?=)</code> 说明是<code>后面必须是什么东西</code>，</li>\n<li><code>.*?</code> 表示 <code>任意东西</code></li>\n<li><code>[a-z]</code> 表示 <code>a-z</code> 的小写字母</li>\n</ul>\n<p>结合就是 必须包含<code>a到z</code>的任意字符串</p>\n<blockquote>\n<p>练习: 密码强度验证规则如下:</p>\n</blockquote>\n<ul>\n<li>至少一个大写字母</li>\n<li>至少一个小写字母</li>\n<li>至少一个数字</li>\n<li>至少8个字符</li>\n</ul>\n<details>\n    <summary> 答案</summary>\n    /(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).{8}/\n\n</details>\n\n<h3 id=\"反向先行断言\"><a href=\"#反向先行断言\" class=\"headerlink\" title=\"反向先行断言\"></a>反向先行断言</h3><p><strong>反向先行断言</strong>：<code>(?!表达式)</code>的作用是保证右边不能出现某字符。</p>\n<p>用上面的例子就是，如果要取出<code>喜欢</code>两个字，<strong>要求这个喜欢后面没有你</strong>，这个时候就要这么写：<code>喜欢(?!你)</code>，这就是反向先行断言。</p>\n<p>我觉得：正向先行断言跟反向先行断言基本类似，<strong>只是一个取反的操作</strong></p>\n<blockquote>\n<p>练习： 排除qq邮箱</p>\n</blockquote>\n<details>\n    <summary> 答案</summary>\n    /@(?!qq).*/\n\n<pre><code>@后面没有qq</code></pre></details>\n\n<blockquote>\n<p>用正向现行断言以及反向现行断言 千分位格式化数字</p>\n</blockquote>\n<p><code>&quot;100000&quot;.replace(/\\B(?=(\\d{3})+(?!\\d))/g, &#39;,&#39;)</code></p>\n<p>解析: <code>/\\B(?=(\\d{3})+(?!\\d))</code></p>\n<ul>\n<li><code>\\B</code>, 首先先理解 <code>\\b</code>, 在字符串中 <code>&quot;here is a word&quot;</code>, 在这个字符串中其实用很多<code>\\b</code>, 就是单词与单词之间有<code>\\b</code>，所以如果用 <code>/\\bhere\\b/</code> 可以匹配到<code>here</code>这个单词,但如果字符串是<code>hereisaword</code>, 这样就匹配不了<code>here</code>了，我们可以简单是想象成<strong>空格符</strong>。<br><code>\\B</code>是只非字间, 和 <code>\\d</code>与<code>\\D</code>, <code>\\w</code> 与 <code>\\W</code> 的取反关系一样</li>\n<li><code>(?=(\\d{3}))</code>: 先分组，3个数字为一组，加正向先行断言也就是 <strong>必须包含3个数字为一组的字符串</strong></li>\n<li><code>+</code> 一次或多次</li>\n<li><code>(?!\\d)</code>: 反向先行断言，<strong>后面必须不能包含数字</strong></li>\n<li>结合就是 <code>3个数字为一组的子串后面必须没有数字</code></li>\n</ul>\n<h3 id=\"正向后行断言\"><a href=\"#正向后行断言\" class=\"headerlink\" title=\"正向后行断言\"></a>正向后行断言</h3><p>先行断言和后行断言只有一个区别，即<strong>先行断言从左往右看，后行断言从右往左看。</strong></p>\n<p><strong>正向后行断言</strong>：<code>(?&lt;=表达式)</code>，指在某个位置向左看，表示所在位置左侧必须能匹配表达式</p>\n<p>例如：如果要取出<code>喜欢</code>两个字，要求<strong>喜欢的前面有我，后面有你</strong>，这个时候就要这么写：<code>(?&lt;=我)喜欢(?=你)</code>。</p>\n<h3 id=\"反向后行断言\"><a href=\"#反向后行断言\" class=\"headerlink\" title=\"反向后行断言\"></a>反向后行断言</h3><p><strong>反向后行断言</strong>：<code>(?&lt;!表达式)</code>，指在某个位置向左看，表示所在位置左侧不能匹配表达式</p>\n<p>用上面的例子就是， 我喜欢你， 喜欢前面没有我</p>\n<p>例子： 匹配一个 $ 符号: <code>(?&lt;!\\$)\\$[^\\$]*\\$(?!.)</code></p>\n<p>解析： </p>\n<ul>\n<li><code>(?&lt;!\\$)\\$</code>: <code>$</code> 前面没有<code>$</code></li>\n<li><code>\\$(?!$)</code>: <code>$</code> 的后面没有<code>$</code></li>\n<li><code>[^\\$]*</code>: 除了<code>$</code> 的任意字符</li>\n</ul>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>日期转化, 获取年月日，时分秒</li>\n<li>获取url中的参数</li>\n<li>trim() 函数</li>\n<li>模板</li>\n</ul>\n<pre><code class=\"tsx\">function getUrlParams(url) {\n    const pattern = new RegExp(/(\\w+)=(\\w+)/, &#39;gi&#39;)\n    let res = {};\n    str.replace(reg, (match, p1, p2) =&gt; {\n        res[p1] = p2;\n        return `${p1}=${p2}`\n    })\n    return res;\n}\n\ngetUrlParams(&quot;https://www.baidu.com?username=admin&amp;password=88888888&amp;code=1234&quot;)</code></pre>\n<blockquote>\n<p>trim()</p>\n</blockquote>\n<pre><code class=\"tsx\">function trim(str, type: &quot;left&quot; | &quot;right&quot; | &quot;both&quot; | &quot;all&quot;) {\n    if (type === &#39;left&#39;) {\n        return str.replace(/(^\\s*)/g, &quot;&quot;);\n    }\n    if (type === &#39;right&#39;) {\n        return str.replace(/(\\s*$)/g, &quot;&quot;)\n    }\n    if (type === &#39;both&#39;) {\n        return str.replace(/(^\\s*)|(\\s*$)/g, &quot;&quot;); \n    }\n    return str.replace(/(\\s*)/g, &quot;&quot;);\n}</code></pre>\n<blockquote>\n<p>简易模板引擎</p>\n</blockquote>\n<pre><code class=\"tsx\">\nconst data = {name: &#39;Bill&#39;, age: 111};\nconst template = `\n    &lt;div&gt;\n        &lt;p&gt;my name is {{name}}&lt;/p&gt;\n        &lt;p&gt;年龄 {{age}}&lt;/p&gt;\n    &lt;/div&gt;\n`\nfunction generate(template, mapData) {\n    const reg = new RegExp(/\\{\\{(.*?)\\}\\}/, &quot;g&quot;);\n    const res = template.replace(reg, (match, p1) =&gt; mapData[p1])\n    return res;\n}\nconst a = generate(template, data);\ndocument.body.innerHTML += a\n</code></pre>\n<p>…完</p>\n"},{"title":"滑动验证码","date":"2020-08-06T16:49:31.000Z","_content":"\n## 前言\n\n一直想做一个滑动验证码的组件。\n\n\n## html 结构\n\n```html\n<div className={styles.container}>\n    <div className={styles.slider}>\n        <!-- 滑块 -->\n        <div className={styles.sliderHandle} onMouseDown={mouseDown} style={sliderHandleStyle} > >> </div>\n        <!-- 轨道 -->\n        <div className={styles.sliderRail}>\n            <div className={styles.text}>向右滑动验证</div>\n        </div>\n        <!-- 滑块路线 -->\n        <div className={styles.sliderTrack} style={{width: ((offset.x) / 250 * 100 + \"%\"), borderRadius: (offset.x < 250) ? 'none' : '45px' }}></div>\n    </div>\n</div>\n```\n\n## less 结构\n\n主要是一些定位， 相对定位中的绝对定位\n\n```less\n.container {\n\twidth: 400px;\n\theight: 400px;\n\tmargin: 50px auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tuser-select: none;\n\n    .slider {\n\t\twidth: 250px;\n\t\theight: 45px;\n\t\tposition: relative;\n\t\tborder-radius: 45px;\n\n\t\t.sliderHandle {\n\t\t\twidth: 45px;\n\t\t\theight: 45px;\n\t\t\tborder-radius: 50%;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: row;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tbackground-color: #fff;\n\t\t\tz-index: 99;\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\tright: auto;\n\t\t\ttransform: translateX(-50%);\n\t\t\tbox-shadow:  1px 5px 2px #eee;\n\t\t\tcursor: pointer;\n\t\t}\n\n\t\t.sliderRail {\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\twidth: 100%;\n\t\t\tborder-radius: 45px;\n\t\t\tbackground-color: #f5f5f5;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: row;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t}\n\n\t\t.sliderTrack {\n\t\t\tposition: absolute;\n\t\t\twidth: 0%;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\tz-index: 89;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\tborder-top-left-radius: 45px;\n\t\t\tborder-bottom-left-radius: 45px ;\n\t\t\tbackground-color: #91d5ff;\n\t\t}\n    }\n}\n\n```\n\n## 代码逻辑\n\n代码中主要使用的是 react Hook， 主要的逻辑是使用了 mouseup, mouseover, mouseDown\n\n```jsx\nconst Block: React.FC = () => {\n\tconst [dragging, setDragging] = useState(false);\n\tconst [origin, setOrigin] = useState({ x: 0, y: 0 });\n\tconst [offset, setOffset] = useState({ x: 0, y: 0});\n\n\tconst mouseDown = useCallback(({clientX, clientY}) => {\n\t\tconsole.log(\"mouseDown\", clientX);\n\t\tsetOrigin((state) => ({ x: clientX, y: clientY}))\n\t\tsetDragging(true);\n\t}, []);\n\n\tconst mouseMove = useCallback(({clientX, clientY}) => {\n\t\tlet x =  clientX - origin.x;\n\t\tif( x >= 250 ) {\n\t\t\tx = 250\n\t\t} else if(x / 250 * 100 <= 0 ) {\n\t\t\tx = 0;\n\t\t}\n\t\tconst transition =  { x, y: clientY - origin.y }; \n\t\t\n\t\tif(x >= 250) {\n\t\t\tsetDragging(() => false)\n\t\t}\n\t\tsetOffset(state => {\n\t\t\treturn  {\n\t\t\t\t...state,\n\t\t\t\t...transition\n\t\t\t}\n\t\t});\n\t  }, [origin]);\n\n\tconst mouseUp = useCallback(() => {\n\t\tconsole.log(\"up\")\n\t\t\n\t\tsetDragging(() => false)\n\t\t\n\t  }, []);\n\n\tuseEffect(() => {\n\t  if (dragging) {\n\t\twindow.addEventListener('mousemove', mouseMove);\n\t\twindow.addEventListener('mouseup', mouseUp);\n\t  } else {\n\t\twindow.removeEventListener('mousemove', mouseMove);\n\t\twindow.removeEventListener('mouseup', mouseUp);\n\t\t\n\t\tsetOffset((state) => {\n\t\t\tlet x = state.x\n\t\t\tif(x>= 250) {\n\t\t\t\tconsole.log(\"验证通过\")\t\t\t\n\t\t\t} else if(x< 250) {\n\t\t\t\tx = 0\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: state.y\n\t\t\t}\n\t\t})\n\t  }\n\t}, [dragging]);\n\n\tconst sliderHandleStyle = useMemo(() => ({\n\t\tleft: (offset.x) / 250 * 100 + \"%\",\n\t\ttransition: (!dragging ? 'left 500ms' : 'none' )\n\t}), [offset, dragging])\n\n    return (\n\t\t<div>\n\t\t\t<div className={styles.container}>\n\t\t\t\t<div className={styles.slider}>\n\t\t\t\t\t<div className={styles.sliderHandle} onMouseDown={mouseDown} style={sliderHandleStyle} ><DoubleRightOutlined /></div>\n\t\t\t\t\t<div className={styles.sliderRail}>\n\t\t\t\t\t\t<div className={styles.text}>向右滑动验证</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={styles.sliderTrack} style={{width: ((offset.x) / 250 * 100 + \"%\"), borderRadius: (offset.x < 250) ? 'none' : '45px' }}></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n    );\n}\n\n```\n\n## 线上仓库\n\n[demo](https://codesandbox.io/s/polished-sun-grk5j?file=/src/App.js)\n\n## 这里记录一下在使用 react hook 的一些问题\n\n先谈谈 useCallback 这个函数吧\n\n### useCallback\n\nuseCallback 提供了两个参数，一个个回调函数，另一个是依赖数组。\n**当依赖数组不改变时，此时回调函数不改变，已达到缓存的效果，减少在re-render的时候重新生成函数**\n\n#### 案例1\n\n```jsx\n// Child.js\n\nconst Child = ({cb}) => {\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={cb}>点击</div>\n\t\t</div>\n\t)\n}\n\n```\n\n```jsx\nconst App = () => {\n\t// 此时 当App 重新渲染的时候，会重新生成 memoClick\n\t// const memoClick = () => console.log(\"click\"); \n\n\t// 用了useCallback 后 无论App 是否重新渲染，传给 Child 的 memoClick 都是之前的引用\n\tconst memoClick = useCallback(() => console.log(\"click\"), [])\n\treturn (\n\t\t<div>\n\t\t\t<Child cb={cb} />\n\t\t</div>\n\t)\n}\n```\n\n#### 其他\n\n当useCallback 的依赖数组 在useCallback内设置变化会导致无限循环\n\n```jsx\nconst App = () => {\n\tconst [a, setA] = useState(1);\n\tconst memoClick = useCallback(() => {\n\t\tconsole.log(\"click\")\n\t\tsetA((state) => {\n\t\t\tconst after = state.a++;\n\t\t\treturn after\n\t\t})\n\t}, [a])\n\n\treturn (\n\t\t<div>\n\t\t\t<div>{a}</div>\n\t\t\t<Button onClick={memoClick}>点击</Button>\n\t\t</div>\n\t)\n}\n```\n\n然后我找了很多文章，应该只有这篇是讲的比较清晰的， [React Hooks(二): useCallback 之痛](https://zhuanlan.zhihu.com/p/98554943)\n\n## 后话\n\n验证码组件还没做好，但大体逻辑是这样\n\n\n","source":"_posts/滑动验证码.md","raw":"---\ntitle: 滑动验证码\ndate: 2020-08-06 16:49:31\ntags: react\ncategories: react\n---\n\n## 前言\n\n一直想做一个滑动验证码的组件。\n\n\n## html 结构\n\n```html\n<div className={styles.container}>\n    <div className={styles.slider}>\n        <!-- 滑块 -->\n        <div className={styles.sliderHandle} onMouseDown={mouseDown} style={sliderHandleStyle} > >> </div>\n        <!-- 轨道 -->\n        <div className={styles.sliderRail}>\n            <div className={styles.text}>向右滑动验证</div>\n        </div>\n        <!-- 滑块路线 -->\n        <div className={styles.sliderTrack} style={{width: ((offset.x) / 250 * 100 + \"%\"), borderRadius: (offset.x < 250) ? 'none' : '45px' }}></div>\n    </div>\n</div>\n```\n\n## less 结构\n\n主要是一些定位， 相对定位中的绝对定位\n\n```less\n.container {\n\twidth: 400px;\n\theight: 400px;\n\tmargin: 50px auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tuser-select: none;\n\n    .slider {\n\t\twidth: 250px;\n\t\theight: 45px;\n\t\tposition: relative;\n\t\tborder-radius: 45px;\n\n\t\t.sliderHandle {\n\t\t\twidth: 45px;\n\t\t\theight: 45px;\n\t\t\tborder-radius: 50%;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: row;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tbackground-color: #fff;\n\t\t\tz-index: 99;\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\tright: auto;\n\t\t\ttransform: translateX(-50%);\n\t\t\tbox-shadow:  1px 5px 2px #eee;\n\t\t\tcursor: pointer;\n\t\t}\n\n\t\t.sliderRail {\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\twidth: 100%;\n\t\t\tborder-radius: 45px;\n\t\t\tbackground-color: #f5f5f5;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: row;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t}\n\n\t\t.sliderTrack {\n\t\t\tposition: absolute;\n\t\t\twidth: 0%;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\tz-index: 89;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\tborder-top-left-radius: 45px;\n\t\t\tborder-bottom-left-radius: 45px ;\n\t\t\tbackground-color: #91d5ff;\n\t\t}\n    }\n}\n\n```\n\n## 代码逻辑\n\n代码中主要使用的是 react Hook， 主要的逻辑是使用了 mouseup, mouseover, mouseDown\n\n```jsx\nconst Block: React.FC = () => {\n\tconst [dragging, setDragging] = useState(false);\n\tconst [origin, setOrigin] = useState({ x: 0, y: 0 });\n\tconst [offset, setOffset] = useState({ x: 0, y: 0});\n\n\tconst mouseDown = useCallback(({clientX, clientY}) => {\n\t\tconsole.log(\"mouseDown\", clientX);\n\t\tsetOrigin((state) => ({ x: clientX, y: clientY}))\n\t\tsetDragging(true);\n\t}, []);\n\n\tconst mouseMove = useCallback(({clientX, clientY}) => {\n\t\tlet x =  clientX - origin.x;\n\t\tif( x >= 250 ) {\n\t\t\tx = 250\n\t\t} else if(x / 250 * 100 <= 0 ) {\n\t\t\tx = 0;\n\t\t}\n\t\tconst transition =  { x, y: clientY - origin.y }; \n\t\t\n\t\tif(x >= 250) {\n\t\t\tsetDragging(() => false)\n\t\t}\n\t\tsetOffset(state => {\n\t\t\treturn  {\n\t\t\t\t...state,\n\t\t\t\t...transition\n\t\t\t}\n\t\t});\n\t  }, [origin]);\n\n\tconst mouseUp = useCallback(() => {\n\t\tconsole.log(\"up\")\n\t\t\n\t\tsetDragging(() => false)\n\t\t\n\t  }, []);\n\n\tuseEffect(() => {\n\t  if (dragging) {\n\t\twindow.addEventListener('mousemove', mouseMove);\n\t\twindow.addEventListener('mouseup', mouseUp);\n\t  } else {\n\t\twindow.removeEventListener('mousemove', mouseMove);\n\t\twindow.removeEventListener('mouseup', mouseUp);\n\t\t\n\t\tsetOffset((state) => {\n\t\t\tlet x = state.x\n\t\t\tif(x>= 250) {\n\t\t\t\tconsole.log(\"验证通过\")\t\t\t\n\t\t\t} else if(x< 250) {\n\t\t\t\tx = 0\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: state.y\n\t\t\t}\n\t\t})\n\t  }\n\t}, [dragging]);\n\n\tconst sliderHandleStyle = useMemo(() => ({\n\t\tleft: (offset.x) / 250 * 100 + \"%\",\n\t\ttransition: (!dragging ? 'left 500ms' : 'none' )\n\t}), [offset, dragging])\n\n    return (\n\t\t<div>\n\t\t\t<div className={styles.container}>\n\t\t\t\t<div className={styles.slider}>\n\t\t\t\t\t<div className={styles.sliderHandle} onMouseDown={mouseDown} style={sliderHandleStyle} ><DoubleRightOutlined /></div>\n\t\t\t\t\t<div className={styles.sliderRail}>\n\t\t\t\t\t\t<div className={styles.text}>向右滑动验证</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={styles.sliderTrack} style={{width: ((offset.x) / 250 * 100 + \"%\"), borderRadius: (offset.x < 250) ? 'none' : '45px' }}></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n    );\n}\n\n```\n\n## 线上仓库\n\n[demo](https://codesandbox.io/s/polished-sun-grk5j?file=/src/App.js)\n\n## 这里记录一下在使用 react hook 的一些问题\n\n先谈谈 useCallback 这个函数吧\n\n### useCallback\n\nuseCallback 提供了两个参数，一个个回调函数，另一个是依赖数组。\n**当依赖数组不改变时，此时回调函数不改变，已达到缓存的效果，减少在re-render的时候重新生成函数**\n\n#### 案例1\n\n```jsx\n// Child.js\n\nconst Child = ({cb}) => {\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={cb}>点击</div>\n\t\t</div>\n\t)\n}\n\n```\n\n```jsx\nconst App = () => {\n\t// 此时 当App 重新渲染的时候，会重新生成 memoClick\n\t// const memoClick = () => console.log(\"click\"); \n\n\t// 用了useCallback 后 无论App 是否重新渲染，传给 Child 的 memoClick 都是之前的引用\n\tconst memoClick = useCallback(() => console.log(\"click\"), [])\n\treturn (\n\t\t<div>\n\t\t\t<Child cb={cb} />\n\t\t</div>\n\t)\n}\n```\n\n#### 其他\n\n当useCallback 的依赖数组 在useCallback内设置变化会导致无限循环\n\n```jsx\nconst App = () => {\n\tconst [a, setA] = useState(1);\n\tconst memoClick = useCallback(() => {\n\t\tconsole.log(\"click\")\n\t\tsetA((state) => {\n\t\t\tconst after = state.a++;\n\t\t\treturn after\n\t\t})\n\t}, [a])\n\n\treturn (\n\t\t<div>\n\t\t\t<div>{a}</div>\n\t\t\t<Button onClick={memoClick}>点击</Button>\n\t\t</div>\n\t)\n}\n```\n\n然后我找了很多文章，应该只有这篇是讲的比较清晰的， [React Hooks(二): useCallback 之痛](https://zhuanlan.zhihu.com/p/98554943)\n\n## 后话\n\n验证码组件还没做好，但大体逻辑是这样\n\n\n","slug":"滑动验证码","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgw0055mrojhqz94fhx","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一直想做一个滑动验证码的组件。</p>\n<h2 id=\"html-结构\"><a href=\"#html-结构\" class=\"headerlink\" title=\"html 结构\"></a>html 结构</h2><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.container}</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.slider}</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 滑块 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.sliderHandle}</span> <span class=\"token attr-name\">onMouseDown</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{mouseDown}</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{sliderHandleStyle}</span> <span class=\"token punctuation\">></span></span> >> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 轨道 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.sliderRail}</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.text}</span><span class=\"token punctuation\">></span></span>向右滑动验证<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 滑块路线 --></span>\n        &lt;div className={styles.sliderTrack} style={{width: ((offset.x) / 250 * 100 + \"%\"), borderRadius: (offset.x &lt; 250) ? 'none' : '45px' }}><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"less-结构\"><a href=\"#less-结构\" class=\"headerlink\" title=\"less 结构\"></a>less 结构</h2><p>主要是一些定位， 相对定位中的绝对定位</p>\n<pre class=\" language-less\"><code class=\"language-less\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>px auto<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n\n    <span class=\"token selector\">.slider</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">250</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">45</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">45</span>px<span class=\"token punctuation\">;</span>\n\n        <span class=\"token selector\">.sliderHandle</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">45</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">45</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span>  <span class=\"token number\">1</span>px <span class=\"token number\">5</span>px <span class=\"token number\">2</span>px <span class=\"token hexcode\">#eee</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token selector\">.sliderRail</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">45</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#f5f5f5</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token selector\">.sliderTrack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0%</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token number\">89</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border-top-left-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">45</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border-bottom-left-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">45</span>px <span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#91d5ff</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>代码中主要使用的是 react Hook， 主要的逻辑是使用了 mouseup, mouseover, mouseDown</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Block<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dragging<span class=\"token punctuation\">,</span> setDragging<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>origin<span class=\"token punctuation\">,</span> setOrigin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">,</span> setOffset<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> mouseDown <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>clientX<span class=\"token punctuation\">,</span> clientY<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseDown\"</span><span class=\"token punctuation\">,</span> clientX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> clientX<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> clientY<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setDragging</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> mouseMove <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>clientX<span class=\"token punctuation\">,</span> clientY<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span>  clientX <span class=\"token operator\">-</span> origin<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">>=</span> <span class=\"token number\">250</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            x <span class=\"token operator\">=</span> <span class=\"token number\">250</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> <span class=\"token number\">250</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> transition <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> clientY <span class=\"token operator\">-</span> origin<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setDragging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">setOffset</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span>  <span class=\"token punctuation\">{</span>\n                <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n                <span class=\"token operator\">...</span>transition\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>origin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> mouseUp <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"up\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">setDragging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dragging<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> mouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseup'</span><span class=\"token punctuation\">,</span> mouseUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> mouseMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseup'</span><span class=\"token punctuation\">,</span> mouseUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">setOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>x\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">>=</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证通过\"</span><span class=\"token punctuation\">)</span>            \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span>\n                y<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>y\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dragging<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> sliderHandleStyle <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        left<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">250</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"%\"</span><span class=\"token punctuation\">,</span>\n        transition<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dragging <span class=\"token operator\">?</span> <span class=\"token string\">'left 500ms'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">,</span> dragging<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>slider<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>sliderHandle<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onMouseDown</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>mouseDown<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>sliderHandleStyle<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DoubleRightOutlined</span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>sliderRail<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>向右滑动验证<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>sliderTrack<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">250</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> borderRadius<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'45px'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"线上仓库\"><a href=\"#线上仓库\" class=\"headerlink\" title=\"线上仓库\"></a>线上仓库</h2><p><a href=\"https://codesandbox.io/s/polished-sun-grk5j?file=/src/App.js\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h2 id=\"这里记录一下在使用-react-hook-的一些问题\"><a href=\"#这里记录一下在使用-react-hook-的一些问题\" class=\"headerlink\" title=\"这里记录一下在使用 react hook 的一些问题\"></a>这里记录一下在使用 react hook 的一些问题</h2><p>先谈谈 useCallback 这个函数吧</p>\n<h3 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h3><p>useCallback 提供了两个参数，一个个回调函数，另一个是依赖数组。<br><strong>当依赖数组不改变时，此时回调函数不改变，已达到缓存的效果，减少在re-render的时候重新生成函数</strong></p>\n<h4 id=\"案例1\"><a href=\"#案例1\" class=\"headerlink\" title=\"案例1\"></a>案例1</h4><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// Child.js</span>\n\n<span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>cb<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>cb<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>点击<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 此时 当App 重新渲染的时候，会重新生成 memoClick</span>\n    <span class=\"token comment\" spellcheck=\"true\">// const memoClick = () => console.log(\"click\"); </span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 用了useCallback 后 无论App 是否重新渲染，传给 Child 的 memoClick 都是之前的引用</span>\n    <span class=\"token keyword\">const</span> memoClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token attr-name\">cb</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>cb<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>当useCallback 的依赖数组 在useCallback内设置变化会导致无限循环</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> setA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> memoClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> after <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> after\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>memoClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>点击<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>然后我找了很多文章，应该只有这篇是讲的比较清晰的， <a href=\"https://zhuanlan.zhihu.com/p/98554943\" target=\"_blank\" rel=\"noopener\">React Hooks(二): useCallback 之痛</a></p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>验证码组件还没做好，但大体逻辑是这样</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一直想做一个滑动验证码的组件。</p>\n<h2 id=\"html-结构\"><a href=\"#html-结构\" class=\"headerlink\" title=\"html 结构\"></a>html 结构</h2><pre><code class=\"html\">&lt;div className={styles.container}&gt;\n    &lt;div className={styles.slider}&gt;\n        &lt;!-- 滑块 --&gt;\n        &lt;div className={styles.sliderHandle} onMouseDown={mouseDown} style={sliderHandleStyle} &gt; &gt;&gt; &lt;/div&gt;\n        &lt;!-- 轨道 --&gt;\n        &lt;div className={styles.sliderRail}&gt;\n            &lt;div className={styles.text}&gt;向右滑动验证&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;!-- 滑块路线 --&gt;\n        &lt;div className={styles.sliderTrack} style={{width: ((offset.x) / 250 * 100 + \"%\"), borderRadius: (offset.x < 250) ? 'none' : '45px' }}&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<h2 id=\"less-结构\"><a href=\"#less-结构\" class=\"headerlink\" title=\"less 结构\"></a>less 结构</h2><p>主要是一些定位， 相对定位中的绝对定位</p>\n<pre><code class=\"less\">.container {\n    width: 400px;\n    height: 400px;\n    margin: 50px auto;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    user-select: none;\n\n    .slider {\n        width: 250px;\n        height: 45px;\n        position: relative;\n        border-radius: 45px;\n\n        .sliderHandle {\n            width: 45px;\n            height: 45px;\n            border-radius: 50%;\n            display: flex;\n            flex-direction: row;\n            justify-content: center;\n            align-items: center;\n            background-color: #fff;\n            z-index: 99;\n            position: absolute;\n            left: 0;\n            top: 0;\n            right: auto;\n            transform: translateX(-50%);\n            box-shadow:  1px 5px 2px #eee;\n            cursor: pointer;\n        }\n\n        .sliderRail {\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            width: 100%;\n            border-radius: 45px;\n            background-color: #f5f5f5;\n            display: flex;\n            flex-direction: row;\n            justify-content: center;\n            align-items: center;\n        }\n\n        .sliderTrack {\n            position: absolute;\n            width: 0%;\n            top: 0;\n            left: 0;\n            z-index: 89;\n            right: 0;\n            bottom: 0;\n            border-top-left-radius: 45px;\n            border-bottom-left-radius: 45px ;\n            background-color: #91d5ff;\n        }\n    }\n}\n</code></pre>\n<h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><p>代码中主要使用的是 react Hook， 主要的逻辑是使用了 mouseup, mouseover, mouseDown</p>\n<pre><code class=\"jsx\">const Block: React.FC = () =&gt; {\n    const [dragging, setDragging] = useState(false);\n    const [origin, setOrigin] = useState({ x: 0, y: 0 });\n    const [offset, setOffset] = useState({ x: 0, y: 0});\n\n    const mouseDown = useCallback(({clientX, clientY}) =&gt; {\n        console.log(&quot;mouseDown&quot;, clientX);\n        setOrigin((state) =&gt; ({ x: clientX, y: clientY}))\n        setDragging(true);\n    }, []);\n\n    const mouseMove = useCallback(({clientX, clientY}) =&gt; {\n        let x =  clientX - origin.x;\n        if( x &gt;= 250 ) {\n            x = 250\n        } else if(x / 250 * 100 &lt;= 0 ) {\n            x = 0;\n        }\n        const transition =  { x, y: clientY - origin.y }; \n\n        if(x &gt;= 250) {\n            setDragging(() =&gt; false)\n        }\n        setOffset(state =&gt; {\n            return  {\n                ...state,\n                ...transition\n            }\n        });\n      }, [origin]);\n\n    const mouseUp = useCallback(() =&gt; {\n        console.log(&quot;up&quot;)\n\n        setDragging(() =&gt; false)\n\n      }, []);\n\n    useEffect(() =&gt; {\n      if (dragging) {\n        window.addEventListener(&#39;mousemove&#39;, mouseMove);\n        window.addEventListener(&#39;mouseup&#39;, mouseUp);\n      } else {\n        window.removeEventListener(&#39;mousemove&#39;, mouseMove);\n        window.removeEventListener(&#39;mouseup&#39;, mouseUp);\n\n        setOffset((state) =&gt; {\n            let x = state.x\n            if(x&gt;= 250) {\n                console.log(&quot;验证通过&quot;)            \n            } else if(x&lt; 250) {\n                x = 0\n            }\n            return {\n                x: x,\n                y: state.y\n            }\n        })\n      }\n    }, [dragging]);\n\n    const sliderHandleStyle = useMemo(() =&gt; ({\n        left: (offset.x) / 250 * 100 + &quot;%&quot;,\n        transition: (!dragging ? &#39;left 500ms&#39; : &#39;none&#39; )\n    }), [offset, dragging])\n\n    return (\n        &lt;div&gt;\n            &lt;div className={styles.container}&gt;\n                &lt;div className={styles.slider}&gt;\n                    &lt;div className={styles.sliderHandle} onMouseDown={mouseDown} style={sliderHandleStyle} &gt;&lt;DoubleRightOutlined /&gt;&lt;/div&gt;\n                    &lt;div className={styles.sliderRail}&gt;\n                        &lt;div className={styles.text}&gt;向右滑动验证&lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;div className={styles.sliderTrack} style={{width: ((offset.x) / 250 * 100 + \"%\"), borderRadius: (offset.x < 250) ? 'none' : '45px' }}&gt;&lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>\n<h2 id=\"线上仓库\"><a href=\"#线上仓库\" class=\"headerlink\" title=\"线上仓库\"></a>线上仓库</h2><p><a href=\"https://codesandbox.io/s/polished-sun-grk5j?file=/src/App.js\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<h2 id=\"这里记录一下在使用-react-hook-的一些问题\"><a href=\"#这里记录一下在使用-react-hook-的一些问题\" class=\"headerlink\" title=\"这里记录一下在使用 react hook 的一些问题\"></a>这里记录一下在使用 react hook 的一些问题</h2><p>先谈谈 useCallback 这个函数吧</p>\n<h3 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h3><p>useCallback 提供了两个参数，一个个回调函数，另一个是依赖数组。<br><strong>当依赖数组不改变时，此时回调函数不改变，已达到缓存的效果，减少在re-render的时候重新生成函数</strong></p>\n<h4 id=\"案例1\"><a href=\"#案例1\" class=\"headerlink\" title=\"案例1\"></a>案例1</h4><pre><code class=\"jsx\">// Child.js\n\nconst Child = ({cb}) =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;button onClick={cb}&gt;点击&lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n<pre><code class=\"jsx\">const App = () =&gt; {\n    // 此时 当App 重新渲染的时候，会重新生成 memoClick\n    // const memoClick = () =&gt; console.log(&quot;click&quot;); \n\n    // 用了useCallback 后 无论App 是否重新渲染，传给 Child 的 memoClick 都是之前的引用\n    const memoClick = useCallback(() =&gt; console.log(&quot;click&quot;), [])\n    return (\n        &lt;div&gt;\n            &lt;Child cb={cb} /&gt;\n        &lt;/div&gt;\n    )\n}</code></pre>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>当useCallback 的依赖数组 在useCallback内设置变化会导致无限循环</p>\n<pre><code class=\"jsx\">const App = () =&gt; {\n    const [a, setA] = useState(1);\n    const memoClick = useCallback(() =&gt; {\n        console.log(&quot;click&quot;)\n        setA((state) =&gt; {\n            const after = state.a++;\n            return after\n        })\n    }, [a])\n\n    return (\n        &lt;div&gt;\n            &lt;div&gt;{a}&lt;/div&gt;\n            &lt;Button onClick={memoClick}&gt;点击&lt;/Button&gt;\n        &lt;/div&gt;\n    )\n}</code></pre>\n<p>然后我找了很多文章，应该只有这篇是讲的比较清晰的， <a href=\"https://zhuanlan.zhihu.com/p/98554943\" target=\"_blank\" rel=\"noopener\">React Hooks(二): useCallback 之痛</a></p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>验证码组件还没做好，但大体逻辑是这样</p>\n"},{"title":"电话号码的字母组合","date":"2020-08-26T13:32:44.000Z","type":"algorithm","_content":"\n[电话号码的字母组合](https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/)\n\n## 题目描述\n\n给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。\n\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n\n<div style=\"display: flex; flex-direction: row; justify-content: flex-start;\">\n    <img src=\"./电话号码的字母组合/1.png\"  alt=\"电话\" style=\"width: 200px; height: 200px;\"/>\n</div>\n<!-- ![电话](./电话号码的字母组合/1.png) -->\n\n\n### 示例\n\n```html\n输入：\"23\"\n输出：[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n```\n\n## 思路\n\n![全排列](./电话号码的字母组合/2.jpg)\n\n* 将 数字跟字母 建立映射关系 `{2: 'abc'}`,\n* 数字的长度，就是遍历的深度，递归时，深度减一，当深度为0的时候，停止递归，返回结果，当深度为1的时候，添加到结果\n* 当需要继续递归的时候，保留之前的结果，此结果为了下一次遍历字母的时候，为每一个结果都要添加新的字符\n\n* 以 `\"23\"` 为例子， 转换字母 `array = ['abc', 'def']`\n* `prefix = [], result = []`, 我们循环 `array`, 每次抽出 `array[0]`, 对`array[0]`进行遍历\n    * 当 `prefix` 里面没东西的时候，我们直接将 `array[0]`的值丢进去， 此时 `prefix = ['a', 'b', 'c']`, 进入下一次递归\n* 继续上面的操作， 此时我们的 `array = ['def']`, 抽`array[0]`, 对他进行遍历，`prefix = ['a', 'b', 'c'], result = [], dept = 1`\n    * 现在要对 `def` 遍历，跟 `prefix` 组合成 `['ad', 'bd', 'cd', 'ae', 'be', 'ce', 'af', 'bf', 'cf']`, 此时dept = 1 可以将结果放到 `result`了，继续递归\n* 此时`dept = 0` 退出递归\n\n\n## 代码\n\n```jsx\nvar letterCombinations = function(digits) {\n    let length = digits.length;\n    let result = [];\n    let string = [];\n    let map = {\n        '2': 'abc',\n        '3': 'def',\n        '4': 'ghi',\n        '5': 'jkl',\n        '6': 'mno',\n        '7': 'pqrs',\n        '8': 'tuv',\n        '9': 'wxyz',\n    }\n\n    for(let i = 0; i < length; i++) {\n        string.push(map[digits[i]])\n    }\n    contribute(result, string, [], length);\n    \n    return result;\n};\n\nvar contribute = function(result, array, prefix, dept) {\n    if(dept == 0) {\n        return prefix\n    }\n    let current = array[0];\n    let temp = []\n    let prefixLength = prefix.length;\n    // current = \"def\"; prefix = [a, b, c]\n    for(let i = 0; i < current.length; i++) {\n        if(prefixLength == 0) {\n            temp.push(current[i]);\n            if(dept == 1) {\n                result.push(current[i]);\n            }\n            continue;    \n        }\n        \n        for(let j = 0; j < prefixLength; j++) {\n            let s = prefix[j] + current[i];\n            temp.push(s);\n            if(dept == 1) {\n                result.push(s);\n            }\n        }       \n    }\n    contribute(result, array.slice(1), temp, --dept)\n    \n}\n```","source":"_posts/电话号码的字母组合.md","raw":"---\ntitle: 电话号码的字母组合\ndate: 2020-08-26 13:32:44\ntags: [algorithm-递归, algorithm-全排列, algorithm-深度遍历搜索]\ntype: algorithm\n---\n\n[电话号码的字母组合](https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/)\n\n## 题目描述\n\n给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。\n\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n\n<div style=\"display: flex; flex-direction: row; justify-content: flex-start;\">\n    <img src=\"./电话号码的字母组合/1.png\"  alt=\"电话\" style=\"width: 200px; height: 200px;\"/>\n</div>\n<!-- ![电话](./电话号码的字母组合/1.png) -->\n\n\n### 示例\n\n```html\n输入：\"23\"\n输出：[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n```\n\n## 思路\n\n![全排列](./电话号码的字母组合/2.jpg)\n\n* 将 数字跟字母 建立映射关系 `{2: 'abc'}`,\n* 数字的长度，就是遍历的深度，递归时，深度减一，当深度为0的时候，停止递归，返回结果，当深度为1的时候，添加到结果\n* 当需要继续递归的时候，保留之前的结果，此结果为了下一次遍历字母的时候，为每一个结果都要添加新的字符\n\n* 以 `\"23\"` 为例子， 转换字母 `array = ['abc', 'def']`\n* `prefix = [], result = []`, 我们循环 `array`, 每次抽出 `array[0]`, 对`array[0]`进行遍历\n    * 当 `prefix` 里面没东西的时候，我们直接将 `array[0]`的值丢进去， 此时 `prefix = ['a', 'b', 'c']`, 进入下一次递归\n* 继续上面的操作， 此时我们的 `array = ['def']`, 抽`array[0]`, 对他进行遍历，`prefix = ['a', 'b', 'c'], result = [], dept = 1`\n    * 现在要对 `def` 遍历，跟 `prefix` 组合成 `['ad', 'bd', 'cd', 'ae', 'be', 'ce', 'af', 'bf', 'cf']`, 此时dept = 1 可以将结果放到 `result`了，继续递归\n* 此时`dept = 0` 退出递归\n\n\n## 代码\n\n```jsx\nvar letterCombinations = function(digits) {\n    let length = digits.length;\n    let result = [];\n    let string = [];\n    let map = {\n        '2': 'abc',\n        '3': 'def',\n        '4': 'ghi',\n        '5': 'jkl',\n        '6': 'mno',\n        '7': 'pqrs',\n        '8': 'tuv',\n        '9': 'wxyz',\n    }\n\n    for(let i = 0; i < length; i++) {\n        string.push(map[digits[i]])\n    }\n    contribute(result, string, [], length);\n    \n    return result;\n};\n\nvar contribute = function(result, array, prefix, dept) {\n    if(dept == 0) {\n        return prefix\n    }\n    let current = array[0];\n    let temp = []\n    let prefixLength = prefix.length;\n    // current = \"def\"; prefix = [a, b, c]\n    for(let i = 0; i < current.length; i++) {\n        if(prefixLength == 0) {\n            temp.push(current[i]);\n            if(dept == 1) {\n                result.push(current[i]);\n            }\n            continue;    \n        }\n        \n        for(let j = 0; j < prefixLength; j++) {\n            let s = prefix[j] + current[i];\n            temp.push(s);\n            if(dept == 1) {\n                result.push(s);\n            }\n        }       \n    }\n    contribute(result, array.slice(1), temp, --dept)\n    \n}\n```","slug":"电话号码的字母组合","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgx0059mrojed0obnno","content":"<p><a href=\"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/\" target=\"_blank\" rel=\"noopener\">电话号码的字母组合</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<div style=\"display: flex; flex-direction: row; justify-content: flex-start;\">\n    <img src=\"/2020/08/26/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/1.png\" alt=\"电话\" style=\"width: 200px; height: 200px;\">\n</div>\n<!-- ![电话](./电话号码的字母组合/1.png) -->\n\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\" language-html\"><code class=\"language-html\">输入：\"23\"\n输出：[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].</code></pre>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p><img src=\"/2020/08/26/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/2.jpg\" alt=\"全排列\"></p>\n<ul>\n<li><p>将 数字跟字母 建立映射关系 <code>{2: &#39;abc&#39;}</code>,</p>\n</li>\n<li><p>数字的长度，就是遍历的深度，递归时，深度减一，当深度为0的时候，停止递归，返回结果，当深度为1的时候，添加到结果</p>\n</li>\n<li><p>当需要继续递归的时候，保留之前的结果，此结果为了下一次遍历字母的时候，为每一个结果都要添加新的字符</p>\n</li>\n<li><p>以 <code>&quot;23&quot;</code> 为例子， 转换字母 <code>array = [&#39;abc&#39;, &#39;def&#39;]</code></p>\n</li>\n<li><p><code>prefix = [], result = []</code>, 我们循环 <code>array</code>, 每次抽出 <code>array[0]</code>, 对<code>array[0]</code>进行遍历</p>\n<ul>\n<li>当 <code>prefix</code> 里面没东西的时候，我们直接将 <code>array[0]</code>的值丢进去， 此时 <code>prefix = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>, 进入下一次递归</li>\n</ul>\n</li>\n<li><p>继续上面的操作， 此时我们的 <code>array = [&#39;def&#39;]</code>, 抽<code>array[0]</code>, 对他进行遍历，<code>prefix = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], result = [], dept = 1</code></p>\n<ul>\n<li>现在要对 <code>def</code> 遍历，跟 <code>prefix</code> 组合成 <code>[&#39;ad&#39;, &#39;bd&#39;, &#39;cd&#39;, &#39;ae&#39;, &#39;be&#39;, &#39;ce&#39;, &#39;af&#39;, &#39;bf&#39;, &#39;cf&#39;]</code>, 此时dept = 1 可以将结果放到 <code>result</code>了，继续递归</li>\n</ul>\n</li>\n<li><p>此时<code>dept = 0</code> 退出递归</p>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> letterCombinations <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'2'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'3'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'def'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'4'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ghi'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'5'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'jkl'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'6'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mno'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'7'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pqrs'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'8'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'tuv'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'9'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wxyz'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        string<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">contribute</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> contribute <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dept <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> prefix\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> prefixLength <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// current = \"def\"; prefix = [a, b, c]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> current<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prefixLength <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dept <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>    \n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> prefixLength<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> current<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dept <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>       \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">contribute</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>dept<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/\" target=\"_blank\" rel=\"noopener\">电话号码的字母组合</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<div style=\"display: flex; flex-direction: row; justify-content: flex-start;\">\n    <img src=\"/2020/08/26/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/1.png\" alt=\"电话\" style=\"width: 200px; height: 200px;\">\n</div>\n<!-- ![电话](./电话号码的字母组合/1.png) -->\n\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code class=\"html\">输入：&quot;23&quot;\n输出：[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</code></pre>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p><img src=\"/2020/08/26/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/2.jpg\" alt=\"全排列\"></p>\n<ul>\n<li><p>将 数字跟字母 建立映射关系 <code>{2: &#39;abc&#39;}</code>,</p>\n</li>\n<li><p>数字的长度，就是遍历的深度，递归时，深度减一，当深度为0的时候，停止递归，返回结果，当深度为1的时候，添加到结果</p>\n</li>\n<li><p>当需要继续递归的时候，保留之前的结果，此结果为了下一次遍历字母的时候，为每一个结果都要添加新的字符</p>\n</li>\n<li><p>以 <code>&quot;23&quot;</code> 为例子， 转换字母 <code>array = [&#39;abc&#39;, &#39;def&#39;]</code></p>\n</li>\n<li><p><code>prefix = [], result = []</code>, 我们循环 <code>array</code>, 每次抽出 <code>array[0]</code>, 对<code>array[0]</code>进行遍历</p>\n<ul>\n<li>当 <code>prefix</code> 里面没东西的时候，我们直接将 <code>array[0]</code>的值丢进去， 此时 <code>prefix = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>, 进入下一次递归</li>\n</ul>\n</li>\n<li><p>继续上面的操作， 此时我们的 <code>array = [&#39;def&#39;]</code>, 抽<code>array[0]</code>, 对他进行遍历，<code>prefix = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], result = [], dept = 1</code></p>\n<ul>\n<li>现在要对 <code>def</code> 遍历，跟 <code>prefix</code> 组合成 <code>[&#39;ad&#39;, &#39;bd&#39;, &#39;cd&#39;, &#39;ae&#39;, &#39;be&#39;, &#39;ce&#39;, &#39;af&#39;, &#39;bf&#39;, &#39;cf&#39;]</code>, 此时dept = 1 可以将结果放到 <code>result</code>了，继续递归</li>\n</ul>\n</li>\n<li><p>此时<code>dept = 0</code> 退出递归</p>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"jsx\">var letterCombinations = function(digits) {\n    let length = digits.length;\n    let result = [];\n    let string = [];\n    let map = {\n        &#39;2&#39;: &#39;abc&#39;,\n        &#39;3&#39;: &#39;def&#39;,\n        &#39;4&#39;: &#39;ghi&#39;,\n        &#39;5&#39;: &#39;jkl&#39;,\n        &#39;6&#39;: &#39;mno&#39;,\n        &#39;7&#39;: &#39;pqrs&#39;,\n        &#39;8&#39;: &#39;tuv&#39;,\n        &#39;9&#39;: &#39;wxyz&#39;,\n    }\n\n    for(let i = 0; i &lt; length; i++) {\n        string.push(map[digits[i]])\n    }\n    contribute(result, string, [], length);\n\n    return result;\n};\n\nvar contribute = function(result, array, prefix, dept) {\n    if(dept == 0) {\n        return prefix\n    }\n    let current = array[0];\n    let temp = []\n    let prefixLength = prefix.length;\n    // current = &quot;def&quot;; prefix = [a, b, c]\n    for(let i = 0; i &lt; current.length; i++) {\n        if(prefixLength == 0) {\n            temp.push(current[i]);\n            if(dept == 1) {\n                result.push(current[i]);\n            }\n            continue;    \n        }\n\n        for(let j = 0; j &lt; prefixLength; j++) {\n            let s = prefix[j] + current[i];\n            temp.push(s);\n            if(dept == 1) {\n                result.push(s);\n            }\n        }       \n    }\n    contribute(result, array.slice(1), temp, --dept)\n\n}</code></pre>\n"},{"title":"盛最多水的容器","date":"2020-06-23T16:12:00.000Z","type":"algorithm","_content":"\n[11. 盛最多水的容器](https://leetcode-cn.com/problems/container-with-most-water/)\n\n## 题目描述\n\n给定一个数组，数组存放的是每个元素的高度，以数组的key做x轴， a[key]做y轴 计算出其中两条与x轴形成的最大面积。\n\n> 以[1,8,6,2,5,4,8,3,7]为例子\n> 最大的面积为49， 以x1轴为1，y1轴为8， 和x2为8，y2为7构成的面积最大为49\n\n<img src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg\" style=\"margin-left: 0; height: 250px\" />\n\n\n## 暴力破解\n\n我们可以用两重循环的方式暴力破解，可是我可以看出我们其实做了一些没必要的计算，\n    * `i = 0`时，`j = 1, j = 2, j = 3, .....j = 7`这些都是没必要计算的\n    * `i = 1`时，`j = 2, j = 3, j = 4, ....j = 7`, 这些都是没必要的\n    * 如此类推\n    \n```js\nvar maxArea = function(height) {\n    let start = 0; \n    let end = height.length - 1;\n    let max = 0;\n\n    for(let i = 0; i < height.length; i++) {\n        for(let j = i + 1; j < height.length; j++) {\n            let x = j - i;\n            let y = height[i] > height[j] ? height[j] : heigth[i];\n            max = Math.max(x * y, max)\n        }\n    } \n    return max;\n};\n```\n\n## 分析\n\n此题使用双指针，我们看上图，当前值为y, 当y一定时，那么x 尽可能的大，就可以找到最大值了。\n\n* 定义 **头尾指针**\n* 如果当前头指针 < 尾指针，那么，**头指针到尾指针的距离**为 y, **头指针**的值为x, 解释一下： 当前值头指针的值固定（y固定），x为最大。所以当前值高度为y的时候，面积最大\n* 如果当前头指针 > 尾指针，那么，**头指针到尾指针的距离**为 y, **尾指针**的值为x, 解释如上\n* 这个时候我们只需要修改头指针和尾指针就可以了。\n    * **头指针 < 尾指针时**，当前头指针的值y, 头指针到尾指针的距离为x, 当前面积已经最大了，所以**头指针向后移 start++**\n    * **头指针 > 尾指针时**，当前尾指针的值y, 头指针到为指针的距离为x, 当前面积已经醉倒了，所以**尾指针向前移 end--**\n\n* **注意：**这里需要分析好y轴就可以了\n\n以上面`heigth = [1,8,6,2,5,4,8,3,7]` 为例子， `start = 0; end = heigth.length - 1`\n\n* 当start = 0的时候, 当前y值为 `heigth[start]`为1，`height[end]`为7, `height[start] < height[end]`, start到end的距离x 为最大，且y的距离只能为1, 当前y = 1的时候，面积最大为7， 然后`start向后移`\n* 此时 `start = 1, end = heigth.length - 1`:\n    * `height[start] = 8, height[end] = 7`, 然而`height[start] > height[end]`, 那y的值只能够**取小**的那个，即`height[end]`, 当前`y=height[end]=7`的时候，`x = end - start`，面积最大为`49`, `end向前移动`; \n\n\n\n## 代码\n\n```jsx\nvar maxArea = function(height) {\n    let start = 0; \n    let end = height.length - 1;\n    let max = 0;\n\n    while(start != end) {\n        let x = end - start;\n        let y = height[end] > height[start] ? height[start] : height[end];\n\n        max = Math.max(x * y, max);\n\n        if(height[end] > height[start]) {\n            start++;\n        } else {\n            end--;\n        }\n    }\n    return max;\n};\n```\n","source":"_posts/盛最多水的容器.md","raw":"---\ntitle: 盛最多水的容器\ndate: 2020-06-23 16:12:00\ntype: algorithm\ntags: algorithm-双指针\n---\n\n[11. 盛最多水的容器](https://leetcode-cn.com/problems/container-with-most-water/)\n\n## 题目描述\n\n给定一个数组，数组存放的是每个元素的高度，以数组的key做x轴， a[key]做y轴 计算出其中两条与x轴形成的最大面积。\n\n> 以[1,8,6,2,5,4,8,3,7]为例子\n> 最大的面积为49， 以x1轴为1，y1轴为8， 和x2为8，y2为7构成的面积最大为49\n\n<img src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg\" style=\"margin-left: 0; height: 250px\" />\n\n\n## 暴力破解\n\n我们可以用两重循环的方式暴力破解，可是我可以看出我们其实做了一些没必要的计算，\n    * `i = 0`时，`j = 1, j = 2, j = 3, .....j = 7`这些都是没必要计算的\n    * `i = 1`时，`j = 2, j = 3, j = 4, ....j = 7`, 这些都是没必要的\n    * 如此类推\n    \n```js\nvar maxArea = function(height) {\n    let start = 0; \n    let end = height.length - 1;\n    let max = 0;\n\n    for(let i = 0; i < height.length; i++) {\n        for(let j = i + 1; j < height.length; j++) {\n            let x = j - i;\n            let y = height[i] > height[j] ? height[j] : heigth[i];\n            max = Math.max(x * y, max)\n        }\n    } \n    return max;\n};\n```\n\n## 分析\n\n此题使用双指针，我们看上图，当前值为y, 当y一定时，那么x 尽可能的大，就可以找到最大值了。\n\n* 定义 **头尾指针**\n* 如果当前头指针 < 尾指针，那么，**头指针到尾指针的距离**为 y, **头指针**的值为x, 解释一下： 当前值头指针的值固定（y固定），x为最大。所以当前值高度为y的时候，面积最大\n* 如果当前头指针 > 尾指针，那么，**头指针到尾指针的距离**为 y, **尾指针**的值为x, 解释如上\n* 这个时候我们只需要修改头指针和尾指针就可以了。\n    * **头指针 < 尾指针时**，当前头指针的值y, 头指针到尾指针的距离为x, 当前面积已经最大了，所以**头指针向后移 start++**\n    * **头指针 > 尾指针时**，当前尾指针的值y, 头指针到为指针的距离为x, 当前面积已经醉倒了，所以**尾指针向前移 end--**\n\n* **注意：**这里需要分析好y轴就可以了\n\n以上面`heigth = [1,8,6,2,5,4,8,3,7]` 为例子， `start = 0; end = heigth.length - 1`\n\n* 当start = 0的时候, 当前y值为 `heigth[start]`为1，`height[end]`为7, `height[start] < height[end]`, start到end的距离x 为最大，且y的距离只能为1, 当前y = 1的时候，面积最大为7， 然后`start向后移`\n* 此时 `start = 1, end = heigth.length - 1`:\n    * `height[start] = 8, height[end] = 7`, 然而`height[start] > height[end]`, 那y的值只能够**取小**的那个，即`height[end]`, 当前`y=height[end]=7`的时候，`x = end - start`，面积最大为`49`, `end向前移动`; \n\n\n\n## 代码\n\n```jsx\nvar maxArea = function(height) {\n    let start = 0; \n    let end = height.length - 1;\n    let max = 0;\n\n    while(start != end) {\n        let x = end - start;\n        let y = height[end] > height[start] ? height[start] : height[end];\n\n        max = Math.max(x * y, max);\n\n        if(height[end] > height[start]) {\n            start++;\n        } else {\n            end--;\n        }\n    }\n    return max;\n};\n```\n","slug":"盛最多水的容器","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrgy005bmrojd8e27qok","content":"<p><a href=\"https://leetcode-cn.com/problems/container-with-most-water/\" target=\"_blank\" rel=\"noopener\">11. 盛最多水的容器</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数组，数组存放的是每个元素的高度，以数组的key做x轴， a[key]做y轴 计算出其中两条与x轴形成的最大面积。</p>\n<blockquote>\n<p>以[1,8,6,2,5,4,8,3,7]为例子<br>最大的面积为49， 以x1轴为1，y1轴为8， 和x2为8，y2为7构成的面积最大为49</p>\n</blockquote>\n<img src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg\" style=\"margin-left: 0; height: 250px\">\n\n\n<h2 id=\"暴力破解\"><a href=\"#暴力破解\" class=\"headerlink\" title=\"暴力破解\"></a>暴力破解</h2><p>我们可以用两重循环的方式暴力破解，可是我可以看出我们其实做了一些没必要的计算，<br>    * <code>i = 0</code>时，<code>j = 1, j = 2, j = 3, .....j = 7</code>这些都是没必要计算的<br>    * <code>i = 1</code>时，<code>j = 2, j = 3, j = 4, ....j = 7</code>, 这些都是没必要的<br>    * 如此类推</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> maxArea <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> height<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> height<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> heigth<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>此题使用双指针，我们看上图，当前值为y, 当y一定时，那么x 尽可能的大，就可以找到最大值了。</p>\n<ul>\n<li><p>定义 <strong>头尾指针</strong></p>\n</li>\n<li><p>如果当前头指针 &lt; 尾指针，那么，<strong>头指针到尾指针的距离</strong>为 y, <strong>头指针</strong>的值为x, 解释一下： 当前值头指针的值固定（y固定），x为最大。所以当前值高度为y的时候，面积最大</p>\n</li>\n<li><p>如果当前头指针 &gt; 尾指针，那么，<strong>头指针到尾指针的距离</strong>为 y, <strong>尾指针</strong>的值为x, 解释如上</p>\n</li>\n<li><p>这个时候我们只需要修改头指针和尾指针就可以了。</p>\n<ul>\n<li><strong>头指针 &lt; 尾指针时</strong>，当前头指针的值y, 头指针到尾指针的距离为x, 当前面积已经最大了，所以<strong>头指针向后移 start++</strong></li>\n<li><strong>头指针 &gt; 尾指针时</strong>，当前尾指针的值y, 头指针到为指针的距离为x, 当前面积已经醉倒了，所以<strong>尾指针向前移 end–</strong></li>\n</ul>\n</li>\n<li><p><strong>注意：</strong>这里需要分析好y轴就可以了</p>\n</li>\n</ul>\n<p>以上面<code>heigth = [1,8,6,2,5,4,8,3,7]</code> 为例子， <code>start = 0; end = heigth.length - 1</code></p>\n<ul>\n<li>当start = 0的时候, 当前y值为 <code>heigth[start]</code>为1，<code>height[end]</code>为7, <code>height[start] &lt; height[end]</code>, start到end的距离x 为最大，且y的距离只能为1, 当前y = 1的时候，面积最大为7， 然后<code>start向后移</code></li>\n<li>此时 <code>start = 1, end = heigth.length - 1</code>:<ul>\n<li><code>height[start] = 8, height[end] = 7</code>, 然而<code>height[start] &gt; height[end]</code>, 那y的值只能够<strong>取小</strong>的那个，即<code>height[end]</code>, 当前<code>y=height[end]=7</code>的时候，<code>x = end - start</code>，面积最大为<code>49</code>, <code>end向前移动</code>; </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> maxArea <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">!=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> height<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> height<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> height<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> height<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/container-with-most-water/\" target=\"_blank\" rel=\"noopener\">11. 盛最多水的容器</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数组，数组存放的是每个元素的高度，以数组的key做x轴， a[key]做y轴 计算出其中两条与x轴形成的最大面积。</p>\n<blockquote>\n<p>以[1,8,6,2,5,4,8,3,7]为例子<br>最大的面积为49， 以x1轴为1，y1轴为8， 和x2为8，y2为7构成的面积最大为49</p>\n</blockquote>\n<img src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg\" style=\"margin-left: 0; height: 250px\">\n\n\n<h2 id=\"暴力破解\"><a href=\"#暴力破解\" class=\"headerlink\" title=\"暴力破解\"></a>暴力破解</h2><p>我们可以用两重循环的方式暴力破解，可是我可以看出我们其实做了一些没必要的计算，<br>    * <code>i = 0</code>时，<code>j = 1, j = 2, j = 3, .....j = 7</code>这些都是没必要计算的<br>    * <code>i = 1</code>时，<code>j = 2, j = 3, j = 4, ....j = 7</code>, 这些都是没必要的<br>    * 如此类推</p>\n<pre><code class=\"js\">var maxArea = function(height) {\n    let start = 0; \n    let end = height.length - 1;\n    let max = 0;\n\n    for(let i = 0; i &lt; height.length; i++) {\n        for(let j = i + 1; j &lt; height.length; j++) {\n            let x = j - i;\n            let y = height[i] &gt; height[j] ? height[j] : heigth[i];\n            max = Math.max(x * y, max)\n        }\n    } \n    return max;\n};</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>此题使用双指针，我们看上图，当前值为y, 当y一定时，那么x 尽可能的大，就可以找到最大值了。</p>\n<ul>\n<li><p>定义 <strong>头尾指针</strong></p>\n</li>\n<li><p>如果当前头指针 &lt; 尾指针，那么，<strong>头指针到尾指针的距离</strong>为 y, <strong>头指针</strong>的值为x, 解释一下： 当前值头指针的值固定（y固定），x为最大。所以当前值高度为y的时候，面积最大</p>\n</li>\n<li><p>如果当前头指针 &gt; 尾指针，那么，<strong>头指针到尾指针的距离</strong>为 y, <strong>尾指针</strong>的值为x, 解释如上</p>\n</li>\n<li><p>这个时候我们只需要修改头指针和尾指针就可以了。</p>\n<ul>\n<li><strong>头指针 &lt; 尾指针时</strong>，当前头指针的值y, 头指针到尾指针的距离为x, 当前面积已经最大了，所以<strong>头指针向后移 start++</strong></li>\n<li><strong>头指针 &gt; 尾指针时</strong>，当前尾指针的值y, 头指针到为指针的距离为x, 当前面积已经醉倒了，所以<strong>尾指针向前移 end–</strong></li>\n</ul>\n</li>\n<li><p><strong>注意：</strong>这里需要分析好y轴就可以了</p>\n</li>\n</ul>\n<p>以上面<code>heigth = [1,8,6,2,5,4,8,3,7]</code> 为例子， <code>start = 0; end = heigth.length - 1</code></p>\n<ul>\n<li>当start = 0的时候, 当前y值为 <code>heigth[start]</code>为1，<code>height[end]</code>为7, <code>height[start] &lt; height[end]</code>, start到end的距离x 为最大，且y的距离只能为1, 当前y = 1的时候，面积最大为7， 然后<code>start向后移</code></li>\n<li>此时 <code>start = 1, end = heigth.length - 1</code>:<ul>\n<li><code>height[start] = 8, height[end] = 7</code>, 然而<code>height[start] &gt; height[end]</code>, 那y的值只能够<strong>取小</strong>的那个，即<code>height[end]</code>, 当前<code>y=height[end]=7</code>的时候，<code>x = end - start</code>，面积最大为<code>49</code>, <code>end向前移动</code>; </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"jsx\">var maxArea = function(height) {\n    let start = 0; \n    let end = height.length - 1;\n    let max = 0;\n\n    while(start != end) {\n        let x = end - start;\n        let y = height[end] &gt; height[start] ? height[start] : height[end];\n\n        max = Math.max(x * y, max);\n\n        if(height[end] &gt; height[start]) {\n            start++;\n        } else {\n            end--;\n        }\n    }\n    return max;\n};</code></pre>\n"},{"title":"相同的树","date":"2020-08-07T10:17:43.000Z","type":"algorithm","_content":"\n\n## 题目描述\n\n给定两个二叉树，编写一个函数来检验它们是否相同。\n如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。\n\n### 示例：\n\n```html\n输入:      1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n输出: true\n```\n\n\n## 分析\n\n* 我们暂定左边的树为p, 右边的树为q\n* 从根分析，要是 p 或 q ，一个为空，另一个不为空，那么我们返回false\n* p 和 q 都为空，那么我们直接返回true\n* p 和 q 都不为空，那么我们判断他们的值是否相同 `p.val === q.val`\n* 递归操作， 判断 p的左子树 跟 q 的左子树 是否相同，执行上面的操作, 所以`isSameTree(p.left, q.left)`； \n    p 的右子树 跟 q 的右子树是否相同，执行上面的操作, 所以 `isSameTree(p.right, q.right)`\n\n\n## 代码\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    if(!p && q) {\n        return false\n    }\n    if(p && !q) {\n        return false\n    }\n\n    if(!p && !q) {\n        return true\n    }\n\n    if(p.val !== q.val) {\n        return false\n    }\n\n\n    return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n};\n```","source":"_posts/相同的树.md","raw":"---\ntitle: 相同的树\ndate: 2020-08-07 10:17:43\ntags: algorithm-二叉树\ntype: algorithm\n---\n\n\n## 题目描述\n\n给定两个二叉树，编写一个函数来检验它们是否相同。\n如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。\n\n### 示例：\n\n```html\n输入:      1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n输出: true\n```\n\n\n## 分析\n\n* 我们暂定左边的树为p, 右边的树为q\n* 从根分析，要是 p 或 q ，一个为空，另一个不为空，那么我们返回false\n* p 和 q 都为空，那么我们直接返回true\n* p 和 q 都不为空，那么我们判断他们的值是否相同 `p.val === q.val`\n* 递归操作， 判断 p的左子树 跟 q 的左子树 是否相同，执行上面的操作, 所以`isSameTree(p.left, q.left)`； \n    p 的右子树 跟 q 的右子树是否相同，执行上面的操作, 所以 `isSameTree(p.right, q.right)`\n\n\n## 代码\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    if(!p && q) {\n        return false\n    }\n    if(p && !q) {\n        return false\n    }\n\n    if(!p && !q) {\n        return true\n    }\n\n    if(p.val !== q.val) {\n        return false\n    }\n\n\n    return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n};\n```","slug":"相同的树","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrh0005gmroj6hzi6mo2","content":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定两个二叉树，编写一个函数来检验它们是否相同。<br>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre class=\" language-html\"><code class=\"language-html\">输入:      1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n输出: true</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>我们暂定左边的树为p, 右边的树为q</li>\n<li>从根分析，要是 p 或 q ，一个为空，另一个不为空，那么我们返回false</li>\n<li>p 和 q 都为空，那么我们直接返回true</li>\n<li>p 和 q 都不为空，那么我们判断他们的值是否相同 <code>p.val === q.val</code></li>\n<li>递归操作， 判断 p的左子树 跟 q 的左子树 是否相同，执行上面的操作, 所以<code>isSameTree(p.left, q.left)</code>；<br>  p 的右子树 跟 q 的右子树是否相同，执行上面的操作, 所以 <code>isSameTree(p.right, q.right)</code></li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */</span>\n<span class=\"token keyword\">var</span> isSameTree <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!==</span> q<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> q<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定两个二叉树，编写一个函数来检验它们是否相同。<br>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"html\">输入:      1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n输出: true</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>我们暂定左边的树为p, 右边的树为q</li>\n<li>从根分析，要是 p 或 q ，一个为空，另一个不为空，那么我们返回false</li>\n<li>p 和 q 都为空，那么我们直接返回true</li>\n<li>p 和 q 都不为空，那么我们判断他们的值是否相同 <code>p.val === q.val</code></li>\n<li>递归操作， 判断 p的左子树 跟 q 的左子树 是否相同，执行上面的操作, 所以<code>isSameTree(p.left, q.left)</code>；<br>  p 的右子树 跟 q 的右子树是否相同，执行上面的操作, 所以 <code>isSameTree(p.right, q.right)</code></li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    if(!p &amp;&amp; q) {\n        return false\n    }\n    if(p &amp;&amp; !q) {\n        return false\n    }\n\n    if(!p &amp;&amp; !q) {\n        return true\n    }\n\n    if(p.val !== q.val) {\n        return false\n    }\n\n\n    return p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);\n};</code></pre>\n"},{"title":"系统命令行代理","date":"2021-06-23T23:05:57.000Z","_content":"\n# windows 终端代理设置\n\n## cmd\n\n我的v2ray 的端口是1080是socks5, http用的是1081\n```bash\n#http\nset http_proxy=http://127.0.0.1:1081\nset https_proxy=http://127.0.0.1:1081\n```\n\n如果是socks5\n```bash\n#socks5\nset https_proxy=socks5://127.0.0.1:1080\nset http_proxy=socks5://127.0.0.1:1080\n```\n\n## powershell\n理论跟上面一样 换个地址罢了\n```bash\n$env:http_proxy=\"http://127.0.0.1:1080\"\n$env:https_proxy=\"http://127.0.0.1:1080\"\n```\n# git 下设置代理\n\n**如果是使用socks代理：就用socks5, 如果是http,那就改成http**\n```bash\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n\n# git 取消代理\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n# Mac 下设置\n\n```\nvi ~/.zshrc\n```\n\n复制一下内容\n\n```js\nfunction proxy_on() {\n    export no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\n    export http_proxy=\"http://127.0.0.1:1087\"\n    export https_proxy=$http_proxy\n    #export all_proxy=socks5://127.0.0.1:7890 # or this line\n    echo -e \"已开启代理\"\n}\n\nfunction proxy_off(){\n    unset http_proxy\n    unset https_proxy\n    echo -e \"已关闭代理\"\n}\n```\n\n最后运行`source ~/.zshrc` 使文件生效\n\n## 使用\n\n只需要打开终端， 输入`proxy_on`即可， \n\n## 验证\n\n```bash\ncurl cip.cc\n```","source":"_posts/系统命令行代理.md","raw":"---\ntitle: 系统命令行代理\ndate: 2021-06-23 23:05:57\ntags: 代理\n---\n\n# windows 终端代理设置\n\n## cmd\n\n我的v2ray 的端口是1080是socks5, http用的是1081\n```bash\n#http\nset http_proxy=http://127.0.0.1:1081\nset https_proxy=http://127.0.0.1:1081\n```\n\n如果是socks5\n```bash\n#socks5\nset https_proxy=socks5://127.0.0.1:1080\nset http_proxy=socks5://127.0.0.1:1080\n```\n\n## powershell\n理论跟上面一样 换个地址罢了\n```bash\n$env:http_proxy=\"http://127.0.0.1:1080\"\n$env:https_proxy=\"http://127.0.0.1:1080\"\n```\n# git 下设置代理\n\n**如果是使用socks代理：就用socks5, 如果是http,那就改成http**\n```bash\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n\n# git 取消代理\n\n```bash\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n# Mac 下设置\n\n```\nvi ~/.zshrc\n```\n\n复制一下内容\n\n```js\nfunction proxy_on() {\n    export no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\n    export http_proxy=\"http://127.0.0.1:1087\"\n    export https_proxy=$http_proxy\n    #export all_proxy=socks5://127.0.0.1:7890 # or this line\n    echo -e \"已开启代理\"\n}\n\nfunction proxy_off(){\n    unset http_proxy\n    unset https_proxy\n    echo -e \"已关闭代理\"\n}\n```\n\n最后运行`source ~/.zshrc` 使文件生效\n\n## 使用\n\n只需要打开终端， 输入`proxy_on`即可， \n\n## 验证\n\n```bash\ncurl cip.cc\n```","slug":"系统命令行代理","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrh1005jmroj32okd79c","content":"<h1 id=\"windows-终端代理设置\"><a href=\"#windows-终端代理设置\" class=\"headerlink\" title=\"windows 终端代理设置\"></a>windows 终端代理设置</h1><h2 id=\"cmd\"><a href=\"#cmd\" class=\"headerlink\" title=\"cmd\"></a>cmd</h2><p>我的v2ray 的端口是1080是socks5, http用的是1081</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\">#http</span>\n<span class=\"token keyword\">set</span> http_proxy<span class=\"token operator\">=</span>http://127.0.0.1:1081\n<span class=\"token keyword\">set</span> https_proxy<span class=\"token operator\">=</span>http://127.0.0.1:1081</code></pre>\n<p>如果是socks5</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\">#socks5</span>\n<span class=\"token keyword\">set</span> https_proxy<span class=\"token operator\">=</span>socks5://127.0.0.1:1080\n<span class=\"token keyword\">set</span> http_proxy<span class=\"token operator\">=</span>socks5://127.0.0.1:1080</code></pre>\n<h2 id=\"powershell\"><a href=\"#powershell\" class=\"headerlink\" title=\"powershell\"></a>powershell</h2><p>理论跟上面一样 换个地址罢了</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token variable\">$env</span>:http_proxy<span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:1080\"</span>\n<span class=\"token variable\">$env</span>:https_proxy<span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:1080\"</span></code></pre>\n<h1 id=\"git-下设置代理\"><a href=\"#git-下设置代理\" class=\"headerlink\" title=\"git 下设置代理\"></a>git 下设置代理</h1><p><strong>如果是使用socks代理：就用socks5, 如果是http,那就改成http</strong></p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global http.proxy <span class=\"token string\">'socks5://127.0.0.1:1080'</span>\n<span class=\"token function\">git</span> config --global https.proxy <span class=\"token string\">'socks5://127.0.0.1:1080'</span></code></pre>\n<h1 id=\"git-取消代理\"><a href=\"#git-取消代理\" class=\"headerlink\" title=\"git 取消代理\"></a>git 取消代理</h1><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global --unset http.proxy\n<span class=\"token function\">git</span> config --global --unset https.proxy</code></pre>\n<h1 id=\"Mac-下设置\"><a href=\"#Mac-下设置\" class=\"headerlink\" title=\"Mac 下设置\"></a>Mac 下设置</h1><pre><code>vi ~/.zshrc</code></pre><p>复制一下内容</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">proxy_on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> no_proxy<span class=\"token operator\">=</span><span class=\"token string\">\"localhost,127.0.0.1,localaddress,.localdomain.com\"</span>\n    <span class=\"token keyword\">export</span> http_proxy<span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:1087\"</span>\n    <span class=\"token keyword\">export</span> https_proxy<span class=\"token operator\">=</span>$http_proxy\n    #<span class=\"token keyword\">export</span> all_proxy<span class=\"token operator\">=</span>socks5<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">127.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">7890</span> # or <span class=\"token keyword\">this</span> line\n    echo <span class=\"token operator\">-</span>e <span class=\"token string\">\"已开启代理\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">proxy_off</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    unset http_proxy\n    unset https_proxy\n    echo <span class=\"token operator\">-</span>e <span class=\"token string\">\"已关闭代理\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>最后运行<code>source ~/.zshrc</code> 使文件生效</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>只需要打开终端， 输入<code>proxy_on</code>即可， </p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><pre class=\" language-bash\"><code class=\"language-bash\">curl cip.cc</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"windows-终端代理设置\"><a href=\"#windows-终端代理设置\" class=\"headerlink\" title=\"windows 终端代理设置\"></a>windows 终端代理设置</h1><h2 id=\"cmd\"><a href=\"#cmd\" class=\"headerlink\" title=\"cmd\"></a>cmd</h2><p>我的v2ray 的端口是1080是socks5, http用的是1081</p>\n<pre><code class=\"bash\">#http\nset http_proxy=http://127.0.0.1:1081\nset https_proxy=http://127.0.0.1:1081</code></pre>\n<p>如果是socks5</p>\n<pre><code class=\"bash\">#socks5\nset https_proxy=socks5://127.0.0.1:1080\nset http_proxy=socks5://127.0.0.1:1080</code></pre>\n<h2 id=\"powershell\"><a href=\"#powershell\" class=\"headerlink\" title=\"powershell\"></a>powershell</h2><p>理论跟上面一样 换个地址罢了</p>\n<pre><code class=\"bash\">$env:http_proxy=&quot;http://127.0.0.1:1080&quot;\n$env:https_proxy=&quot;http://127.0.0.1:1080&quot;</code></pre>\n<h1 id=\"git-下设置代理\"><a href=\"#git-下设置代理\" class=\"headerlink\" title=\"git 下设置代理\"></a>git 下设置代理</h1><p><strong>如果是使用socks代理：就用socks5, 如果是http,那就改成http</strong></p>\n<pre><code class=\"bash\">git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39;\ngit config --global https.proxy &#39;socks5://127.0.0.1:1080&#39;</code></pre>\n<h1 id=\"git-取消代理\"><a href=\"#git-取消代理\" class=\"headerlink\" title=\"git 取消代理\"></a>git 取消代理</h1><pre><code class=\"bash\">git config --global --unset http.proxy\ngit config --global --unset https.proxy</code></pre>\n<h1 id=\"Mac-下设置\"><a href=\"#Mac-下设置\" class=\"headerlink\" title=\"Mac 下设置\"></a>Mac 下设置</h1><pre><code>vi ~/.zshrc</code></pre><p>复制一下内容</p>\n<pre><code class=\"js\">function proxy_on() {\n    export no_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;\n    export http_proxy=&quot;http://127.0.0.1:1087&quot;\n    export https_proxy=$http_proxy\n    #export all_proxy=socks5://127.0.0.1:7890 # or this line\n    echo -e &quot;已开启代理&quot;\n}\n\nfunction proxy_off(){\n    unset http_proxy\n    unset https_proxy\n    echo -e &quot;已关闭代理&quot;\n}</code></pre>\n<p>最后运行<code>source ~/.zshrc</code> 使文件生效</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>只需要打开终端， 输入<code>proxy_on</code>即可， </p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><pre><code class=\"bash\">curl cip.cc</code></pre>\n"},{"title":"计数二进制子串","date":"2020-08-10T13:59:14.000Z","type":"algorithm","_content":"\n[计数二进制子串](https://leetcode-cn.com/problems/count-binary-substrings/)\n\n## 题目描述\n\n给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。\n\n重复出现的子串要计算它们出现的次数。\n\n### 示例：\n\n```html\n输入: \"00110011\"\n输出: 6\n解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。\n\n请注意，一些重复出现的子串要计算它们出现的次数。\n\n另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。\n\n```\n\n## 分析\n\n* 我们直接用 `1100` 做分析例子，我们可以看出其实他的结果就是 2，就只有两种结果`[1100, 10]`\n* 所以我们循环这个字符串，记录相同的的数字 `1`的个数 = 2；然后以当前i做起点，往后遍历两位，要是都相同那么就是2种（此时重复的数字还是2），要是只有一位就只有1种（此时重复的数字就变成1了）\n\n\n## 代码\n\n```jsx\n/**\n * @param {string} s\n * @return {number}\n */\nvar countBinarySubstrings = function(s) {\n    let length = s.length;\n    if(length == 0) {\n        return 0;\n    }\n    \n    let count = 1;\n    let prev = s[0];\n    let currentNum = null;\n    let result = 0;\n    // s = \"1100\"\n    let i = 1;\n    while(i < length) {\n        currentNum = s[i];\n        if(currentNum == prev) { // 为了找相同的数字\n            count++;  // 相同数字的个数\n            i++;\n            continue;\n        }\n\n        // prev = 1; count = 2\n\n        // currentNum 已经跟prev 不一样了， 就是 0 => 1 , 1 => 0， 然后以i为起点，遍历后面count个数\n        let j = i; \n        while(j < i + count && j < length) {\n            // 这里表示 当前数字跟 前一个数字相同的话结果 + 1 ,即当前 prev = 1， s[j] = 0, 就是当前i为去起点，往后两位都是0的话就 + 2\n            if(s[j] == !(prev * 1)) {      \n                result++;\n            } else {  \n                // 此时不一样时，重新计算重复的个数\n                count = j - i\n                break;\n            }\n            j++;\n        }\n\n        i = i + count;\n        prev = currentNum;\n    }\n    return result\n};\n```\n","source":"_posts/计数二进制子串.md","raw":"---\ntitle: 计数二进制子串\ndate: 2020-08-10 13:59:14\ntags: algorithm-基础\n# categories: algorithm\ntype: algorithm\n---\n\n[计数二进制子串](https://leetcode-cn.com/problems/count-binary-substrings/)\n\n## 题目描述\n\n给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。\n\n重复出现的子串要计算它们出现的次数。\n\n### 示例：\n\n```html\n输入: \"00110011\"\n输出: 6\n解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。\n\n请注意，一些重复出现的子串要计算它们出现的次数。\n\n另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。\n\n```\n\n## 分析\n\n* 我们直接用 `1100` 做分析例子，我们可以看出其实他的结果就是 2，就只有两种结果`[1100, 10]`\n* 所以我们循环这个字符串，记录相同的的数字 `1`的个数 = 2；然后以当前i做起点，往后遍历两位，要是都相同那么就是2种（此时重复的数字还是2），要是只有一位就只有1种（此时重复的数字就变成1了）\n\n\n## 代码\n\n```jsx\n/**\n * @param {string} s\n * @return {number}\n */\nvar countBinarySubstrings = function(s) {\n    let length = s.length;\n    if(length == 0) {\n        return 0;\n    }\n    \n    let count = 1;\n    let prev = s[0];\n    let currentNum = null;\n    let result = 0;\n    // s = \"1100\"\n    let i = 1;\n    while(i < length) {\n        currentNum = s[i];\n        if(currentNum == prev) { // 为了找相同的数字\n            count++;  // 相同数字的个数\n            i++;\n            continue;\n        }\n\n        // prev = 1; count = 2\n\n        // currentNum 已经跟prev 不一样了， 就是 0 => 1 , 1 => 0， 然后以i为起点，遍历后面count个数\n        let j = i; \n        while(j < i + count && j < length) {\n            // 这里表示 当前数字跟 前一个数字相同的话结果 + 1 ,即当前 prev = 1， s[j] = 0, 就是当前i为去起点，往后两位都是0的话就 + 2\n            if(s[j] == !(prev * 1)) {      \n                result++;\n            } else {  \n                // 此时不一样时，重新计算重复的个数\n                count = j - i\n                break;\n            }\n            j++;\n        }\n\n        i = i + count;\n        prev = currentNum;\n    }\n    return result\n};\n```\n","slug":"计数二进制子串","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrh4005omrojd9g06rr4","content":"<p><a href=\"https://leetcode-cn.com/problems/count-binary-substrings/\" target=\"_blank\" rel=\"noopener\">计数二进制子串</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。</p>\n<p>重复出现的子串要计算它们出现的次数。</p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre class=\" language-html\"><code class=\"language-html\">输入: \"00110011\"\n输出: 6\n解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。\n\n请注意，一些重复出现的子串要计算它们出现的次数。\n\n另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。\n</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>我们直接用 <code>1100</code> 做分析例子，我们可以看出其实他的结果就是 2，就只有两种结果<code>[1100, 10]</code></li>\n<li>所以我们循环这个字符串，记录相同的的数字 <code>1</code>的个数 = 2；然后以当前i做起点，往后遍历两位，要是都相同那么就是2种（此时重复的数字还是2），要是只有一位就只有1种（此时重复的数字就变成1了）</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> countBinarySubstrings <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> currentNum <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// s = \"1100\"</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        currentNum <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>currentNum <span class=\"token operator\">==</span> prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 为了找相同的数字</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 相同数字的个数</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// prev = 1; count = 2</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// currentNum 已经跟prev 不一样了， 就是 0 => 1 , 1 => 0， 然后以i为起点，遍历后面count个数</span>\n        <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> i <span class=\"token operator\">+</span> count <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 这里表示 当前数字跟 前一个数字相同的话结果 + 1 ,即当前 prev = 1， s[j] = 0, 就是当前i为去起点，往后两位都是0的话就 + 2</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>prev <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      \n                result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token comment\" spellcheck=\"true\">// 此时不一样时，重新计算重复的个数</span>\n                count <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> i\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> count<span class=\"token punctuation\">;</span>\n        prev <span class=\"token operator\">=</span> currentNum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/count-binary-substrings/\" target=\"_blank\" rel=\"noopener\">计数二进制子串</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。</p>\n<p>重复出现的子串要计算它们出现的次数。</p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"html\">输入: &quot;00110011&quot;\n输出: 6\n解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。\n\n请注意，一些重复出现的子串要计算它们出现的次数。\n\n另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。\n</code></pre>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>我们直接用 <code>1100</code> 做分析例子，我们可以看出其实他的结果就是 2，就只有两种结果<code>[1100, 10]</code></li>\n<li>所以我们循环这个字符串，记录相同的的数字 <code>1</code>的个数 = 2；然后以当前i做起点，往后遍历两位，要是都相同那么就是2种（此时重复的数字还是2），要是只有一位就只有1种（此时重复的数字就变成1了）</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"jsx\">/**\n * @param {string} s\n * @return {number}\n */\nvar countBinarySubstrings = function(s) {\n    let length = s.length;\n    if(length == 0) {\n        return 0;\n    }\n\n    let count = 1;\n    let prev = s[0];\n    let currentNum = null;\n    let result = 0;\n    // s = &quot;1100&quot;\n    let i = 1;\n    while(i &lt; length) {\n        currentNum = s[i];\n        if(currentNum == prev) { // 为了找相同的数字\n            count++;  // 相同数字的个数\n            i++;\n            continue;\n        }\n\n        // prev = 1; count = 2\n\n        // currentNum 已经跟prev 不一样了， 就是 0 =&gt; 1 , 1 =&gt; 0， 然后以i为起点，遍历后面count个数\n        let j = i; \n        while(j &lt; i + count &amp;&amp; j &lt; length) {\n            // 这里表示 当前数字跟 前一个数字相同的话结果 + 1 ,即当前 prev = 1， s[j] = 0, 就是当前i为去起点，往后两位都是0的话就 + 2\n            if(s[j] == !(prev * 1)) {      \n                result++;\n            } else {  \n                // 此时不一样时，重新计算重复的个数\n                count = j - i\n                break;\n            }\n            j++;\n        }\n\n        i = i + count;\n        prev = currentNum;\n    }\n    return result\n};</code></pre>\n"},{"title":"记录一下react的一些用法","date":"2020-06-03T16:18:46.000Z","_content":"\n## 高阶组件\n\n### HOC\n\n* HOC 其实就是一个函数， 接收参数是**一个组件**，但返回值是**一个组件**\n\n看一个简单的高阶组件\n\n```js\nfunction visibleHOC(WrappedComponent) {\n    return class extends Component {\n        render() {\n            const { visible } = this.props;\n            \n            if(!visible) return null;\n            return <WrappedComponent {...this.props}>\n        }\n    }\n}\n```\n\n## Render Props\n\n```js\nconst CustomModal = ({visible, cancel}) => {\n    return (\n        <Modal visible={visible} onCancel={cancel} >\n            Hello World\n        </Modal>\n    )\n}\n```\n\n```js\nclass ModalContainer extends Component {\n    state = {\n        visible: false\n    }\n\n    handleCancel = () => {\n        this.setState({\n            visible: false\n        })\n    }\n\n    show = () => {\n        this.setState({\n            visible: true\n        })\n    }\n\n    render() {\n        const { visible } = this.state;\n        const { children } = this.props;\n        return (\n            children({\n                visible: visible,\n                show: this.show,\n                cancel: this.handleCancel\n            })\n        )\n    }\n}\n```\n\n```js\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <ModalContainer>\n                    ({visible, show, cancel}) => (\n                        <>\n                            <CustomModal visible={visible} cancel={cancel}></CustomModal>\n                            <Button type=\"primary\" onClick={show}>\n                                Click\n                            </Button>\n                        </>\n                    )\n                </ModalContainer>\n            </div>\n        )\n    }\n}\n```\n\n[demo](https://codesandbox.io/s/modal-container-nt23y?file=/ModalContainer.js)","source":"_posts/记录一下react的一些用法.md","raw":"---\ntitle: 记录一下react的一些用法\ndate: 2020-06-03 16:18:46\ntags: [react]\ncategory: [react]\n---\n\n## 高阶组件\n\n### HOC\n\n* HOC 其实就是一个函数， 接收参数是**一个组件**，但返回值是**一个组件**\n\n看一个简单的高阶组件\n\n```js\nfunction visibleHOC(WrappedComponent) {\n    return class extends Component {\n        render() {\n            const { visible } = this.props;\n            \n            if(!visible) return null;\n            return <WrappedComponent {...this.props}>\n        }\n    }\n}\n```\n\n## Render Props\n\n```js\nconst CustomModal = ({visible, cancel}) => {\n    return (\n        <Modal visible={visible} onCancel={cancel} >\n            Hello World\n        </Modal>\n    )\n}\n```\n\n```js\nclass ModalContainer extends Component {\n    state = {\n        visible: false\n    }\n\n    handleCancel = () => {\n        this.setState({\n            visible: false\n        })\n    }\n\n    show = () => {\n        this.setState({\n            visible: true\n        })\n    }\n\n    render() {\n        const { visible } = this.state;\n        const { children } = this.props;\n        return (\n            children({\n                visible: visible,\n                show: this.show,\n                cancel: this.handleCancel\n            })\n        )\n    }\n}\n```\n\n```js\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <ModalContainer>\n                    ({visible, show, cancel}) => (\n                        <>\n                            <CustomModal visible={visible} cancel={cancel}></CustomModal>\n                            <Button type=\"primary\" onClick={show}>\n                                Click\n                            </Button>\n                        </>\n                    )\n                </ModalContainer>\n            </div>\n        )\n    }\n}\n```\n\n[demo](https://codesandbox.io/s/modal-container-nt23y?file=/ModalContainer.js)","slug":"记录一下react的一些用法","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrh5005rmroj871jd3hc","content":"<h2 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a>高阶组件</h2><h3 id=\"HOC\"><a href=\"#HOC\" class=\"headerlink\" title=\"HOC\"></a>HOC</h3><ul>\n<li>HOC 其实就是一个函数， 接收参数是<strong>一个组件</strong>，但返回值是<strong>一个组件</strong></li>\n</ul>\n<p>看一个简单的高阶组件</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">visibleHOC</span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Component <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> visible <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visible<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"Render-Props\"><a href=\"#Render-Props\" class=\"headerlink\" title=\"Render Props\"></a>Render Props</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> CustomModal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>visible<span class=\"token punctuation\">,</span> cancel<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Modal visible<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>visible<span class=\"token punctuation\">}</span> onCancel<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>cancel<span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n            Hello World\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Modal<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ModalContainer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        visible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    handleCancel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            visible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    show <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            visible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> visible <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                visible<span class=\"token punctuation\">:</span> visible<span class=\"token punctuation\">,</span>\n                show<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">,</span>\n                cancel<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleCancel\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>ModalContainer<span class=\"token operator\">></span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>visible<span class=\"token punctuation\">,</span> show<span class=\"token punctuation\">,</span> cancel<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n                            <span class=\"token operator\">&lt;</span>CustomModal visible<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>visible<span class=\"token punctuation\">}</span> cancel<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>cancel<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>CustomModal<span class=\"token operator\">></span>\n                            <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>show<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                                Click\n                            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n                        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ModalContainer<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://codesandbox.io/s/modal-container-nt23y?file=/ModalContainer.js\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a>高阶组件</h2><h3 id=\"HOC\"><a href=\"#HOC\" class=\"headerlink\" title=\"HOC\"></a>HOC</h3><ul>\n<li>HOC 其实就是一个函数， 接收参数是<strong>一个组件</strong>，但返回值是<strong>一个组件</strong></li>\n</ul>\n<p>看一个简单的高阶组件</p>\n<pre><code class=\"js\">function visibleHOC(WrappedComponent) {\n    return class extends Component {\n        render() {\n            const { visible } = this.props;\n\n            if(!visible) return null;\n            return &lt;WrappedComponent {...this.props}&gt;\n        }\n    }\n}</code></pre>\n<h2 id=\"Render-Props\"><a href=\"#Render-Props\" class=\"headerlink\" title=\"Render Props\"></a>Render Props</h2><pre><code class=\"js\">const CustomModal = ({visible, cancel}) =&gt; {\n    return (\n        &lt;Modal visible={visible} onCancel={cancel} &gt;\n            Hello World\n        &lt;/Modal&gt;\n    )\n}</code></pre>\n<pre><code class=\"js\">class ModalContainer extends Component {\n    state = {\n        visible: false\n    }\n\n    handleCancel = () =&gt; {\n        this.setState({\n            visible: false\n        })\n    }\n\n    show = () =&gt; {\n        this.setState({\n            visible: true\n        })\n    }\n\n    render() {\n        const { visible } = this.state;\n        const { children } = this.props;\n        return (\n            children({\n                visible: visible,\n                show: this.show,\n                cancel: this.handleCancel\n            })\n        )\n    }\n}</code></pre>\n<pre><code class=\"js\">class App extends Component {\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;ModalContainer&gt;\n                    ({visible, show, cancel}) =&gt; (\n                        &lt;&gt;\n                            &lt;CustomModal visible={visible} cancel={cancel}&gt;&lt;/CustomModal&gt;\n                            &lt;Button type=&quot;primary&quot; onClick={show}&gt;\n                                Click\n                            &lt;/Button&gt;\n                        &lt;/&gt;\n                    )\n                &lt;/ModalContainer&gt;\n            &lt;/div&gt;\n        )\n    }\n}</code></pre>\n<p><a href=\"https://codesandbox.io/s/modal-container-nt23y?file=/ModalContainer.js\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n"},{"title":"记录一下从rc-tree 里面学到了什么东西","date":"2022-04-22T11:34:34.000Z","_content":"\n[rc-tree](https://github.com/react-component/tree)\n\n该文章主要对 `TreeNode` 的 `onChecked` 时，如何跟上级还有下级做联动所记录的 \n\n## 先看传入到tree下的 treeData 结构\n\n```js\nconst treeData = [\n  { \n    title: '1', \n    key: '1', \n    children: [\n      { \n        title: '1-1', \n        key: '1-1',\n        children: [\n          {\n            title: '1-1-1', \n            key: '1-1-1',\n          }\n        ] \n      }\n    ]\n  },\n  {\n    title: '2', \n    key: '2',\n    children: [\n      { \n        title: '2-1', \n        key: '2-1',\n        children: [\n          {\n            title: '2-1-1', \n            key: '2-1-1',\n          }\n        ] \n      }\n    ]\n  }\n]\n```\n\n## Tree 使用了Provider 向下级组件传递onNodeChecked 事件\n\n源码中用 `class` 组件的形式写的， 下面给个例子： \n\n\n```tsx\nexport const TreeContext = React.createContext(null);\n```\n\n```jsx\nconst Tree = () => {\n  const onNodeChecked = () => {}\n\n  return (\n    <TreeContext.Provider\n      value={{\n        onNodeChecked\n      }}\n    >\n      <NodeList>\n    <TreeContext.Provider>\n  )\n}\n\n```\n\n消费provider, 类组件例子\n\n```jsx\nconst ContextTreeNode: React.FC<TreeNodeProps> = props => (\n  <TreeContext.Consumer>\n    {context => <InternalTreeNode {...props} context={context} />}\n  </TreeContext.Consumer>\n);\n```\n\n函数组件，消费context\n```jsx\nconst TreeNode = () => {\n  const context = useContext(TreeContext)\n\n  return (\n    <div />\n  )\n}\n```\n\n### 在Tree 接收到treeData 这个props 的时候会进行数据转换\n\n在源码中，在 `getDerivedStateFromProps` 这个生命周期对treeData 进行转换。\n\n```jsx\nclass Tree extends Component {\n  static getDerivedStateFromProps(props, prevState) {\n    const { treeData, fieldNames } = props;\n    const newState = {  }\n\n    if (treeData) {\n      newState.treeData = treeData;\n      const entitiesMap = convertDataToEntities(treeData, { fieldNames });\n      newState.keyEntities = {\n        ...entitiesMap.keyEntities,\n      };\n    }\n  }\n\n}\n\n```\n\n##### convertDataToEntities 将 treeData 的key 当作键名，value 是当前节点，另外添加他的父节点，最后数据结构应该是这样：\n\n以上面treeData 为例子\n\n```jsx\n{\n  1: { \n    title: '1', \n    key: '1', \n    parentNode: null,\n    children: [\n      { \n        title: '1-1', \n        key: '1-1',\n        children: [\n          {\n            title: '1-1-1', \n            key: '1-1-1',\n          }\n        ] \n      }\n    ]\n  },\n  '1-1':  { \n    title: '1-1', \n    parentNode: '1',\n    key: '1-1',\n    children: [\n      {\n        title: '1-1-1', \n        key: '1-1-1',\n      }\n    ] \n  }\n  '1-1-1': { \n    parentNode: '1-1',\n    title: '1-1-1', \n    key: '1-1-1',\n  }\n}\n```\n\n* 我们尝试自己写一下这个方法\n\n```jsx\n// 建立双链表形式的map数据, \nconst convertDataToEntities = (treeData) => {\n  const result = {};\n\n  formatedTreeData(treeData, result, 0, 0);\n  console.log(result);\n\n  return {\n    keyEntities: result\n  }\n}\n\nconst formatedTreeData = (treeData, hash, parentKey, level) => {\n  const parentNode = hash[parentKey] || null;\n\n  treeData.forEach((_item) => {\n    hash[_item.key] = {\n      ..._item,\n      parentNode: parentNode,\n      level: level,\n    }\n    if (_item.children) {\n      formatedTreeData(_item.children, hash, _item.key, level + 1)\n    }\n  })\n}\n\n// const { keyEntities } = convertDataToEntities(treeData)\n```\n\n接下来实现 onNodeChecked, 选中当前节点时他的下级节点，以及上级节点联动关系\n\n* 先根据 `keyEntities` 获取当前树的最大深度, 因为我们当前keyEntities 已经保存有树的深度了，所以只要一次遍历就可以获取到最大的深度\n  在遍历过程中同时对每一层节点进行保存， 即第一层有哪些节点，第二层有哪些节点，我们命名为`levelMap`\n\n* 然后维护chekedKeys 这个已选中的节点\n* 从最开始那层 从上而下，遍历每一层节点， 如果当前checkedKeys 包含 当前levelMap[level][item] 那么他的children 应该也需要添加到checkedKeys 里面\n* 从最后那层 由下而上，遍历每层节点，如果当前checkedKeys 包含当前节点的所有children，那么他的父级节点需要被添加到checkedKeys 里面\n\n```jsx\nconst onNodeChecked = (e, checkedNode, isChecked) => {\n  const { levelMap, maxLevel } = getLevelEntities(keyEntities);\n\n  if (isChecked) {\n    // const keys = [...checkedKeys, checkedNode.key];\n    const keys = ['1-2']\n    const { halfChecked, checkedKeys } = fillConductCheck(keys, levelMap, maxLevel);\n    console.log(checkedKeys); // 会发现 [1-1-1, 1-1, 1]\n  }\n\n}\n\nconst getLevelEntities = (keyEntities) => {\n  let maxLevel = 0\n\n  const levelMap = {}\n\n  Object.keys(keyEntities).forEach((_item) => {\n    const current = keyEntities[_item];\n    const { level } = current;\n    maxLevel = Math.max(maxLevel, level);\n\n    if (typeof levelMap[level] === 'undefined') {\n      levelMap[level] = [];\n    }\n    levelMap[level].push(current);\n  })\n\n  return { levelMap, maxLevel }\n}\n```\n\n![getLevelEntities结果](./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E4%BB%8Erc-tree%20%E9%87%8C%E9%9D%A2%E5%AD%A6%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF/1.png)\n\n```jsx\nconst fillConductCheck = (keys, levelEntities, maxLevel) => {\n  const checkedKeys = new Set(keys);\n  const halfCheckedKeys = new Set();\n\n  // 从上而下 勾选\n  for (let level = 0; level <= maxLevel; level += 1) {\n    const entities = levelEntities[level] || new Set();\n    entities.forEach(entity => {\n      const { key, children = [] } = entity;\n\n      if (checkedKeys.has(key)) {\n        children\n          .forEach(childEntity => {\n            checkedKeys.add(childEntity.key);\n          });\n      }\n    });\n  }\n\n  const visitedKeys = new Set();\n  for (let level = maxLevel; level >= 0; level -= 1) {\n    const entities = levelEntities[level] || new Set();\n    entities.forEach(entity => {\n      const { parentNode, node } = entity;\n\n      // Skip if no need to check\n      if (!entity.parentNode || visitedKeys.has(entity.parentNode.key)) {\n        return;\n      }\n\n      let allChecked = true;\n      let partialChecked = false;\n\n      (parentNode.children || [])\n        .forEach(({ key }) => {\n          const checked = checkedKeys.has(key);\n          if (allChecked && !checked) {\n            allChecked = false;\n          }\n          if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n            partialChecked = true;\n          }\n        });\n\n      if (allChecked) {\n        checkedKeys.add(parentNode.key);\n      }\n      if (partialChecked) {\n        halfCheckedKeys.add(parentNode.key);\n      }\n\n      visitedKeys.add(parentNode.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: halfCheckedKeys,\n  };\n}\n```\n\n\n\n","source":"_posts/记录一下从rc-tree 里面学到了什么东西.md","raw":"---\ntitle: 记录一下从rc-tree 里面学到了什么东西\ndate: 2022-04-22 11:34:34\ntags: [antd, 组件]\n---\n\n[rc-tree](https://github.com/react-component/tree)\n\n该文章主要对 `TreeNode` 的 `onChecked` 时，如何跟上级还有下级做联动所记录的 \n\n## 先看传入到tree下的 treeData 结构\n\n```js\nconst treeData = [\n  { \n    title: '1', \n    key: '1', \n    children: [\n      { \n        title: '1-1', \n        key: '1-1',\n        children: [\n          {\n            title: '1-1-1', \n            key: '1-1-1',\n          }\n        ] \n      }\n    ]\n  },\n  {\n    title: '2', \n    key: '2',\n    children: [\n      { \n        title: '2-1', \n        key: '2-1',\n        children: [\n          {\n            title: '2-1-1', \n            key: '2-1-1',\n          }\n        ] \n      }\n    ]\n  }\n]\n```\n\n## Tree 使用了Provider 向下级组件传递onNodeChecked 事件\n\n源码中用 `class` 组件的形式写的， 下面给个例子： \n\n\n```tsx\nexport const TreeContext = React.createContext(null);\n```\n\n```jsx\nconst Tree = () => {\n  const onNodeChecked = () => {}\n\n  return (\n    <TreeContext.Provider\n      value={{\n        onNodeChecked\n      }}\n    >\n      <NodeList>\n    <TreeContext.Provider>\n  )\n}\n\n```\n\n消费provider, 类组件例子\n\n```jsx\nconst ContextTreeNode: React.FC<TreeNodeProps> = props => (\n  <TreeContext.Consumer>\n    {context => <InternalTreeNode {...props} context={context} />}\n  </TreeContext.Consumer>\n);\n```\n\n函数组件，消费context\n```jsx\nconst TreeNode = () => {\n  const context = useContext(TreeContext)\n\n  return (\n    <div />\n  )\n}\n```\n\n### 在Tree 接收到treeData 这个props 的时候会进行数据转换\n\n在源码中，在 `getDerivedStateFromProps` 这个生命周期对treeData 进行转换。\n\n```jsx\nclass Tree extends Component {\n  static getDerivedStateFromProps(props, prevState) {\n    const { treeData, fieldNames } = props;\n    const newState = {  }\n\n    if (treeData) {\n      newState.treeData = treeData;\n      const entitiesMap = convertDataToEntities(treeData, { fieldNames });\n      newState.keyEntities = {\n        ...entitiesMap.keyEntities,\n      };\n    }\n  }\n\n}\n\n```\n\n##### convertDataToEntities 将 treeData 的key 当作键名，value 是当前节点，另外添加他的父节点，最后数据结构应该是这样：\n\n以上面treeData 为例子\n\n```jsx\n{\n  1: { \n    title: '1', \n    key: '1', \n    parentNode: null,\n    children: [\n      { \n        title: '1-1', \n        key: '1-1',\n        children: [\n          {\n            title: '1-1-1', \n            key: '1-1-1',\n          }\n        ] \n      }\n    ]\n  },\n  '1-1':  { \n    title: '1-1', \n    parentNode: '1',\n    key: '1-1',\n    children: [\n      {\n        title: '1-1-1', \n        key: '1-1-1',\n      }\n    ] \n  }\n  '1-1-1': { \n    parentNode: '1-1',\n    title: '1-1-1', \n    key: '1-1-1',\n  }\n}\n```\n\n* 我们尝试自己写一下这个方法\n\n```jsx\n// 建立双链表形式的map数据, \nconst convertDataToEntities = (treeData) => {\n  const result = {};\n\n  formatedTreeData(treeData, result, 0, 0);\n  console.log(result);\n\n  return {\n    keyEntities: result\n  }\n}\n\nconst formatedTreeData = (treeData, hash, parentKey, level) => {\n  const parentNode = hash[parentKey] || null;\n\n  treeData.forEach((_item) => {\n    hash[_item.key] = {\n      ..._item,\n      parentNode: parentNode,\n      level: level,\n    }\n    if (_item.children) {\n      formatedTreeData(_item.children, hash, _item.key, level + 1)\n    }\n  })\n}\n\n// const { keyEntities } = convertDataToEntities(treeData)\n```\n\n接下来实现 onNodeChecked, 选中当前节点时他的下级节点，以及上级节点联动关系\n\n* 先根据 `keyEntities` 获取当前树的最大深度, 因为我们当前keyEntities 已经保存有树的深度了，所以只要一次遍历就可以获取到最大的深度\n  在遍历过程中同时对每一层节点进行保存， 即第一层有哪些节点，第二层有哪些节点，我们命名为`levelMap`\n\n* 然后维护chekedKeys 这个已选中的节点\n* 从最开始那层 从上而下，遍历每一层节点， 如果当前checkedKeys 包含 当前levelMap[level][item] 那么他的children 应该也需要添加到checkedKeys 里面\n* 从最后那层 由下而上，遍历每层节点，如果当前checkedKeys 包含当前节点的所有children，那么他的父级节点需要被添加到checkedKeys 里面\n\n```jsx\nconst onNodeChecked = (e, checkedNode, isChecked) => {\n  const { levelMap, maxLevel } = getLevelEntities(keyEntities);\n\n  if (isChecked) {\n    // const keys = [...checkedKeys, checkedNode.key];\n    const keys = ['1-2']\n    const { halfChecked, checkedKeys } = fillConductCheck(keys, levelMap, maxLevel);\n    console.log(checkedKeys); // 会发现 [1-1-1, 1-1, 1]\n  }\n\n}\n\nconst getLevelEntities = (keyEntities) => {\n  let maxLevel = 0\n\n  const levelMap = {}\n\n  Object.keys(keyEntities).forEach((_item) => {\n    const current = keyEntities[_item];\n    const { level } = current;\n    maxLevel = Math.max(maxLevel, level);\n\n    if (typeof levelMap[level] === 'undefined') {\n      levelMap[level] = [];\n    }\n    levelMap[level].push(current);\n  })\n\n  return { levelMap, maxLevel }\n}\n```\n\n![getLevelEntities结果](./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E4%BB%8Erc-tree%20%E9%87%8C%E9%9D%A2%E5%AD%A6%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF/1.png)\n\n```jsx\nconst fillConductCheck = (keys, levelEntities, maxLevel) => {\n  const checkedKeys = new Set(keys);\n  const halfCheckedKeys = new Set();\n\n  // 从上而下 勾选\n  for (let level = 0; level <= maxLevel; level += 1) {\n    const entities = levelEntities[level] || new Set();\n    entities.forEach(entity => {\n      const { key, children = [] } = entity;\n\n      if (checkedKeys.has(key)) {\n        children\n          .forEach(childEntity => {\n            checkedKeys.add(childEntity.key);\n          });\n      }\n    });\n  }\n\n  const visitedKeys = new Set();\n  for (let level = maxLevel; level >= 0; level -= 1) {\n    const entities = levelEntities[level] || new Set();\n    entities.forEach(entity => {\n      const { parentNode, node } = entity;\n\n      // Skip if no need to check\n      if (!entity.parentNode || visitedKeys.has(entity.parentNode.key)) {\n        return;\n      }\n\n      let allChecked = true;\n      let partialChecked = false;\n\n      (parentNode.children || [])\n        .forEach(({ key }) => {\n          const checked = checkedKeys.has(key);\n          if (allChecked && !checked) {\n            allChecked = false;\n          }\n          if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n            partialChecked = true;\n          }\n        });\n\n      if (allChecked) {\n        checkedKeys.add(parentNode.key);\n      }\n      if (partialChecked) {\n        halfCheckedKeys.add(parentNode.key);\n      }\n\n      visitedKeys.add(parentNode.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: halfCheckedKeys,\n  };\n}\n```\n\n\n\n","slug":"记录一下从rc-tree 里面学到了什么东西","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrh6005umroj3jli96f9","content":"<p><a href=\"https://github.com/react-component/tree\" target=\"_blank\" rel=\"noopener\">rc-tree</a></p>\n<p>该文章主要对 <code>TreeNode</code> 的 <code>onChecked</code> 时，如何跟上级还有下级做联动所记录的 </p>\n<h2 id=\"先看传入到tree下的-treeData-结构\"><a href=\"#先看传入到tree下的-treeData-结构\" class=\"headerlink\" title=\"先看传入到tree下的 treeData 结构\"></a>先看传入到tree下的 treeData 结构</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> treeData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> \n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> \n    key<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> \n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> \n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span> \n        key<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            title<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">,</span> \n            key<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> \n    key<span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> \n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'2-1'</span><span class=\"token punctuation\">,</span> \n        key<span class=\"token punctuation\">:</span> <span class=\"token string\">'2-1'</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            title<span class=\"token punctuation\">:</span> <span class=\"token string\">'2-1-1'</span><span class=\"token punctuation\">,</span> \n            key<span class=\"token punctuation\">:</span> <span class=\"token string\">'2-1-1'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<h2 id=\"Tree-使用了Provider-向下级组件传递onNodeChecked-事件\"><a href=\"#Tree-使用了Provider-向下级组件传递onNodeChecked-事件\" class=\"headerlink\" title=\"Tree 使用了Provider 向下级组件传递onNodeChecked 事件\"></a>Tree 使用了Provider 向下级组件传递onNodeChecked 事件</h2><p>源码中用 <code>class</code> 组件的形式写的， 下面给个例子： </p>\n<pre class=\" language-tsx\"><code class=\"language-tsx\">export const TreeContext = React.createContext(null);</code></pre>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Tree <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onNodeChecked <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TreeContext.Provider</span>\n      <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        onNodeChecked\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NodeList</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TreeContext.Provider</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>消费provider, 类组件例子</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> ContextTreeNode<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>FC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TreeNodeProps</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TreeContext.Consumer</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">{</span>context <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>InternalTreeNode <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> context<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TreeContext.Consumer</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>函数组件，消费context</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> TreeNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>TreeContext<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"在Tree-接收到treeData-这个props-的时候会进行数据转换\"><a href=\"#在Tree-接收到treeData-这个props-的时候会进行数据转换\" class=\"headerlink\" title=\"在Tree 接收到treeData 这个props 的时候会进行数据转换\"></a>在Tree 接收到treeData 这个props 的时候会进行数据转换</h3><p>在源码中，在 <code>getDerivedStateFromProps</code> 这个生命周期对treeData 进行转换。</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tree</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> treeData<span class=\"token punctuation\">,</span> fieldNames <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>treeData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      newState<span class=\"token punctuation\">.</span>treeData <span class=\"token operator\">=</span> treeData<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> entitiesMap <span class=\"token operator\">=</span> <span class=\"token function\">convertDataToEntities</span><span class=\"token punctuation\">(</span>treeData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> fieldNames <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      newState<span class=\"token punctuation\">.</span>keyEntities <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>entitiesMap<span class=\"token punctuation\">.</span>keyEntities<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"convertDataToEntities-将-treeData-的key-当作键名，value-是当前节点，另外添加他的父节点，最后数据结构应该是这样：\"><a href=\"#convertDataToEntities-将-treeData-的key-当作键名，value-是当前节点，另外添加他的父节点，最后数据结构应该是这样：\" class=\"headerlink\" title=\"convertDataToEntities 将 treeData 的key 当作键名，value 是当前节点，另外添加他的父节点，最后数据结构应该是这样：\"></a>convertDataToEntities 将 treeData 的key 当作键名，value 是当前节点，另外添加他的父节点，最后数据结构应该是这样：</h5><p>以上面treeData 为例子</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> \n    key<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> \n    parentNode<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> \n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span> \n        key<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            title<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">,</span> \n            key<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span> \n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1-1'</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">{</span> \n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span> \n    parentNode<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">,</span> \n        key<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span> \n  <span class=\"token punctuation\">}</span>\n  <span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \n    parentNode<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1'</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">,</span> \n    key<span class=\"token punctuation\">:</span> <span class=\"token string\">'1-1-1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>我们尝试自己写一下这个方法</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">// 建立双链表形式的map数据, </span>\n<span class=\"token keyword\">const</span> convertDataToEntities <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>treeData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">formatedTreeData</span><span class=\"token punctuation\">(</span>treeData<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    keyEntities<span class=\"token punctuation\">:</span> result\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> formatedTreeData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>treeData<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> parentKey<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parentNode <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">[</span>parentKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  treeData<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    hash<span class=\"token punctuation\">[</span>_item<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>_item<span class=\"token punctuation\">,</span>\n      parentNode<span class=\"token punctuation\">:</span> parentNode<span class=\"token punctuation\">,</span>\n      level<span class=\"token punctuation\">:</span> level<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_item<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">formatedTreeData</span><span class=\"token punctuation\">(</span>_item<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> _item<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// const { keyEntities } = convertDataToEntities(treeData)</span></code></pre>\n<p>接下来实现 onNodeChecked, 选中当前节点时他的下级节点，以及上级节点联动关系</p>\n<ul>\n<li><p>先根据 <code>keyEntities</code> 获取当前树的最大深度, 因为我们当前keyEntities 已经保存有树的深度了，所以只要一次遍历就可以获取到最大的深度<br>在遍历过程中同时对每一层节点进行保存， 即第一层有哪些节点，第二层有哪些节点，我们命名为<code>levelMap</code></p>\n</li>\n<li><p>然后维护chekedKeys 这个已选中的节点</p>\n</li>\n<li><p>从最开始那层 从上而下，遍历每一层节点， 如果当前checkedKeys 包含 当前levelMap[level][item] 那么他的children 应该也需要添加到checkedKeys 里面</p>\n</li>\n<li><p>从最后那层 由下而上，遍历每层节点，如果当前checkedKeys 包含当前节点的所有children，那么他的父级节点需要被添加到checkedKeys 里面</p>\n</li>\n</ul>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> onNodeChecked <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> checkedNode<span class=\"token punctuation\">,</span> isChecked<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> levelMap<span class=\"token punctuation\">,</span> maxLevel <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getLevelEntities</span><span class=\"token punctuation\">(</span>keyEntities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isChecked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// const keys = [...checkedKeys, checkedNode.key];</span>\n    <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1-2'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> halfChecked<span class=\"token punctuation\">,</span> checkedKeys <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">fillConductCheck</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">,</span> levelMap<span class=\"token punctuation\">,</span> maxLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>checkedKeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 会发现 [1-1-1, 1-1, 1]</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> getLevelEntities <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>keyEntities<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> maxLevel <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">const</span> levelMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>keyEntities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> keyEntities<span class=\"token punctuation\">[</span>_item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> level <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n    maxLevel <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxLevel<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> levelMap<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      levelMap<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    levelMap<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> levelMap<span class=\"token punctuation\">,</span> maxLevel <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"/2022/04/22/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E4%BB%8Erc-tree%20%E9%87%8C%E9%9D%A2%E5%AD%A6%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF/1.png\" alt=\"getLevelEntities结果\"></p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> fillConductCheck <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">,</span> levelEntities<span class=\"token punctuation\">,</span> maxLevel<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> checkedKeys <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> halfCheckedKeys <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 从上而下 勾选</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> level <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> level <span class=\"token operator\">&lt;=</span> maxLevel<span class=\"token punctuation\">;</span> level <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> entities <span class=\"token operator\">=</span> levelEntities<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    entities<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>entity <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checkedKeys<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        children\n          <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>childEntity <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            checkedKeys<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>childEntity<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> visitedKeys <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> level <span class=\"token operator\">=</span> maxLevel<span class=\"token punctuation\">;</span> level <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> level <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> entities <span class=\"token operator\">=</span> levelEntities<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    entities<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>entity <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> parentNode<span class=\"token punctuation\">,</span> node <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">// Skip if no need to check</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>entity<span class=\"token punctuation\">.</span>parentNode <span class=\"token operator\">||</span> visitedKeys<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">let</span> allChecked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> partialChecked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> key <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> checked <span class=\"token operator\">=</span> checkedKeys<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allChecked <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>checked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            allChecked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>partialChecked <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>checked <span class=\"token operator\">||</span> halfCheckedKeys<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            partialChecked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allChecked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        checkedKeys<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>partialChecked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        halfCheckedKeys<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      visitedKeys<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    checkedKeys<span class=\"token punctuation\">:</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>checkedKeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    halfCheckedKeys<span class=\"token punctuation\">:</span> halfCheckedKeys<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/react-component/tree\" target=\"_blank\" rel=\"noopener\">rc-tree</a></p>\n<p>该文章主要对 <code>TreeNode</code> 的 <code>onChecked</code> 时，如何跟上级还有下级做联动所记录的 </p>\n<h2 id=\"先看传入到tree下的-treeData-结构\"><a href=\"#先看传入到tree下的-treeData-结构\" class=\"headerlink\" title=\"先看传入到tree下的 treeData 结构\"></a>先看传入到tree下的 treeData 结构</h2><pre><code class=\"js\">const treeData = [\n  { \n    title: &#39;1&#39;, \n    key: &#39;1&#39;, \n    children: [\n      { \n        title: &#39;1-1&#39;, \n        key: &#39;1-1&#39;,\n        children: [\n          {\n            title: &#39;1-1-1&#39;, \n            key: &#39;1-1-1&#39;,\n          }\n        ] \n      }\n    ]\n  },\n  {\n    title: &#39;2&#39;, \n    key: &#39;2&#39;,\n    children: [\n      { \n        title: &#39;2-1&#39;, \n        key: &#39;2-1&#39;,\n        children: [\n          {\n            title: &#39;2-1-1&#39;, \n            key: &#39;2-1-1&#39;,\n          }\n        ] \n      }\n    ]\n  }\n]</code></pre>\n<h2 id=\"Tree-使用了Provider-向下级组件传递onNodeChecked-事件\"><a href=\"#Tree-使用了Provider-向下级组件传递onNodeChecked-事件\" class=\"headerlink\" title=\"Tree 使用了Provider 向下级组件传递onNodeChecked 事件\"></a>Tree 使用了Provider 向下级组件传递onNodeChecked 事件</h2><p>源码中用 <code>class</code> 组件的形式写的， 下面给个例子： </p>\n<pre><code class=\"tsx\">export const TreeContext = React.createContext(null);</code></pre>\n<pre><code class=\"jsx\">const Tree = () =&gt; {\n  const onNodeChecked = () =&gt; {}\n\n  return (\n    &lt;TreeContext.Provider\n      value={{\n        onNodeChecked\n      }}\n    &gt;\n      &lt;NodeList&gt;\n    &lt;TreeContext.Provider&gt;\n  )\n}\n</code></pre>\n<p>消费provider, 类组件例子</p>\n<pre><code class=\"jsx\">const ContextTreeNode: React.FC&lt;TreeNodeProps&gt; = props =&gt; (\n  &lt;TreeContext.Consumer&gt;\n    {context =&gt; &lt;InternalTreeNode {...props} context={context} /&gt;}\n  &lt;/TreeContext.Consumer&gt;\n);</code></pre>\n<p>函数组件，消费context</p>\n<pre><code class=\"jsx\">const TreeNode = () =&gt; {\n  const context = useContext(TreeContext)\n\n  return (\n    &lt;div /&gt;\n  )\n}</code></pre>\n<h3 id=\"在Tree-接收到treeData-这个props-的时候会进行数据转换\"><a href=\"#在Tree-接收到treeData-这个props-的时候会进行数据转换\" class=\"headerlink\" title=\"在Tree 接收到treeData 这个props 的时候会进行数据转换\"></a>在Tree 接收到treeData 这个props 的时候会进行数据转换</h3><p>在源码中，在 <code>getDerivedStateFromProps</code> 这个生命周期对treeData 进行转换。</p>\n<pre><code class=\"jsx\">class Tree extends Component {\n  static getDerivedStateFromProps(props, prevState) {\n    const { treeData, fieldNames } = props;\n    const newState = {  }\n\n    if (treeData) {\n      newState.treeData = treeData;\n      const entitiesMap = convertDataToEntities(treeData, { fieldNames });\n      newState.keyEntities = {\n        ...entitiesMap.keyEntities,\n      };\n    }\n  }\n\n}\n</code></pre>\n<h5 id=\"convertDataToEntities-将-treeData-的key-当作键名，value-是当前节点，另外添加他的父节点，最后数据结构应该是这样：\"><a href=\"#convertDataToEntities-将-treeData-的key-当作键名，value-是当前节点，另外添加他的父节点，最后数据结构应该是这样：\" class=\"headerlink\" title=\"convertDataToEntities 将 treeData 的key 当作键名，value 是当前节点，另外添加他的父节点，最后数据结构应该是这样：\"></a>convertDataToEntities 将 treeData 的key 当作键名，value 是当前节点，另外添加他的父节点，最后数据结构应该是这样：</h5><p>以上面treeData 为例子</p>\n<pre><code class=\"jsx\">{\n  1: { \n    title: &#39;1&#39;, \n    key: &#39;1&#39;, \n    parentNode: null,\n    children: [\n      { \n        title: &#39;1-1&#39;, \n        key: &#39;1-1&#39;,\n        children: [\n          {\n            title: &#39;1-1-1&#39;, \n            key: &#39;1-1-1&#39;,\n          }\n        ] \n      }\n    ]\n  },\n  &#39;1-1&#39;:  { \n    title: &#39;1-1&#39;, \n    parentNode: &#39;1&#39;,\n    key: &#39;1-1&#39;,\n    children: [\n      {\n        title: &#39;1-1-1&#39;, \n        key: &#39;1-1-1&#39;,\n      }\n    ] \n  }\n  &#39;1-1-1&#39;: { \n    parentNode: &#39;1-1&#39;,\n    title: &#39;1-1-1&#39;, \n    key: &#39;1-1-1&#39;,\n  }\n}</code></pre>\n<ul>\n<li>我们尝试自己写一下这个方法</li>\n</ul>\n<pre><code class=\"jsx\">// 建立双链表形式的map数据, \nconst convertDataToEntities = (treeData) =&gt; {\n  const result = {};\n\n  formatedTreeData(treeData, result, 0, 0);\n  console.log(result);\n\n  return {\n    keyEntities: result\n  }\n}\n\nconst formatedTreeData = (treeData, hash, parentKey, level) =&gt; {\n  const parentNode = hash[parentKey] || null;\n\n  treeData.forEach((_item) =&gt; {\n    hash[_item.key] = {\n      ..._item,\n      parentNode: parentNode,\n      level: level,\n    }\n    if (_item.children) {\n      formatedTreeData(_item.children, hash, _item.key, level + 1)\n    }\n  })\n}\n\n// const { keyEntities } = convertDataToEntities(treeData)</code></pre>\n<p>接下来实现 onNodeChecked, 选中当前节点时他的下级节点，以及上级节点联动关系</p>\n<ul>\n<li><p>先根据 <code>keyEntities</code> 获取当前树的最大深度, 因为我们当前keyEntities 已经保存有树的深度了，所以只要一次遍历就可以获取到最大的深度<br>在遍历过程中同时对每一层节点进行保存， 即第一层有哪些节点，第二层有哪些节点，我们命名为<code>levelMap</code></p>\n</li>\n<li><p>然后维护chekedKeys 这个已选中的节点</p>\n</li>\n<li><p>从最开始那层 从上而下，遍历每一层节点， 如果当前checkedKeys 包含 当前levelMap[level][item] 那么他的children 应该也需要添加到checkedKeys 里面</p>\n</li>\n<li><p>从最后那层 由下而上，遍历每层节点，如果当前checkedKeys 包含当前节点的所有children，那么他的父级节点需要被添加到checkedKeys 里面</p>\n</li>\n</ul>\n<pre><code class=\"jsx\">const onNodeChecked = (e, checkedNode, isChecked) =&gt; {\n  const { levelMap, maxLevel } = getLevelEntities(keyEntities);\n\n  if (isChecked) {\n    // const keys = [...checkedKeys, checkedNode.key];\n    const keys = [&#39;1-2&#39;]\n    const { halfChecked, checkedKeys } = fillConductCheck(keys, levelMap, maxLevel);\n    console.log(checkedKeys); // 会发现 [1-1-1, 1-1, 1]\n  }\n\n}\n\nconst getLevelEntities = (keyEntities) =&gt; {\n  let maxLevel = 0\n\n  const levelMap = {}\n\n  Object.keys(keyEntities).forEach((_item) =&gt; {\n    const current = keyEntities[_item];\n    const { level } = current;\n    maxLevel = Math.max(maxLevel, level);\n\n    if (typeof levelMap[level] === &#39;undefined&#39;) {\n      levelMap[level] = [];\n    }\n    levelMap[level].push(current);\n  })\n\n  return { levelMap, maxLevel }\n}</code></pre>\n<p><img src=\"/2022/04/22/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E4%BB%8Erc-tree%20%E9%87%8C%E9%9D%A2%E5%AD%A6%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF/1.png\" alt=\"getLevelEntities结果\"></p>\n<pre><code class=\"jsx\">const fillConductCheck = (keys, levelEntities, maxLevel) =&gt; {\n  const checkedKeys = new Set(keys);\n  const halfCheckedKeys = new Set();\n\n  // 从上而下 勾选\n  for (let level = 0; level &lt;= maxLevel; level += 1) {\n    const entities = levelEntities[level] || new Set();\n    entities.forEach(entity =&gt; {\n      const { key, children = [] } = entity;\n\n      if (checkedKeys.has(key)) {\n        children\n          .forEach(childEntity =&gt; {\n            checkedKeys.add(childEntity.key);\n          });\n      }\n    });\n  }\n\n  const visitedKeys = new Set();\n  for (let level = maxLevel; level &gt;= 0; level -= 1) {\n    const entities = levelEntities[level] || new Set();\n    entities.forEach(entity =&gt; {\n      const { parentNode, node } = entity;\n\n      // Skip if no need to check\n      if (!entity.parentNode || visitedKeys.has(entity.parentNode.key)) {\n        return;\n      }\n\n      let allChecked = true;\n      let partialChecked = false;\n\n      (parentNode.children || [])\n        .forEach(({ key }) =&gt; {\n          const checked = checkedKeys.has(key);\n          if (allChecked &amp;&amp; !checked) {\n            allChecked = false;\n          }\n          if (!partialChecked &amp;&amp; (checked || halfCheckedKeys.has(key))) {\n            partialChecked = true;\n          }\n        });\n\n      if (allChecked) {\n        checkedKeys.add(parentNode.key);\n      }\n      if (partialChecked) {\n        halfCheckedKeys.add(parentNode.key);\n      }\n\n      visitedKeys.add(parentNode.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: halfCheckedKeys,\n  };\n}</code></pre>\n"},{"title":"路径总和 II","date":"2020-09-26T13:32:57.000Z","type":"algorithm","_content":"\n[路径总和 II](https://leetcode-cn.com/problems/path-sum-ii/)\n\n## 题目描述\n\n给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。\n\n说明: 叶子节点是指没有子节点的节点。\n\n### 示例\n\n给定如下二叉树，以及目标和 sum = 22\n\n```jsx\n              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\    / \\\n        7    2  5   1\n\n```\n\n返回\n\n```\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n```\n\n### 题目分析\n\n其实这道题跟[路径总和](https://zhou-bill.github.io/2020/07/07/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/)这道题很相似\n* 其实就是将**每次遍历的数**放到 `prefix` 中，判断当前 节点是否有子节点 还有 `sum - value === 0`, 是的话，放入到 `res` \n* 有 左节点 进入递归\n* 有 右节点 进入递归\n\n## 实现\n\n```jsx\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number[][]}\n */\nvar pathSum = function(root, sum) {\n    let res = [];\n    let prefix = []\n    if(!root) {\n        return res\n    }\n    dfs(root, sum, res, prefix);\n    return res;\n};\n\nvar dfs = function(root, sum, res, prefix) {\n    const value = root.val;\n    const remain = sum - value;\n    // 如果叶子节点都没有而且 sum - value == 0, 那么我们将prefix 加进数组\n    if(!root.left && !root.right && remain === 0) {\n        res.push([...prefix, value])\n        return ;\n    }\n    // 没有子节点 且 remain !== 0 那就停止递归\n    if(!root.left && !root.right && remain !== 0) {\n        return;\n    }\n    // 有左子节点\n    if(root.left) {\n        dfs(root.left, remain, res, [...prefix, value])\n    }\n    // 有右子节点, 进入递归\n    if(root.right) {\n        dfs(root.right, remain, res, [...prefix, value]);\n    }\n}\n```\n\n## 总结\n\n像这种需要保留 状态集的可以用`prefix` 装着，最后当符合条件的时候再 把 `prefix` 装到 `result`","source":"_posts/路径总和-II.md","raw":"---\ntitle: 路径总和 II\ndate: 2020-09-26 13:32:57\ntags: [algorithm-二叉树, algorithm-深度搜索优先]\n# categories: algorithm\ntype: algorithm\n---\n\n[路径总和 II](https://leetcode-cn.com/problems/path-sum-ii/)\n\n## 题目描述\n\n给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。\n\n说明: 叶子节点是指没有子节点的节点。\n\n### 示例\n\n给定如下二叉树，以及目标和 sum = 22\n\n```jsx\n              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\    / \\\n        7    2  5   1\n\n```\n\n返回\n\n```\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n```\n\n### 题目分析\n\n其实这道题跟[路径总和](https://zhou-bill.github.io/2020/07/07/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/)这道题很相似\n* 其实就是将**每次遍历的数**放到 `prefix` 中，判断当前 节点是否有子节点 还有 `sum - value === 0`, 是的话，放入到 `res` \n* 有 左节点 进入递归\n* 有 右节点 进入递归\n\n## 实现\n\n```jsx\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number[][]}\n */\nvar pathSum = function(root, sum) {\n    let res = [];\n    let prefix = []\n    if(!root) {\n        return res\n    }\n    dfs(root, sum, res, prefix);\n    return res;\n};\n\nvar dfs = function(root, sum, res, prefix) {\n    const value = root.val;\n    const remain = sum - value;\n    // 如果叶子节点都没有而且 sum - value == 0, 那么我们将prefix 加进数组\n    if(!root.left && !root.right && remain === 0) {\n        res.push([...prefix, value])\n        return ;\n    }\n    // 没有子节点 且 remain !== 0 那就停止递归\n    if(!root.left && !root.right && remain !== 0) {\n        return;\n    }\n    // 有左子节点\n    if(root.left) {\n        dfs(root.left, remain, res, [...prefix, value])\n    }\n    // 有右子节点, 进入递归\n    if(root.right) {\n        dfs(root.right, remain, res, [...prefix, value]);\n    }\n}\n```\n\n## 总结\n\n像这种需要保留 状态集的可以用`prefix` 装着，最后当符合条件的时候再 把 `prefix` 装到 `result`","slug":"路径总和-II","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrh8005ymroj9tpy2ggj","content":"<p><a href=\"https://leetcode-cn.com/problems/path-sum-ii/\" target=\"_blank\" rel=\"noopener\">路径总和 II</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p>\n<p>说明: 叶子节点是指没有子节点的节点。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>给定如下二叉树，以及目标和 sum = 22</p>\n<pre class=\" language-jsx\"><code class=\"language-jsx\">              <span class=\"token number\">5</span>\n             <span class=\"token operator\">/</span> \\\n            <span class=\"token number\">4</span>   <span class=\"token number\">8</span>\n           <span class=\"token operator\">/</span>   <span class=\"token operator\">/</span> \\\n          <span class=\"token number\">11</span>  <span class=\"token number\">13</span>  <span class=\"token number\">4</span>\n         <span class=\"token operator\">/</span>  \\    <span class=\"token operator\">/</span> \\\n        <span class=\"token number\">7</span>    <span class=\"token number\">2</span>  <span class=\"token number\">5</span>   <span class=\"token number\">1</span>\n</code></pre>\n<p>返回</p>\n<pre><code>[\n   [5,4,11,2],\n   [5,8,4,5]\n]</code></pre><h3 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h3><p>其实这道题跟<a href=\"https://zhou-bill.github.io/2020/07/07/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/\" target=\"_blank\" rel=\"noopener\">路径总和</a>这道题很相似</p>\n<ul>\n<li>其实就是将<strong>每次遍历的数</strong>放到 <code>prefix</code> 中，判断当前 节点是否有子节点 还有 <code>sum - value === 0</code>, 是的话，放入到 <code>res</code> </li>\n<li>有 左节点 进入递归</li>\n<li>有 右节点 进入递归</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number[][]}\n */</span>\n<span class=\"token keyword\">var</span> pathSum <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> prefix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> res\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> dfs <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> remain <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 如果叶子节点都没有而且 sum - value == 0, 那么我们将prefix 加进数组</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">&amp;&amp;</span> remain <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prefix<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 没有子节点 且 remain !== 0 那就停止递归</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">&amp;&amp;</span> remain <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 有左子节点</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> remain<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prefix<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 有右子节点, 进入递归</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> remain<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prefix<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>像这种需要保留 状态集的可以用<code>prefix</code> 装着，最后当符合条件的时候再 把 <code>prefix</code> 装到 <code>result</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/path-sum-ii/\" target=\"_blank\" rel=\"noopener\">路径总和 II</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p>\n<p>说明: 叶子节点是指没有子节点的节点。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>给定如下二叉树，以及目标和 sum = 22</p>\n<pre><code class=\"jsx\">              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\    / \\\n        7    2  5   1\n</code></pre>\n<p>返回</p>\n<pre><code>[\n   [5,4,11,2],\n   [5,8,4,5]\n]</code></pre><h3 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h3><p>其实这道题跟<a href=\"https://zhou-bill.github.io/2020/07/07/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/\" target=\"_blank\" rel=\"noopener\">路径总和</a>这道题很相似</p>\n<ul>\n<li>其实就是将<strong>每次遍历的数</strong>放到 <code>prefix</code> 中，判断当前 节点是否有子节点 还有 <code>sum - value === 0</code>, 是的话，放入到 <code>res</code> </li>\n<li>有 左节点 进入递归</li>\n<li>有 右节点 进入递归</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><pre><code class=\"jsx\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number[][]}\n */\nvar pathSum = function(root, sum) {\n    let res = [];\n    let prefix = []\n    if(!root) {\n        return res\n    }\n    dfs(root, sum, res, prefix);\n    return res;\n};\n\nvar dfs = function(root, sum, res, prefix) {\n    const value = root.val;\n    const remain = sum - value;\n    // 如果叶子节点都没有而且 sum - value == 0, 那么我们将prefix 加进数组\n    if(!root.left &amp;&amp; !root.right &amp;&amp; remain === 0) {\n        res.push([...prefix, value])\n        return ;\n    }\n    // 没有子节点 且 remain !== 0 那就停止递归\n    if(!root.left &amp;&amp; !root.right &amp;&amp; remain !== 0) {\n        return;\n    }\n    // 有左子节点\n    if(root.left) {\n        dfs(root.left, remain, res, [...prefix, value])\n    }\n    // 有右子节点, 进入递归\n    if(root.right) {\n        dfs(root.right, remain, res, [...prefix, value]);\n    }\n}</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>像这种需要保留 状态集的可以用<code>prefix</code> 装着，最后当符合条件的时候再 把 <code>prefix</code> 装到 <code>result</code></p>\n"},{"title":"路径总和","date":"2020-07-07T11:02:09.000Z","type":"algorithm","_content":"\n## 题目描述1\n\n给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。\n\n**说明: 叶子节点是指没有子节点的节点。**\n\n示例1\n\n```html\n              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\      \\\n        7    2      1\n\n```\n\n> [5,4,8,11,null,13,4,7,2, null, null,null,1]\n> 22\n\n\n## 思想\n\n* **注意：**题目说了**叶子节点是没有子节点的节点**，那么我们只要判断一下当前节点有没有`root.left` 和 `root.right` 即可， 另外每次递归都减去当前`target = sum - root.val`, 然后递归左右子树就可以了\n\n## 递归实现\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {boolean}\n */\nvar hasPathSum = function(root, sum) {\n    if(root == null ) {\n        return false;\n    }\n\n    const value = root.val;\n    const target = sum - value;\n    if(target == 0 && (root.left == null && root.right == null)) {\n        return true;\n    }\n    return hasPathSum(root.left, target) || hasPathSum(root.right, target)\n\n};\n\n```","source":"_posts/路径总和.md","raw":"---\ntitle: 路径总和\ndate: 2020-07-07 11:02:09\ntype: algorithm\ntags: [algorithm-二叉树, algorithm-递归]\n---\n\n## 题目描述1\n\n给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。\n\n**说明: 叶子节点是指没有子节点的节点。**\n\n示例1\n\n```html\n              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\      \\\n        7    2      1\n\n```\n\n> [5,4,8,11,null,13,4,7,2, null, null,null,1]\n> 22\n\n\n## 思想\n\n* **注意：**题目说了**叶子节点是没有子节点的节点**，那么我们只要判断一下当前节点有没有`root.left` 和 `root.right` 即可， 另外每次递归都减去当前`target = sum - root.val`, 然后递归左右子树就可以了\n\n## 递归实现\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {boolean}\n */\nvar hasPathSum = function(root, sum) {\n    if(root == null ) {\n        return false;\n    }\n\n    const value = root.val;\n    const target = sum - value;\n    if(target == 0 && (root.left == null && root.right == null)) {\n        return true;\n    }\n    return hasPathSum(root.left, target) || hasPathSum(root.right, target)\n\n};\n\n```","slug":"路径总和","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrh90061mroj4ddkhifs","content":"<h2 id=\"题目描述1\"><a href=\"#题目描述1\" class=\"headerlink\" title=\"题目描述1\"></a>题目描述1</h2><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>\n<p><strong>说明: 叶子节点是指没有子节点的节点。</strong></p>\n<p>示例1</p>\n<pre class=\" language-html\"><code class=\"language-html\">              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\      \\\n        7    2      1\n</code></pre>\n<blockquote>\n<p>[5,4,8,11,null,13,4,7,2, null, null,null,1]<br>22</p>\n</blockquote>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><ul>\n<li><strong>注意：</strong>题目说了<strong>叶子节点是没有子节点的节点</strong>，那么我们只要判断一下当前节点有没有<code>root.left</code> 和 <code>root.right</code> 即可， 另外每次递归都减去当前<code>target = sum - root.val</code>, 然后递归左右子树就可以了</li>\n</ul>\n<h2 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {boolean}\n */</span>\n<span class=\"token keyword\">var</span> hasPathSum <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">hasPathSum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">hasPathSum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述1\"><a href=\"#题目描述1\" class=\"headerlink\" title=\"题目描述1\"></a>题目描述1</h2><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>\n<p><strong>说明: 叶子节点是指没有子节点的节点。</strong></p>\n<p>示例1</p>\n<pre><code class=\"html\">              5\n             / \\\n            4   8\n           /   / \\\n          11  13  4\n         /  \\      \\\n        7    2      1\n</code></pre>\n<blockquote>\n<p>[5,4,8,11,null,13,4,7,2, null, null,null,1]<br>22</p>\n</blockquote>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><ul>\n<li><strong>注意：</strong>题目说了<strong>叶子节点是没有子节点的节点</strong>，那么我们只要判断一下当前节点有没有<code>root.left</code> 和 <code>root.right</code> 即可， 另外每次递归都减去当前<code>target = sum - root.val</code>, 然后递归左右子树就可以了</li>\n</ul>\n<h2 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h2><pre><code class=\"js\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {boolean}\n */\nvar hasPathSum = function(root, sum) {\n    if(root == null ) {\n        return false;\n    }\n\n    const value = root.val;\n    const target = sum - value;\n    if(target == 0 &amp;&amp; (root.left == null &amp;&amp; root.right == null)) {\n        return true;\n    }\n    return hasPathSum(root.left, target) || hasPathSum(root.right, target)\n\n};\n</code></pre>\n"},{"title":"递增子序列","date":"2020-08-25T11:43:05.000Z","type":"algorithm","_content":"\n[递增子序列](https://leetcode-cn.com/problems/increasing-subsequences/)\n\n## 题目描述\n\n给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。\n\n### 示例1\n\n```html\n输入: [4, 6, 7, 7]\n输出: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\n```\n\n### 示例2\n\n```html\n输入: [4, 3, 2, 1]\n输出: []\n```\n\n## 题目分析\n\n我们以`[4, 6, 7, 7]`为例子\n\n![树](./递增子序列/树.jpg)\n\n* 一开始我们的数组为`array = [4,6,7,7]`, 结果集为`result = []`, 暂存结果集为 `prefix = []`, 遍历数组\n* 遍历开始，值为`4`, 放入暂存结果集，此时`prefix = [4]`, 我们**暂时不考虑顺序和是否重复**，把剩下的数组继续递归遍历\n* 此时 `array = [6, 7, 7]`, 把 `6` 取出来，`prefix = [4, 6]`, 此时 prefix 的长度 >= 2 放入 result，此时 `result = [[4, 6]]`, 把剩下的`[7,7]`继续递归，回溯之后这层可以整 `result = [[4,6],[4,7],[4,7]]`， 不过这是回溯之后的结果\n* 此时 `array = [7, 7]`, `prefix = [4, 6]`, `reuslt = [[4, 6]]`; 执行操作像上面一步\n\n\n## 实现代码\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findSubsequences = function(nums) {\n    let result = [];\n    contribute(result, nums, [])\n    return result\n};\n\nvar contribute = function(result, array, prefix) {\n    let length = array.length;\n    if(length == 0) {\n        return result;\n    }\n    let isInlcude = [];\n\n    for(let i = 0; i < length; i++) {\n        if(isInlcude.includes(array[i])) { // 去重\n            continue;\n        }\n        const last = prefix.length > 0 ? prefix[prefix.length - 1] : null;\n        // 如果prefix 的最后一个数 比当前数要大，那就不符合，例如 prefix = [4, 5]; 此时last 应该是5，array[i] = 1, 5>1不符合题意 \n        if(last !== null && last > array[i]) { \n            continue;\n        }\n        const temp = prefix.concat(array[i]);\n        isInlcude.push(array[i])\n        if(temp.length > 1) {\n            result.push(temp);\n        }\n        contribute(result, array.slice(i + 1, array.length), temp);\n    }\n    return result\n}\n```","source":"_posts/递增子序列.md","raw":"---\ntitle: 递增子序列\ndate: 2020-08-25 11:43:05\ntags: [algorithm-递归, algorithm-深度遍历搜索, algorithm-全排列]\ntype: algorithm\n---\n\n[递增子序列](https://leetcode-cn.com/problems/increasing-subsequences/)\n\n## 题目描述\n\n给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。\n\n### 示例1\n\n```html\n输入: [4, 6, 7, 7]\n输出: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\n```\n\n### 示例2\n\n```html\n输入: [4, 3, 2, 1]\n输出: []\n```\n\n## 题目分析\n\n我们以`[4, 6, 7, 7]`为例子\n\n![树](./递增子序列/树.jpg)\n\n* 一开始我们的数组为`array = [4,6,7,7]`, 结果集为`result = []`, 暂存结果集为 `prefix = []`, 遍历数组\n* 遍历开始，值为`4`, 放入暂存结果集，此时`prefix = [4]`, 我们**暂时不考虑顺序和是否重复**，把剩下的数组继续递归遍历\n* 此时 `array = [6, 7, 7]`, 把 `6` 取出来，`prefix = [4, 6]`, 此时 prefix 的长度 >= 2 放入 result，此时 `result = [[4, 6]]`, 把剩下的`[7,7]`继续递归，回溯之后这层可以整 `result = [[4,6],[4,7],[4,7]]`， 不过这是回溯之后的结果\n* 此时 `array = [7, 7]`, `prefix = [4, 6]`, `reuslt = [[4, 6]]`; 执行操作像上面一步\n\n\n## 实现代码\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findSubsequences = function(nums) {\n    let result = [];\n    contribute(result, nums, [])\n    return result\n};\n\nvar contribute = function(result, array, prefix) {\n    let length = array.length;\n    if(length == 0) {\n        return result;\n    }\n    let isInlcude = [];\n\n    for(let i = 0; i < length; i++) {\n        if(isInlcude.includes(array[i])) { // 去重\n            continue;\n        }\n        const last = prefix.length > 0 ? prefix[prefix.length - 1] : null;\n        // 如果prefix 的最后一个数 比当前数要大，那就不符合，例如 prefix = [4, 5]; 此时last 应该是5，array[i] = 1, 5>1不符合题意 \n        if(last !== null && last > array[i]) { \n            continue;\n        }\n        const temp = prefix.concat(array[i]);\n        isInlcude.push(array[i])\n        if(temp.length > 1) {\n            result.push(temp);\n        }\n        contribute(result, array.slice(i + 1, array.length), temp);\n    }\n    return result\n}\n```","slug":"递增子序列","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrha0065mrojcj8h0sm7","content":"<p><a href=\"https://leetcode-cn.com/problems/increasing-subsequences/\" target=\"_blank\" rel=\"noopener\">递增子序列</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。</p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><pre class=\" language-html\"><code class=\"language-html\">输入: [4, 6, 7, 7]\n输出: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</code></pre>\n<h3 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h3><pre class=\" language-html\"><code class=\"language-html\">输入: [4, 3, 2, 1]\n输出: []</code></pre>\n<h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>我们以<code>[4, 6, 7, 7]</code>为例子</p>\n<p><img src=\"/2020/08/25/%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/%E6%A0%91.jpg\" alt=\"树\"></p>\n<ul>\n<li>一开始我们的数组为<code>array = [4,6,7,7]</code>, 结果集为<code>result = []</code>, 暂存结果集为 <code>prefix = []</code>, 遍历数组</li>\n<li>遍历开始，值为<code>4</code>, 放入暂存结果集，此时<code>prefix = [4]</code>, 我们<strong>暂时不考虑顺序和是否重复</strong>，把剩下的数组继续递归遍历</li>\n<li>此时 <code>array = [6, 7, 7]</code>, 把 <code>6</code> 取出来，<code>prefix = [4, 6]</code>, 此时 prefix 的长度 &gt;= 2 放入 result，此时 <code>result = [[4, 6]]</code>, 把剩下的<code>[7,7]</code>继续递归，回溯之后这层可以整 <code>result = [[4,6],[4,7],[4,7]]</code>， 不过这是回溯之后的结果</li>\n<li>此时 <code>array = [7, 7]</code>, <code>prefix = [4, 6]</code>, <code>reuslt = [[4, 6]]</code>; 执行操作像上面一步</li>\n</ul>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param {number[]} nums\n * @return {number[][]}\n */</span>\n<span class=\"token keyword\">var</span> findSubsequences <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">contribute</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> contribute <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> isInlcude <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isInlcude<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 去重</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> prefix<span class=\"token punctuation\">[</span>prefix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 如果prefix 的最后一个数 比当前数要大，那就不符合，例如 prefix = [4, 5]; 此时last 应该是5，array[i] = 1, 5>1不符合题意 </span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>last <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> last <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        isInlcude<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">contribute</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/increasing-subsequences/\" target=\"_blank\" rel=\"noopener\">递增子序列</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。</p>\n<h3 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h3><pre><code class=\"html\">输入: [4, 6, 7, 7]\n输出: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</code></pre>\n<h3 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h3><pre><code class=\"html\">输入: [4, 3, 2, 1]\n输出: []</code></pre>\n<h2 id=\"题目分析\"><a href=\"#题目分析\" class=\"headerlink\" title=\"题目分析\"></a>题目分析</h2><p>我们以<code>[4, 6, 7, 7]</code>为例子</p>\n<p><img src=\"/2020/08/25/%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/%E6%A0%91.jpg\" alt=\"树\"></p>\n<ul>\n<li>一开始我们的数组为<code>array = [4,6,7,7]</code>, 结果集为<code>result = []</code>, 暂存结果集为 <code>prefix = []</code>, 遍历数组</li>\n<li>遍历开始，值为<code>4</code>, 放入暂存结果集，此时<code>prefix = [4]</code>, 我们<strong>暂时不考虑顺序和是否重复</strong>，把剩下的数组继续递归遍历</li>\n<li>此时 <code>array = [6, 7, 7]</code>, 把 <code>6</code> 取出来，<code>prefix = [4, 6]</code>, 此时 prefix 的长度 &gt;= 2 放入 result，此时 <code>result = [[4, 6]]</code>, 把剩下的<code>[7,7]</code>继续递归，回溯之后这层可以整 <code>result = [[4,6],[4,7],[4,7]]</code>， 不过这是回溯之后的结果</li>\n<li>此时 <code>array = [7, 7]</code>, <code>prefix = [4, 6]</code>, <code>reuslt = [[4, 6]]</code>; 执行操作像上面一步</li>\n</ul>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><pre><code class=\"js\">/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findSubsequences = function(nums) {\n    let result = [];\n    contribute(result, nums, [])\n    return result\n};\n\nvar contribute = function(result, array, prefix) {\n    let length = array.length;\n    if(length == 0) {\n        return result;\n    }\n    let isInlcude = [];\n\n    for(let i = 0; i &lt; length; i++) {\n        if(isInlcude.includes(array[i])) { // 去重\n            continue;\n        }\n        const last = prefix.length &gt; 0 ? prefix[prefix.length - 1] : null;\n        // 如果prefix 的最后一个数 比当前数要大，那就不符合，例如 prefix = [4, 5]; 此时last 应该是5，array[i] = 1, 5&gt;1不符合题意 \n        if(last !== null &amp;&amp; last &gt; array[i]) { \n            continue;\n        }\n        const temp = prefix.concat(array[i]);\n        isInlcude.push(array[i])\n        if(temp.length &gt; 1) {\n            result.push(temp);\n        }\n        contribute(result, array.slice(i + 1, array.length), temp);\n    }\n    return result\n}</code></pre>\n"},{"title":"长列表实践","date":"2020-04-15T14:33:51.000Z","_content":"\n## 场景描述\n\n当在一些展示性页面的时候，会经常性使用一些列表进行渲染，但是当数据太多的时候，dom 节点不断累加，会造成滚动时页面的卡顿，影响用户体验\n\n解决方案：虚拟列表\n\n## 核心思想\n\n**虚拟列表只对可视区域中的列表进行渲染, 滚动时改变渲染的数组**\n\n\n\n## 子列表元素高度固定时\n\n* 整个列表高度固定\n* 可视区域渲染条数固定\n* 可根据滚动距离，得到渲染的数组\n* 移动可视区域到滚动的距离位置\n\n当有10000条数据，屏幕高度为500时, 子元素高度为50，那么可渲染区域应该渲染为10条数据, 整个列表高度为50 * 10000\n![JCDFaV.jpg](https://s1.ax1x.com/2020/04/15/JCDFaV.jpg)\n\n当我们发生滚动的时候，比如滚动了150px，那么我们可见区域的渲染列表就变成了下图 第4项到第13项了 \n![JCDiV0.jpg](https://s1.ax1x.com/2020/04/15/JCDiV0.jpg)\n### 结构\n\n```html\n<div className={styles.page} style={{height: pageHeight + \"px\"}} ref=\"container\">  {/* 屏幕高度 */}\n    <div className={styles.infiniteListGhost} style={{height: infiniteListGhostHeight + \"px\"}} ></div> {/* list 高度 */}\n    <div className={styles.renderList} style={{ transform: `translate3d(0, ${translate}px, 0)`}} > {/* 可见list 高度 */}\n        {\n            renderList.map((item, index) => {\n                return (\n                    <div className={styles.item} key={index} style={{height: itemHeight + \"px\"}}> {/* 子列表元素高度 */}\n                        { item }\n                    </div>\n                )\n            })\n        }\n    </div> \n</div>\n```\n\n```less\n.page {\n    overflow-y: auto;\n    width: 100%;\n    position: relative;\n\n    .infiniteListGhost {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        z-index: -1;\n    }\n\n    .renderList {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        z-index: 1;\n\n        .item {\n            color: #000;\n            border: 1px solid #ccc;\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n            justify-content: center;\n        }\n    }\n}\n```\n\n> 子列表项的高度为 itemHeight = 50, 滚动高度 为 scrollTop\n\n* 屏幕高度： `pageHeight = document.body.clientHeight`;\n* 列表高度： `infiniteListGhostHeight = list.length * itemHeight`\n* 渲染条数： `const itemCount = Math.ceil(clientHeight / itemHeight );`\n* startIndex: `startIndex = Math.floor(scrollTop / itemHeight)`\n* endIndex: `endIndex = startIndex + itemCount`\n* 列表渲染数组： `list.slice(startIndex, endIndex)`;\n* startOffset: `startOffset = scrollTop - (scrollTop % itemHeight)`; 滚动倍数\n\n\n```js\nstate = {\n    pageHeight: 0, //屏幕高度\n    infiniteListGhostHeight: 0, // 列表总高度\n    renderList: [], // 渲染列表\n    itemHeight: 80,\n    translate: 0, // 可视区域偏移\n}\n\ncomponentDidMount() {\n    const { itemHeight } = this.state\n    this.refs.container.addEventListener('scroll', this.handleScroll);\n    const clientHeight = document.body.clientHeight;\n    const itemCount = Math.ceil(clientHeight / itemHeight );\n\n    this.setState({\n        pageHeight: clientHeight,\n        infiniteListGhostHeight: result.length * itemHeight,\n        renderList: result.slice(0, itemCount)\n    })\n}\n\ncomponentWillUnmount() {\n    this.refs.container.removeEventListener('scroll', this.handleScroll);\n}\n\nhandleScroll = (e) => {\n    const { itemHeight, pageHeight, infiniteListGhostHeight } = this.state\n    const scrollTop = e.srcElement.scrollTop || e.srcElement.scrollTop;\n    // 从scrollTop 计算出偏移startIndex\n    const itemCount = Math.ceil(pageHeight / itemHeight ); //可视区域高度 / 子项高度 = 子项个数\n    const startIndex = Math.floor(scrollTop / itemHeight);\n    const endIndex = startIndex + itemCount; \n    const list = result.slice(startIndex, endIndex ); \n    const startOffset = (scrollTop - (scrollTop % itemHeight));\n    this.setState({\n        translate: startOffset,\n        renderList: list\n    })\n}\n```\n\n\n\n## 效果\n\n![e0r5u-2k2gm.gif](https://i.loli.net/2020/04/15/wyAF5uhqMbiDB4N.gif)\n\n可以看出，只渲染可视区域内的数据\n\n\n## 设置上下缓存区\n\n> 当滚动太块的时候，往下会有一段空白， 往上也有一段空白，那么这时候设置上下缓冲区可以解决此问题\n\n```js\nhandleScroll = (e) => {\n    // ....\n    const above = Math.min(startIndex, itemCount);\n    const below = Math.min(result.length - endIndex, itemCount);;\n    const start = startIndex - above;\n    const end = endIndex + below;\n    const list = result.slice(start, end); // 注意此时list的渲染会加上缓存区，所以导致了偏移向下了，但实际上应该减掉 上方缓冲区才能渲染中间的\n    const startOffset = (scrollTop - (scrollTop % itemHeight) - above  * itemHeight); \n} \n```\n\n此时效果：\n\n![ayn6z-l262n.gif](https://i.loli.net/2020/04/16/u1KeX9xdiwYQTRA.gif)","source":"_posts/长列表实践.md","raw":"---\ntitle: 长列表实践\ndate: 2020-04-15 14:33:51\ntags: [react]\ncategory: react\n---\n\n## 场景描述\n\n当在一些展示性页面的时候，会经常性使用一些列表进行渲染，但是当数据太多的时候，dom 节点不断累加，会造成滚动时页面的卡顿，影响用户体验\n\n解决方案：虚拟列表\n\n## 核心思想\n\n**虚拟列表只对可视区域中的列表进行渲染, 滚动时改变渲染的数组**\n\n\n\n## 子列表元素高度固定时\n\n* 整个列表高度固定\n* 可视区域渲染条数固定\n* 可根据滚动距离，得到渲染的数组\n* 移动可视区域到滚动的距离位置\n\n当有10000条数据，屏幕高度为500时, 子元素高度为50，那么可渲染区域应该渲染为10条数据, 整个列表高度为50 * 10000\n![JCDFaV.jpg](https://s1.ax1x.com/2020/04/15/JCDFaV.jpg)\n\n当我们发生滚动的时候，比如滚动了150px，那么我们可见区域的渲染列表就变成了下图 第4项到第13项了 \n![JCDiV0.jpg](https://s1.ax1x.com/2020/04/15/JCDiV0.jpg)\n### 结构\n\n```html\n<div className={styles.page} style={{height: pageHeight + \"px\"}} ref=\"container\">  {/* 屏幕高度 */}\n    <div className={styles.infiniteListGhost} style={{height: infiniteListGhostHeight + \"px\"}} ></div> {/* list 高度 */}\n    <div className={styles.renderList} style={{ transform: `translate3d(0, ${translate}px, 0)`}} > {/* 可见list 高度 */}\n        {\n            renderList.map((item, index) => {\n                return (\n                    <div className={styles.item} key={index} style={{height: itemHeight + \"px\"}}> {/* 子列表元素高度 */}\n                        { item }\n                    </div>\n                )\n            })\n        }\n    </div> \n</div>\n```\n\n```less\n.page {\n    overflow-y: auto;\n    width: 100%;\n    position: relative;\n\n    .infiniteListGhost {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        z-index: -1;\n    }\n\n    .renderList {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        z-index: 1;\n\n        .item {\n            color: #000;\n            border: 1px solid #ccc;\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n            justify-content: center;\n        }\n    }\n}\n```\n\n> 子列表项的高度为 itemHeight = 50, 滚动高度 为 scrollTop\n\n* 屏幕高度： `pageHeight = document.body.clientHeight`;\n* 列表高度： `infiniteListGhostHeight = list.length * itemHeight`\n* 渲染条数： `const itemCount = Math.ceil(clientHeight / itemHeight );`\n* startIndex: `startIndex = Math.floor(scrollTop / itemHeight)`\n* endIndex: `endIndex = startIndex + itemCount`\n* 列表渲染数组： `list.slice(startIndex, endIndex)`;\n* startOffset: `startOffset = scrollTop - (scrollTop % itemHeight)`; 滚动倍数\n\n\n```js\nstate = {\n    pageHeight: 0, //屏幕高度\n    infiniteListGhostHeight: 0, // 列表总高度\n    renderList: [], // 渲染列表\n    itemHeight: 80,\n    translate: 0, // 可视区域偏移\n}\n\ncomponentDidMount() {\n    const { itemHeight } = this.state\n    this.refs.container.addEventListener('scroll', this.handleScroll);\n    const clientHeight = document.body.clientHeight;\n    const itemCount = Math.ceil(clientHeight / itemHeight );\n\n    this.setState({\n        pageHeight: clientHeight,\n        infiniteListGhostHeight: result.length * itemHeight,\n        renderList: result.slice(0, itemCount)\n    })\n}\n\ncomponentWillUnmount() {\n    this.refs.container.removeEventListener('scroll', this.handleScroll);\n}\n\nhandleScroll = (e) => {\n    const { itemHeight, pageHeight, infiniteListGhostHeight } = this.state\n    const scrollTop = e.srcElement.scrollTop || e.srcElement.scrollTop;\n    // 从scrollTop 计算出偏移startIndex\n    const itemCount = Math.ceil(pageHeight / itemHeight ); //可视区域高度 / 子项高度 = 子项个数\n    const startIndex = Math.floor(scrollTop / itemHeight);\n    const endIndex = startIndex + itemCount; \n    const list = result.slice(startIndex, endIndex ); \n    const startOffset = (scrollTop - (scrollTop % itemHeight));\n    this.setState({\n        translate: startOffset,\n        renderList: list\n    })\n}\n```\n\n\n\n## 效果\n\n![e0r5u-2k2gm.gif](https://i.loli.net/2020/04/15/wyAF5uhqMbiDB4N.gif)\n\n可以看出，只渲染可视区域内的数据\n\n\n## 设置上下缓存区\n\n> 当滚动太块的时候，往下会有一段空白， 往上也有一段空白，那么这时候设置上下缓冲区可以解决此问题\n\n```js\nhandleScroll = (e) => {\n    // ....\n    const above = Math.min(startIndex, itemCount);\n    const below = Math.min(result.length - endIndex, itemCount);;\n    const start = startIndex - above;\n    const end = endIndex + below;\n    const list = result.slice(start, end); // 注意此时list的渲染会加上缓存区，所以导致了偏移向下了，但实际上应该减掉 上方缓冲区才能渲染中间的\n    const startOffset = (scrollTop - (scrollTop % itemHeight) - above  * itemHeight); \n} \n```\n\n此时效果：\n\n![ayn6z-l262n.gif](https://i.loli.net/2020/04/16/u1KeX9xdiwYQTRA.gif)","slug":"长列表实践","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrhc0068mroj9ylecget","content":"<h2 id=\"场景描述\"><a href=\"#场景描述\" class=\"headerlink\" title=\"场景描述\"></a>场景描述</h2><p>当在一些展示性页面的时候，会经常性使用一些列表进行渲染，但是当数据太多的时候，dom 节点不断累加，会造成滚动时页面的卡顿，影响用户体验</p>\n<p>解决方案：虚拟列表</p>\n<h2 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h2><p><strong>虚拟列表只对可视区域中的列表进行渲染, 滚动时改变渲染的数组</strong></p>\n<h2 id=\"子列表元素高度固定时\"><a href=\"#子列表元素高度固定时\" class=\"headerlink\" title=\"子列表元素高度固定时\"></a>子列表元素高度固定时</h2><ul>\n<li>整个列表高度固定</li>\n<li>可视区域渲染条数固定</li>\n<li>可根据滚动距离，得到渲染的数组</li>\n<li>移动可视区域到滚动的距离位置</li>\n</ul>\n<p>当有10000条数据，屏幕高度为500时, 子元素高度为50，那么可渲染区域应该渲染为10条数据, 整个列表高度为50 * 10000<br><img src=\"https://s1.ax1x.com/2020/04/15/JCDFaV.jpg\" alt=\"JCDFaV.jpg\"></p>\n<p>当我们发生滚动的时候，比如滚动了150px，那么我们可见区域的渲染列表就变成了下图 第4项到第13项了<br><img src=\"https://s1.ax1x.com/2020/04/15/JCDiV0.jpg\" alt=\"JCDiV0.jpg\"></p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.page}</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{{height:</span> <span class=\"token attr-name\">pageHeight</span> <span class=\"token attr-name\">+</span> <span class=\"token attr-name\">\"px\"}}</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  {/* 屏幕高度 */}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.infiniteListGhost}</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{{height:</span> <span class=\"token attr-name\">infiniteListGhostHeight</span> <span class=\"token attr-name\">+</span> <span class=\"token attr-name\">\"px\"}}</span> <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> {/* list 高度 */}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.renderList}</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{{</span> <span class=\"token attr-name\"><span class=\"token namespace\">transform:</span></span> <span class=\"token attr-name\">`translate3d(0,</span> <span class=\"token attr-name\">${translate}px,</span> <span class=\"token attr-name\">0)`}}</span> <span class=\"token punctuation\">></span></span> {/* 可见list 高度 */}\n        {\n            renderList.map((item, index) => {\n                return (\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{styles.item}</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{index}</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{{height:</span> <span class=\"token attr-name\">itemHeight</span> <span class=\"token attr-name\">+</span> <span class=\"token attr-name\">\"px\"}}</span><span class=\"token punctuation\">></span></span> {/* 子列表元素高度 */}\n                        { item }\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n                )\n            })\n        }\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\" language-less\"><code class=\"language-less\"><span class=\"token selector\">.page</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n\n    <span class=\"token selector\">.infiniteListGhost</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\">.renderList</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token selector\">.item</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#000</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px solid <span class=\"token hexcode\">#ccc</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>子列表项的高度为 itemHeight = 50, 滚动高度 为 scrollTop</p>\n</blockquote>\n<ul>\n<li>屏幕高度： <code>pageHeight = document.body.clientHeight</code>;</li>\n<li>列表高度： <code>infiniteListGhostHeight = list.length * itemHeight</code></li>\n<li>渲染条数： <code>const itemCount = Math.ceil(clientHeight / itemHeight );</code></li>\n<li>startIndex: <code>startIndex = Math.floor(scrollTop / itemHeight)</code></li>\n<li>endIndex: <code>endIndex = startIndex + itemCount</code></li>\n<li>列表渲染数组： <code>list.slice(startIndex, endIndex)</code>;</li>\n<li>startOffset: <code>startOffset = scrollTop - (scrollTop % itemHeight)</code>; 滚动倍数</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    pageHeight<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//屏幕高度</span>\n    infiniteListGhostHeight<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 列表总高度</span>\n    renderList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 渲染列表</span>\n    itemHeight<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n    translate<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 可视区域偏移</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> itemHeight <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refs<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleScroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> clientHeight <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> itemCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>clientHeight <span class=\"token operator\">/</span> itemHeight <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        pageHeight<span class=\"token punctuation\">:</span> clientHeight<span class=\"token punctuation\">,</span>\n        infiniteListGhostHeight<span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> itemHeight<span class=\"token punctuation\">,</span>\n        renderList<span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> itemCount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refs<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleScroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nhandleScroll <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> itemHeight<span class=\"token punctuation\">,</span> pageHeight<span class=\"token punctuation\">,</span> infiniteListGhostHeight <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token keyword\">const</span> scrollTop <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 从scrollTop 计算出偏移startIndex</span>\n    <span class=\"token keyword\">const</span> itemCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>pageHeight <span class=\"token operator\">/</span> itemHeight <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//可视区域高度 / 子项高度 = 子项个数</span>\n    <span class=\"token keyword\">const</span> startIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>scrollTop <span class=\"token operator\">/</span> itemHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> endIndex <span class=\"token operator\">=</span> startIndex <span class=\"token operator\">+</span> itemCount<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> endIndex <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">const</span> startOffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>scrollTop <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>scrollTop <span class=\"token operator\">%</span> itemHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        translate<span class=\"token punctuation\">:</span> startOffset<span class=\"token punctuation\">,</span>\n        renderList<span class=\"token punctuation\">:</span> list\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://i.loli.net/2020/04/15/wyAF5uhqMbiDB4N.gif\" alt=\"e0r5u-2k2gm.gif\"></p>\n<p>可以看出，只渲染可视区域内的数据</p>\n<h2 id=\"设置上下缓存区\"><a href=\"#设置上下缓存区\" class=\"headerlink\" title=\"设置上下缓存区\"></a>设置上下缓存区</h2><blockquote>\n<p>当滚动太块的时候，往下会有一段空白， 往上也有一段空白，那么这时候设置上下缓冲区可以解决此问题</p>\n</blockquote>\n<pre class=\" language-js\"><code class=\"language-js\">handleScroll <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ....</span>\n    <span class=\"token keyword\">const</span> above <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> itemCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> below <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> endIndex<span class=\"token punctuation\">,</span> itemCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> startIndex <span class=\"token operator\">-</span> above<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> endIndex <span class=\"token operator\">+</span> below<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 注意此时list的渲染会加上缓存区，所以导致了偏移向下了，但实际上应该减掉 上方缓冲区才能渲染中间的</span>\n    <span class=\"token keyword\">const</span> startOffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>scrollTop <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>scrollTop <span class=\"token operator\">%</span> itemHeight<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> above  <span class=\"token operator\">*</span> itemHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> </code></pre>\n<p>此时效果：</p>\n<p><img src=\"https://i.loli.net/2020/04/16/u1KeX9xdiwYQTRA.gif\" alt=\"ayn6z-l262n.gif\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"场景描述\"><a href=\"#场景描述\" class=\"headerlink\" title=\"场景描述\"></a>场景描述</h2><p>当在一些展示性页面的时候，会经常性使用一些列表进行渲染，但是当数据太多的时候，dom 节点不断累加，会造成滚动时页面的卡顿，影响用户体验</p>\n<p>解决方案：虚拟列表</p>\n<h2 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h2><p><strong>虚拟列表只对可视区域中的列表进行渲染, 滚动时改变渲染的数组</strong></p>\n<h2 id=\"子列表元素高度固定时\"><a href=\"#子列表元素高度固定时\" class=\"headerlink\" title=\"子列表元素高度固定时\"></a>子列表元素高度固定时</h2><ul>\n<li>整个列表高度固定</li>\n<li>可视区域渲染条数固定</li>\n<li>可根据滚动距离，得到渲染的数组</li>\n<li>移动可视区域到滚动的距离位置</li>\n</ul>\n<p>当有10000条数据，屏幕高度为500时, 子元素高度为50，那么可渲染区域应该渲染为10条数据, 整个列表高度为50 * 10000<br><img src=\"https://s1.ax1x.com/2020/04/15/JCDFaV.jpg\" alt=\"JCDFaV.jpg\"></p>\n<p>当我们发生滚动的时候，比如滚动了150px，那么我们可见区域的渲染列表就变成了下图 第4项到第13项了<br><img src=\"https://s1.ax1x.com/2020/04/15/JCDiV0.jpg\" alt=\"JCDiV0.jpg\"></p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><pre><code class=\"html\">&lt;div className={styles.page} style={{height: pageHeight + \"px\"}} ref=&quot;container&quot;&gt;  {/* 屏幕高度 */}\n    &lt;div className={styles.infiniteListGhost} style={{height: infiniteListGhostHeight + \"px\"}} &gt;&lt;/div&gt; {/* list 高度 */}\n    &lt;div className={styles.renderList} style={{ transform: `translate3d(0, ${translate}px, 0)`}} &gt; {/* 可见list 高度 */}\n        {\n            renderList.map((item, index) =&gt; {\n                return (\n                    &lt;div className={styles.item} key={index} style={{height: itemHeight + \"px\"}}&gt; {/* 子列表元素高度 */}\n                        { item }\n                    &lt;/div&gt;\n                )\n            })\n        }\n    &lt;/div&gt; \n&lt;/div&gt;</code></pre>\n<pre><code class=\"less\">.page {\n    overflow-y: auto;\n    width: 100%;\n    position: relative;\n\n    .infiniteListGhost {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        z-index: -1;\n    }\n\n    .renderList {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        z-index: 1;\n\n        .item {\n            color: #000;\n            border: 1px solid #ccc;\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n            justify-content: center;\n        }\n    }\n}</code></pre>\n<blockquote>\n<p>子列表项的高度为 itemHeight = 50, 滚动高度 为 scrollTop</p>\n</blockquote>\n<ul>\n<li>屏幕高度： <code>pageHeight = document.body.clientHeight</code>;</li>\n<li>列表高度： <code>infiniteListGhostHeight = list.length * itemHeight</code></li>\n<li>渲染条数： <code>const itemCount = Math.ceil(clientHeight / itemHeight );</code></li>\n<li>startIndex: <code>startIndex = Math.floor(scrollTop / itemHeight)</code></li>\n<li>endIndex: <code>endIndex = startIndex + itemCount</code></li>\n<li>列表渲染数组： <code>list.slice(startIndex, endIndex)</code>;</li>\n<li>startOffset: <code>startOffset = scrollTop - (scrollTop % itemHeight)</code>; 滚动倍数</li>\n</ul>\n<pre><code class=\"js\">state = {\n    pageHeight: 0, //屏幕高度\n    infiniteListGhostHeight: 0, // 列表总高度\n    renderList: [], // 渲染列表\n    itemHeight: 80,\n    translate: 0, // 可视区域偏移\n}\n\ncomponentDidMount() {\n    const { itemHeight } = this.state\n    this.refs.container.addEventListener(&#39;scroll&#39;, this.handleScroll);\n    const clientHeight = document.body.clientHeight;\n    const itemCount = Math.ceil(clientHeight / itemHeight );\n\n    this.setState({\n        pageHeight: clientHeight,\n        infiniteListGhostHeight: result.length * itemHeight,\n        renderList: result.slice(0, itemCount)\n    })\n}\n\ncomponentWillUnmount() {\n    this.refs.container.removeEventListener(&#39;scroll&#39;, this.handleScroll);\n}\n\nhandleScroll = (e) =&gt; {\n    const { itemHeight, pageHeight, infiniteListGhostHeight } = this.state\n    const scrollTop = e.srcElement.scrollTop || e.srcElement.scrollTop;\n    // 从scrollTop 计算出偏移startIndex\n    const itemCount = Math.ceil(pageHeight / itemHeight ); //可视区域高度 / 子项高度 = 子项个数\n    const startIndex = Math.floor(scrollTop / itemHeight);\n    const endIndex = startIndex + itemCount; \n    const list = result.slice(startIndex, endIndex ); \n    const startOffset = (scrollTop - (scrollTop % itemHeight));\n    this.setState({\n        translate: startOffset,\n        renderList: list\n    })\n}</code></pre>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://i.loli.net/2020/04/15/wyAF5uhqMbiDB4N.gif\" alt=\"e0r5u-2k2gm.gif\"></p>\n<p>可以看出，只渲染可视区域内的数据</p>\n<h2 id=\"设置上下缓存区\"><a href=\"#设置上下缓存区\" class=\"headerlink\" title=\"设置上下缓存区\"></a>设置上下缓存区</h2><blockquote>\n<p>当滚动太块的时候，往下会有一段空白， 往上也有一段空白，那么这时候设置上下缓冲区可以解决此问题</p>\n</blockquote>\n<pre><code class=\"js\">handleScroll = (e) =&gt; {\n    // ....\n    const above = Math.min(startIndex, itemCount);\n    const below = Math.min(result.length - endIndex, itemCount);;\n    const start = startIndex - above;\n    const end = endIndex + below;\n    const list = result.slice(start, end); // 注意此时list的渲染会加上缓存区，所以导致了偏移向下了，但实际上应该减掉 上方缓冲区才能渲染中间的\n    const startOffset = (scrollTop - (scrollTop % itemHeight) - above  * itemHeight); \n} </code></pre>\n<p>此时效果：</p>\n<p><img src=\"https://i.loli.net/2020/04/16/u1KeX9xdiwYQTRA.gif\" alt=\"ayn6z-l262n.gif\"></p>\n"},{"title":"除数博弈","date":"2020-07-24T14:03:55.000Z","type":"algorithm","_content":"\n[除数博弈](https://leetcode-cn.com/problems/divisor-game/)\n\n## 题目描述\n\n爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。\n\n最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：\n\n选出任一 x，满足 0 < x < N 且 N % x == 0 。\n用 N - x 替换黑板上的数字 N 。\n如果玩家无法执行这些操作，就会输掉游戏。\n\n只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。\n\n示例1： \n\n```\n输入：2\n输出：true\n解释：爱丽丝选择 1，鲍勃无法进行操作。\n```\n\n示例2：\n\n```\n输入：3\n输出：false\n解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。\n```\n\n## 思想\n\n* 题目要求能整除那么被除数 一定是 1，2，3，5 这几个数，所以我们只要关注dp[i-1], dp[i-2]和dp[i-3]还有dp[i-5]的值即可\n* 另外题目也说 0 < x < N 所以 i 一定要大于 2, 或者3，或者 5\n* 另外 假设 i = 4时， 可以整除2，所以可以关注dp[2]的值，和dp[3]的值，\n  * 如果我们关注dp[3]的话，也就是我先手，先取1，他取1，我再取1，他无法操作，我赢\n  * 如果我们关注dp[2]的话，也就是我先手，我先取2， 他取1，我无法操作，我输，\n  * **总结：** 总体来说是赢的，但dp[4] 要取与dp[2]， dp[3]相反的值.\n\n## 代码\n\n\n```js\nvar divisorGame = function(N) {\n    // 这既是一个博弈游戏，类似捡石子\n    let dp = Array(N + 1).fill(false);\n    dp[0] = false;\n    dp[1] = false;\n    dp[2] = true;\n\n    for(let i = 3; i < N + 1; i++) {\n        // 1, 2, 3, 5\n        dp[i] = (i > 5 && i % 5 == 0 && !dp[i - 5]) || \n                (i > 2 && i % 2 == 0 && !dp[i - 2]) || \n                (i > 3 && i % 3 == 0 && !dp[i - 3]) || \n                (!dp[i - 1]);\n    }\n    console.log(dp);\n    return dp[N];\n};\n```\n\n## 官方解答\n\n看了官方解答，我真的是吐了，就一样代码\n\n```js\nvar divisorGame = function(N) {\n    return N % 2 == 0;\n};\n```","source":"_posts/除数博弈.md","raw":"---\ntitle: 除数博弈\ndate: 2020-07-24 14:03:55\ntags: algorithm-动态规划\ntype: algorithm\n---\n\n[除数博弈](https://leetcode-cn.com/problems/divisor-game/)\n\n## 题目描述\n\n爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。\n\n最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：\n\n选出任一 x，满足 0 < x < N 且 N % x == 0 。\n用 N - x 替换黑板上的数字 N 。\n如果玩家无法执行这些操作，就会输掉游戏。\n\n只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。\n\n示例1： \n\n```\n输入：2\n输出：true\n解释：爱丽丝选择 1，鲍勃无法进行操作。\n```\n\n示例2：\n\n```\n输入：3\n输出：false\n解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。\n```\n\n## 思想\n\n* 题目要求能整除那么被除数 一定是 1，2，3，5 这几个数，所以我们只要关注dp[i-1], dp[i-2]和dp[i-3]还有dp[i-5]的值即可\n* 另外题目也说 0 < x < N 所以 i 一定要大于 2, 或者3，或者 5\n* 另外 假设 i = 4时， 可以整除2，所以可以关注dp[2]的值，和dp[3]的值，\n  * 如果我们关注dp[3]的话，也就是我先手，先取1，他取1，我再取1，他无法操作，我赢\n  * 如果我们关注dp[2]的话，也就是我先手，我先取2， 他取1，我无法操作，我输，\n  * **总结：** 总体来说是赢的，但dp[4] 要取与dp[2]， dp[3]相反的值.\n\n## 代码\n\n\n```js\nvar divisorGame = function(N) {\n    // 这既是一个博弈游戏，类似捡石子\n    let dp = Array(N + 1).fill(false);\n    dp[0] = false;\n    dp[1] = false;\n    dp[2] = true;\n\n    for(let i = 3; i < N + 1; i++) {\n        // 1, 2, 3, 5\n        dp[i] = (i > 5 && i % 5 == 0 && !dp[i - 5]) || \n                (i > 2 && i % 2 == 0 && !dp[i - 2]) || \n                (i > 3 && i % 3 == 0 && !dp[i - 3]) || \n                (!dp[i - 1]);\n    }\n    console.log(dp);\n    return dp[N];\n};\n```\n\n## 官方解答\n\n看了官方解答，我真的是吐了，就一样代码\n\n```js\nvar divisorGame = function(N) {\n    return N % 2 == 0;\n};\n```","slug":"除数博弈","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrhd006bmroj45f4duu1","content":"<p><a href=\"https://leetcode-cn.com/problems/divisor-game/\" target=\"_blank\" rel=\"noopener\">除数博弈</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。</p>\n<p>最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：</p>\n<p>选出任一 x，满足 0 &lt; x &lt; N 且 N % x == 0 。<br>用 N - x 替换黑板上的数字 N 。<br>如果玩家无法执行这些操作，就会输掉游戏。</p>\n<p>只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。</p>\n<p>示例1： </p>\n<pre><code>输入：2\n输出：true\n解释：爱丽丝选择 1，鲍勃无法进行操作。</code></pre><p>示例2：</p>\n<pre><code>输入：3\n输出：false\n解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。</code></pre><h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><ul>\n<li>题目要求能整除那么被除数 一定是 1，2，3，5 这几个数，所以我们只要关注dp[i-1], dp[i-2]和dp[i-3]还有dp[i-5]的值即可</li>\n<li>另外题目也说 0 &lt; x &lt; N 所以 i 一定要大于 2, 或者3，或者 5</li>\n<li>另外 假设 i = 4时， 可以整除2，所以可以关注dp[2]的值，和dp[3]的值，<ul>\n<li>如果我们关注dp[3]的话，也就是我先手，先取1，他取1，我再取1，他无法操作，我赢</li>\n<li>如果我们关注dp[2]的话，也就是我先手，我先取2， 他取1，我无法操作，我输，</li>\n<li><strong>总结：</strong> 总体来说是赢的，但dp[4] 要取与dp[2]， dp[3]相反的值.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> divisorGame <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这既是一个博弈游戏，类似捡石子</span>\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 1, 2, 3, 5</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> \n                <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> \n                <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> \n                <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"官方解答\"><a href=\"#官方解答\" class=\"headerlink\" title=\"官方解答\"></a>官方解答</h2><p>看了官方解答，我真的是吐了，就一样代码</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> divisorGame <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> N <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/divisor-game/\" target=\"_blank\" rel=\"noopener\">除数博弈</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。</p>\n<p>最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：</p>\n<p>选出任一 x，满足 0 &lt; x &lt; N 且 N % x == 0 。<br>用 N - x 替换黑板上的数字 N 。<br>如果玩家无法执行这些操作，就会输掉游戏。</p>\n<p>只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。</p>\n<p>示例1： </p>\n<pre><code>输入：2\n输出：true\n解释：爱丽丝选择 1，鲍勃无法进行操作。</code></pre><p>示例2：</p>\n<pre><code>输入：3\n输出：false\n解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。</code></pre><h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><ul>\n<li>题目要求能整除那么被除数 一定是 1，2，3，5 这几个数，所以我们只要关注dp[i-1], dp[i-2]和dp[i-3]还有dp[i-5]的值即可</li>\n<li>另外题目也说 0 &lt; x &lt; N 所以 i 一定要大于 2, 或者3，或者 5</li>\n<li>另外 假设 i = 4时， 可以整除2，所以可以关注dp[2]的值，和dp[3]的值，<ul>\n<li>如果我们关注dp[3]的话，也就是我先手，先取1，他取1，我再取1，他无法操作，我赢</li>\n<li>如果我们关注dp[2]的话，也就是我先手，我先取2， 他取1，我无法操作，我输，</li>\n<li><strong>总结：</strong> 总体来说是赢的，但dp[4] 要取与dp[2]， dp[3]相反的值.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">var divisorGame = function(N) {\n    // 这既是一个博弈游戏，类似捡石子\n    let dp = Array(N + 1).fill(false);\n    dp[0] = false;\n    dp[1] = false;\n    dp[2] = true;\n\n    for(let i = 3; i &lt; N + 1; i++) {\n        // 1, 2, 3, 5\n        dp[i] = (i &gt; 5 &amp;&amp; i % 5 == 0 &amp;&amp; !dp[i - 5]) || \n                (i &gt; 2 &amp;&amp; i % 2 == 0 &amp;&amp; !dp[i - 2]) || \n                (i &gt; 3 &amp;&amp; i % 3 == 0 &amp;&amp; !dp[i - 3]) || \n                (!dp[i - 1]);\n    }\n    console.log(dp);\n    return dp[N];\n};</code></pre>\n<h2 id=\"官方解答\"><a href=\"#官方解答\" class=\"headerlink\" title=\"官方解答\"></a>官方解答</h2><p>看了官方解答，我真的是吐了，就一样代码</p>\n<pre><code class=\"js\">var divisorGame = function(N) {\n    return N % 2 == 0;\n};</code></pre>\n"},{"title":"面试总结","date":"2020-09-10T18:37:32.000Z","visible":false,"_content":"## vdom \n\n将多次dom修改的结果一次性更新到页面上，从而减少了页面的渲染次数，减少了修改dom之后的回流与重绘，提高了渲染性能\n**VDOM的厉害之处不在于他运行有多快，而在于它在不需要人工优化的情况下，提供一个过得去的性能优化**\n\n## 说一说之前的面试体验吧\n\n* 有一些纯属浪费时间，技术栈不太符合的也叫你过去面试，以后需要在先问技术栈再决定去不去面试，不然把自己搞的又累又浪费时间\n* 面试本来就是双向选择，所以对面试官不要怂，说不定他比你还垃圾，毕竟**面试造火箭，工作拧螺丝**\n* 经过这几轮面试， 主要可能问到的是 \n    * 算法（排序， 动态规划）， \n    * react 源码（fiber, react 事件原理, 时间片（time slicing）， setState 在setTimeout 执行为什么是同步的, hook 实现原理也就是闭包， hook ref.current）(前端面试星球小程序有答案)\n    * react diff 算法\n        * 分3种，1 tree duff 2 component diff  3 element diff \n    * 网络问题 （tcp/ip, https, http1.0 与 http 1.1）\n        * tcp/ip 三次捂手， 四次挥手\n        * https 基于ssl /tls  对称加密（简单说就是把各自秘钥传给对方），非对称加密\n        * http1.0（一个http 请求连一个tcp, 所以时间耗在3次握手，4次回收）, http 1.1（增加 keep-alive）, http2.0 (头部压缩，二进制流，帧中有报文信息，通过排序重新组合还原报文) 的区别\n    * nodejs (中间件) 插件\n    * umi 底层， 约定式路由实现， dva， cli 集合 （webpack, ssr， UI库） 等等是怎么实现的\n    * 设计模式 （工厂， 单例， 观察者模式， 发布订阅）\n\n## 说一说未来\n\n* 针对算法 动态规划，DFS, BFS, 二分法，链表， 二叉树，\n* react 源码，继续深入，这次要先看结构，再深入源码\n* vue 3.0 原理， 深入学习vue生态 （vuex, vue-router, echart）\n* 图表实现 （canvas， three.js）\n* nodejs \n* 一个后端 语言 nodejs / python\n\n\n## 书\n\n* 设计模式\n* 红宝书\n* 图解http\n\n## 学习本就是输入输出的事情， 学是输入，教别人是输出，多记录多回顾","source":"_posts/面试总结.md","raw":"---\ntitle: 面试总结\ndate: 2020-09-10 18:37:32\nvisible: false\n---\n## vdom \n\n将多次dom修改的结果一次性更新到页面上，从而减少了页面的渲染次数，减少了修改dom之后的回流与重绘，提高了渲染性能\n**VDOM的厉害之处不在于他运行有多快，而在于它在不需要人工优化的情况下，提供一个过得去的性能优化**\n\n## 说一说之前的面试体验吧\n\n* 有一些纯属浪费时间，技术栈不太符合的也叫你过去面试，以后需要在先问技术栈再决定去不去面试，不然把自己搞的又累又浪费时间\n* 面试本来就是双向选择，所以对面试官不要怂，说不定他比你还垃圾，毕竟**面试造火箭，工作拧螺丝**\n* 经过这几轮面试， 主要可能问到的是 \n    * 算法（排序， 动态规划）， \n    * react 源码（fiber, react 事件原理, 时间片（time slicing）， setState 在setTimeout 执行为什么是同步的, hook 实现原理也就是闭包， hook ref.current）(前端面试星球小程序有答案)\n    * react diff 算法\n        * 分3种，1 tree duff 2 component diff  3 element diff \n    * 网络问题 （tcp/ip, https, http1.0 与 http 1.1）\n        * tcp/ip 三次捂手， 四次挥手\n        * https 基于ssl /tls  对称加密（简单说就是把各自秘钥传给对方），非对称加密\n        * http1.0（一个http 请求连一个tcp, 所以时间耗在3次握手，4次回收）, http 1.1（增加 keep-alive）, http2.0 (头部压缩，二进制流，帧中有报文信息，通过排序重新组合还原报文) 的区别\n    * nodejs (中间件) 插件\n    * umi 底层， 约定式路由实现， dva， cli 集合 （webpack, ssr， UI库） 等等是怎么实现的\n    * 设计模式 （工厂， 单例， 观察者模式， 发布订阅）\n\n## 说一说未来\n\n* 针对算法 动态规划，DFS, BFS, 二分法，链表， 二叉树，\n* react 源码，继续深入，这次要先看结构，再深入源码\n* vue 3.0 原理， 深入学习vue生态 （vuex, vue-router, echart）\n* 图表实现 （canvas， three.js）\n* nodejs \n* 一个后端 语言 nodejs / python\n\n\n## 书\n\n* 设计模式\n* 红宝书\n* 图解http\n\n## 学习本就是输入输出的事情， 学是输入，教别人是输出，多记录多回顾","slug":"面试总结","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrhe006dmroj2tb8dyth","content":"<h2 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h2><p>将多次dom修改的结果一次性更新到页面上，从而减少了页面的渲染次数，减少了修改dom之后的回流与重绘，提高了渲染性能<br><strong>VDOM的厉害之处不在于他运行有多快，而在于它在不需要人工优化的情况下，提供一个过得去的性能优化</strong></p>\n<h2 id=\"说一说之前的面试体验吧\"><a href=\"#说一说之前的面试体验吧\" class=\"headerlink\" title=\"说一说之前的面试体验吧\"></a>说一说之前的面试体验吧</h2><ul>\n<li>有一些纯属浪费时间，技术栈不太符合的也叫你过去面试，以后需要在先问技术栈再决定去不去面试，不然把自己搞的又累又浪费时间</li>\n<li>面试本来就是双向选择，所以对面试官不要怂，说不定他比你还垃圾，毕竟<strong>面试造火箭，工作拧螺丝</strong></li>\n<li>经过这几轮面试， 主要可能问到的是 <ul>\n<li>算法（排序， 动态规划）， </li>\n<li>react 源码（fiber, react 事件原理, 时间片（time slicing）， setState 在setTimeout 执行为什么是同步的, hook 实现原理也就是闭包， hook ref.current）(前端面试星球小程序有答案)</li>\n<li>react diff 算法<ul>\n<li>分3种，1 tree duff 2 component diff  3 element diff </li>\n</ul>\n</li>\n<li>网络问题 （tcp/ip, https, http1.0 与 http 1.1）<ul>\n<li>tcp/ip 三次捂手， 四次挥手</li>\n<li>https 基于ssl /tls  对称加密（简单说就是把各自秘钥传给对方），非对称加密</li>\n<li>http1.0（一个http 请求连一个tcp, 所以时间耗在3次握手，4次回收）, http 1.1（增加 keep-alive）, http2.0 (头部压缩，二进制流，帧中有报文信息，通过排序重新组合还原报文) 的区别</li>\n</ul>\n</li>\n<li>nodejs (中间件) 插件</li>\n<li>umi 底层， 约定式路由实现， dva， cli 集合 （webpack, ssr， UI库） 等等是怎么实现的</li>\n<li>设计模式 （工厂， 单例， 观察者模式， 发布订阅）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"说一说未来\"><a href=\"#说一说未来\" class=\"headerlink\" title=\"说一说未来\"></a>说一说未来</h2><ul>\n<li>针对算法 动态规划，DFS, BFS, 二分法，链表， 二叉树，</li>\n<li>react 源码，继续深入，这次要先看结构，再深入源码</li>\n<li>vue 3.0 原理， 深入学习vue生态 （vuex, vue-router, echart）</li>\n<li>图表实现 （canvas， three.js）</li>\n<li>nodejs </li>\n<li>一个后端 语言 nodejs / python</li>\n</ul>\n<h2 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h2><ul>\n<li>设计模式</li>\n<li>红宝书</li>\n<li>图解http</li>\n</ul>\n<h2 id=\"学习本就是输入输出的事情，-学是输入，教别人是输出，多记录多回顾\"><a href=\"#学习本就是输入输出的事情，-学是输入，教别人是输出，多记录多回顾\" class=\"headerlink\" title=\"学习本就是输入输出的事情， 学是输入，教别人是输出，多记录多回顾\"></a>学习本就是输入输出的事情， 学是输入，教别人是输出，多记录多回顾</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h2><p>将多次dom修改的结果一次性更新到页面上，从而减少了页面的渲染次数，减少了修改dom之后的回流与重绘，提高了渲染性能<br><strong>VDOM的厉害之处不在于他运行有多快，而在于它在不需要人工优化的情况下，提供一个过得去的性能优化</strong></p>\n<h2 id=\"说一说之前的面试体验吧\"><a href=\"#说一说之前的面试体验吧\" class=\"headerlink\" title=\"说一说之前的面试体验吧\"></a>说一说之前的面试体验吧</h2><ul>\n<li>有一些纯属浪费时间，技术栈不太符合的也叫你过去面试，以后需要在先问技术栈再决定去不去面试，不然把自己搞的又累又浪费时间</li>\n<li>面试本来就是双向选择，所以对面试官不要怂，说不定他比你还垃圾，毕竟<strong>面试造火箭，工作拧螺丝</strong></li>\n<li>经过这几轮面试， 主要可能问到的是 <ul>\n<li>算法（排序， 动态规划）， </li>\n<li>react 源码（fiber, react 事件原理, 时间片（time slicing）， setState 在setTimeout 执行为什么是同步的, hook 实现原理也就是闭包， hook ref.current）(前端面试星球小程序有答案)</li>\n<li>react diff 算法<ul>\n<li>分3种，1 tree duff 2 component diff  3 element diff </li>\n</ul>\n</li>\n<li>网络问题 （tcp/ip, https, http1.0 与 http 1.1）<ul>\n<li>tcp/ip 三次捂手， 四次挥手</li>\n<li>https 基于ssl /tls  对称加密（简单说就是把各自秘钥传给对方），非对称加密</li>\n<li>http1.0（一个http 请求连一个tcp, 所以时间耗在3次握手，4次回收）, http 1.1（增加 keep-alive）, http2.0 (头部压缩，二进制流，帧中有报文信息，通过排序重新组合还原报文) 的区别</li>\n</ul>\n</li>\n<li>nodejs (中间件) 插件</li>\n<li>umi 底层， 约定式路由实现， dva， cli 集合 （webpack, ssr， UI库） 等等是怎么实现的</li>\n<li>设计模式 （工厂， 单例， 观察者模式， 发布订阅）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"说一说未来\"><a href=\"#说一说未来\" class=\"headerlink\" title=\"说一说未来\"></a>说一说未来</h2><ul>\n<li>针对算法 动态规划，DFS, BFS, 二分法，链表， 二叉树，</li>\n<li>react 源码，继续深入，这次要先看结构，再深入源码</li>\n<li>vue 3.0 原理， 深入学习vue生态 （vuex, vue-router, echart）</li>\n<li>图表实现 （canvas， three.js）</li>\n<li>nodejs </li>\n<li>一个后端 语言 nodejs / python</li>\n</ul>\n<h2 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h2><ul>\n<li>设计模式</li>\n<li>红宝书</li>\n<li>图解http</li>\n</ul>\n<h2 id=\"学习本就是输入输出的事情，-学是输入，教别人是输出，多记录多回顾\"><a href=\"#学习本就是输入输出的事情，-学是输入，教别人是输出，多记录多回顾\" class=\"headerlink\" title=\"学习本就是输入输出的事情， 学是输入，教别人是输出，多记录多回顾\"></a>学习本就是输入输出的事情， 学是输入，教别人是输出，多记录多回顾</h2>"},{"title":"面试题 17.13. 恢复空格","date":"2020-07-11T10:51:30.000Z","type":"algorithm","_content":"\n[面试题 17.13. 恢复空格](https://leetcode-cn.com/problems/re-space-lcci/)\n\n## 题目描述\n\n给定一个字典 dictionary 和 一串字符串sentence， 在这串字符串中尽可能多的从字典中找到相应的值，返回未识别的字符\n\n>输入：\n> dictionary = [\"looked\",\"just\",\"like\",\"her\",\"brother\"]\n> sentence = \"jesslookedjustliketimherbrother\"\n> 输出： 7\n> 解释： 断句后为\"jess looked just like tim her brother\"，共7个未识别字符。\n\n\n## 解题思路\n\n* 一开始想的是 根据我们现实生活中这样查字典这样，比如 looked, 先翻到L如果字典有l 开头的那再找 o 如果没有那直接退出，这时候就要构建字典树\n\n\n* 我们直接遍历字符串`sentence`, 然后 跟字典里的那些 词对比一下，然后最小的那个就可以了\n\n我们以 `sentence = 'jelookedss'`, `dictionary = [\"looked\"]` 为例子\n\ndp: \n\n| i     |  0 | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  | 10 | \n|:-----:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n| sentence  | j  | e  | l  | o  | o  | k  | e  | d  | s  | s  |    |\n| dp[]  | 0  | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 2  | 3  | 4  |\n\n\n请注意我们`dp[0] = 0` 所以dp[1] 对应的应该是 sentence[0], 就是**后移了一位**\n看上面的图，当我们i = 7 的时候 我们找到了looked，这是我们字典里的，所以我们dp[7+1] 的值应该是`dp[2]` => `dp[7 - 6 + 1]` 即 `sentence[1]` 的时候，因为前面的都是在字典中找不到的,\n**替代公式**： 要是找到的情况下 `dp[i + 1] = Math.min(dp[i + 1], dp[i - 字典词长度 + 1])`\n\n\n## 动态规划\n\n```jsx\nvar respace = function(dictionary, sentence) {\n    let dp = [0];\n    let length = sentence.length;\n\n    if(dictionary.length == 0) {\n        return length;\n    }\n\n    for(let i = 0; i < length; i++) {\n        dp[i + 1] = dp[i] + 1;\n\n        for(let j = 0; j < dictionary.length; j++ ) {\n            const l = dictionary[j].length\n            if(dictionary[j] == sentence.substring(i - l + 1 , i + 1 )) {\n                dp[i + 1] = Math.min(dp[i + 1], dp[i - l + 1] );\n            }\n        }\n    }\n\n    return dp[length];\n};\n\n```\n\n\n## 字典树\n\n```js\nvar respace = function(dictionary, sentence) {\n    let cache = []\n    for (let j = 0;j < sentence.length + 1;j ++) {\n        cache.push(new Map)\n    }\n    let dp = new Array(sentence.length+1).fill(0);\n    let trie = {};\n    let n = sentence.length;\n    if (sentence === \"\") return 0;\n\n    // 构建字典树\n    for(let word of dictionary) {\n        let node = trie;\n        for(let c of word) {\n            if (node[c] == undefined) {\n                node[c] = {}\n            }\n            node = node[c];\n        }\n        node[\"#\"] = \"#\";\n    }\n    // 预处理出字典中存在的所有下标区间 cache[j].get[k] == true 表示[k,j]区间的单词在字典中能找到。\n    // 我们寻找字典开头，要是选找到开头的话继续往下找字典，要是遇到 # 那么就结束了，对于每个字符都是都一样，最后记录当前位置字符到字典结束的长度\n    for(let i = 1; i <= n; i++) {\n        let node = trie;\n        for(let j = i; j <= n; j++) {\n            let c = sentence[j-1];\n            if (!node[c]) {\n                break;\n            }\n            node = node[c];\n            if (node['#'] != undefined) {\n                cache[j].set(i, true);\n            }\n        }\n    }\n    for (let j = 1;j <= n;j ++) {\n        dp[j] = dp[j-1] + 1;\n        for(let [k,v] of cache[j]){\n            dp[j] = Math.min(dp[j], dp[k-1])\n        }\n    } \n    return dp[n];\n};\n```","source":"_posts/面试题-17-13-恢复空格.md","raw":"---\ntitle: 面试题 17.13. 恢复空格\ndate: 2020-07-11 10:51:30\ntags: [algorithm-动态规划]\ntype: algorithm\n---\n\n[面试题 17.13. 恢复空格](https://leetcode-cn.com/problems/re-space-lcci/)\n\n## 题目描述\n\n给定一个字典 dictionary 和 一串字符串sentence， 在这串字符串中尽可能多的从字典中找到相应的值，返回未识别的字符\n\n>输入：\n> dictionary = [\"looked\",\"just\",\"like\",\"her\",\"brother\"]\n> sentence = \"jesslookedjustliketimherbrother\"\n> 输出： 7\n> 解释： 断句后为\"jess looked just like tim her brother\"，共7个未识别字符。\n\n\n## 解题思路\n\n* 一开始想的是 根据我们现实生活中这样查字典这样，比如 looked, 先翻到L如果字典有l 开头的那再找 o 如果没有那直接退出，这时候就要构建字典树\n\n\n* 我们直接遍历字符串`sentence`, 然后 跟字典里的那些 词对比一下，然后最小的那个就可以了\n\n我们以 `sentence = 'jelookedss'`, `dictionary = [\"looked\"]` 为例子\n\ndp: \n\n| i     |  0 | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  | 10 | \n|:-----:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n| sentence  | j  | e  | l  | o  | o  | k  | e  | d  | s  | s  |    |\n| dp[]  | 0  | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 2  | 3  | 4  |\n\n\n请注意我们`dp[0] = 0` 所以dp[1] 对应的应该是 sentence[0], 就是**后移了一位**\n看上面的图，当我们i = 7 的时候 我们找到了looked，这是我们字典里的，所以我们dp[7+1] 的值应该是`dp[2]` => `dp[7 - 6 + 1]` 即 `sentence[1]` 的时候，因为前面的都是在字典中找不到的,\n**替代公式**： 要是找到的情况下 `dp[i + 1] = Math.min(dp[i + 1], dp[i - 字典词长度 + 1])`\n\n\n## 动态规划\n\n```jsx\nvar respace = function(dictionary, sentence) {\n    let dp = [0];\n    let length = sentence.length;\n\n    if(dictionary.length == 0) {\n        return length;\n    }\n\n    for(let i = 0; i < length; i++) {\n        dp[i + 1] = dp[i] + 1;\n\n        for(let j = 0; j < dictionary.length; j++ ) {\n            const l = dictionary[j].length\n            if(dictionary[j] == sentence.substring(i - l + 1 , i + 1 )) {\n                dp[i + 1] = Math.min(dp[i + 1], dp[i - l + 1] );\n            }\n        }\n    }\n\n    return dp[length];\n};\n\n```\n\n\n## 字典树\n\n```js\nvar respace = function(dictionary, sentence) {\n    let cache = []\n    for (let j = 0;j < sentence.length + 1;j ++) {\n        cache.push(new Map)\n    }\n    let dp = new Array(sentence.length+1).fill(0);\n    let trie = {};\n    let n = sentence.length;\n    if (sentence === \"\") return 0;\n\n    // 构建字典树\n    for(let word of dictionary) {\n        let node = trie;\n        for(let c of word) {\n            if (node[c] == undefined) {\n                node[c] = {}\n            }\n            node = node[c];\n        }\n        node[\"#\"] = \"#\";\n    }\n    // 预处理出字典中存在的所有下标区间 cache[j].get[k] == true 表示[k,j]区间的单词在字典中能找到。\n    // 我们寻找字典开头，要是选找到开头的话继续往下找字典，要是遇到 # 那么就结束了，对于每个字符都是都一样，最后记录当前位置字符到字典结束的长度\n    for(let i = 1; i <= n; i++) {\n        let node = trie;\n        for(let j = i; j <= n; j++) {\n            let c = sentence[j-1];\n            if (!node[c]) {\n                break;\n            }\n            node = node[c];\n            if (node['#'] != undefined) {\n                cache[j].set(i, true);\n            }\n        }\n    }\n    for (let j = 1;j <= n;j ++) {\n        dp[j] = dp[j-1] + 1;\n        for(let [k,v] of cache[j]){\n            dp[j] = Math.min(dp[j], dp[k-1])\n        }\n    } \n    return dp[n];\n};\n```","slug":"面试题-17-13-恢复空格","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrhf006gmroj7c6wedmu","content":"<p><a href=\"https://leetcode-cn.com/problems/re-space-lcci/\" target=\"_blank\" rel=\"noopener\">面试题 17.13. 恢复空格</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个字典 dictionary 和 一串字符串sentence， 在这串字符串中尽可能多的从字典中找到相应的值，返回未识别的字符</p>\n<blockquote>\n<p>输入：<br>dictionary = [“looked”,”just”,”like”,”her”,”brother”]<br>sentence = “jesslookedjustliketimherbrother”<br>输出： 7<br>解释： 断句后为”jess looked just like tim her brother”，共7个未识别字符。</p>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>一开始想的是 根据我们现实生活中这样查字典这样，比如 looked, 先翻到L如果字典有l 开头的那再找 o 如果没有那直接退出，这时候就要构建字典树</li>\n</ul>\n<ul>\n<li>我们直接遍历字符串<code>sentence</code>, 然后 跟字典里的那些 词对比一下，然后最小的那个就可以了</li>\n</ul>\n<p>我们以 <code>sentence = &#39;jelookedss&#39;</code>, <code>dictionary = [&quot;looked&quot;]</code> 为例子</p>\n<p>dp: </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n<th align=\"center\">10</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">sentence</td>\n<td align=\"center\">j</td>\n<td align=\"center\">e</td>\n<td align=\"center\">l</td>\n<td align=\"center\">o</td>\n<td align=\"center\">o</td>\n<td align=\"center\">k</td>\n<td align=\"center\">e</td>\n<td align=\"center\">d</td>\n<td align=\"center\">s</td>\n<td align=\"center\">s</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">dp[]</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<p>请注意我们<code>dp[0] = 0</code> 所以dp[1] 对应的应该是 sentence[0], 就是<strong>后移了一位</strong><br>看上面的图，当我们i = 7 的时候 我们找到了looked，这是我们字典里的，所以我们dp[7+1] 的值应该是<code>dp[2]</code> =&gt; <code>dp[7 - 6 + 1]</code> 即 <code>sentence[1]</code> 的时候，因为前面的都是在字典中找不到的,<br><strong>替代公式</strong>： 要是找到的情况下 <code>dp[i + 1] = Math.min(dp[i + 1], dp[i - 字典词长度 + 1])</code></p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><pre class=\" language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> respace <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">,</span> sentence<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> sentence<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> dictionary<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> l <span class=\"token operator\">=</span> dictionary<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> sentence<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> respace <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">,</span> sentence<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> sentence<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cache<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> trie <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> sentence<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sentence <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 构建字典树</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> word <span class=\"token keyword\">of</span> dictionary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> trie<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> c <span class=\"token keyword\">of</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                node<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        node<span class=\"token punctuation\">[</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 预处理出字典中存在的所有下标区间 cache[j].get[k] == true 表示[k,j]区间的单词在字典中能找到。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 我们寻找字典开头，要是选找到开头的话继续往下找字典，要是遇到 # 那么就结束了，对于每个字符都是都一样，最后记录当前位置字符到字典结束的长度</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> trie<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> sentence<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cache<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> cache<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/re-space-lcci/\" target=\"_blank\" rel=\"noopener\">面试题 17.13. 恢复空格</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个字典 dictionary 和 一串字符串sentence， 在这串字符串中尽可能多的从字典中找到相应的值，返回未识别的字符</p>\n<blockquote>\n<p>输入：<br>dictionary = [“looked”,”just”,”like”,”her”,”brother”]<br>sentence = “jesslookedjustliketimherbrother”<br>输出： 7<br>解释： 断句后为”jess looked just like tim her brother”，共7个未识别字符。</p>\n</blockquote>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><ul>\n<li>一开始想的是 根据我们现实生活中这样查字典这样，比如 looked, 先翻到L如果字典有l 开头的那再找 o 如果没有那直接退出，这时候就要构建字典树</li>\n</ul>\n<ul>\n<li>我们直接遍历字符串<code>sentence</code>, 然后 跟字典里的那些 词对比一下，然后最小的那个就可以了</li>\n</ul>\n<p>我们以 <code>sentence = &#39;jelookedss&#39;</code>, <code>dictionary = [&quot;looked&quot;]</code> 为例子</p>\n<p>dp: </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n<th align=\"center\">10</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">sentence</td>\n<td align=\"center\">j</td>\n<td align=\"center\">e</td>\n<td align=\"center\">l</td>\n<td align=\"center\">o</td>\n<td align=\"center\">o</td>\n<td align=\"center\">k</td>\n<td align=\"center\">e</td>\n<td align=\"center\">d</td>\n<td align=\"center\">s</td>\n<td align=\"center\">s</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">dp[]</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<p>请注意我们<code>dp[0] = 0</code> 所以dp[1] 对应的应该是 sentence[0], 就是<strong>后移了一位</strong><br>看上面的图，当我们i = 7 的时候 我们找到了looked，这是我们字典里的，所以我们dp[7+1] 的值应该是<code>dp[2]</code> =&gt; <code>dp[7 - 6 + 1]</code> 即 <code>sentence[1]</code> 的时候，因为前面的都是在字典中找不到的,<br><strong>替代公式</strong>： 要是找到的情况下 <code>dp[i + 1] = Math.min(dp[i + 1], dp[i - 字典词长度 + 1])</code></p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><pre><code class=\"jsx\">var respace = function(dictionary, sentence) {\n    let dp = [0];\n    let length = sentence.length;\n\n    if(dictionary.length == 0) {\n        return length;\n    }\n\n    for(let i = 0; i &lt; length; i++) {\n        dp[i + 1] = dp[i] + 1;\n\n        for(let j = 0; j &lt; dictionary.length; j++ ) {\n            const l = dictionary[j].length\n            if(dictionary[j] == sentence.substring(i - l + 1 , i + 1 )) {\n                dp[i + 1] = Math.min(dp[i + 1], dp[i - l + 1] );\n            }\n        }\n    }\n\n    return dp[length];\n};\n</code></pre>\n<h2 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h2><pre><code class=\"js\">var respace = function(dictionary, sentence) {\n    let cache = []\n    for (let j = 0;j &lt; sentence.length + 1;j ++) {\n        cache.push(new Map)\n    }\n    let dp = new Array(sentence.length+1).fill(0);\n    let trie = {};\n    let n = sentence.length;\n    if (sentence === &quot;&quot;) return 0;\n\n    // 构建字典树\n    for(let word of dictionary) {\n        let node = trie;\n        for(let c of word) {\n            if (node[c] == undefined) {\n                node[c] = {}\n            }\n            node = node[c];\n        }\n        node[&quot;#&quot;] = &quot;#&quot;;\n    }\n    // 预处理出字典中存在的所有下标区间 cache[j].get[k] == true 表示[k,j]区间的单词在字典中能找到。\n    // 我们寻找字典开头，要是选找到开头的话继续往下找字典，要是遇到 # 那么就结束了，对于每个字符都是都一样，最后记录当前位置字符到字典结束的长度\n    for(let i = 1; i &lt;= n; i++) {\n        let node = trie;\n        for(let j = i; j &lt;= n; j++) {\n            let c = sentence[j-1];\n            if (!node[c]) {\n                break;\n            }\n            node = node[c];\n            if (node[&#39;#&#39;] != undefined) {\n                cache[j].set(i, true);\n            }\n        }\n    }\n    for (let j = 1;j &lt;= n;j ++) {\n        dp[j] = dp[j-1] + 1;\n        for(let [k,v] of cache[j]){\n            dp[j] = Math.min(dp[j], dp[k-1])\n        }\n    } \n    return dp[n];\n};</code></pre>\n"},{"title":"面试题29. 顺时针打印矩阵","date":"2020-06-09T15:08:16.000Z","type":"algorithm","_content":"\n[面试题29.顺时针打印矩阵](https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/)\n\n## 题目描述\n\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。\n\n示例 1：\n\n> 输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n> 输出：[1,2,3,6,9,8,7,4,5]\n\n## 分析\n\n示例1：\n\n| i/j   | j = 0 | j = 1 | j = 2 |\n|:-----:| :---: | :---: | :---: |\n| i = 0 | 1     | 2     | 3     |\n| i = 1 | 4     | 5     | 6     |\n| i = 2 | 7     | 8     | 9     |\n| i = 2 | 10    | 11    | 13    |\n\n示例2：\n\n| i/j   | j = 0 | j = 1 | j = 2 | j = 3 |\n|:-----:| :---: | :---: | :---: | :---: |\n| i = 0 | 1     | 2     | 3     | 4     |\n| i = 1 | 5     | 6     | 7     | 8     |\n| i = 2 | 9     | 10    | 11    | 12    |\n| i = 2 | 13    | 14    | 15    | 16    |\n\n可以看一下结果，题目说是顺时针打印，可以想象一下 i 跟 j 的变化\n\n* 循环遍历\n* 结束条件是： 当结果数组的长度 == `matrix`数组的高 * 宽， 即所有子集都遍历过了\n* 再来分析一下边界问题, 分析一下 `i`, `j` 的变化， 这里以 **示例2** 为例子\n    1. 开始： 向右走， 那么 `j++`，`i`不变， 到 `j == 3`的时候向下， 所以这里要考虑右边的边界问题\n    2. 向下走： 那么 `i++`, `j` 不变，到 `i == 3`的时候向左， 所以考虑下边界问题\n    3. 向左走： 那么 `j--`, `i` 不变，到 `j == 0`的时候向上，所以考虑左边界问题\n    4. 向上走： 那么 `i--`, `j` 不变，到 `i == 1`的时候再一次重复， 1,2,3,4这四步， 但这里要考虑上边界的问题\n\n我这里用 `direction` 表示方向， `1 => 向右， 2 => 向下， 3 => 向左， 4 =》 向上`\n\n这时候就是想什么时候得到边界，在边界的时候改变方向，所以有\n\n* 先设置边界 `left = 0, right = colums - 1, up = 0, down = rows - 1`, 这里表示`左右上下`的边界，我们只要操作这个边界就可以了\n另外`rows`表示有多少行，`colums`表示有多少列\n\n* `i == up && j == left`, 我们可以看 `i == 0, j == 0`的时候，这时候就是向右走\n\n* `i == up && j == right`, 这时候就是 `i == 0， j == 3`的时候，那么我们就改变方向，向下走\n\n* `i == down && j == right`, 这时候就是 `i == 3, j == 3`，那么又改变方向，向左走\n\n* `i == down && j == left`, 这时候就是 `i == 3, j == 0`, 又改变方向，向上走\n\n* 注意： 此时向上走之后，等 `i == up + 1 && j == left`, 即 `i == 1, j ==0`, 即`5`这个地方，那么就`向右走`，同时，更改边界, `left++, right--, up++, down--` 再重复上面的事情\n\n> 整个过程是：\n\n* `1 => 2 => 3 => 4 => 8 => 12 => 16 => 15 => 14 => 13 => 9 => 5 这是一圈`\n* `6 => 7 => 11 => 10 这又是一圈`\n\n当输入的`matrix = [[1],[2],[3]]`就只有一列的时候， 另外看`示例1`, 走完外圈，剩下内圈，只剩下`5,8`这两个元素的时候也`向下走`，所以总结 `left == right`的时候，`direction = 2, i++`\n\n## 代码\n\n```js\nvar spiralOrder = function(matrix) {\n    let rows = matrix.length;\n    let result = [];\n    if(rows == 0) {\n        return result\n    }\n    let columns = matrix[0].length;\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let direction = 1;  // 1 => 向右 2 => 向下 3=> 向左 4 => 向上\n    let left = 0;        // 左边界\n    let right = columns - 1;  // 右边界\n    let up = 0; \n    let down =  rows - 1;\n\n    while(count < rows * columns) {\n        const current = matrix[i][j];\n        result.push(current);\n        count++;\n        if(left == right) {  // 当剩下的元素只有一列的时候，只能向下走了\n            direction = 2;\n            i++;\n            continue;\n        }\n        if(i == up && j == left) {   // 拐点向右\n            direction = 1\n        } else if(i == up && j == right) {  // 拐点向下\n            direction = 2\n        } else if(i == down && j == right) { // 拐点向左\n            direction = 3;\n        } else if(i == down && j == left) { // 拐点向上\n            direction = 4\n        }\n        \n        if(i == up + 1 && j == left) {\n            // 完成一圈后，重设定边界\n            left = left + 1;\n            right = right - 1;\n            up = up + 1;\n            down = down - 1;\n            direction = 1;\n        }\n\n        // 根据方向，改变i, j的值\n        if(direction == 1) {\n            j++;\n        } else if(direction == 2) {\n            i++;\n        } else if(direction == 3) {\n            j--;\n        } else {\n            i--;\n        }\n    }\n    return result\n};\n```\n","source":"_posts/面试题29-顺时针打印矩阵.md","raw":"---\ntitle: 面试题29. 顺时针打印矩阵\ndate: 2020-06-09 15:08:16\ntype: algorithm\ntags: [algorithm-基础, algorithm-数组, algorithm-面试题]\n---\n\n[面试题29.顺时针打印矩阵](https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/)\n\n## 题目描述\n\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。\n\n示例 1：\n\n> 输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n> 输出：[1,2,3,6,9,8,7,4,5]\n\n## 分析\n\n示例1：\n\n| i/j   | j = 0 | j = 1 | j = 2 |\n|:-----:| :---: | :---: | :---: |\n| i = 0 | 1     | 2     | 3     |\n| i = 1 | 4     | 5     | 6     |\n| i = 2 | 7     | 8     | 9     |\n| i = 2 | 10    | 11    | 13    |\n\n示例2：\n\n| i/j   | j = 0 | j = 1 | j = 2 | j = 3 |\n|:-----:| :---: | :---: | :---: | :---: |\n| i = 0 | 1     | 2     | 3     | 4     |\n| i = 1 | 5     | 6     | 7     | 8     |\n| i = 2 | 9     | 10    | 11    | 12    |\n| i = 2 | 13    | 14    | 15    | 16    |\n\n可以看一下结果，题目说是顺时针打印，可以想象一下 i 跟 j 的变化\n\n* 循环遍历\n* 结束条件是： 当结果数组的长度 == `matrix`数组的高 * 宽， 即所有子集都遍历过了\n* 再来分析一下边界问题, 分析一下 `i`, `j` 的变化， 这里以 **示例2** 为例子\n    1. 开始： 向右走， 那么 `j++`，`i`不变， 到 `j == 3`的时候向下， 所以这里要考虑右边的边界问题\n    2. 向下走： 那么 `i++`, `j` 不变，到 `i == 3`的时候向左， 所以考虑下边界问题\n    3. 向左走： 那么 `j--`, `i` 不变，到 `j == 0`的时候向上，所以考虑左边界问题\n    4. 向上走： 那么 `i--`, `j` 不变，到 `i == 1`的时候再一次重复， 1,2,3,4这四步， 但这里要考虑上边界的问题\n\n我这里用 `direction` 表示方向， `1 => 向右， 2 => 向下， 3 => 向左， 4 =》 向上`\n\n这时候就是想什么时候得到边界，在边界的时候改变方向，所以有\n\n* 先设置边界 `left = 0, right = colums - 1, up = 0, down = rows - 1`, 这里表示`左右上下`的边界，我们只要操作这个边界就可以了\n另外`rows`表示有多少行，`colums`表示有多少列\n\n* `i == up && j == left`, 我们可以看 `i == 0, j == 0`的时候，这时候就是向右走\n\n* `i == up && j == right`, 这时候就是 `i == 0， j == 3`的时候，那么我们就改变方向，向下走\n\n* `i == down && j == right`, 这时候就是 `i == 3, j == 3`，那么又改变方向，向左走\n\n* `i == down && j == left`, 这时候就是 `i == 3, j == 0`, 又改变方向，向上走\n\n* 注意： 此时向上走之后，等 `i == up + 1 && j == left`, 即 `i == 1, j ==0`, 即`5`这个地方，那么就`向右走`，同时，更改边界, `left++, right--, up++, down--` 再重复上面的事情\n\n> 整个过程是：\n\n* `1 => 2 => 3 => 4 => 8 => 12 => 16 => 15 => 14 => 13 => 9 => 5 这是一圈`\n* `6 => 7 => 11 => 10 这又是一圈`\n\n当输入的`matrix = [[1],[2],[3]]`就只有一列的时候， 另外看`示例1`, 走完外圈，剩下内圈，只剩下`5,8`这两个元素的时候也`向下走`，所以总结 `left == right`的时候，`direction = 2, i++`\n\n## 代码\n\n```js\nvar spiralOrder = function(matrix) {\n    let rows = matrix.length;\n    let result = [];\n    if(rows == 0) {\n        return result\n    }\n    let columns = matrix[0].length;\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let direction = 1;  // 1 => 向右 2 => 向下 3=> 向左 4 => 向上\n    let left = 0;        // 左边界\n    let right = columns - 1;  // 右边界\n    let up = 0; \n    let down =  rows - 1;\n\n    while(count < rows * columns) {\n        const current = matrix[i][j];\n        result.push(current);\n        count++;\n        if(left == right) {  // 当剩下的元素只有一列的时候，只能向下走了\n            direction = 2;\n            i++;\n            continue;\n        }\n        if(i == up && j == left) {   // 拐点向右\n            direction = 1\n        } else if(i == up && j == right) {  // 拐点向下\n            direction = 2\n        } else if(i == down && j == right) { // 拐点向左\n            direction = 3;\n        } else if(i == down && j == left) { // 拐点向上\n            direction = 4\n        }\n        \n        if(i == up + 1 && j == left) {\n            // 完成一圈后，重设定边界\n            left = left + 1;\n            right = right - 1;\n            up = up + 1;\n            down = down - 1;\n            direction = 1;\n        }\n\n        // 根据方向，改变i, j的值\n        if(direction == 1) {\n            j++;\n        } else if(direction == 2) {\n            i++;\n        } else if(direction == 3) {\n            j--;\n        } else {\n            i--;\n        }\n    }\n    return result\n};\n```\n","slug":"面试题29-顺时针打印矩阵","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrhl006jmroj9fm88d7p","content":"<p><a href=\"https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/\" target=\"_blank\" rel=\"noopener\">面试题29.顺时针打印矩阵</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<p>示例 1：</p>\n<blockquote>\n<p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[1,2,3,6,9,8,7,4,5]</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>示例1：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i/j</th>\n<th align=\"center\">j = 0</th>\n<th align=\"center\">j = 1</th>\n<th align=\"center\">j = 2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i = 0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">i = 1</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">10</td>\n<td align=\"center\">11</td>\n<td align=\"center\">13</td>\n</tr>\n</tbody></table>\n<p>示例2：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i/j</th>\n<th align=\"center\">j = 0</th>\n<th align=\"center\">j = 1</th>\n<th align=\"center\">j = 2</th>\n<th align=\"center\">j = 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i = 0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">i = 1</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">9</td>\n<td align=\"center\">10</td>\n<td align=\"center\">11</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">13</td>\n<td align=\"center\">14</td>\n<td align=\"center\">15</td>\n<td align=\"center\">16</td>\n</tr>\n</tbody></table>\n<p>可以看一下结果，题目说是顺时针打印，可以想象一下 i 跟 j 的变化</p>\n<ul>\n<li>循环遍历</li>\n<li>结束条件是： 当结果数组的长度 == <code>matrix</code>数组的高 * 宽， 即所有子集都遍历过了</li>\n<li>再来分析一下边界问题, 分析一下 <code>i</code>, <code>j</code> 的变化， 这里以 <strong>示例2</strong> 为例子<ol>\n<li>开始： 向右走， 那么 <code>j++</code>，<code>i</code>不变， 到 <code>j == 3</code>的时候向下， 所以这里要考虑右边的边界问题</li>\n<li>向下走： 那么 <code>i++</code>, <code>j</code> 不变，到 <code>i == 3</code>的时候向左， 所以考虑下边界问题</li>\n<li>向左走： 那么 <code>j--</code>, <code>i</code> 不变，到 <code>j == 0</code>的时候向上，所以考虑左边界问题</li>\n<li>向上走： 那么 <code>i--</code>, <code>j</code> 不变，到 <code>i == 1</code>的时候再一次重复， 1,2,3,4这四步， 但这里要考虑上边界的问题</li>\n</ol>\n</li>\n</ul>\n<p>我这里用 <code>direction</code> 表示方向， <code>1 =&gt; 向右， 2 =&gt; 向下， 3 =&gt; 向左， 4 =》 向上</code></p>\n<p>这时候就是想什么时候得到边界，在边界的时候改变方向，所以有</p>\n<ul>\n<li><p>先设置边界 <code>left = 0, right = colums - 1, up = 0, down = rows - 1</code>, 这里表示<code>左右上下</code>的边界，我们只要操作这个边界就可以了<br>另外<code>rows</code>表示有多少行，<code>colums</code>表示有多少列</p>\n</li>\n<li><p><code>i == up &amp;&amp; j == left</code>, 我们可以看 <code>i == 0, j == 0</code>的时候，这时候就是向右走</p>\n</li>\n<li><p><code>i == up &amp;&amp; j == right</code>, 这时候就是 <code>i == 0， j == 3</code>的时候，那么我们就改变方向，向下走</p>\n</li>\n<li><p><code>i == down &amp;&amp; j == right</code>, 这时候就是 <code>i == 3, j == 3</code>，那么又改变方向，向左走</p>\n</li>\n<li><p><code>i == down &amp;&amp; j == left</code>, 这时候就是 <code>i == 3, j == 0</code>, 又改变方向，向上走</p>\n</li>\n<li><p>注意： 此时向上走之后，等 <code>i == up + 1 &amp;&amp; j == left</code>, 即 <code>i == 1, j ==0</code>, 即<code>5</code>这个地方，那么就<code>向右走</code>，同时，更改边界, <code>left++, right--, up++, down--</code> 再重复上面的事情</p>\n</li>\n</ul>\n<blockquote>\n<p>整个过程是：</p>\n</blockquote>\n<ul>\n<li><code>1 =&gt; 2 =&gt; 3 =&gt; 4 =&gt; 8 =&gt; 12 =&gt; 16 =&gt; 15 =&gt; 14 =&gt; 13 =&gt; 9 =&gt; 5 这是一圈</code></li>\n<li><code>6 =&gt; 7 =&gt; 11 =&gt; 10 这又是一圈</code></li>\n</ul>\n<p>当输入的<code>matrix = [[1],[2],[3]]</code>就只有一列的时候， 另外看<code>示例1</code>, 走完外圈，剩下内圈，只剩下<code>5,8</code>这两个元素的时候也<code>向下走</code>，所以总结 <code>left == right</code>的时候，<code>direction = 2, i++</code></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> spiralOrder <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> rows <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rows <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> columns <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> direction <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 1 => 向右 2 => 向下 3=> 向左 4 => 向上</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">// 左边界</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> columns <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 右边界</span>\n    <span class=\"token keyword\">let</span> up <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">let</span> down <span class=\"token operator\">=</span>  rows <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> rows <span class=\"token operator\">*</span> columns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 当剩下的元素只有一列的时候，只能向下走了</span>\n            direction <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> up <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\" spellcheck=\"true\">// 拐点向右</span>\n            direction <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> up <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 拐点向下</span>\n            direction <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> down <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 拐点向左</span>\n            direction <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> down <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 拐点向上</span>\n            direction <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> up <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 完成一圈后，重设定边界</span>\n            left <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            right <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            up <span class=\"token operator\">=</span> up <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            down <span class=\"token operator\">=</span> down <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            direction <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 根据方向，改变i, j的值</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/\" target=\"_blank\" rel=\"noopener\">面试题29.顺时针打印矩阵</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<p>示例 1：</p>\n<blockquote>\n<p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[1,2,3,6,9,8,7,4,5]</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>示例1：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i/j</th>\n<th align=\"center\">j = 0</th>\n<th align=\"center\">j = 1</th>\n<th align=\"center\">j = 2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i = 0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">i = 1</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">10</td>\n<td align=\"center\">11</td>\n<td align=\"center\">13</td>\n</tr>\n</tbody></table>\n<p>示例2：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">i/j</th>\n<th align=\"center\">j = 0</th>\n<th align=\"center\">j = 1</th>\n<th align=\"center\">j = 2</th>\n<th align=\"center\">j = 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i = 0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">i = 1</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">9</td>\n<td align=\"center\">10</td>\n<td align=\"center\">11</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"center\">i = 2</td>\n<td align=\"center\">13</td>\n<td align=\"center\">14</td>\n<td align=\"center\">15</td>\n<td align=\"center\">16</td>\n</tr>\n</tbody></table>\n<p>可以看一下结果，题目说是顺时针打印，可以想象一下 i 跟 j 的变化</p>\n<ul>\n<li>循环遍历</li>\n<li>结束条件是： 当结果数组的长度 == <code>matrix</code>数组的高 * 宽， 即所有子集都遍历过了</li>\n<li>再来分析一下边界问题, 分析一下 <code>i</code>, <code>j</code> 的变化， 这里以 <strong>示例2</strong> 为例子<ol>\n<li>开始： 向右走， 那么 <code>j++</code>，<code>i</code>不变， 到 <code>j == 3</code>的时候向下， 所以这里要考虑右边的边界问题</li>\n<li>向下走： 那么 <code>i++</code>, <code>j</code> 不变，到 <code>i == 3</code>的时候向左， 所以考虑下边界问题</li>\n<li>向左走： 那么 <code>j--</code>, <code>i</code> 不变，到 <code>j == 0</code>的时候向上，所以考虑左边界问题</li>\n<li>向上走： 那么 <code>i--</code>, <code>j</code> 不变，到 <code>i == 1</code>的时候再一次重复， 1,2,3,4这四步， 但这里要考虑上边界的问题</li>\n</ol>\n</li>\n</ul>\n<p>我这里用 <code>direction</code> 表示方向， <code>1 =&gt; 向右， 2 =&gt; 向下， 3 =&gt; 向左， 4 =》 向上</code></p>\n<p>这时候就是想什么时候得到边界，在边界的时候改变方向，所以有</p>\n<ul>\n<li><p>先设置边界 <code>left = 0, right = colums - 1, up = 0, down = rows - 1</code>, 这里表示<code>左右上下</code>的边界，我们只要操作这个边界就可以了<br>另外<code>rows</code>表示有多少行，<code>colums</code>表示有多少列</p>\n</li>\n<li><p><code>i == up &amp;&amp; j == left</code>, 我们可以看 <code>i == 0, j == 0</code>的时候，这时候就是向右走</p>\n</li>\n<li><p><code>i == up &amp;&amp; j == right</code>, 这时候就是 <code>i == 0， j == 3</code>的时候，那么我们就改变方向，向下走</p>\n</li>\n<li><p><code>i == down &amp;&amp; j == right</code>, 这时候就是 <code>i == 3, j == 3</code>，那么又改变方向，向左走</p>\n</li>\n<li><p><code>i == down &amp;&amp; j == left</code>, 这时候就是 <code>i == 3, j == 0</code>, 又改变方向，向上走</p>\n</li>\n<li><p>注意： 此时向上走之后，等 <code>i == up + 1 &amp;&amp; j == left</code>, 即 <code>i == 1, j ==0</code>, 即<code>5</code>这个地方，那么就<code>向右走</code>，同时，更改边界, <code>left++, right--, up++, down--</code> 再重复上面的事情</p>\n</li>\n</ul>\n<blockquote>\n<p>整个过程是：</p>\n</blockquote>\n<ul>\n<li><code>1 =&gt; 2 =&gt; 3 =&gt; 4 =&gt; 8 =&gt; 12 =&gt; 16 =&gt; 15 =&gt; 14 =&gt; 13 =&gt; 9 =&gt; 5 这是一圈</code></li>\n<li><code>6 =&gt; 7 =&gt; 11 =&gt; 10 这又是一圈</code></li>\n</ul>\n<p>当输入的<code>matrix = [[1],[2],[3]]</code>就只有一列的时候， 另外看<code>示例1</code>, 走完外圈，剩下内圈，只剩下<code>5,8</code>这两个元素的时候也<code>向下走</code>，所以总结 <code>left == right</code>的时候，<code>direction = 2, i++</code></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">var spiralOrder = function(matrix) {\n    let rows = matrix.length;\n    let result = [];\n    if(rows == 0) {\n        return result\n    }\n    let columns = matrix[0].length;\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let direction = 1;  // 1 =&gt; 向右 2 =&gt; 向下 3=&gt; 向左 4 =&gt; 向上\n    let left = 0;        // 左边界\n    let right = columns - 1;  // 右边界\n    let up = 0; \n    let down =  rows - 1;\n\n    while(count &lt; rows * columns) {\n        const current = matrix[i][j];\n        result.push(current);\n        count++;\n        if(left == right) {  // 当剩下的元素只有一列的时候，只能向下走了\n            direction = 2;\n            i++;\n            continue;\n        }\n        if(i == up &amp;&amp; j == left) {   // 拐点向右\n            direction = 1\n        } else if(i == up &amp;&amp; j == right) {  // 拐点向下\n            direction = 2\n        } else if(i == down &amp;&amp; j == right) { // 拐点向左\n            direction = 3;\n        } else if(i == down &amp;&amp; j == left) { // 拐点向上\n            direction = 4\n        }\n\n        if(i == up + 1 &amp;&amp; j == left) {\n            // 完成一圈后，重设定边界\n            left = left + 1;\n            right = right - 1;\n            up = up + 1;\n            down = down - 1;\n            direction = 1;\n        }\n\n        // 根据方向，改变i, j的值\n        if(direction == 1) {\n            j++;\n        } else if(direction == 2) {\n            i++;\n        } else if(direction == 3) {\n            j--;\n        } else {\n            i--;\n        }\n    }\n    return result\n};</code></pre>\n"},{"title":"面试题46. 把数字翻译成字符串","date":"2020-06-09T15:58:39.000Z","type":"algorithm","_content":"\n[面试题46. 把数字翻译成字符串](https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/)\n\n## 题目描述\n\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n示例：\n\n> 输入: 12258\n> 输出: 5\n> 解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n\n## 分析\n\n* 一开始想的也是 **滑动窗口**, 但后来想了一下不太正确，应该用动态规划\n\n## 过程\n\n以 `nums = \"12258\"` 为例子\n\n* `i = 0`, `nums[0]` => `1`, 结果为`b`,那么结果只有一种， 解释： 只取第一个数`1`的时候，结果肯定只有一种，\n    * `1 转成 b`\n* `i = 1`, `nums[1]` => `2`, 结果为`bc, m`, 那么结果有两种，解释： 当数字为`12`的时候，它可以为\n    * ` 1 => b, 2 => c`, 为一种：`bc` \n    * `12 => m`, 为一种：`m`\n* `i = 2`, `nums[2]` => `2`, 结果为`bcc, mc, bw`, 结果有三种，解释：当数字为`122`的时候,它可以为 \n    * `1  => b, 2  => c, 2 => c` 为一种, `bcc`\n    * `12 => m, 2  => c` 为一种, `mc`\n    * `1  => b, 22 => w` 为一种, `bw`\n* `i = 3`, `nums[3]` => `5`, 结果为`bccf, mcf, bwf, mz, bcz`, 解释： 当数字为`1225`的时候，他可以为\n    * `1  => b, 2  => c, 2 => c, 5 => f` 为一种, `bccf`\n    * `12 => m, 2  => c, 5 => f` 为一种, `mcf`\n    * `1  => b, 22 => w, 5 => f` 为一种, `bwf`\n    * `1  => b, 2  => c, 25 => z` 为一中, `bcz`\n    * `12 => m, 25 => z`, 为一种：`mz`\n* `i = 4`, `nums[4]` => `8`, 结果为`bccfi, mcfi, bwfi, mzi, bczi`, 解释： 当数字为`12258`的时候，他可以为\n    * `1  => b, 2  => c, 2 => c, 5 => f, 8 => i` 为一种, `bccfi`\n    * `12 => m, 2  => c, 5 => f, 8 => i` 为一种, `mcfi`\n    * `1  => b, 22 => w, 5 => f, 8 => i` 为一种, `bwfi`\n    * `1  => b, 2  => c, 25 => z, 8 => i` 为一中, `bczi`\n    * `12 => m, 25 => z, 8 => i`, 为一种：`mzi`\n\n上面我们看 `i = 1`, `i = 2`, `i = 3` 的时候，的结果，我们用`dp`表示他们的结果\n    * `i = 3`的结果`bccf, mcf, bwf, mz, bcz`,\n    * `i = 2`的结果`bcc, mc, bw`,\n    * `i = 1`的结果`m, bc`    \n\n发现没，其实`dp[3]` 就是从 `dp{2]` 和`dp[1]`的结果过来的, `dp[2]`的字符串结果都加个`f`就等于`dp[3]`的前3个, `dp[1]`的字符串结果加个`z`就是`dp[3]`后三个\n所以递推公式 **dp[i] = dp[i - 1] + dp[i - 2]**, 但此时递推公式明显不符合`i = 4`的时候的值, **dp[i] 明显等于 dp[i-1]**, 但前提是`nums[i - 1] + nums[i] = 58 > 25`\n\n## 代码\n\n```js\nvar translateNum = function(num) {\n    let numString = num + \"\";\n    let length = numString.length;\n    if(length < 1) {\n        return 0\n    }\n    let dp = [];\n    // 递推公式 dp[i] = d[i - 1] + dp[i - 2], 和 dp[i] = dp[i - 1]\n    dp[0] = 1;\n    for(let i = 1; i < length; i++) {\n        const temp = numString[i - 1] + numString[i];  // 当temp = 06 的时候 其实也跟dp[i - 1]一样\n        if(temp > 25 || numString[i - 1] == '0') {\n            dp[i] = dp[i - 1]\n        } else {\n            dp[i] = dp[i - 1] + (i - 2 < 0 ? 1 : dp[i - 2]) ;  // i - 2 < 0 这里是为了解决 dp[i-2]防止溢出问题, 12 结果为2,\n        }\n    }\n    return dp[length - 1]\n};\n```\n","source":"_posts/面试题46-把数字翻译成字符串.md","raw":"---\ntitle: 面试题46. 把数字翻译成字符串\ndate: 2020-06-09 15:58:39\ntype: algorithm\ntags: [algorithm-面试题, algorithm-动态规划]\n---\n\n[面试题46. 把数字翻译成字符串](https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/)\n\n## 题目描述\n\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n示例：\n\n> 输入: 12258\n> 输出: 5\n> 解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n\n## 分析\n\n* 一开始想的也是 **滑动窗口**, 但后来想了一下不太正确，应该用动态规划\n\n## 过程\n\n以 `nums = \"12258\"` 为例子\n\n* `i = 0`, `nums[0]` => `1`, 结果为`b`,那么结果只有一种， 解释： 只取第一个数`1`的时候，结果肯定只有一种，\n    * `1 转成 b`\n* `i = 1`, `nums[1]` => `2`, 结果为`bc, m`, 那么结果有两种，解释： 当数字为`12`的时候，它可以为\n    * ` 1 => b, 2 => c`, 为一种：`bc` \n    * `12 => m`, 为一种：`m`\n* `i = 2`, `nums[2]` => `2`, 结果为`bcc, mc, bw`, 结果有三种，解释：当数字为`122`的时候,它可以为 \n    * `1  => b, 2  => c, 2 => c` 为一种, `bcc`\n    * `12 => m, 2  => c` 为一种, `mc`\n    * `1  => b, 22 => w` 为一种, `bw`\n* `i = 3`, `nums[3]` => `5`, 结果为`bccf, mcf, bwf, mz, bcz`, 解释： 当数字为`1225`的时候，他可以为\n    * `1  => b, 2  => c, 2 => c, 5 => f` 为一种, `bccf`\n    * `12 => m, 2  => c, 5 => f` 为一种, `mcf`\n    * `1  => b, 22 => w, 5 => f` 为一种, `bwf`\n    * `1  => b, 2  => c, 25 => z` 为一中, `bcz`\n    * `12 => m, 25 => z`, 为一种：`mz`\n* `i = 4`, `nums[4]` => `8`, 结果为`bccfi, mcfi, bwfi, mzi, bczi`, 解释： 当数字为`12258`的时候，他可以为\n    * `1  => b, 2  => c, 2 => c, 5 => f, 8 => i` 为一种, `bccfi`\n    * `12 => m, 2  => c, 5 => f, 8 => i` 为一种, `mcfi`\n    * `1  => b, 22 => w, 5 => f, 8 => i` 为一种, `bwfi`\n    * `1  => b, 2  => c, 25 => z, 8 => i` 为一中, `bczi`\n    * `12 => m, 25 => z, 8 => i`, 为一种：`mzi`\n\n上面我们看 `i = 1`, `i = 2`, `i = 3` 的时候，的结果，我们用`dp`表示他们的结果\n    * `i = 3`的结果`bccf, mcf, bwf, mz, bcz`,\n    * `i = 2`的结果`bcc, mc, bw`,\n    * `i = 1`的结果`m, bc`    \n\n发现没，其实`dp[3]` 就是从 `dp{2]` 和`dp[1]`的结果过来的, `dp[2]`的字符串结果都加个`f`就等于`dp[3]`的前3个, `dp[1]`的字符串结果加个`z`就是`dp[3]`后三个\n所以递推公式 **dp[i] = dp[i - 1] + dp[i - 2]**, 但此时递推公式明显不符合`i = 4`的时候的值, **dp[i] 明显等于 dp[i-1]**, 但前提是`nums[i - 1] + nums[i] = 58 > 25`\n\n## 代码\n\n```js\nvar translateNum = function(num) {\n    let numString = num + \"\";\n    let length = numString.length;\n    if(length < 1) {\n        return 0\n    }\n    let dp = [];\n    // 递推公式 dp[i] = d[i - 1] + dp[i - 2], 和 dp[i] = dp[i - 1]\n    dp[0] = 1;\n    for(let i = 1; i < length; i++) {\n        const temp = numString[i - 1] + numString[i];  // 当temp = 06 的时候 其实也跟dp[i - 1]一样\n        if(temp > 25 || numString[i - 1] == '0') {\n            dp[i] = dp[i - 1]\n        } else {\n            dp[i] = dp[i - 1] + (i - 2 < 0 ? 1 : dp[i - 2]) ;  // i - 2 < 0 这里是为了解决 dp[i-2]防止溢出问题, 12 结果为2,\n        }\n    }\n    return dp[length - 1]\n};\n```\n","slug":"面试题46-把数字翻译成字符串","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrhn006mmrojgczo7t8c","content":"<p><a href=\"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/\" target=\"_blank\" rel=\"noopener\">面试题46. 把数字翻译成字符串</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p>示例：</p>\n<blockquote>\n<p>输入: 12258<br>输出: 5<br>解释: 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi”</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>一开始想的也是 <strong>滑动窗口</strong>, 但后来想了一下不太正确，应该用动态规划</li>\n</ul>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><p>以 <code>nums = &quot;12258&quot;</code> 为例子</p>\n<ul>\n<li><code>i = 0</code>, <code>nums[0]</code> =&gt; <code>1</code>, 结果为<code>b</code>,那么结果只有一种， 解释： 只取第一个数<code>1</code>的时候，结果肯定只有一种，<ul>\n<li><code>1 转成 b</code></li>\n</ul>\n</li>\n<li><code>i = 1</code>, <code>nums[1]</code> =&gt; <code>2</code>, 结果为<code>bc, m</code>, 那么结果有两种，解释： 当数字为<code>12</code>的时候，它可以为<ul>\n<li><code>1 =&gt; b, 2 =&gt; c</code>, 为一种：<code>bc</code> </li>\n<li><code>12 =&gt; m</code>, 为一种：<code>m</code></li>\n</ul>\n</li>\n<li><code>i = 2</code>, <code>nums[2]</code> =&gt; <code>2</code>, 结果为<code>bcc, mc, bw</code>, 结果有三种，解释：当数字为<code>122</code>的时候,它可以为 <ul>\n<li><code>1  =&gt; b, 2  =&gt; c, 2 =&gt; c</code> 为一种, <code>bcc</code></li>\n<li><code>12 =&gt; m, 2  =&gt; c</code> 为一种, <code>mc</code></li>\n<li><code>1  =&gt; b, 22 =&gt; w</code> 为一种, <code>bw</code></li>\n</ul>\n</li>\n<li><code>i = 3</code>, <code>nums[3]</code> =&gt; <code>5</code>, 结果为<code>bccf, mcf, bwf, mz, bcz</code>, 解释： 当数字为<code>1225</code>的时候，他可以为<ul>\n<li><code>1  =&gt; b, 2  =&gt; c, 2 =&gt; c, 5 =&gt; f</code> 为一种, <code>bccf</code></li>\n<li><code>12 =&gt; m, 2  =&gt; c, 5 =&gt; f</code> 为一种, <code>mcf</code></li>\n<li><code>1  =&gt; b, 22 =&gt; w, 5 =&gt; f</code> 为一种, <code>bwf</code></li>\n<li><code>1  =&gt; b, 2  =&gt; c, 25 =&gt; z</code> 为一中, <code>bcz</code></li>\n<li><code>12 =&gt; m, 25 =&gt; z</code>, 为一种：<code>mz</code></li>\n</ul>\n</li>\n<li><code>i = 4</code>, <code>nums[4]</code> =&gt; <code>8</code>, 结果为<code>bccfi, mcfi, bwfi, mzi, bczi</code>, 解释： 当数字为<code>12258</code>的时候，他可以为<ul>\n<li><code>1  =&gt; b, 2  =&gt; c, 2 =&gt; c, 5 =&gt; f, 8 =&gt; i</code> 为一种, <code>bccfi</code></li>\n<li><code>12 =&gt; m, 2  =&gt; c, 5 =&gt; f, 8 =&gt; i</code> 为一种, <code>mcfi</code></li>\n<li><code>1  =&gt; b, 22 =&gt; w, 5 =&gt; f, 8 =&gt; i</code> 为一种, <code>bwfi</code></li>\n<li><code>1  =&gt; b, 2  =&gt; c, 25 =&gt; z, 8 =&gt; i</code> 为一中, <code>bczi</code></li>\n<li><code>12 =&gt; m, 25 =&gt; z, 8 =&gt; i</code>, 为一种：<code>mzi</code></li>\n</ul>\n</li>\n</ul>\n<p>上面我们看 <code>i = 1</code>, <code>i = 2</code>, <code>i = 3</code> 的时候，的结果，我们用<code>dp</code>表示他们的结果<br>    * <code>i = 3</code>的结果<code>bccf, mcf, bwf, mz, bcz</code>,<br>    * <code>i = 2</code>的结果<code>bcc, mc, bw</code>,<br>    * <code>i = 1</code>的结果<code>m, bc</code>    </p>\n<p>发现没，其实<code>dp[3]</code> 就是从 <code>dp{2]</code> 和<code>dp[1]</code>的结果过来的, <code>dp[2]</code>的字符串结果都加个<code>f</code>就等于<code>dp[3]</code>的前3个, <code>dp[1]</code>的字符串结果加个<code>z</code>就是<code>dp[3]</code>后三个<br>所以递推公式 <strong>dp[i] = dp[i - 1] + dp[i - 2]</strong>, 但此时递推公式明显不符合<code>i = 4</code>的时候的值, <strong>dp[i] 明显等于 dp[i-1]</strong>, 但前提是<code>nums[i - 1] + nums[i] = 58 &gt; 25</code></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> translateNum <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> numString <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> numString<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 递推公式 dp[i] = d[i - 1] + dp[i - 2], 和 dp[i] = dp[i - 1]</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> numString<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> numString<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 当temp = 06 的时候 其实也跟dp[i - 1]一样</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">></span> <span class=\"token number\">25</span> <span class=\"token operator\">||</span> numString<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// i - 2 &lt; 0 这里是为了解决 dp[i-2]防止溢出问题, 12 结果为2,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/\" target=\"_blank\" rel=\"noopener\">面试题46. 把数字翻译成字符串</a></p>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p>示例：</p>\n<blockquote>\n<p>输入: 12258<br>输出: 5<br>解释: 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi”</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>一开始想的也是 <strong>滑动窗口</strong>, 但后来想了一下不太正确，应该用动态规划</li>\n</ul>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><p>以 <code>nums = &quot;12258&quot;</code> 为例子</p>\n<ul>\n<li><code>i = 0</code>, <code>nums[0]</code> =&gt; <code>1</code>, 结果为<code>b</code>,那么结果只有一种， 解释： 只取第一个数<code>1</code>的时候，结果肯定只有一种，<ul>\n<li><code>1 转成 b</code></li>\n</ul>\n</li>\n<li><code>i = 1</code>, <code>nums[1]</code> =&gt; <code>2</code>, 结果为<code>bc, m</code>, 那么结果有两种，解释： 当数字为<code>12</code>的时候，它可以为<ul>\n<li><code>1 =&gt; b, 2 =&gt; c</code>, 为一种：<code>bc</code> </li>\n<li><code>12 =&gt; m</code>, 为一种：<code>m</code></li>\n</ul>\n</li>\n<li><code>i = 2</code>, <code>nums[2]</code> =&gt; <code>2</code>, 结果为<code>bcc, mc, bw</code>, 结果有三种，解释：当数字为<code>122</code>的时候,它可以为 <ul>\n<li><code>1  =&gt; b, 2  =&gt; c, 2 =&gt; c</code> 为一种, <code>bcc</code></li>\n<li><code>12 =&gt; m, 2  =&gt; c</code> 为一种, <code>mc</code></li>\n<li><code>1  =&gt; b, 22 =&gt; w</code> 为一种, <code>bw</code></li>\n</ul>\n</li>\n<li><code>i = 3</code>, <code>nums[3]</code> =&gt; <code>5</code>, 结果为<code>bccf, mcf, bwf, mz, bcz</code>, 解释： 当数字为<code>1225</code>的时候，他可以为<ul>\n<li><code>1  =&gt; b, 2  =&gt; c, 2 =&gt; c, 5 =&gt; f</code> 为一种, <code>bccf</code></li>\n<li><code>12 =&gt; m, 2  =&gt; c, 5 =&gt; f</code> 为一种, <code>mcf</code></li>\n<li><code>1  =&gt; b, 22 =&gt; w, 5 =&gt; f</code> 为一种, <code>bwf</code></li>\n<li><code>1  =&gt; b, 2  =&gt; c, 25 =&gt; z</code> 为一中, <code>bcz</code></li>\n<li><code>12 =&gt; m, 25 =&gt; z</code>, 为一种：<code>mz</code></li>\n</ul>\n</li>\n<li><code>i = 4</code>, <code>nums[4]</code> =&gt; <code>8</code>, 结果为<code>bccfi, mcfi, bwfi, mzi, bczi</code>, 解释： 当数字为<code>12258</code>的时候，他可以为<ul>\n<li><code>1  =&gt; b, 2  =&gt; c, 2 =&gt; c, 5 =&gt; f, 8 =&gt; i</code> 为一种, <code>bccfi</code></li>\n<li><code>12 =&gt; m, 2  =&gt; c, 5 =&gt; f, 8 =&gt; i</code> 为一种, <code>mcfi</code></li>\n<li><code>1  =&gt; b, 22 =&gt; w, 5 =&gt; f, 8 =&gt; i</code> 为一种, <code>bwfi</code></li>\n<li><code>1  =&gt; b, 2  =&gt; c, 25 =&gt; z, 8 =&gt; i</code> 为一中, <code>bczi</code></li>\n<li><code>12 =&gt; m, 25 =&gt; z, 8 =&gt; i</code>, 为一种：<code>mzi</code></li>\n</ul>\n</li>\n</ul>\n<p>上面我们看 <code>i = 1</code>, <code>i = 2</code>, <code>i = 3</code> 的时候，的结果，我们用<code>dp</code>表示他们的结果<br>    * <code>i = 3</code>的结果<code>bccf, mcf, bwf, mz, bcz</code>,<br>    * <code>i = 2</code>的结果<code>bcc, mc, bw</code>,<br>    * <code>i = 1</code>的结果<code>m, bc</code>    </p>\n<p>发现没，其实<code>dp[3]</code> 就是从 <code>dp{2]</code> 和<code>dp[1]</code>的结果过来的, <code>dp[2]</code>的字符串结果都加个<code>f</code>就等于<code>dp[3]</code>的前3个, <code>dp[1]</code>的字符串结果加个<code>z</code>就是<code>dp[3]</code>后三个<br>所以递推公式 <strong>dp[i] = dp[i - 1] + dp[i - 2]</strong>, 但此时递推公式明显不符合<code>i = 4</code>的时候的值, <strong>dp[i] 明显等于 dp[i-1]</strong>, 但前提是<code>nums[i - 1] + nums[i] = 58 &gt; 25</code></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">var translateNum = function(num) {\n    let numString = num + &quot;&quot;;\n    let length = numString.length;\n    if(length &lt; 1) {\n        return 0\n    }\n    let dp = [];\n    // 递推公式 dp[i] = d[i - 1] + dp[i - 2], 和 dp[i] = dp[i - 1]\n    dp[0] = 1;\n    for(let i = 1; i &lt; length; i++) {\n        const temp = numString[i - 1] + numString[i];  // 当temp = 06 的时候 其实也跟dp[i - 1]一样\n        if(temp &gt; 25 || numString[i - 1] == &#39;0&#39;) {\n            dp[i] = dp[i - 1]\n        } else {\n            dp[i] = dp[i - 1] + (i - 2 &lt; 0 ? 1 : dp[i - 2]) ;  // i - 2 &lt; 0 这里是为了解决 dp[i-2]防止溢出问题, 12 结果为2,\n        }\n    }\n    return dp[length - 1]\n};</code></pre>\n"},{"title":"验证回文字符串 Ⅱ","date":"2020-05-19T17:13:34.000Z","type":"algorithm","_content":"\n## 验证回文字符串 Ⅱ\n\n[力扣上第680题](https://leetcode-cn.com/problems/valid-palindrome-ii/)\n\n## 核心思想\n\n使用双指针，即使用前后两个指针，同时对前指针和后指针的值做对比，要是相同，那么前指针向后移动，后指针向前移动\n**但这道题说可以删除一个字符**, 那么当我们遇到不相等的值的时候，只要前指针向后移动，或者后指针向前移动，然后剩下的做对比即可\n\n* 终止条件为： **前指针 比 后指针要大，或者说是前指针后于后指针**\n\n\n## 解释\n\n![1590400698_1_.jpg](https://i.loli.net/2020/05/25/6pKX9EhsoyrkPIH.png)\n\n上图，我们只要判断左指针和右指针的值是否相等，直到终止条件，要是全部都相同，那么就是回文了\n\n**但这题说可以删除一个字母，那么等字符不相等的时候，左指针向后移动或者右指针向前移动，将剩下的再做一次回文即可**，看下图\n\n![1590400906_1_.jpg](https://i.loli.net/2020/05/25/zlvfcQJZxUYy1hW.png)\n\n\n## 代码\n\n```js\n// \"ebcbb ececabbacec bbcbe\"\n// \"ebcbb cecabbacece bbcbe\"\nvar validPalindrome = function(s) {\n    let left = 0;\n    let right = s.length - 1;\n    let flag = false; // 标志位 表示要是遇到一个前指针与后指针不相同的值, 退出循环。\n    while(left < right) {\n        const leftTemp = s[left];\n        const rightTemp = s[right];\n        if(leftTemp == rightTemp) {\n            left++;\n            right--;\n        } else {\n            flag = true;\n            break;\n        }\n    } \n    if(flag >= 1) {\n        const tempString = s.slice(left + 1, right + 1);\n        return validChilren(left+1, right, s) || validChilren(left, right - 1, s);\n    }\n    return true;\n};\n\nfunction validChilren(left, right, s) {\n    while(left < right) {\n        const leftTemp = s[left];\n        const rightTemp = s[right];\n        if(leftTemp == rightTemp) {\n            left++;\n            right--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n\n","source":"_posts/验证回文字符串 Ⅱ.md","raw":"---\ntitle: 验证回文字符串 Ⅱ\ndate: 2020-05-19 17:13:34\n# tags: algorithm\ntype: algorithm\ntags: algorithm-基础\n---\n\n## 验证回文字符串 Ⅱ\n\n[力扣上第680题](https://leetcode-cn.com/problems/valid-palindrome-ii/)\n\n## 核心思想\n\n使用双指针，即使用前后两个指针，同时对前指针和后指针的值做对比，要是相同，那么前指针向后移动，后指针向前移动\n**但这道题说可以删除一个字符**, 那么当我们遇到不相等的值的时候，只要前指针向后移动，或者后指针向前移动，然后剩下的做对比即可\n\n* 终止条件为： **前指针 比 后指针要大，或者说是前指针后于后指针**\n\n\n## 解释\n\n![1590400698_1_.jpg](https://i.loli.net/2020/05/25/6pKX9EhsoyrkPIH.png)\n\n上图，我们只要判断左指针和右指针的值是否相等，直到终止条件，要是全部都相同，那么就是回文了\n\n**但这题说可以删除一个字母，那么等字符不相等的时候，左指针向后移动或者右指针向前移动，将剩下的再做一次回文即可**，看下图\n\n![1590400906_1_.jpg](https://i.loli.net/2020/05/25/zlvfcQJZxUYy1hW.png)\n\n\n## 代码\n\n```js\n// \"ebcbb ececabbacec bbcbe\"\n// \"ebcbb cecabbacece bbcbe\"\nvar validPalindrome = function(s) {\n    let left = 0;\n    let right = s.length - 1;\n    let flag = false; // 标志位 表示要是遇到一个前指针与后指针不相同的值, 退出循环。\n    while(left < right) {\n        const leftTemp = s[left];\n        const rightTemp = s[right];\n        if(leftTemp == rightTemp) {\n            left++;\n            right--;\n        } else {\n            flag = true;\n            break;\n        }\n    } \n    if(flag >= 1) {\n        const tempString = s.slice(left + 1, right + 1);\n        return validChilren(left+1, right, s) || validChilren(left, right - 1, s);\n    }\n    return true;\n};\n\nfunction validChilren(left, right, s) {\n    while(left < right) {\n        const leftTemp = s[left];\n        const rightTemp = s[right];\n        if(leftTemp == rightTemp) {\n            left++;\n            right--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n\n","slug":"验证回文字符串 Ⅱ","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrhn006omroj86vfh64o","content":"<h2 id=\"验证回文字符串-Ⅱ\"><a href=\"#验证回文字符串-Ⅱ\" class=\"headerlink\" title=\"验证回文字符串 Ⅱ\"></a>验证回文字符串 Ⅱ</h2><p><a href=\"https://leetcode-cn.com/problems/valid-palindrome-ii/\" target=\"_blank\" rel=\"noopener\">力扣上第680题</a></p>\n<h2 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h2><p>使用双指针，即使用前后两个指针，同时对前指针和后指针的值做对比，要是相同，那么前指针向后移动，后指针向前移动<br><strong>但这道题说可以删除一个字符</strong>, 那么当我们遇到不相等的值的时候，只要前指针向后移动，或者后指针向前移动，然后剩下的做对比即可</p>\n<ul>\n<li>终止条件为： <strong>前指针 比 后指针要大，或者说是前指针后于后指针</strong></li>\n</ul>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p><img src=\"https://i.loli.net/2020/05/25/6pKX9EhsoyrkPIH.png\" alt=\"1590400698_1_.jpg\"></p>\n<p>上图，我们只要判断左指针和右指针的值是否相等，直到终止条件，要是全部都相同，那么就是回文了</p>\n<p><strong>但这题说可以删除一个字母，那么等字符不相等的时候，左指针向后移动或者右指针向前移动，将剩下的再做一次回文即可</strong>，看下图</p>\n<p><img src=\"https://i.loli.net/2020/05/25/zlvfcQJZxUYy1hW.png\" alt=\"1590400906_1_.jpg\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// \"ebcbb ececabbacec bbcbe\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// \"ebcbb cecabbacece bbcbe\"</span>\n<span class=\"token keyword\">var</span> validPalindrome <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 标志位 表示要是遇到一个前指针与后指针不相同的值, 退出循环。</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> leftTemp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> rightTemp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftTemp <span class=\"token operator\">==</span> rightTemp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> tempString <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">validChilren</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">validChilren</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">validChilren</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> leftTemp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> rightTemp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>leftTemp <span class=\"token operator\">==</span> rightTemp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"验证回文字符串-Ⅱ\"><a href=\"#验证回文字符串-Ⅱ\" class=\"headerlink\" title=\"验证回文字符串 Ⅱ\"></a>验证回文字符串 Ⅱ</h2><p><a href=\"https://leetcode-cn.com/problems/valid-palindrome-ii/\" target=\"_blank\" rel=\"noopener\">力扣上第680题</a></p>\n<h2 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h2><p>使用双指针，即使用前后两个指针，同时对前指针和后指针的值做对比，要是相同，那么前指针向后移动，后指针向前移动<br><strong>但这道题说可以删除一个字符</strong>, 那么当我们遇到不相等的值的时候，只要前指针向后移动，或者后指针向前移动，然后剩下的做对比即可</p>\n<ul>\n<li>终止条件为： <strong>前指针 比 后指针要大，或者说是前指针后于后指针</strong></li>\n</ul>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p><img src=\"https://i.loli.net/2020/05/25/6pKX9EhsoyrkPIH.png\" alt=\"1590400698_1_.jpg\"></p>\n<p>上图，我们只要判断左指针和右指针的值是否相等，直到终止条件，要是全部都相同，那么就是回文了</p>\n<p><strong>但这题说可以删除一个字母，那么等字符不相等的时候，左指针向后移动或者右指针向前移动，将剩下的再做一次回文即可</strong>，看下图</p>\n<p><img src=\"https://i.loli.net/2020/05/25/zlvfcQJZxUYy1hW.png\" alt=\"1590400906_1_.jpg\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code class=\"js\">// &quot;ebcbb ececabbacec bbcbe&quot;\n// &quot;ebcbb cecabbacece bbcbe&quot;\nvar validPalindrome = function(s) {\n    let left = 0;\n    let right = s.length - 1;\n    let flag = false; // 标志位 表示要是遇到一个前指针与后指针不相同的值, 退出循环。\n    while(left &lt; right) {\n        const leftTemp = s[left];\n        const rightTemp = s[right];\n        if(leftTemp == rightTemp) {\n            left++;\n            right--;\n        } else {\n            flag = true;\n            break;\n        }\n    } \n    if(flag &gt;= 1) {\n        const tempString = s.slice(left + 1, right + 1);\n        return validChilren(left+1, right, s) || validChilren(left, right - 1, s);\n    }\n    return true;\n};\n\nfunction validChilren(left, right, s) {\n    while(left &lt; right) {\n        const leftTemp = s[left];\n        const rightTemp = s[right];\n        if(leftTemp == rightTemp) {\n            left++;\n            right--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}</code></pre>\n"},{"title":"高德地图滑动验证","date":"2020-06-05T17:34:27.000Z","_content":"\n## 高德地图滑动验证\n\n* 用dispatch 模拟dom的mousedown, mousemove，还有mouseUp 事件\n* 再用 `setInterval` 执行`mouseMove`事件即可\n* 但这里有时候会滑动失败，所以要刷新验证码，然后重新滑动，\n* 有时候又是滑动验证码**验证成功**后。 再一次**弹出验证码**\n* **注意：**滑动验证码请注意滑动的速度和滑动的距离，要是太慢、滑动距离太短的话，滑动验证多数会不通过。\n\n### 检查验证码\n```js\n// 检查验证码\nfunction checkYzm() {\n    const dom = document.querySelector(\".sufei-dialog\");\n    \n    if(dom && dom.style.display == \"block\") {\n        return true;\n    } \n    return false\n}\n```\n\n### 滑动验证码\n```js\nasync function sliderYzm() {\n    await sleep(1500);\n    const iframe = document.getElementById(\"sufei-dialog-content\");\n    const btn = iframe.contentWindow.document.getElementById(\"nc_1_n1z\");\n    const mousedown = document.createEvent(\"MouseEvents\");\n    const rect = btn.getBoundingClientRect();\n    var x = rect.x;\n    var y = rect.y;\n    mousedown.initMouseEvent(\"mousedown\", true, true, window, 0, x, y, x, y, false, false, false, false, 0, null);\n    btn.dispatchEvent(mousedown);\n\n    let dx = 0;\n    let dy = 0;\n    const mousemove = document.createEvent(\"MouseEvents\");\n    return new Promise((resolve) => {\n        const  interval = setInterval(async () => {\n            const _x = x + dx;\n            const _y = y + dy;\n            mousemove.initMouseEvent(\"mousemove\", true, true, window,0 ,_x, _y, _x, _y, false, false, false, false, 0, null);\n            btn.dispatchEvent(mousemove);\n            \n            if(_x - x >= 300){\n                clearInterval(interval);\n                const mouseup = document.createEvent(\"MouseEvents\");\n                mouseup.initMouseEvent(\"mouseup\", true, true, window, 0, _x, _y, _x, _y, false, false, false, false, 0, null);\n                btn.dispatchEvent(mouseup);\n\n                await sleep(2500);\n                if(btn.className.indexOf('btn_ok') > -1){\n                    console.log(btn.className);\n                    sleep(1000)\n                    resolve({status: 1});\n                }  \n                \n                if(iframe.contentWindow.document.querySelector(\"#nocaptcha > .errloading\")) {\n                    console.log(\"error\")\n                    sleep(1000)\n                    resolve({status: 0})\n                }\n            } else{\n                dx += Math.ceil(Math.random() * 300);\n            }\n        }, 30);\n    })\n    \n}\n```\n\n上面只是滑动验证\n\n### 循环检查时候是否有验证码\n\n```js\n/**\n * 循环检查是否有验证码\n * 1. 要是有验证码窗口，那么滑动验证， 但滑动验证有失败或者成功，失败返回0， 成功返回1\n * 2. 滑动成功后，防止验证码再一次出现，我们延迟1500毫秒，再查看一下验证码窗口是否存在，存在就再一次执行loopSlideYzm(), 不存在就直接结束函数了\n * 3. 滑动失败后，会有刷新标志，那这时候应该点击刷新后，再一次执行loopSlideYzm();\n */ \nasync function loopSlideYzm() {\n    await sleep(1200);\n    const hasYzm = checkYzm();\n    await sleep(1000);\n    if(hasYzm) {\n        const { status } = await sliderYzm();\n        await sleep(1500);\n        if(status) {\n            console.log(\"再找一次是否有验证码\")\n            const hasYzmAgain = checkYzm();\n            await sleep(1500);\n            if(hasYzmAgain) {\n                return await loopSlideYzm();\n            } else  {\n                return Promise.resolve()\n            }\n        } else {\n            console.log(\"给我刷新验证码\");\n            freshYzm();\n            await sleep(1500);\n            return await loopSlideYzm();\n        }\n    } \n    return Promise.resolve()\n}\n```\n\n### 刷新验证码\n\n```js\nfunction freshYzm() {\n    const iframe = document.getElementById(\"sufei-dialog-content\");\n    iframe.contentWindow.document.querySelector(\"#nocaptcha > .errloading > .nc-lang-cnt > a\").click()\n}\n```\n\n以上就是自动跳过高德地图的滑动验证码全过程\n","source":"_posts/高德地图滑动验证.md","raw":"---\ntitle: 高德地图滑动验证\ndate: 2020-06-05 17:34:27\ntags: js\ncategories: js\n---\n\n## 高德地图滑动验证\n\n* 用dispatch 模拟dom的mousedown, mousemove，还有mouseUp 事件\n* 再用 `setInterval` 执行`mouseMove`事件即可\n* 但这里有时候会滑动失败，所以要刷新验证码，然后重新滑动，\n* 有时候又是滑动验证码**验证成功**后。 再一次**弹出验证码**\n* **注意：**滑动验证码请注意滑动的速度和滑动的距离，要是太慢、滑动距离太短的话，滑动验证多数会不通过。\n\n### 检查验证码\n```js\n// 检查验证码\nfunction checkYzm() {\n    const dom = document.querySelector(\".sufei-dialog\");\n    \n    if(dom && dom.style.display == \"block\") {\n        return true;\n    } \n    return false\n}\n```\n\n### 滑动验证码\n```js\nasync function sliderYzm() {\n    await sleep(1500);\n    const iframe = document.getElementById(\"sufei-dialog-content\");\n    const btn = iframe.contentWindow.document.getElementById(\"nc_1_n1z\");\n    const mousedown = document.createEvent(\"MouseEvents\");\n    const rect = btn.getBoundingClientRect();\n    var x = rect.x;\n    var y = rect.y;\n    mousedown.initMouseEvent(\"mousedown\", true, true, window, 0, x, y, x, y, false, false, false, false, 0, null);\n    btn.dispatchEvent(mousedown);\n\n    let dx = 0;\n    let dy = 0;\n    const mousemove = document.createEvent(\"MouseEvents\");\n    return new Promise((resolve) => {\n        const  interval = setInterval(async () => {\n            const _x = x + dx;\n            const _y = y + dy;\n            mousemove.initMouseEvent(\"mousemove\", true, true, window,0 ,_x, _y, _x, _y, false, false, false, false, 0, null);\n            btn.dispatchEvent(mousemove);\n            \n            if(_x - x >= 300){\n                clearInterval(interval);\n                const mouseup = document.createEvent(\"MouseEvents\");\n                mouseup.initMouseEvent(\"mouseup\", true, true, window, 0, _x, _y, _x, _y, false, false, false, false, 0, null);\n                btn.dispatchEvent(mouseup);\n\n                await sleep(2500);\n                if(btn.className.indexOf('btn_ok') > -1){\n                    console.log(btn.className);\n                    sleep(1000)\n                    resolve({status: 1});\n                }  \n                \n                if(iframe.contentWindow.document.querySelector(\"#nocaptcha > .errloading\")) {\n                    console.log(\"error\")\n                    sleep(1000)\n                    resolve({status: 0})\n                }\n            } else{\n                dx += Math.ceil(Math.random() * 300);\n            }\n        }, 30);\n    })\n    \n}\n```\n\n上面只是滑动验证\n\n### 循环检查时候是否有验证码\n\n```js\n/**\n * 循环检查是否有验证码\n * 1. 要是有验证码窗口，那么滑动验证， 但滑动验证有失败或者成功，失败返回0， 成功返回1\n * 2. 滑动成功后，防止验证码再一次出现，我们延迟1500毫秒，再查看一下验证码窗口是否存在，存在就再一次执行loopSlideYzm(), 不存在就直接结束函数了\n * 3. 滑动失败后，会有刷新标志，那这时候应该点击刷新后，再一次执行loopSlideYzm();\n */ \nasync function loopSlideYzm() {\n    await sleep(1200);\n    const hasYzm = checkYzm();\n    await sleep(1000);\n    if(hasYzm) {\n        const { status } = await sliderYzm();\n        await sleep(1500);\n        if(status) {\n            console.log(\"再找一次是否有验证码\")\n            const hasYzmAgain = checkYzm();\n            await sleep(1500);\n            if(hasYzmAgain) {\n                return await loopSlideYzm();\n            } else  {\n                return Promise.resolve()\n            }\n        } else {\n            console.log(\"给我刷新验证码\");\n            freshYzm();\n            await sleep(1500);\n            return await loopSlideYzm();\n        }\n    } \n    return Promise.resolve()\n}\n```\n\n### 刷新验证码\n\n```js\nfunction freshYzm() {\n    const iframe = document.getElementById(\"sufei-dialog-content\");\n    iframe.contentWindow.document.querySelector(\"#nocaptcha > .errloading > .nc-lang-cnt > a\").click()\n}\n```\n\n以上就是自动跳过高德地图的滑动验证码全过程\n","slug":"高德地图滑动验证","published":1,"updated":"2023-09-22T04:24:26.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmu3lrho006qmrojbivvcqsp","content":"<h2 id=\"高德地图滑动验证\"><a href=\"#高德地图滑动验证\" class=\"headerlink\" title=\"高德地图滑动验证\"></a>高德地图滑动验证</h2><ul>\n<li>用dispatch 模拟dom的mousedown, mousemove，还有mouseUp 事件</li>\n<li>再用 <code>setInterval</code> 执行<code>mouseMove</code>事件即可</li>\n<li>但这里有时候会滑动失败，所以要刷新验证码，然后重新滑动，</li>\n<li>有时候又是滑动验证码<strong>验证成功</strong>后。 再一次<strong>弹出验证码</strong></li>\n<li><strong>注意：</strong>滑动验证码请注意滑动的速度和滑动的距离，要是太慢、滑动距离太短的话，滑动验证多数会不通过。</li>\n</ul>\n<h3 id=\"检查验证码\"><a href=\"#检查验证码\" class=\"headerlink\" title=\"检查验证码\"></a>检查验证码</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 检查验证码</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkYzm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".sufei-dialog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dom <span class=\"token operator\">&amp;&amp;</span> dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">==</span> <span class=\"token string\">\"block\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"滑动验证码\"><a href=\"#滑动验证码\" class=\"headerlink\" title=\"滑动验证码\"></a>滑动验证码</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sliderYzm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sufei-dialog-content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> iframe<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nc_1_n1z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> mousedown <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MouseEvents\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rect <span class=\"token operator\">=</span> btn<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n    mousedown<span class=\"token punctuation\">.</span><span class=\"token function\">initMouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousedown\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    btn<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>mousedown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> dx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> dy <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> mousemove <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MouseEvents\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span>  interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> _x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> _y <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">;</span>\n            mousemove<span class=\"token punctuation\">.</span><span class=\"token function\">initMouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mousemove\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>_x<span class=\"token punctuation\">,</span> _y<span class=\"token punctuation\">,</span> _x<span class=\"token punctuation\">,</span> _y<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            btn<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>mousemove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_x <span class=\"token operator\">-</span> x <span class=\"token operator\">>=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> mouseup <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MouseEvents\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mouseup<span class=\"token punctuation\">.</span><span class=\"token function\">initMouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseup\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> _x<span class=\"token punctuation\">,</span> _y<span class=\"token punctuation\">,</span> _x<span class=\"token punctuation\">,</span> _y<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                btn<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>mouseup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn_ok'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>  \n\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iframe<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#nocaptcha > .errloading\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                dx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>上面只是滑动验证</p>\n<h3 id=\"循环检查时候是否有验证码\"><a href=\"#循环检查时候是否有验证码\" class=\"headerlink\" title=\"循环检查时候是否有验证码\"></a>循环检查时候是否有验证码</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 循环检查是否有验证码\n * 1. 要是有验证码窗口，那么滑动验证， 但滑动验证有失败或者成功，失败返回0， 成功返回1\n * 2. 滑动成功后，防止验证码再一次出现，我们延迟1500毫秒，再查看一下验证码窗口是否存在，存在就再一次执行loopSlideYzm(), 不存在就直接结束函数了\n * 3. 滑动失败后，会有刷新标志，那这时候应该点击刷新后，再一次执行loopSlideYzm();\n */</span> \n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loopSlideYzm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> hasYzm <span class=\"token operator\">=</span> <span class=\"token function\">checkYzm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hasYzm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> status <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">sliderYzm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再找一次是否有验证码\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">const</span> hasYzmAgain <span class=\"token operator\">=</span> <span class=\"token function\">checkYzm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hasYzmAgain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loopSlideYzm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>  <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"给我刷新验证码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">freshYzm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loopSlideYzm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"刷新验证码\"><a href=\"#刷新验证码\" class=\"headerlink\" title=\"刷新验证码\"></a>刷新验证码</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">freshYzm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sufei-dialog-content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    iframe<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#nocaptcha > .errloading > .nc-lang-cnt > a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>以上就是自动跳过高德地图的滑动验证码全过程</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"高德地图滑动验证\"><a href=\"#高德地图滑动验证\" class=\"headerlink\" title=\"高德地图滑动验证\"></a>高德地图滑动验证</h2><ul>\n<li>用dispatch 模拟dom的mousedown, mousemove，还有mouseUp 事件</li>\n<li>再用 <code>setInterval</code> 执行<code>mouseMove</code>事件即可</li>\n<li>但这里有时候会滑动失败，所以要刷新验证码，然后重新滑动，</li>\n<li>有时候又是滑动验证码<strong>验证成功</strong>后。 再一次<strong>弹出验证码</strong></li>\n<li><strong>注意：</strong>滑动验证码请注意滑动的速度和滑动的距离，要是太慢、滑动距离太短的话，滑动验证多数会不通过。</li>\n</ul>\n<h3 id=\"检查验证码\"><a href=\"#检查验证码\" class=\"headerlink\" title=\"检查验证码\"></a>检查验证码</h3><pre><code class=\"js\">// 检查验证码\nfunction checkYzm() {\n    const dom = document.querySelector(&quot;.sufei-dialog&quot;);\n\n    if(dom &amp;&amp; dom.style.display == &quot;block&quot;) {\n        return true;\n    } \n    return false\n}</code></pre>\n<h3 id=\"滑动验证码\"><a href=\"#滑动验证码\" class=\"headerlink\" title=\"滑动验证码\"></a>滑动验证码</h3><pre><code class=\"js\">async function sliderYzm() {\n    await sleep(1500);\n    const iframe = document.getElementById(&quot;sufei-dialog-content&quot;);\n    const btn = iframe.contentWindow.document.getElementById(&quot;nc_1_n1z&quot;);\n    const mousedown = document.createEvent(&quot;MouseEvents&quot;);\n    const rect = btn.getBoundingClientRect();\n    var x = rect.x;\n    var y = rect.y;\n    mousedown.initMouseEvent(&quot;mousedown&quot;, true, true, window, 0, x, y, x, y, false, false, false, false, 0, null);\n    btn.dispatchEvent(mousedown);\n\n    let dx = 0;\n    let dy = 0;\n    const mousemove = document.createEvent(&quot;MouseEvents&quot;);\n    return new Promise((resolve) =&gt; {\n        const  interval = setInterval(async () =&gt; {\n            const _x = x + dx;\n            const _y = y + dy;\n            mousemove.initMouseEvent(&quot;mousemove&quot;, true, true, window,0 ,_x, _y, _x, _y, false, false, false, false, 0, null);\n            btn.dispatchEvent(mousemove);\n\n            if(_x - x &gt;= 300){\n                clearInterval(interval);\n                const mouseup = document.createEvent(&quot;MouseEvents&quot;);\n                mouseup.initMouseEvent(&quot;mouseup&quot;, true, true, window, 0, _x, _y, _x, _y, false, false, false, false, 0, null);\n                btn.dispatchEvent(mouseup);\n\n                await sleep(2500);\n                if(btn.className.indexOf(&#39;btn_ok&#39;) &gt; -1){\n                    console.log(btn.className);\n                    sleep(1000)\n                    resolve({status: 1});\n                }  \n\n                if(iframe.contentWindow.document.querySelector(&quot;#nocaptcha &gt; .errloading&quot;)) {\n                    console.log(&quot;error&quot;)\n                    sleep(1000)\n                    resolve({status: 0})\n                }\n            } else{\n                dx += Math.ceil(Math.random() * 300);\n            }\n        }, 30);\n    })\n\n}</code></pre>\n<p>上面只是滑动验证</p>\n<h3 id=\"循环检查时候是否有验证码\"><a href=\"#循环检查时候是否有验证码\" class=\"headerlink\" title=\"循环检查时候是否有验证码\"></a>循环检查时候是否有验证码</h3><pre><code class=\"js\">/**\n * 循环检查是否有验证码\n * 1. 要是有验证码窗口，那么滑动验证， 但滑动验证有失败或者成功，失败返回0， 成功返回1\n * 2. 滑动成功后，防止验证码再一次出现，我们延迟1500毫秒，再查看一下验证码窗口是否存在，存在就再一次执行loopSlideYzm(), 不存在就直接结束函数了\n * 3. 滑动失败后，会有刷新标志，那这时候应该点击刷新后，再一次执行loopSlideYzm();\n */ \nasync function loopSlideYzm() {\n    await sleep(1200);\n    const hasYzm = checkYzm();\n    await sleep(1000);\n    if(hasYzm) {\n        const { status } = await sliderYzm();\n        await sleep(1500);\n        if(status) {\n            console.log(&quot;再找一次是否有验证码&quot;)\n            const hasYzmAgain = checkYzm();\n            await sleep(1500);\n            if(hasYzmAgain) {\n                return await loopSlideYzm();\n            } else  {\n                return Promise.resolve()\n            }\n        } else {\n            console.log(&quot;给我刷新验证码&quot;);\n            freshYzm();\n            await sleep(1500);\n            return await loopSlideYzm();\n        }\n    } \n    return Promise.resolve()\n}</code></pre>\n<h3 id=\"刷新验证码\"><a href=\"#刷新验证码\" class=\"headerlink\" title=\"刷新验证码\"></a>刷新验证码</h3><pre><code class=\"js\">function freshYzm() {\n    const iframe = document.getElementById(&quot;sufei-dialog-content&quot;);\n    iframe.contentWindow.document.querySelector(&quot;#nocaptcha &gt; .errloading &gt; .nc-lang-cnt &gt; a&quot;).click()\n}</code></pre>\n<p>以上就是自动跳过高德地图的滑动验证码全过程</p>\n"}],"PostAsset":[{"_id":"source/_posts/对近期工作的一些思考/1.jpg","slug":"1.jpg","post":"clmu3lrgg003zmroj9hu7ff8g","modified":1,"renderable":0},{"_id":"source/_posts/React源码-ReactDOM/函数运行流程图.jpg","post":"clmu3lreu000fmroj81d7aqzi","slug":"函数运行流程图.jpg","modified":1,"renderable":1},{"_id":"source/_posts/git/git_reset.jpg","post":"clmu3lrf7000ymrojcnacgtx2","slug":"git_reset.jpg","modified":1,"renderable":1},{"_id":"source/_posts/学习webpack源码(2)/2.png","post":"clmu3lrgc003pmrojd3pf17yx","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/学习webpack源码/1.png","post":"clmu3lrgd003smrojaun6b8mb","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/记录一下从rc-tree 里面学到了什么东西/1.png","post":"clmu3lrh6005umroj3jli96f9","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/递增子序列/树.jpg","post":"clmu3lrha0065mrojcj8h0sm7","slug":"树.jpg","modified":1,"renderable":1},{"_id":"source/_posts/电话号码的字母组合/1.png","post":"clmu3lrgx0059mrojed0obnno","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/电话号码的字母组合/2.jpg","post":"clmu3lrgx0059mrojed0obnno","slug":"2.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"clmu3lrej0007mroj0gmv46r8","category_id":"clmu3lren000bmrojet7ibaz9","_id":"clmu3lrf0000mmroj7nr4a1bl"},{"post_id":"clmu3lrew000imrojg6x9b3wr","category_id":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrfe001bmroj4zwh89dy"},{"post_id":"clmu3lrew000imrojg6x9b3wr","category_id":"clmu3lrf90012mroj433y5uc2","_id":"clmu3lrfg001fmroj4r2rbdv4"},{"post_id":"clmu3lrfc0018mroj3fz27yw2","category_id":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrfh001jmroj5d3yag5w"},{"post_id":"clmu3lrel0009mroj2gy6coin","category_id":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrfj001nmroj9rqdbds9"},{"post_id":"clmu3lrel0009mroj2gy6coin","category_id":"clmu3lrf90012mroj433y5uc2","_id":"clmu3lrfk001qmrojfy17gw7k"},{"post_id":"clmu3lreo000cmroj4zj4ckhi","category_id":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrfl001umroj886tb7ea"},{"post_id":"clmu3lreo000cmroj4zj4ckhi","category_id":"clmu3lrf90012mroj433y5uc2","_id":"clmu3lrfn001xmroj4efy01s6"},{"post_id":"clmu3lreq000dmroj971wb70v","category_id":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrfo0021mrojb9whhotn"},{"post_id":"clmu3lreq000dmroj971wb70v","category_id":"clmu3lrf90012mroj433y5uc2","_id":"clmu3lrfp0023mroj42w83h2k"},{"post_id":"clmu3lrf7000ymrojcnacgtx2","category_id":"clmu3lrfk001pmroj9zxphe4b","_id":"clmu3lrfr0028mrojea3cgu7g"},{"post_id":"clmu3lreu000fmroj81d7aqzi","category_id":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrfu002dmroj5umcbb19"},{"post_id":"clmu3lreu000fmroj81d7aqzi","category_id":"clmu3lrf90012mroj433y5uc2","_id":"clmu3lrfw002hmrojblifhkop"},{"post_id":"clmu3lrfa0014mroj3v2u1c48","category_id":"clmu3lrfq0026mrojhff69uio","_id":"clmu3lrfy002mmrojbtelcrzb"},{"post_id":"clmu3lrfb0015mroj0p26f1rf","category_id":"clmu3lrfv002fmrojchq9ekh8","_id":"clmu3lrg0002tmrojb5zmcez9"},{"post_id":"clmu3lrfd0019mroj3mzb5kn2","category_id":"clmu3lrfy002nmroj5u9c4xm4","_id":"clmu3lrg30030mrojei5n7cxt"},{"post_id":"clmu3lrff001emroj0toc756x","category_id":"clmu3lrg1002umrojgcju8z1v","_id":"clmu3lrg60038mroj1qgz6k6s"},{"post_id":"clmu3lrg2002ymrojcq5gesxg","category_id":"clmu3lren000bmrojet7ibaz9","_id":"clmu3lrg7003bmroj2p5la17o"},{"post_id":"clmu3lrfg001hmrojgjb5drvu","category_id":"clmu3lrg1002umrojgcju8z1v","_id":"clmu3lrg9003fmroj75sh3ob4"},{"post_id":"clmu3lrfj001omrojenjda10p","category_id":"clmu3lrg9003hmrojex7i9ueh","_id":"clmu3lrge003tmrojdgl3a2vv"},{"post_id":"clmu3lrgc003pmrojd3pf17yx","category_id":"clmu3lrg9003hmrojex7i9ueh","_id":"clmu3lrgg0040mroj3lztabrz"},{"post_id":"clmu3lrfl001smrojdttnf4dl","category_id":"clmu3lrgc003nmroj1wy14nzx","_id":"clmu3lrgi0044mroj5yjwdd79"},{"post_id":"clmu3lrgd003smrojaun6b8mb","category_id":"clmu3lrg9003hmrojex7i9ueh","_id":"clmu3lrgk0048mrojg6eq4s3b"},{"post_id":"clmu3lrfm001vmroj45mc683j","category_id":"clmu3lrge003vmrojay8q48rm","_id":"clmu3lrgl004bmroj6c4s5udk"},{"post_id":"clmu3lrgh0043mrojd9s0265d","category_id":"clmu3lren000bmrojet7ibaz9","_id":"clmu3lrgm004gmroj5t1nebgn"},{"post_id":"clmu3lrfx002lmroj8epo5k72","category_id":"clmu3lrgh0042mroj8jp8267u","_id":"clmu3lrgn004jmroj59328k25"},{"post_id":"clmu3lrfy002pmrojfg8pej7m","category_id":"clmu3lrgl004cmrojet5853ew","_id":"clmu3lrgq004qmroj4p8r33lh"},{"post_id":"clmu3lrg60039mroj4k1nhknb","category_id":"clmu3lrgo004kmroj31igdhc5","_id":"clmu3lrgt004ymrojaggz5j74"},{"post_id":"clmu3lrge003wmroj6zrt3lrs","category_id":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrgz005cmrojgea1g6j1"},{"post_id":"clmu3lrge003wmroj6zrt3lrs","category_id":"clmu3lrgt004zmrojfgp2f1er","_id":"clmu3lrh1005hmrojcxdxcaga"},{"post_id":"clmu3lrgw0055mrojhqz94fhx","category_id":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrh3005kmrojhibm1io6"},{"post_id":"clmu3lrgj0047mroj4kh571fc","category_id":"clmu3lrgx0056mroj29t631sm","_id":"clmu3lrh5005pmrojhsnhgxcj"},{"post_id":"clmu3lrfi001mmrojcki1fspz","category_id":"clmu3lrg60037mrojbww4h0rh","_id":"clmu3lrh6005tmrojbbsj2n2e"},{"post_id":"clmu3lrfi001mmrojcki1fspz","category_id":"clmu3lrgq004smrojcdeebbfz","_id":"clmu3lrh8005xmrojf2tp5qbx"},{"post_id":"clmu3lrfi001mmrojcki1fspz","category_id":"clmu3lrgz005dmrojfctk4cn1","_id":"clmu3lrh90060mroj1nl0ctc0"},{"post_id":"clmu3lrgv0053mrojg9fsdii5","category_id":"clmu3lrh3005mmroj3jzh46yf","_id":"clmu3lrha0064mrojgfu314w6"},{"post_id":"clmu3lrh5005rmroj871jd3hc","category_id":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrhc0067mroj5dyfazoy"},{"post_id":"clmu3lrhc0068mroj9ylecget","category_id":"clmu3lrev000gmrojb9bm350x","_id":"clmu3lrhl006hmroj6cno94ea"},{"post_id":"clmu3lrho006qmrojbivvcqsp","category_id":"clmu3lren000bmrojet7ibaz9","_id":"clmu3lrhq006wmroje1uf3sl3"}],"PostTag":[{"post_id":"clmu3lre50000mroj5cma87vx","tag_id":"clmu3lref0004mrojba3l8tf5","_id":"clmu3lrew000hmrojgljz2vtf"},{"post_id":"clmu3lre50000mroj5cma87vx","tag_id":"clmu3lrem000amroj1lio0pld","_id":"clmu3lrex000jmrojhopn0i9v"},{"post_id":"clmu3lrec0002mroj6omua2ue","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lrf0000omrojfgyl8dd1"},{"post_id":"clmu3lreh0005mroj7kcoadmf","tag_id":"clmu3lrem000amroj1lio0pld","_id":"clmu3lrf7000xmrojhb076f3v"},{"post_id":"clmu3lreh0005mroj7kcoadmf","tag_id":"clmu3lrf3000qmroj7a3h5bay","_id":"clmu3lrf8000zmroj5g7x6zms"},{"post_id":"clmu3lrej0007mroj0gmv46r8","tag_id":"clmu3lrf6000umroj3shh6l6w","_id":"clmu3lrfa0013mrojfo7f1f55"},{"post_id":"clmu3lrfc0018mroj3fz27yw2","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrfe001dmroj7uuwbn6v"},{"post_id":"clmu3lrel0009mroj2gy6coin","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrfg001gmroj3gyhdc3a"},{"post_id":"clmu3lrel0009mroj2gy6coin","tag_id":"clmu3lrfc0016mrojb6j75l3a","_id":"clmu3lrfh001lmroj8bhp1c71"},{"post_id":"clmu3lreo000cmroj4zj4ckhi","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrfl001tmrojg6ug418h"},{"post_id":"clmu3lreo000cmroj4zj4ckhi","tag_id":"clmu3lrfc0016mrojb6j75l3a","_id":"clmu3lrfn001wmroj6g400qos"},{"post_id":"clmu3lrfn0020mrojhbiwf5k1","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lrfq0025mrojegoh9z67"},{"post_id":"clmu3lreq000dmroj971wb70v","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrfr0029mrojda7zb8fs"},{"post_id":"clmu3lreq000dmroj971wb70v","tag_id":"clmu3lrfc0016mrojb6j75l3a","_id":"clmu3lrfu002cmroj6w5sak8f"},{"post_id":"clmu3lrfp0022mrojbhfoet84","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lrfw002gmrojbos8bnz9"},{"post_id":"clmu3lrfv002emrojdu46blj4","tag_id":"clmu3lref0004mrojba3l8tf5","_id":"clmu3lrfx002kmrojeg2uf6au"},{"post_id":"clmu3lrfv002emrojdu46blj4","tag_id":"clmu3lrem000amroj1lio0pld","_id":"clmu3lrfy002omrojbc8nb6v7"},{"post_id":"clmu3lreu000fmroj81d7aqzi","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrfz002rmrojc97e7vyp"},{"post_id":"clmu3lreu000fmroj81d7aqzi","tag_id":"clmu3lrfc0016mrojb6j75l3a","_id":"clmu3lrg1002vmroj507jabi8"},{"post_id":"clmu3lrew000imrojg6x9b3wr","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrg3002zmroje9sa71m5"},{"post_id":"clmu3lrew000imrojg6x9b3wr","tag_id":"clmu3lrfc0016mrojb6j75l3a","_id":"clmu3lrg40033mrojhd4cb48z"},{"post_id":"clmu3lrg1002wmroj4jakdoqw","tag_id":"clmu3lref0004mrojba3l8tf5","_id":"clmu3lrg60036mrojfrvzhfip"},{"post_id":"clmu3lrg1002wmroj4jakdoqw","tag_id":"clmu3lrf3000qmroj7a3h5bay","_id":"clmu3lrg7003amroj7h8w21w9"},{"post_id":"clmu3lrg2002ymrojcq5gesxg","tag_id":"clmu3lrf6000umroj3shh6l6w","_id":"clmu3lrg9003emroj134d6tpe"},{"post_id":"clmu3lrg50035mrojdj6c36mq","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lrga003imrojf4ir5o0i"},{"post_id":"clmu3lrey000lmrojfdiz283t","tag_id":"clmu3lrg2002xmrojh8df1cpt","_id":"clmu3lrgb003lmroj5e84bfu0"},{"post_id":"clmu3lrey000lmrojfdiz283t","tag_id":"clmu3lrg50034mrojf7uj3sa3","_id":"clmu3lrgc003omroj6lku518p"},{"post_id":"clmu3lrg7003cmroj8cxzhlky","tag_id":"clmu3lrf6000umroj3shh6l6w","_id":"clmu3lrgd003qmrojabi890jk"},{"post_id":"clmu3lrgb003mmroja833d0ny","tag_id":"clmu3lrem000amroj1lio0pld","_id":"clmu3lrge003umroj9zqr8oez"},{"post_id":"clmu3lrf2000pmrojdmbw62x9","tag_id":"clmu3lrg8003dmroj9bda68pu","_id":"clmu3lrgf003xmroj1rijd64x"},{"post_id":"clmu3lrf2000pmrojdmbw62x9","tag_id":"clmu3lrgb003kmrojgb4bdynf","_id":"clmu3lrgh0041mroj1j8b3zy9"},{"post_id":"clmu3lrge003wmroj6zrt3lrs","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrgj0045mrojb2vj33xx"},{"post_id":"clmu3lrge003wmroj6zrt3lrs","tag_id":"clmu3lrg8003dmroj9bda68pu","_id":"clmu3lrgk0049mrojhwsp8yxo"},{"post_id":"clmu3lrgg003zmroj9hu7ff8g","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrgl004dmrojfj5zf42a"},{"post_id":"clmu3lrf3000rmroj0bld7rje","tag_id":"clmu3lrg8003dmroj9bda68pu","_id":"clmu3lrgn004hmrojauvld4wb"},{"post_id":"clmu3lrf3000rmroj0bld7rje","tag_id":"clmu3lrgb003kmrojgb4bdynf","_id":"clmu3lrgo004lmroj1qx7bgc4"},{"post_id":"clmu3lrgh0043mrojd9s0265d","tag_id":"clmu3lrf6000umroj3shh6l6w","_id":"clmu3lrgp004omroj08n0a2w2"},{"post_id":"clmu3lrgk004amroj4yyy83og","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lrgq004rmrojelkr8ufw"},{"post_id":"clmu3lrf5000tmrojfe0daqwi","tag_id":"clmu3lrg8003dmroj9bda68pu","_id":"clmu3lrgs004vmrojffi28zvq"},{"post_id":"clmu3lrf5000tmrojfe0daqwi","tag_id":"clmu3lrgb003kmrojgb4bdynf","_id":"clmu3lrgt004xmroj8hq51f3m"},{"post_id":"clmu3lrgo004nmrojgs163sdo","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lrgv0052mrojcsxm3ddl"},{"post_id":"clmu3lrgp004pmrojhr1ahwxa","tag_id":"clmu3lrg2002xmrojh8df1cpt","_id":"clmu3lrgw0054mroj7i3kahm6"},{"post_id":"clmu3lrgp004pmrojhr1ahwxa","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lrgx0058mrojgebi944d"},{"post_id":"clmu3lrgr004umrojfjzpfd11","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lrgy005amroj4pt459fr"},{"post_id":"clmu3lrgs004wmroj2efc8yvb","tag_id":"clmu3lrem000amroj1lio0pld","_id":"clmu3lrh0005emrojh9850tqh"},{"post_id":"clmu3lrgs004wmroj2efc8yvb","tag_id":"clmu3lref0004mrojba3l8tf5","_id":"clmu3lrh1005imroj7s1o1cfv"},{"post_id":"clmu3lrf6000vmroja075bvmy","tag_id":"clmu3lrgo004mmroj06as755u","_id":"clmu3lrh3005lmroj08mthh3w"},{"post_id":"clmu3lrf6000vmroja075bvmy","tag_id":"clmu3lrgr004tmroj8gcd5c97","_id":"clmu3lrh5005qmroj70dub792"},{"post_id":"clmu3lrf7000ymrojcnacgtx2","tag_id":"clmu3lrgu0051mroj5dx4dc9z","_id":"clmu3lrh6005smrojeti01a27"},{"post_id":"clmu3lrgw0055mrojhqz94fhx","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrh8005wmrojclul7wke"},{"post_id":"clmu3lrfa0014mroj3v2u1c48","tag_id":"clmu3lrgx0057mroj3vgi3k87","_id":"clmu3lrh9005zmrojgk9oav4m"},{"post_id":"clmu3lrh0005gmroj6hzi6mo2","tag_id":"clmu3lref0004mrojba3l8tf5","_id":"clmu3lrha0063mroj6m770qs6"},{"post_id":"clmu3lrfb0015mroj0p26f1rf","tag_id":"clmu3lrh0005fmroj74yy5l26","_id":"clmu3lrhb0066mrojh9ph1k2q"},{"post_id":"clmu3lrh4005omrojd9g06rr4","tag_id":"clmu3lrg2002xmrojh8df1cpt","_id":"clmu3lrhd006amrojegkfa531"},{"post_id":"clmu3lrh5005rmroj871jd3hc","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrhe006cmroj3rxy858b"},{"post_id":"clmu3lrfd0019mroj3mzb5kn2","tag_id":"clmu3lrh4005nmrojf488858h","_id":"clmu3lrhf006emrojawc8e2oy"},{"post_id":"clmu3lrh6005umroj3jli96f9","tag_id":"clmu3lrg8003dmroj9bda68pu","_id":"clmu3lrhl006imroj2x721g7n"},{"post_id":"clmu3lrh6005umroj3jli96f9","tag_id":"clmu3lrgb003kmrojgb4bdynf","_id":"clmu3lrhm006kmrojeb4c2fxu"},{"post_id":"clmu3lrff001emroj0toc756x","tag_id":"clmu3lrh7005vmroj05d5cro5","_id":"clmu3lrhn006nmroj8lvm9a05"},{"post_id":"clmu3lrh90061mroj4ddkhifs","tag_id":"clmu3lref0004mrojba3l8tf5","_id":"clmu3lrho006pmroj1j82e9nc"},{"post_id":"clmu3lrh90061mroj4ddkhifs","tag_id":"clmu3lrem000amroj1lio0pld","_id":"clmu3lrhp006smrojgus56awh"},{"post_id":"clmu3lrfg001hmrojgjb5drvu","tag_id":"clmu3lrh7005vmroj05d5cro5","_id":"clmu3lrhq006tmrojdzwphdxf"},{"post_id":"clmu3lrhc0068mroj9ylecget","tag_id":"clmu3lrf90011mroj4a27etzb","_id":"clmu3lrhq006vmrojd8zt30lh"},{"post_id":"clmu3lrhd006bmroj45f4duu1","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lrhq006xmrojhoxu294i"},{"post_id":"clmu3lrhf006gmroj7c6wedmu","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lrhr006zmroj27dsesav"},{"post_id":"clmu3lrhn006omroj86vfh64o","tag_id":"clmu3lrg2002xmrojh8df1cpt","_id":"clmu3lrhr0070mroj25gk0ee1"},{"post_id":"clmu3lrfi001mmrojcki1fspz","tag_id":"clmu3lrhd0069mrojahhwd1tu","_id":"clmu3lrhr0071mrojf3mba1je"},{"post_id":"clmu3lrfi001mmrojcki1fspz","tag_id":"clmu3lrhf006fmroj6lgtfhah","_id":"clmu3lrhr0073mroj99iu9nqb"},{"post_id":"clmu3lrfi001mmrojcki1fspz","tag_id":"clmu3lrhm006lmrojh36ka2p8","_id":"clmu3lrhr0074mroj1r7l5yzv"},{"post_id":"clmu3lrho006qmrojbivvcqsp","tag_id":"clmu3lrf6000umroj3shh6l6w","_id":"clmu3lrhr0076mrojertbhg92"},{"post_id":"clmu3lrfj001omrojenjda10p","tag_id":"clmu3lrhm006lmrojh36ka2p8","_id":"clmu3lrhs0077mroj1vk63a2v"},{"post_id":"clmu3lrfl001smrojdttnf4dl","tag_id":"clmu3lrhq006umroj7cnp5d1s","_id":"clmu3lrhs0079mrojay35659q"},{"post_id":"clmu3lrfm001vmroj45mc683j","tag_id":"clmu3lrhq006ymrojg4lp4nnv","_id":"clmu3lrhs007amroj3wjecsfa"},{"post_id":"clmu3lrfq0027mroj58hs3xwz","tag_id":"clmu3lrhr0072mroj4vgy9unw","_id":"clmu3lrhs007cmroja62b04ir"},{"post_id":"clmu3lrfr002amroj70ht292f","tag_id":"clmu3lrhr0075mroj3x6k48ki","_id":"clmu3lrhs007dmroj72h6dk44"},{"post_id":"clmu3lrfw002imroj6to12opy","tag_id":"clmu3lrhr0075mroj3x6k48ki","_id":"clmu3lrht007fmrojfsuf97z0"},{"post_id":"clmu3lrfx002lmroj8epo5k72","tag_id":"clmu3lrhs007bmrojdrcwcpaa","_id":"clmu3lrht007gmroj48s94gh7"},{"post_id":"clmu3lrfy002pmrojfg8pej7m","tag_id":"clmu3lrht007emrojgwff4178","_id":"clmu3lrht007imroj3jhwbqk6"},{"post_id":"clmu3lrg0002smroj1bhwhwy0","tag_id":"clmu3lrht007hmroj5ynqc9zk","_id":"clmu3lrhu007lmroje3asggo9"},{"post_id":"clmu3lrg0002smroj1bhwhwy0","tag_id":"clmu3lrhr0075mroj3x6k48ki","_id":"clmu3lrhu007mmroj7vbz29e8"},{"post_id":"clmu3lrg40032mroj7xvkbxeg","tag_id":"clmu3lrhu007kmroj0tlmc3cc","_id":"clmu3lrhu007omrojdg8v0j1f"},{"post_id":"clmu3lrg60039mroj4k1nhknb","tag_id":"clmu3lrhu007nmroj1ojo5e7d","_id":"clmu3lrhv007qmroj4cmt37yi"},{"post_id":"clmu3lrg9003gmrojgz5k2994","tag_id":"clmu3lrht007hmroj5ynqc9zk","_id":"clmu3lrhv007smroj9au25dov"},{"post_id":"clmu3lrga003jmroj537z4u6z","tag_id":"clmu3lrhv007rmrojg0cm2lnz","_id":"clmu3lrhw007umroj7w9x6snd"},{"post_id":"clmu3lrga003jmroj537z4u6z","tag_id":"clmu3lrg50034mrojf7uj3sa3","_id":"clmu3lrhw007vmroj0opmd4b2"},{"post_id":"clmu3lrgc003pmrojd3pf17yx","tag_id":"clmu3lrhm006lmrojh36ka2p8","_id":"clmu3lrhw007xmrojenk2ccui"},{"post_id":"clmu3lrgd003smrojaun6b8mb","tag_id":"clmu3lrhm006lmrojh36ka2p8","_id":"clmu3lrhw007zmrojdabf973j"},{"post_id":"clmu3lrgj0047mroj4kh571fc","tag_id":"clmu3lrhw007ymroj8a48hm3i","_id":"clmu3lrhx0081mroj0nlndeqi"},{"post_id":"clmu3lrgm004fmroj4ddkhyfe","tag_id":"clmu3lrhx0080mrojabzs2fmb","_id":"clmu3lrhx0083mroj73uxeka5"},{"post_id":"clmu3lrgn004imrojgkdkhtqy","tag_id":"clmu3lrhx0082mrojgx0hd4a8","_id":"clmu3lrhy0086mrojdxza1j3d"},{"post_id":"clmu3lrgn004imrojgkdkhtqy","tag_id":"clmu3lrhx0084mroj9erh3o66","_id":"clmu3lrhy0087mrojfdjjfvcg"},{"post_id":"clmu3lrgu0050mrojgqt457vi","tag_id":"clmu3lrhy0085mroja4v3d70t","_id":"clmu3lrhy0089mroj23zt1tzo"},{"post_id":"clmu3lrgv0053mrojg9fsdii5","tag_id":"clmu3lrhy0088mrojh4w4eium","_id":"clmu3lrhz008bmrojhfrke5m4"},{"post_id":"clmu3lrgx0059mrojed0obnno","tag_id":"clmu3lrem000amroj1lio0pld","_id":"clmu3lrhz008dmroja8mb2s43"},{"post_id":"clmu3lrgx0059mrojed0obnno","tag_id":"clmu3lrhy008amroj0k4v0ozo","_id":"clmu3lrhz008emroj0uibbvg8"},{"post_id":"clmu3lrgx0059mrojed0obnno","tag_id":"clmu3lrf3000qmroj7a3h5bay","_id":"clmu3lri0008gmrojgkj639m6"},{"post_id":"clmu3lrgy005bmrojd8e27qok","tag_id":"clmu3lrhr0075mroj3x6k48ki","_id":"clmu3lri0008hmroj3xnzemkd"},{"post_id":"clmu3lrh1005jmroj32okd79c","tag_id":"clmu3lrhz008fmrojhdq0dtjx","_id":"clmu3lri0008jmrojcwaxhb8n"},{"post_id":"clmu3lrh8005ymroj9tpy2ggj","tag_id":"clmu3lref0004mrojba3l8tf5","_id":"clmu3lri0008lmroj8yfr4vk8"},{"post_id":"clmu3lrh8005ymroj9tpy2ggj","tag_id":"clmu3lri0008imroj0vu1cmmg","_id":"clmu3lri1008mmroj1bawbx74"},{"post_id":"clmu3lrha0065mrojcj8h0sm7","tag_id":"clmu3lrem000amroj1lio0pld","_id":"clmu3lri1008omroj7q1ldjri"},{"post_id":"clmu3lrha0065mrojcj8h0sm7","tag_id":"clmu3lrf3000qmroj7a3h5bay","_id":"clmu3lri1008pmrojd1mcacvt"},{"post_id":"clmu3lrha0065mrojcj8h0sm7","tag_id":"clmu3lrhy008amroj0k4v0ozo","_id":"clmu3lri1008rmroj1v6k8pty"},{"post_id":"clmu3lrhl006jmroj9fm88d7p","tag_id":"clmu3lrg2002xmrojh8df1cpt","_id":"clmu3lri2008smroj5mrn43zq"},{"post_id":"clmu3lrhl006jmroj9fm88d7p","tag_id":"clmu3lrg50034mrojf7uj3sa3","_id":"clmu3lri2008tmrojdjda09zy"},{"post_id":"clmu3lrhl006jmroj9fm88d7p","tag_id":"clmu3lri1008nmroj5uxx02z6","_id":"clmu3lri2008umrojedv2f31t"},{"post_id":"clmu3lrhn006mmrojgczo7t8c","tag_id":"clmu3lri1008nmroj5uxx02z6","_id":"clmu3lri2008vmroj5nty0a6q"},{"post_id":"clmu3lrhn006mmrojgczo7t8c","tag_id":"clmu3lrer000emrojfxwgabzh","_id":"clmu3lri2008wmroj399jehwm"}],"Tag":[{"name":"algorithm-二叉树","_id":"clmu3lref0004mrojba3l8tf5"},{"name":"algorithm-递归","_id":"clmu3lrem000amroj1lio0pld"},{"name":"algorithm-动态规划","_id":"clmu3lrer000emrojfxwgabzh"},{"name":"algorithm-深度遍历搜索","_id":"clmu3lrf3000qmroj7a3h5bay"},{"name":"js","_id":"clmu3lrf6000umroj3shh6l6w"},{"name":"react","_id":"clmu3lrf90011mroj4a27etzb"},{"name":"react源码系列","_id":"clmu3lrfc0016mrojb6j75l3a"},{"name":"algorithm-基础","_id":"clmu3lrg2002xmrojh8df1cpt"},{"name":"algorithm-数组","_id":"clmu3lrg50034mrojf7uj3sa3"},{"name":"antd","_id":"clmu3lrg8003dmroj9bda68pu"},{"name":"组件","_id":"clmu3lrgb003kmrojgb4bdynf"},{"name":"react-native","_id":"clmu3lrgo004mmroj06as755u"},{"name":"expo","_id":"clmu3lrgr004tmroj8gcd5c97"},{"name":"git","_id":"clmu3lrgu0051mroj5dx4dc9z"},{"name":"hexo","_id":"clmu3lrgx0057mroj3vgi3k87"},{"name":"react-router","_id":"clmu3lrh0005fmroj74yy5l26"},{"name":"taro","_id":"clmu3lrh4005nmrojf488858h"},{"name":"typescript","_id":"clmu3lrh7005vmroj05d5cro5"},{"name":"electron","_id":"clmu3lrhd0069mrojahhwd1tu"},{"name":"vue","_id":"clmu3lrhf006fmroj6lgtfhah"},{"name":"webpack","_id":"clmu3lrhm006lmrojh36ka2p8"},{"name":"js-xlsx","_id":"clmu3lrhq006umroj7cnp5d1s"},{"name":"css","_id":"clmu3lrhq006ymrojg4lp4nnv"},{"name":"algorithm-map","_id":"clmu3lrhr0072mroj4vgy9unw"},{"name":"algorithm-双指针","_id":"clmu3lrhr0075mroj3x6k48ki"},{"name":"javascript","_id":"clmu3lrhs007bmrojdrcwcpaa"},{"name":"dumi","_id":"clmu3lrht007emrojgwff4178"},{"name":"algorithm-链表","_id":"clmu3lrht007hmroj5ynqc9zk"},{"name":"algorithm-前缀和","_id":"clmu3lrhu007kmroj0tlmc3cc"},{"name":"jenkins","_id":"clmu3lrhu007nmroj1ojo5e7d"},{"name":"algorithm-分治","_id":"clmu3lrhv007rmrojg0cm2lnz"},{"name":"源码","_id":"clmu3lrhw007ymroj8a48hm3i"},{"name":"algorithm-二分法","_id":"clmu3lrhx0080mrojabzs2fmb"},{"name":"algorithm-排序","_id":"clmu3lrhx0082mrojgx0hd4a8"},{"name":"algorithm-快速排序","_id":"clmu3lrhx0084mroj9erh3o66"},{"name":"algorithm-栈","_id":"clmu3lrhy0085mroja4v3d70t"},{"name":"正则","_id":"clmu3lrhy0088mrojh4w4eium"},{"name":"algorithm-全排列","_id":"clmu3lrhy008amroj0k4v0ozo"},{"name":"代理","_id":"clmu3lrhz008fmrojhdq0dtjx"},{"name":"algorithm-深度搜索优先","_id":"clmu3lri0008imroj0vu1cmmg"},{"name":"algorithm-面试题","_id":"clmu3lri1008nmroj5uxx02z6"}]}}